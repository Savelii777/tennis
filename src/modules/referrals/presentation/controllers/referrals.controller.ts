import { Controller, Get, Post, Body, Param, Query, UseGuards, Req, BadRequestException } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBody } from '@nestjs/swagger';
import { ReferralsService } from '../../application/services/referrals.service';
import { ReferralStatsService } from '../../application/services/referral-stats.service';
import { AuthGuard } from '../../../../common/guards/auth.guard';
import { Request as ExpressRequest } from 'express';

interface RequestWithUser extends ExpressRequest {
  user: { id: number; role: string; [key: string]: any };
}

@ApiTags('referrals')
@Controller('referrals')
export class ReferralsController {
  constructor(
    private readonly referralsService: ReferralsService,
    private readonly referralStatsService: ReferralStatsService,
  ) {}

  @Post('generate-invite')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' })
  @ApiResponse({ status: 201, description: '–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞' })
  async generateInviteLink(
    @Req() req: RequestWithUser,
    @Body('baseUrl') baseUrl?: string,
  ) {
    const defaultBaseUrl = baseUrl || `${req.protocol}://${req.get('host')}`;
    const inviteLink = await this.referralsService.generateInviteLink(
      req.user.id.toString(),
      defaultBaseUrl
    );

    return {
      inviteLink,
      message: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!',
      shareText: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Ç–µ–Ω–Ω–∏—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéæ',
    };
  }

  @Get('validate/:code')
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞' })
  @ApiParam({ name: 'code', description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' })
  @ApiResponse({ status: 200, description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞' })
  async validateReferralCode(@Param('code') code: string) {
    const isValid = await this.referralsService.validateReferralCode(code);
    return {
      isValid,
      message: isValid ? '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' : '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥',
    };
  }

  @Get('my-stats')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' })
  async getMyReferralStats(@Req() req: RequestWithUser) {
    return this.referralsService.getUserReferralStats(req.user.id.toString());
  }

  @Get('my-achievements')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' })
  async getMyAchievements(@Req() req: RequestWithUser) {
    return this.referralStatsService.getUserAchievements(req.user.id.toString());
  }

  @Get('top-referrers')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤' })
  @ApiQuery({ name: 'limit', required: false, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤' })
  async getTopReferrers(@Query('limit') limit?: string) {
    const limitNum = limit ? parseInt(limit) : 10;
    return this.referralsService.getTopReferrers(limitNum);
  }

  @Get('global-stats')
  @ApiOperation({ summary: '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã' })
  @ApiResponse({ status: 200, description: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' })
  async getGlobalStats() {
    return this.referralStatsService.getGlobalStats();
  }

  @Post('register')
  @ApiOperation({ summary: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ' })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        referralCode: { type: 'string', description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥' },
        telegram_id: { type: 'string', description: 'Telegram ID' },
        username: { type: 'string', description: 'Username' },
        first_name: { type: 'string', description: '–ò–º—è' },
        last_name: { type: 'string', description: '–§–∞–º–∏–ª–∏—è' },
        photo_url: { type: 'string', description: 'URL —Ñ–æ—Ç–æ' },
        source: { type: 'string', description: '–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞' },
      },
      required: ['referralCode', 'telegram_id', 'username', 'first_name'],
    },
  })
  @ApiResponse({ status: 201, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ' })
  async registerByReferral(
    @Body() registerData: any,
    @Req() req: ExpressRequest,
  ) {
    if (!registerData.referralCode) {
      throw new BadRequestException('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥');
    }

    const result = await this.referralsService.registerByReferral(
      registerData.referralCode,
      {
        ...registerData,
        ipAddress: req.ip,
      }
    );

    return {
      user: result.user,
      referrer: result.referrer,
      message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${result.referrer.firstName}`,
    };
  }

  @Post('mark-active/:userId')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: '–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)' })
  @ApiParam({ name: 'userId', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π' })
  async markUserAsActive(@Param('userId') userId: string) {
    await this.referralsService.markUserAsActive(userId);
    return { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π' };
  }
}