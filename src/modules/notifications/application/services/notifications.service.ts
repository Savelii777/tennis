import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { NotificationsRepository } from '../../infrastructure/repositories/notifications.repository';
import { TelegramService } from '../../../telegram/telegram.service';
import { UsersService } from '../../../users/application/services/users.service';
import { CreateNotificationData, NotificationFilters, NotificationPagination } from '../../domain/interfaces/notification.interface';

@Injectable()
export class NotificationsService {
  private readonly logger = new Logger(NotificationsService.name);

  constructor(
    private readonly notificationsRepository: NotificationsRepository,
    private readonly telegramService: TelegramService,
    private readonly usersService: UsersService,
  ) {}

  async createNotification(data: CreateNotificationData): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
      const notification = await this.notificationsRepository.create({
        userId: data.userId,
        type: data.type,
        message: data.message,
        payload: data.payload,
      });

      this.logger.log(`–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.userId}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      if (data.sendTelegram !== false) {
        await this.sendTelegramNotification(data.userId, data.message);
        await this.notificationsRepository.updateSentStatus(notification.id);
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error}`);
      throw error;
    }
  }

  async getNotifications(
    userId: number,
    filters: NotificationFilters,
    pagination: NotificationPagination,
  ) {
    return this.notificationsRepository.findByUserId(userId, filters, pagination);
  }

  async markAsRead(notificationId: number, userId: number): Promise<void> {
    await this.notificationsRepository.markAsRead(notificationId, userId);
  }

  async markAllAsRead(userId: number): Promise<void> {
    await this.notificationsRepository.markAllAsRead(userId);
  }

  async getUnreadCount(userId: number): Promise<number> {
    return this.notificationsRepository.getUnreadCount(userId);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendMatchScheduledNotification(userId: number, matchData: any): Promise<void> {
    const message = `üéæ –£ –≤–∞—Å –º–∞—Ç—á ${matchData.date} –≤ ${matchData.time} –Ω–∞ –∫–æ—Ä—Ç–µ "${matchData.court}"`;
    
    await this.createNotification({
      userId,
      type: 'MATCH_SCHEDULED',
      message,
      payload: {
        matchId: matchData.matchId,
        court: matchData.court,
        time: matchData.time,
        opponent: matchData.opponent,
      },
      sendTelegram: true,
    });
  }

  async sendMatchReminderNotification(userId: number, matchData: any): Promise<void> {
    const message = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –º–∞—Ç—á —Å–µ–≥–æ–¥–Ω—è –≤ ${matchData.time} –Ω–∞ –∫–æ—Ä—Ç–µ "${matchData.court}"`;
    
    await this.createNotification({
      userId,
      type: 'MATCH_REMINDER',
      message,
      payload: {
        matchId: matchData.matchId,
        court: matchData.court,
        time: matchData.time,
      },
      sendTelegram: true,
    });
  }

  async sendInviteNotification(userId: number, inviteData: any): Promise<void> {
    const message = `ü§ù ${inviteData.senderName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –º–∞—Ç—á ${inviteData.date}`;
    
    await this.createNotification({
      userId,
      type: 'NEW_INVITE',
      message,
      payload: {
        inviteId: inviteData.inviteId,
        senderName: inviteData.senderName,
        date: inviteData.date,
        court: inviteData.court,
      },
      sendTelegram: true,
    });
  }

  async sendTournamentResultNotification(userId: number, resultData: any): Promise<void> {
    const message = `üèÜ –í—ã –∑–∞–Ω—è–ª–∏ ${resultData.place}-–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${resultData.tournamentName}"`;
    
    await this.createNotification({
      userId,
      type: 'TOURNAMENT_RESULT',
      message,
      payload: {
        tournamentId: resultData.tournamentId,
        tournamentName: resultData.tournamentName,
        place: resultData.place,
        prize: resultData.prize,
      },
      sendTelegram: true,
    });
  }

  async sendReferralBonusNotification(userId: number, bonusData: any): Promise<void> {
    const message = `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonusData.amount} –º—è—á–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!`;
    
    await this.createNotification({
      userId,
      type: 'REFERRAL_BONUS',
      message,
      payload: {
        amount: bonusData.amount,
        referredUser: bonusData.referredUser,
      },
      sendTelegram: true,
    });
  }

  private async sendTelegramNotification(userId: number, message: string): Promise<void> {
    try {
      await this.telegramService.sendNotification(userId, message);
      this.logger.log(`Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${error}`);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  }
}