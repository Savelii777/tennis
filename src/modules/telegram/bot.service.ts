import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Context, Telegraf } from 'telegraf';
import { InjectBot, Start, On, Hears, Command, Update, Action } from 'nestjs-telegraf';

import { ProfileHandler } from './handlers/profile.handler';
import { MatchesHandler } from './handlers/matches.handler';
import { RequestsHandler } from './handlers/requests.handler';
import { TournamentsHandler } from './handlers/tournaments.handler';
import { TrainingsHandler } from './handlers/trainings.handler'
import { StoriesHandler } from './handlers/stories.handler';
import { CasesHandler } from './handlers/cases.handler';
import { AiCoachHandler } from './handlers/ai-coach.handler';
import { CommonHandler } from './handlers/common.handler';
import { StateService } from './services/state.service';

@Update()
@Injectable()
export class BotService implements OnModuleInit {
  private readonly logger = new Logger(BotService.name);

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly profileHandler: ProfileHandler,
    private readonly matchesHandler: MatchesHandler,
    private readonly requestsHandler: RequestsHandler,
    private readonly tournamentsHandler: TournamentsHandler,
    private readonly trainingHandler: TrainingsHandler,
    private readonly storiesHandler: StoriesHandler,
    private readonly casesHandler: CasesHandler,
    private readonly aiCoachHandler: AiCoachHandler,
    private readonly commonHandler: CommonHandler,
    private readonly stateService: StateService
  ) {}

  async onModuleInit() {
    this.logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.profileHandler.register(this.bot);
    this.matchesHandler.register(this.bot);
    this.requestsHandler.register(this.bot);
    this.tournamentsHandler.register(this.bot);
    this.trainingHandler.register(this.bot);
    this.storiesHandler.register(this.bot);
    this.casesHandler.register(this.bot);
    this.aiCoachHandler.register(this.bot);
    this.commonHandler.register(this.bot);

    this.logger.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
  @Start()
  async handleStart(ctx: Context) {
    return this.commonHandler.handleStart(ctx);
  }

  @Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
  async handleProfile(ctx: Context) {
    return this.profileHandler.handleProfile(ctx);
  }

  @Hears('üéæ –ò–≥—Ä–∞—Ç—å')
  async handlePlay(ctx: Context) {
    return this.requestsHandler.handlePlay(ctx);
  }

  @Hears('üèÜ –¢—É—Ä–Ω–∏—Ä—ã')
  async handleTournaments(ctx: Context) {
    return this.tournamentsHandler.handleTournaments(ctx);
  }

  @Hears('üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
  async handleTrainings(ctx: Context) {
    return this.trainingHandler.handleTrainings(ctx);
  }

  @Hears('üì± Stories')
  async handleStories(ctx: Context) {
    return this.storiesHandler.handleStories(ctx);
  }

  @Hears('üéÅ –ö–µ–π—Å—ã')
  async handleCases(ctx: Context) {
    return this.casesHandler.handleCases(ctx);
  }

  @Hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  async handleRecordMatch(ctx: Context) {
    return this.matchesHandler.handleRecordMatch(ctx);
  }

  @Hears('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
  async handleInviteButton(ctx: Context) {
    return this.commonHandler.handleInviteButton(ctx);
  }

  @Hears('ü§ñ AI-Coach')
  async handleAICoach(ctx: Context) {
    return this.aiCoachHandler.handleAICoach(ctx);
  }

  @Hears('üìç –ö–æ—Ä—Ç—ã')
  async handleLocations(ctx: Context) {
    return this.tournamentsHandler.handleLocations(ctx);
  }

  @Hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
  async handleSettings(ctx: Context) {
    return this.profileHandler.handleSettings(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  @On('text')
  async handleText(ctx: Context) {
    if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;
    
    const userId = ctx.from.id.toString();
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = this.stateService.getUserState(userId);
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try {
      // –ü—Ä–æ—Ñ–∏–ª—å
      if (await this.profileHandler.handleProfileInput(ctx, text, userId)) {
        return;
      }

      // –ú–∞—Ç—á–∏
      if (await this.matchesHandler.handleMatchInput(ctx, text, userId)) {
        return;
      }

      // –ó–∞—è–≤–∫–∏
      if (await this.requestsHandler.handleRequestInput(ctx, text, userId)) {
        return;
      }

      // –¢—É—Ä–Ω–∏—Ä—ã
      if (await this.tournamentsHandler.handleTournamentInput(ctx, text, userId)) {
        return;
      }

      // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      if (await this.trainingHandler.handleTrainingInput(ctx, text, userId)) {
        return;
      }

      // Stories
      if (await this.storiesHandler.handleStoryInput(ctx, text, userId)) {
        return;
      }

      // AI Coach
      if (await this.aiCoachHandler.handleAIInput(ctx, text, userId)) {
        return;
      }

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      await ctx.reply(
        `ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`,
        { 
          reply_markup: { 
            keyboard: [
              ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
              ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
              ['üìç –ö–æ—Ä—Ç—ã', 'ü§ñ AI-Coach'],
              ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
            ], 
            resize_keyboard: true 
          }
        }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Stories
  @On('photo')
  async handlePhoto(ctx: Context) {
    return this.storiesHandler.handlePhoto(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è Stories
  @On('video')
  async handleVideo(ctx: Context) {
    return this.storiesHandler.handleVideo(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  @Command('debug')
  async handleDebug(ctx: Context) {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);

    await ctx.reply(
      `üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n` +
      `User ID: ${userId}\n` +
      `State: ${userState.step}\n` +
      `Data: ${JSON.stringify(userState.data, null, 2)}`,
      { parse_mode: 'Markdown' }
    );
  }
}