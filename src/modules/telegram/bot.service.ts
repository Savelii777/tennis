// src/modules/telegram/bot.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { BotContext } from './interfaces/context.interface';
import { AuthService } from '../auth/application/services/auth.service';
import { UsersService } from '../users/application/services/users.service';
import { RequestsService } from '../requests/application/services/requests.service';
import { TournamentsService } from '../tournaments/application/services/tournaments.service';
import { TrainingsService } from '../trainings/application/services/trainings.service';
import { Markup } from 'telegraf';

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private mainKeyboard: any;

  constructor(
    @InjectBot() private readonly bot: Telegraf<BotContext>,
    private readonly authService: AuthService,
    private readonly usersService: UsersService,
    private readonly requestsService: RequestsService,
    private readonly tournamentsService: TournamentsService,
    private readonly trainingsService: TrainingsService,
  ) {
    this.mainKeyboard = Markup.keyboard([
      ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
      ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'],
      ['üì± Stories', 'ü§ñ AI-Coach', 'üì¶ –ö–µ–π—Å—ã']
    ]).resize();
    
    this.setupBot();
  }

  private setupBot() {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    this.bot.command('start', this.handleStart.bind(this));
    this.bot.command('profile', this.handleProfile.bind(this));
    this.bot.command('games', this.handleGames.bind(this));
    this.bot.command('results', this.handleResults.bind(this));
    this.bot.command('tournaments', this.handleTournaments.bind(this));
    this.bot.command('training', this.handleTraining.bind(this));
    this.bot.command('stories', this.handleStories.bind(this));
    this.bot.command('aicoach', this.handleAiCoach.bind(this));
    this.bot.command('cases', this.handleCases.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
    this.bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', this.handleProfile.bind(this));
    this.bot.hears('üéæ –ò–≥—Ä–∞—Ç—å', this.handlePlay.bind(this));
    this.bot.hears('üèÜ –¢—É—Ä–Ω–∏—Ä—ã', this.handleTournaments.bind(this));
    this.bot.hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', this.handleResults.bind(this));
    this.bot.hears('üì± Stories', this.handleStories.bind(this));
    this.bot.hears('ü§ñ AI-Coach', this.handleAiCoach.bind(this));
    this.bot.hears('üì¶ –ö–µ–π—Å—ã', this.handleCases.bind(this));

    this.logger.log('Telegram bot setup completed');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
  async handleStart(ctx: BotContext) {
    try {
      if (!ctx.message || !('from' in ctx.message)) return;
      const from = ctx.message.from;
      if (!from) return;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç—É–ø–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.usersService.findByTelegramId(from.id.toString());
        
        if (!user) {
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userData = {
            telegram_id: from.id.toString(),
            username: from.username || `user_${from.id}`,
            first_name: from.first_name,
            last_name: from.last_name || undefined,
            photo_url: ''
          };
          
          await this.usersService.create(userData);
          
          await ctx.reply(
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${from.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.
–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–¥–±–∏—Ä–∞—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏.`,
            { reply_markup: this.mainKeyboard }
          );
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
          if (ctx.scene) {
            await ctx.scene.enter('profile-setup');
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          await ctx.reply(
            `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name || from.first_name}!
–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`,
            { reply_markup: this.mainKeyboard }
          );
        }
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : String(error);
        this.logger.error(`Error in handleStart: ${errorMsg}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`General error in handleStart: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  async handleProfile(ctx: BotContext) {
    try {
      if (!ctx.message || !('from' in ctx.message)) return;
      const from = ctx.message.from;
      if (!from) return;
      
      const user = await this.usersService.findByTelegramId(from.id.toString());
      
      if (!user) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      const stats = await this.usersService.getProfileStatistics(user.id.toString());
      const profileStatus = await this.usersService.getProfileCompletionStatus(user.id.toString());
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
      const message = `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*
–ò–º—è: ${user.first_name} ${user.last_name || ''}
–†–µ–π—Ç–∏–Ω–≥: ${stats.ratingPoints} –æ—á–∫–æ–≤ (NTRP: ${user.profile?.ntrp_rating || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*
–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}
–ü–æ–±–µ–¥: ${stats.matchWins}
–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}
–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%

üèÜ *–¢—É—Ä–Ω–∏—Ä—ã*
–£—á–∞—Å—Ç–∏–µ: ${stats.tournamentsPlayed}
–ü–æ–±–µ–¥: ${stats.tournamentsWon}

${!profileStatus.profileComplete ? '‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"' : ''}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      const keyboard = {
        inline_keyboard: [
          [{ text: "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "profile_setup" }],
          [{ text: "üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data: "rating_history" }],
          [{ text: "üì± –ú–æ–∏ Stories", callback_data: "my_stories" }],
          [{ text: "üéæ –ú–æ–∏ –º–∞—Ç—á–∏", callback_data: "my_matches" }],
        ]
      };
      
      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleProfile: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä
  async handleGames(ctx: BotContext) {
    try {
      await ctx.reply('–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleGames: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
  async handlePlay(ctx: BotContext) {
    try {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üéæ –°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á", callback_data: "create_match" }],
          [{ text: "üìÖ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data: "create_training" }],
          [{ text: "üèÜ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data: "create_tournament" }]
        ]
      };
      
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', { reply_markup: keyboard });
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handlePlay: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async handleResults(ctx: BotContext) {
    try {
      await ctx.reply('–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleResults: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
  async handleTournaments(ctx: BotContext) {
    try {
      await ctx.reply('–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleTournaments: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  async handleTraining(ctx: BotContext) {
    try {
      await ctx.reply('–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleTraining: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è stories
  async handleStories(ctx: BotContext) {
    try {
      await ctx.reply('–ü—Ä–æ—Å–º–æ—Ç—Ä stories...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleStories: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ stories.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI-Coach
  async handleAiCoach(ctx: BotContext) {
    try {
      await ctx.reply('AI-Coach –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleAiCoach: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AI-Coach.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–µ–π—Å–æ–≤
  async handleCases(ctx: BotContext) {
    try {
      await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã...');
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      this.logger.error(`Error in handleCases: ${errorMsg}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤.');
    }
  }
}