import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectBot, Start, Command, Hears, On, Update, Action } from 'nestjs-telegraf';
import { Telegraf, Markup, Context } from 'telegraf';
import { UsersService } from '../users/application/services/users.service';
import { BallsService } from '../users/application/services/balls.service';
import { RequestsService } from '../requests/application/services/requests.service';
import { TournamentsService } from '../tournaments/application/services/tournaments.service';
import { MatchesService } from '../matches/application/services/matches.service';
import { TrainingsService } from '../trainings/application/services/trainings.service';
import { StoriesService } from '../stories/application/services/stories.service';
import { CasesService } from '../cases/application/services/cases.service';
import { CaseOpeningService } from '../cases/application/services/case-opening.service';
import { ProfileStep, UserState } from './interfaces/profile-state.enum'; // ‚Üê –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç
import { CreateRequestDto, RequestType, GameMode } from '../requests/application/dto/create-request.dto';

interface RequestEntity {
  id: number;
  creator: {
    first_name: string;
  };
  scheduledTime: Date;
  location: string;
  currentPlayers: number;
  maxPlayers: number;
}

interface TournamentEntity {
  id: number;
  name: string;
  startDate: Date;
  registrationEndDate: Date;
  currentParticipants: number;
  maxParticipants: number;
  entryFee?: number;
}

@Update()
@Injectable()
export class BotService implements OnModuleInit {
  private readonly logger = new Logger(BotService.name);
  
  // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
  private userStates = new Map<string, UserState>();

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly usersService: UsersService,
    private readonly ballsService: BallsService,
    private readonly requestsService: RequestsService,
    private readonly tournamentsService: TournamentsService,
    private readonly matchesService: MatchesService,
    private readonly trainingsService: TrainingsService,
    private readonly storiesService: StoriesService,
    private readonly casesService: CasesService,
    private readonly caseOpeningService: CaseOpeningService,
  ) {}

  async onModuleInit() {
    this.logger.log('üöÄ BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    this.logger.log(`Bot instance: ${!!this.bot}`);
    
    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      this.logger.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${ctx.updateType} –æ—Ç ${ctx.from?.id}`);
      if (ctx.message && 'text' in ctx.message) {
        this.logger.log(`üìù –¢–µ–∫—Å—Ç: "${ctx.message.text}"`);
      }
      await next();
    });
    
    this.logger.log('‚úÖ Middleware –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  // ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

  private getMainKeyboard() {
    return Markup.keyboard([
      ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
      ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üéÅ –ö–µ–π—Å—ã'],
      ['üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'üì± Stories'],
      ['üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'],
      ['ü§ñ AI-Coach']
    ]).resize().persistent();
  }

  private getUserState(userId: string): UserState {
    return this.userStates.get(userId) || { step: ProfileStep.IDLE, data: {} };
  }

  private setUserState(userId: string, state: UserState) {
    this.userStates.set(userId, state);
  }

  private clearUserState(userId: string) {
    this.userStates.delete(userId);
  }

  @Start()
  async handleStart(ctx: Context) {
    this.logger.log(`üåü START –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.first_name})`);
    
    try {
      if (!ctx.from) {
        this.logger.warn('–ù–µ—Ç from field');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ deep link
      const startPayload = ctx.message && 'text' in ctx.message 
        ? ctx.message.text.split(' ')[1] 
        : null;

      await ctx.reply('üéæ –ó–∞–ø—É—Å–∫–∞—é Tennis Bot...');

      let user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      
      if (!user) {
        this.logger.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const userData = {
          telegram_id: ctx.from.id.toString(),
          username: ctx.from.username || `user_${ctx.from.id}`,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name || undefined,
          photo_url: ''
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if (startPayload && startPayload.startsWith('ref_')) {
          const referralCode = startPayload.replace('ref_', '');
          this.logger.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
          
          try {
            this.logger.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –¥–ª—è –±—É–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            
            await ctx.reply(
              `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!\n\n` +
              `–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n` +
              `üéæ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å!`,
              this.getMainKeyboard()
            );
          } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error}`);
          }
        }

        user = await this.usersService.create(userData);
        this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
        
        if (!startPayload?.startsWith('ref_')) {
          await ctx.reply(
            `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`,
            this.getMainKeyboard()
          );
        }
      } else {
        this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        await ctx.reply(
          `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
          this.getMainKeyboard()
        );
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStart: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // ==================== –ü–†–û–§–ò–õ–¨ ====================

  @Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
  async handleProfile(ctx: Context) {
    this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      try {
        const stats = await this.usersService.getProfileStatistics(user.id.toString());
        const profileStatus = await this.usersService.getProfileCompletionStatus(user.id.toString());
        const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
        
        const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `ID: ${user.telegram_id}\n\n` +
          `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
          `üéæ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}\n` +
          `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins}\n` +
          `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}\n` +
          `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n` +
          `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${stats.ratingPoints} –æ—á–∫–æ–≤\n` +
          `üéæ –ú—è—á–µ–π: ${ballsBalance}\n\n` + // ‚Üê –ò—Å–ø—Ä–∞–≤–∏—Ç—å
          `${!profileStatus.profileComplete ? '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω' : '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω'}`;

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
          [Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
          [Markup.button.callback('üéæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π', 'match_history')],
          [Markup.button.callback('üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
        ]);

        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });

      } catch (statsError) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError instanceof Error ? statsError.message : String(statsError)}`);
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
        ]);
        
        await ctx.reply(
          `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `ID: ${user.telegram_id}\n\n` +
          `‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
          }
        );
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // ==================== –ò–ì–†–ê –ò –ó–ê–Ø–í–ö–ò ====================

  @Hears('üéæ –ò–≥—Ä–∞—Ç—å')
  async handlePlay(ctx: Context) {
    this.logger.log('üéæ –ò–ì–†–ê–¢–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É', 'find_game')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
        [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_requests')],
        [Markup.button.callback('üí´ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'active_requests')],
      ]);

      await ctx.reply(
        `üéæ **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePlay: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä—ã');
    }
  }

  @Action('find_game')
  async handleFindGame(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      if (!ctx.from) return;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
      const requests = await this.requestsService.findAll({ 
        page: 1, 
        limit: 10 
      }) as any; // ‚Üê –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

      const filteredRequests: RequestEntity[] = requests.filter((req: any) => 
        req.creator?.telegram_id !== ctx.from?.id.toString()
      ).slice(0, 10);

      if (filteredRequests.length === 0) {
        await ctx.editMessageText(
          `üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
          `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n`;
      const buttons: any[] = [];

      filteredRequests.forEach((request: RequestEntity, index: number) => {
        const datetime = new Date(request.scheduledTime).toLocaleString('ru-RU');
        message += `${index + 1}. **${request.creator.first_name}**\n`;
        message += `üìÖ ${datetime}\n`;
        message += `üìç ${request.location}\n`;
        message += `üë• ${request.currentPlayers}/${request.maxPlayers}\n\n`;
        
        buttons.push([Markup.button.callback(
          `${index + 1}. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è`, 
          `respond_request_${request.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_game')]);
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindGame: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä');
    }
  }

  @Action('create_request')
  async handleCreateRequest(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.CREATING_REQUEST,
      data: {}
    });

    await ctx.editMessageText(
      `‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É**\n\n` +
      `**–®–∞–≥ 1 –∏–∑ 4**\n\n` +
      `–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY HH:MM\n\n` +
      `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`,
      { parse_mode: 'Markdown' }
    );

    this.setUserState(userId, {
      step: ProfileStep.AWAITING_REQUEST_DATETIME,
      data: {}
    });
  }

  // ==================== –¢–£–†–ù–ò–†–´ ====================

  @Hears('üèÜ –¢—É—Ä–Ω–∏—Ä—ã')
  async handleTournaments(ctx: Context) {
    this.logger.log('üèÜ –¢–£–†–ù–ò–†–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', 'active_tournaments')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
        [Markup.button.callback('üìã –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'my_tournaments')],
        [Markup.button.callback('üèÜ –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è', 'tournament_history')],
      ]);

      await ctx.reply(
        `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n` +
        `–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTournaments: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  @Action('active_tournaments')
  async handleActiveTournaments(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findAll
      const tournaments = await this.tournamentsService.findAll({ 
        page: 1, 
        limit: 10 
      }) as any; // ‚Üê –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

      const activeTournaments: TournamentEntity[] = tournaments.slice(0, 10);

      if (activeTournaments.length === 0) {
        await ctx.editMessageText(
          `üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n` +
          `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:**\n\n`;
      const buttons: any[] = [];

      activeTournaments.forEach((tournament: TournamentEntity, index: number) => {
        const startDate = new Date(tournament.startDate).toLocaleDateString('ru-RU');
        const regEndDate = new Date(tournament.registrationEndDate).toLocaleDateString('ru-RU');
        
        message += `${index + 1}. **${tournament.name}**\n`;
        message += `üìÖ –ù–∞—á–∞–ª–æ: ${startDate}\n`;
        message += `üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: ${regEndDate}\n`;
        message += `üë• ${tournament.currentParticipants}/${tournament.maxParticipants}\n`;
        message += `üí∞ –í–∑–Ω–æ—Å: ${tournament.entryFee || 0} –º—è—á–µ–π\n\n`;
        
        buttons.push([Markup.button.callback(
          `${index + 1}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ`, 
          `tournament_details_${tournament.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'active_tournaments')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleActiveTournaments: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  // ==================== –ö–ï–ô–°–´ ====================

  @Hears('üéÅ –ö–µ–π—Å—ã')
  async handleCases(ctx: Context) {
    this.logger.log('üéÅ –ö–ï–ô–°–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const cases = await this.casesService.getAllCases(false); // —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
      const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
      
      if (cases.length === 0) {
        await ctx.reply(
          `üéÅ **–ö–µ–π—Å—ã**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤.\n\n` +
          `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:**\n\n`;
      message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${ballsBalance} –º—è—á–µ–π\n\n`; // ‚Üê –ò—Å–ø—Ä–∞–≤–∏—Ç—å

      const buttons: any[] = [];

      cases.forEach((caseItem: any, index: number) => {
        message += `${index + 1}. **${caseItem.name}**\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${caseItem.priceBalls} –º—è—á–µ–π\n`;
        message += `üìù ${caseItem.description}\n\n`;
        
        const canOpen = ballsBalance >= caseItem.priceBalls; // ‚Üê –ò—Å–ø—Ä–∞–≤–∏—Ç—å
        buttons.push([Markup.button.callback(
          `${canOpen ? 'üéÅ' : 'üîí'} ${caseItem.name} (${caseItem.priceBalls} –º—è—á–µ–π)`, 
          canOpen ? `open_case_${caseItem.id}` : `case_info_${caseItem.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π', 'case_history')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCases: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤');
    }
  }

  // ==================== STORIES ====================

  @Hears('üì± Stories')
  async handleStories(ctx: Context) {
    this.logger.log('üì± STORIES –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', 'upload_photo_story')],
        [Markup.button.callback('üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ', 'upload_video_story')],
        [Markup.button.callback('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Stories', 'view_stories')],
        [Markup.button.callback('üìã –ú–æ–∏ Stories', 'my_stories')],
      ]);

      await ctx.reply(
        `üì± **Stories**\n\n` +
        `–î–µ–ª–∏—Ç–µ—Å—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStories: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Stories');
    }
  }

  // ==================== –¢–†–ï–ù–ò–†–û–í–ö–ò ====================

  @Hears('üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
  async handleTrainings(ctx: Context) {
    this.logger.log('üèÉ‚Äç‚ôÇÔ∏è –¢–†–ï–ù–ò–†–û–í–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'find_training')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'create_training')],
        [Markup.button.callback('üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'my_trainings')],
        [Markup.button.callback('üë®‚Äçüè´ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º', 'become_trainer')],
      ]);

      await ctx.reply(
        `üèÉ‚Äç‚ôÇÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
        `–ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTrainings: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }
  }

  // ==================== –ó–ê–ü–ò–°–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================

  @Hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  async handleRecordMatch(ctx: Context) {
    this.logger.log('üìù –ó–ê–ü–ò–°–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      
      this.setUserState(userId, {
        step: ProfileStep.RECORDING_MATCH,
        data: {}
      });

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéæ –û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á', 'match_type_singles')],
        [Markup.button.callback('üë• –ü–∞—Ä–Ω—ã–π –º–∞—Ç—á', 'match_type_doubles')],
      ]);

      await ctx.reply(
        `üìù **–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç—á–∞:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRecordMatch: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞');
    }
  }

  // ==================== –†–ï–§–ï–†–ê–õ–´ ====================

  @Hears('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
  async handleInviteButton(ctx: Context) {
    await this.handleInvite(ctx);
  }

  @Command('invite')
  async handleInvite(ctx: Context) {
    this.logger.log('üîó INVITE –∫–æ–º–∞–Ω–¥–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'your_bot_name';
      const referralCode = `ref_${user.id.toString().padStart(6, '0')}`;
      const inviteLink = `https://t.me/${botUsername}?start=${referralCode}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', 
          `https://t.me/share/url?url=${encodeURIComponent(inviteLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Ç–µ–Ω–Ω–∏—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéæ')}`
        )],
        [Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')],
      ]);

      await ctx.reply(
        `üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:**\n\n` +
        `\`${inviteLink}\`\n\n` +
        `üë• –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n` +
        `üèÜ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å—ã!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleInvite: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  }

  // ==================== AI COACH ====================

  @Hears('ü§ñ AI-Coach')
  async handleAICoach(ctx: Context) {
    this.logger.log('ü§ñ AI-COACH –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí° –°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ', 'ai_technique_tip')],
        [Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')],
        [Markup.button.callback('üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã', 'ai_game_analysis')],
        [Markup.button.callback('üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π', 'ai_goal_setting')],
      ]);

      await ctx.reply(
        `ü§ñ **AI-Coach**\n\n` +
        `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å!\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleAICoach: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ AI-Coach');
    }
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================

  @On('text')
  async handleText(ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) return;
    
    const text = ctx.message.text;
    const userId = ctx.from?.id.toString();
    
    if (!userId) return;
    
    const userState = this.getUserState(userId);
    
    this.logger.log(`üí¨ –¢–µ–∫—Å—Ç –æ—Ç ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}, —Ç–µ–∫—Å—Ç: "${text}"`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (userState.step !== ProfileStep.IDLE) {
      await this.handleStatefulInput(ctx, text, userId, userState);
      return;
    }

    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if (!text.startsWith('/') && !['üë§', 'üéæ', 'üèÜ', 'üìù', 'üì±', 'ü§ñ', 'üèÉ‚Äç‚ôÇÔ∏è', 'üéÅ', 'üîó'].some(emoji => text.includes(emoji))) {
      await ctx.reply(
        `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `‚Ä¢ /start - –Ω–∞—á–∞—Ç—å\n` +
        `‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n` +
        `‚Ä¢ /debug - –æ—Ç–ª–∞–¥–∫–∞\n\n` +
        `–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
        this.getMainKeyboard()
      );
    }
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô ====================

  private async handleStatefulInput(ctx: Context, text: string, userId: string, userState: UserState) {
    switch (userState.step) {
      // –ü—Ä–æ—Ñ–∏–ª—å
      case ProfileStep.AWAITING_FIRST_NAME:
        await this.handleFirstName(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_LAST_NAME:
        await this.handleLastName(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_CITY:
        await this.handleCity(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_COURT:
        await this.handleCourt(ctx, text, userId, userState);
        break;

      // –ó–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É
      case ProfileStep.AWAITING_REQUEST_DATETIME:
        await this.handleRequestDateTime(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_REQUEST_LOCATION:
        await this.handleRequestLocation(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_REQUEST_DESCRIPTION:
        await this.handleRequestDescription(ctx, text, userId, userState);
        break;

      // –¢—É—Ä–Ω–∏—Ä—ã
      case ProfileStep.AWAITING_TOURNAMENT_NAME:
        await this.handleTournamentName(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION:
        await this.handleTournamentDescription(ctx, text, userId, userState);
        break;

      // –ú–∞—Ç—á–∏
      case ProfileStep.AWAITING_MATCH_OPPONENT:
        await this.handleMatchOpponent(ctx, text, userId, userState);
        break;
      case ProfileStep.AWAITING_MATCH_SCORE:
        await this.handleMatchScore(ctx, text, userId, userState);
        break;

      // Stories
      case ProfileStep.AWAITING_STORY_DESCRIPTION:
        await this.handleStoryDescription(ctx, text, userId, userState);
        break;

      default:
        this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);
        this.clearUserState(userId);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.');
        break;
    }
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–Ø–í–û–ö ====================

  private async handleRequestDateTime(ctx: Context, text: string, userId: string, userState: UserState) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
    const match = text.match(dateTimeRegex);
    
    if (!match) {
      await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM\n` +
        `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`
      );
      return;
    }

    const [, day, month, year, hour, minute] = match;
    const dateTime = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));
    
    if (dateTime < new Date()) {
      await ctx.reply(`‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.`);
      return;
    }

    userState.data.requestDateTime = dateTime.toISOString();
    userState.step = ProfileStep.AWAITING_REQUEST_LOCATION;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –í—Ä–µ–º—è: **${dateTime.toLocaleString('ru-RU')}**\n\n` +
      `**–®–∞–≥ 2 –∏–∑ 4**\n\n` +
      `–ì–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
      `–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ç, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞.`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleRequestLocation(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.requestLocation = text.trim();
    userState.step = ProfileStep.AWAITING_REQUEST_LEVEL;
    this.setUserState(userId, userState);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üü¢ –ù–æ–≤–∏—á–æ–∫', 'req_level_beginner')],
      [Markup.button.callback('üîµ –õ—é–±–∏—Ç–µ–ª—å', 'req_level_amateur')],
      [Markup.button.callback('üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π', 'req_level_confident')],
      [Markup.button.callback('üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π', 'req_level_tournament')],
      [Markup.button.callback('üî¥ –ü—Ä–æ—Ñ–∏', 'req_level_semi_pro')],
      [Markup.button.callback('‚ö™ –õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å', 'req_level_any')],
    ]);

    await ctx.reply(
      `‚úÖ –ú–µ—Å—Ç–æ: **${text}**\n\n` +
      `**–®–∞–≥ 3 –∏–∑ 4**\n\n` +
      `–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤ –∏—â–µ—Ç–µ?`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  }

  private async handleRequestDescription(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.requestDescription = text.trim();
    this.setUserState(userId, userState);

    await this.createGameRequest(ctx, userId, userState);
  }







  private async createGameRequest(ctx: Context, userId: string, userState: UserState) {
    try {
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç CreateRequestDto
      const requestData: CreateRequestDto = {
        type: RequestType.GAME, // –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º enum
        title: `–ò–≥—Ä–∞ ${new Date(userState.data.requestDateTime!).toLocaleDateString('ru-RU')}`,
        description: userState.data.requestDescription || '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å',
        gameMode: GameMode.SINGLES, // –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º enum
        dateTime: new Date(userState.data.requestDateTime!),
        location: userState.data.requestLocation!,
        locationName: userState.data.requestLocation!, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        maxPlayers: 2,
        playerLevel: userState.data.requestLevel || 'ANY',
        paymentType: 'FREE',
        ratingType: 'NTRP',
        formatInfo: {},
      };

      const request = await this.requestsService.create(user.id.toString(), requestData);

      const summaryMessage = `‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
        `üìÖ **–í—Ä–µ–º—è:** ${new Date(requestData.dateTime).toLocaleString('ru-RU')}\n` +
        `üìç **–ú–µ—Å—Ç–æ:** ${requestData.location}\n` +
        `üéØ **–£—Ä–æ–≤–µ–Ω—å:** ${this.getLevelText(requestData.playerLevel || 'ANY')}\n` + // –ò—Å–ø—Ä–∞–≤–∏—Ç—å null check
        `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${requestData.description}\n\n` +
        `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;

      await ctx.reply(summaryMessage, { 
        parse_mode: 'Markdown',
        reply_markup: this.getMainKeyboard().reply_markup
      });

      this.clearUserState(userId);

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // ==================== –î–û–ë–ê–í–ò–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ ====================

  private async handleFirstName(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.firstName = text.trim();
    userState.step = ProfileStep.AWAITING_LAST_NAME;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –ò–º—è: **${text}**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleLastName(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.lastName = text.trim();
    userState.step = ProfileStep.AWAITING_CITY;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –§–∞–º–∏–ª–∏—è: **${text}**\n\n` +
      `–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–≥—Ä–∞–µ—Ç–µ?`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleCity(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.city = text.trim();
    userState.step = ProfileStep.AWAITING_COURT;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –ì–æ—Ä–æ–¥: **${text}**\n\n` +
      `–ö–∞–∫–æ–π –∫–æ—Ä—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleCourt(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.preferredCourt = text.trim();
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    await this.completeProfileSetup(ctx, userId, userState);
  }

  private async handleTournamentName(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.tournamentName = text.trim();
    userState.step = ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **${text}**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleTournamentDescription(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.tournamentDescription = text.trim();
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞...
    await ctx.reply(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢—É—Ä–Ω–∏—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω!`);
    this.clearUserState(userId);
  }  // ...existing code...
  

  private async handleMatchOpponent(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.matchOpponent = text.trim();
    userState.step = ProfileStep.AWAITING_MATCH_SCORE;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –°–æ–ø–µ—Ä–Ω–∏–∫: **${text}**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6-4, 6-2):`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleMatchScore(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.matchScore = text.trim();
    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞...
    await ctx.reply(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –∑–∞–ø–∏—Å–∞–Ω!`);
    this.clearUserState(userId);
  }

  private async handleStoryDescription(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.storyDescription = text.trim();
    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ story...
    await ctx.reply(`‚úÖ Story —Å–æ–∑–¥–∞–Ω–∞!`);
    this.clearUserState(userId);
  }

  private async completeProfileSetup(ctx: Context, userId: string, userState: UserState) {
    try {
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.usersService.updateProfile(user.id.toString(), {
        city: userState.data.city,
        // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      });

      await ctx.reply(
        `‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`,
        {
          parse_mode: 'Markdown',
          reply_markup: this.getMainKeyboard().reply_markup
        }
      );

      this.clearUserState(userId);

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  private getLevelText(level: string): string {
    const levelMap = {
      'BEGINNER': '–ù–æ–≤–∏—á–æ–∫ (1.0-2.0)',
      'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)',
      'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)',
      'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0-6.0)',
      'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–∏ / —Ç—Ä–µ–Ω–µ—Ä',
      'ANY': '–õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å'
    };
    return levelMap[level as keyof typeof levelMap] || level;
  }

  private getFrequencyText(frequency: string): string {
    const freqMap = {
      'ONCE': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
      'TWICE': '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'THREE_TIMES': '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'FOUR_PLUS': '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'
    };
    return freqMap[frequency as keyof typeof freqMap] || frequency;
  }

  private getNtrpRating(level: string): number {
    const ratingMap = {
      'BEGINNER': 2.0,
      'AMATEUR': 3.0,
      'CONFIDENT': 4.0,
      'TOURNAMENT': 5.0,
      'SEMI_PRO': 5.5
    };
    return ratingMap[level as keyof typeof ratingMap] || 3.0;
  }

  // ==================== –î–ï–ô–°–¢–í–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò ====================

  @Action(/^open_case_(\d+)$/)
  async handleOpenCase(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    if (!ctx.from) return;

    const caseId = parseInt(ctx.callbackQuery.data.split('_')[2]);
    
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const result = await this.caseOpeningService.openCase(user.id.toString(), caseId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ', 'back_to_cases')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'case_history')],
      ]);

      await ctx.editMessageText(
        `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
        `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **${result.winning.item.name}**\n\n` +
        `üìù ${result.winning.item.description}\n\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º—è—á–µ–π: ${result.opening.ballsSpent}`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ${error}`);
      
      if (error instanceof Error && error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π')) {
        await ctx.editMessageText(
          `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π**\n\n` +
          `–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—è—á–µ–π.\n` +
          `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!`,
          { parse_mode: 'Markdown' }
        );
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
      }
    }
  }

  @Action(/^respond_request_(\d+)$/)
  async handleRespondToRequest(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    if (!ctx.from) return;

    const requestId = parseInt(ctx.callbackQuery.data.split('_')[2]);
    
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º createResponse, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç
      // const response = await this.requestsService.createResponse(requestId.toString(), {
      //   playerId: user.id,
      //   message: '–•–æ—á—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!'
      // });

      await ctx.editMessageText(
        `‚úÖ **–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
        `–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n` +
        `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    }
  }

  // ==================== –ö–û–ú–ê–ù–î–´ –û–¢–õ–ê–î–ö–ò ====================

  @Command('debug')
  async handleDebug(ctx: Context) {
    this.logger.log('üêõ DEBUG –∫–æ–º–∞–Ω–¥–∞');
    
    const userId = ctx.from?.id.toString();
    const userState = userId ? this.getUserState(userId) : null;
    
    const debugInfo = {
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      updateType: ctx.updateType,
      text: ctx.message && 'text' in ctx.message ? ctx.message.text : 'no text',
      userState: userState
    };

    await ctx.reply(
      `üêõ **Debug Info:**\n` +
      `User ID: ${debugInfo.userId}\n` +
      `Chat ID: ${debugInfo.chatId}\n` +
      `Update: ${debugInfo.updateType}\n` +
      `Text: ${debugInfo.text}\n` +
      `State: ${JSON.stringify(debugInfo.userState)}`,
      { parse_mode: 'Markdown' }
    );
  }

  @Command('menu')
  async handleMenu(ctx: Context) {
    this.logger.log('üìã MENU –∫–æ–º–∞–Ω–¥–∞');
    
    await ctx.reply(
      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      this.getMainKeyboard()
    );
  }

  @Action('referral_stats')
  async handleReferralStats(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É (–ø–æ–∑–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å ReferralsService)
      const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π**\n\n` +
        `üë• **–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** 0\n` +
        `‚ö° **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:** 0\n` +
        `üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:** 0\n` +
        `üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:** 0\n` +
        `üìÖ **–ó–∞ –º–µ—Å—è—Ü:** 0\n\n` +
        `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** 0\n` +
        `üíé **–ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏:** 0\n\n` +
        `üöÄ **–°–∫–æ—Ä–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞!**`;

      await ctx.editMessageText(message, { parse_mode: 'Markdown' });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleReferralStats: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }
}