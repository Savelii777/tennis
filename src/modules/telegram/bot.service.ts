import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectBot, Start, Command, Hears, On, Update, Action } from 'nestjs-telegraf';
import { Telegraf, Markup, Context } from 'telegraf';
import { UsersService } from '../users/application/services/users.service';
import { BallsService } from '../users/application/services/balls.service';
import { RequestsService } from '../requests/application/services/requests.service';
import { TournamentsService } from '../tournaments/application/services/tournaments.service';
import { MatchesService } from '../matches/application/services/matches.service';
import { TrainingsService } from '../trainings/application/services/trainings.service';
import { StoriesService } from '../stories/application/services/stories.service';
import { CasesService } from '../cases/application/services/cases.service';
import { CaseOpeningService } from '../cases/application/services/case-opening.service';
import { TelegramService } from './telegram.service';
import { NotificationsService } from '../notifications/application/services/notifications.service';
import { ProfileStep, UserState } from './interfaces/profile-state.enum'; 
import { CreateRequestDto, RequestType, GameMode } from '../requests/application/dto/create-request.dto';
import { TournamentType } from '../tournaments/domain/enums/tournament.enum';
import { MatchType } from '../matches/domain/enums/match.enum';
import { PrismaService } from '../../prisma/prisma.service';
import { AchievementsService } from '../achievements/application/services/achievements.service';
import { RatingsService } from '../ratings/ratings.service';
import { SettingsService } from '../settings/settings.service';

interface RequestEntity {
  id: number;
  creator: {
    first_name: string;
  };
  scheduledTime: Date;
  location: string;
  currentPlayers: number;
  maxPlayers: number;
}

interface TournamentEntity {
  id: number;
  name: string;
  startDate: Date;
  registrationEndDate: Date;
  currentParticipants: number;
  maxParticipants: number;
  entryFee?: number;
}

@Update()
@Injectable()
export class BotService implements OnModuleInit {
  private readonly logger = new Logger(BotService.name);
  
  // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
  private userStates = new Map<string, UserState>();

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly usersService: UsersService,
    private readonly ballsService: BallsService,
    private readonly requestsService: RequestsService,
    private readonly tournamentsService: TournamentsService,
    private readonly matchesService: MatchesService,
    private readonly trainingsService: TrainingsService,
    private readonly storiesService: StoriesService,
    private readonly casesService: CasesService,
    private readonly caseOpeningService: CaseOpeningService,
    private readonly telegramService: TelegramService,
    private readonly notificationsService: NotificationsService, 
    private readonly prisma: PrismaService, 
    private readonly achievementsService: AchievementsService,
    private readonly ratingsService: RatingsService,
    private readonly settingsService: SettingsService,

  ) {}

  async onModuleInit() {
    this.logger.log('üöÄ BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    this.logger.log(`Bot instance: ${!!this.bot}`);
    
    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      this.logger.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${ctx.updateType} –æ—Ç ${ctx.from?.id}`);
      if (ctx.message && 'text' in ctx.message) {
        this.logger.log(`üìù –¢–µ–∫—Å—Ç: "${ctx.message.text}"`);
      }
      await next();
    });
    
    this.logger.log('‚úÖ Middleware –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  // ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================


private getMainKeyboard() {
  return Markup.keyboard([
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
    ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
    ['üì± Stories', 'üéÅ –ö–µ–π—Å—ã'],
    ['üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    ['ü§ñ AI-Coach', 'üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç']
  ]).resize();
}

  private getUserState(userId: string): UserState {
    return this.userStates.get(userId) || { step: ProfileStep.IDLE, data: {} };
  }

  private setUserState(userId: string, state: UserState) {
    this.userStates.set(userId, state);
  }

  private clearUserState(userId: string) {
    this.userStates.delete(userId);
  }




@Start()
async handleStart(ctx: Context) {
  this.logger.log(`üåü START –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.first_name})`);
  
  try {
    if (!ctx.from) {
      this.logger.warn('–ù–µ—Ç from field');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ deep link
    const startPayload = ctx.message && 'text' in ctx.message 
      ? ctx.message.text.split(' ')[1] 
      : null;

    const telegramChatId = ctx.chat?.id;
    
    await ctx.reply('üéæ –ó–∞–ø—É—Å–∫–∞—é Tennis Bot...');

    let user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    
    if (!user) {
      this.logger.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const userData = {
        telegram_id: ctx.from.id.toString(),
        username: ctx.from.username || `user_${ctx.from.id}`,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name || undefined,
        photo_url: ''
      };

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await this.usersService.create(userData);
      this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (telegramChatId) {
        await this.usersService.updateTelegramChatId(user.id.toString(), telegramChatId);
        this.logger.log(`üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: ${telegramChatId}`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      if (startPayload && startPayload.startsWith('ref_')) {
        const referralCode = startPayload.replace('ref_', '');
        this.logger.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
        
        try {
          // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
          const referralUserId = parseInt(referralCode.replace(/^0+/, '')) || null;
          
          if (referralUserId && referralUserId !== user.id) {
            const referrer = await this.usersService.findById(referralUserId.toString());
            
            if (referrer) {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
              await this.usersService.setReferrer(user.id.toString(), referrer.id.toString());
              
              // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
              const bonusAmount = 50; // 50 –º—è—á–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
              await this.ballsService.addBalls(
                referrer.id.toString(), 
                bonusAmount, 
                'BONUS', 
                `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${user.first_name}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º firstName –≤–º–µ—Å—Ç–æ first_name
              );

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
              if (this.notificationsService) {
                await this.notificationsService.sendReferralBonusNotification(
                  referrer.id,
                  {
                    amount: bonusAmount,
                    referredUserName: user.first_name,
                    totalBalance: await this.ballsService.getUserBalance(referrer.id.toString())
                  }
                );
              }

              // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
              await ctx.reply(
                `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!**\n\n` +
                `ü§ù –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏–≥—Ä–æ–∫–∞ **${referrer.first_name}**!\n\n` +
                `üéæ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
                `‚Ä¢ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
                `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
                `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
                `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã\n\n` +
                `–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üèÜ`,
                {
                  parse_mode: 'Markdown',
                  ...this.getMainKeyboard()
                }
              );

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              if (this.notificationsService) {
                await this.notificationsService.createNotification({
                  userId: user.id,
                  type: 'SYSTEM_MESSAGE',
                  message: `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.`,
                  payload: {
                    referrerId: referrer.id,
                    referrerName: referrer.first_name,
                    welcomeBonus: true
                  },
                  sendTelegram: false // –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—ã—à–µ
                });
              }

              this.logger.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${user.id} <- ${referrer.id}`);
            } else {
              this.logger.warn(`–†–µ—Ñ–µ—Ä–µ—Ä —Å ID ${referralUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
          }
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error}`);
        }
      } else {
        // –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await ctx.reply(
          `üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!**\n\n` +
          `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
          `üéæ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n` +
          `‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
          `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
          `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π\n` +
          `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
          `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
          `–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è! üë§`,
          {
            parse_mode: 'Markdown',
            ...this.getMainKeyboard()
          }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (this.notificationsService) {
          await this.notificationsService.createNotification({
            userId: user.id,
            type: 'SYSTEM_MESSAGE',
            message: `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã.`,
            payload: {
              isNewUser: true,
              registrationDate: new Date().toISOString()
            },
            sendTelegram: false
          });
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const startBonus = 100;
      await this.ballsService.addBalls(
        user.id.toString(),
        startBonus,
        'BONUS',
        '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
      );

      }

    } else {
      this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (telegramChatId && user.telegramChatId !== BigInt(telegramChatId)) {
        await this.usersService.updateTelegramChatId(user.id.toString(), telegramChatId);
        this.logger.log(`üí¨ –û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${telegramChatId}`);
      }

      // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
      if (this.telegramService) {
        await this.telegramService.toggleNotifications(user.id, true);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
      const unreadNotifications = this.notificationsService 
        ? await this.notificationsService.getUnreadCount(user.id)
        : 0;

      let welcomeMessage = `üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!**\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
      if (ballsBalance > 0) {
        welcomeMessage += `üéæ **–ë–∞–ª–∞–Ω—Å:** ${ballsBalance} –º—è—á–µ–π\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      if (unreadNotifications > 0) {
        welcomeMessage += `üîî **–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${unreadNotifications}\n`;
      }
      
      welcomeMessage += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.reply(
        welcomeMessage,
        {
          parse_mode: 'Markdown',
          ...this.getMainKeyboard()
        }
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
      if (unreadNotifications > 0) {
        const notificationsKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback(`üì¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${unreadNotifications})`, 'view_notifications')]
        ]);

        await ctx.reply(
          `üîî –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`,
          {
            reply_markup: notificationsKeyboard.reply_markup
          }
        );
      }
    }

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStart: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );
  }
}




  // ==================== –ü–†–û–§–ò–õ–¨ ====================

  @Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
  async handleProfile(ctx: Context) {
    this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      try {
        const stats = await this.usersService.getProfileStatistics(user.id.toString());
        const profileStatus = await this.usersService.getProfileCompletionStatus(user.id.toString());
        const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
        
        const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `ID: ${user.telegram_id}\n\n` +
          `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
          `üéæ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}\n` +
          `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins}\n` +
          `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}\n` +
          `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n` +
          `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${stats.ratingPoints} –æ—á–∫–æ–≤\n` +
          `üéæ –ú—è—á–µ–π: ${ballsBalance}\n\n` + // ‚Üê –ò—Å–ø—Ä–∞–≤–∏—Ç—å
          `${!profileStatus.profileComplete ? '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω' : '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω'}`;

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
          [Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
          [Markup.button.callback('üéæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π', 'match_history')],
          [Markup.button.callback('üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
        ]);

        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });

      } catch (statsError) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError instanceof Error ? statsError.message : String(statsError)}`);
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
        ]);
        
        await ctx.reply(
          `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `ID: ${user.telegram_id}\n\n` +
          `‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
          }
        );
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // ==================== –ò–ì–†–ê –ò –ó–ê–Ø–í–ö–ò ====================

  @Hears('üéæ –ò–≥—Ä–∞—Ç—å')
  async handlePlay(ctx: Context) {
    this.logger.log('üéæ –ò–ì–†–ê–¢–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É', 'find_game')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
        [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_requests')],
        [Markup.button.callback('üí´ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'active_requests')],
      ]);

      await ctx.reply(
        `üéæ **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePlay: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä—ã');
    }
  }


@Action('find_game')
async handleFindGame(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    if (!ctx.from) return;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const requests = await this.requestsService.findAll({ 
      page: 1, 
      limit: 10 
    }) as any[];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    const filteredRequests = requests.filter((req: any) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
      const creatorTelegramId = req.creator?.telegram_id || 
                               req.creator?.telegramId || 
                               req.creatorId?.toString();
      
      return creatorTelegramId && creatorTelegramId !== ctx.from?.id.toString();
    }).slice(0, 10);

    if (filteredRequests.length === 0) {
      await ctx.editMessageText(
        `üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
        `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
        `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    let message = `üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n`;
    const buttons: any[] = [];

    filteredRequests.forEach((request: any, index: number) => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const datetime = request.dateTime || request.scheduledTime 
        ? new Date(request.dateTime || request.scheduledTime).toLocaleString('ru-RU')
        : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const creatorName = request.creator?.first_name || 
                         request.creator?.firstName || 
                         request.creatorName || 
                         '–ò–≥—Ä–æ–∫';
      
      const location = request.locationName || 
                      request.location || 
                      '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const currentPlayers = request.currentPlayers || 0;
      const maxPlayers = request.maxPlayers || 2;
      
      message += `${index + 1}. **${creatorName}**\n`;
      message += `üìÖ ${datetime}\n`;
      message += `üìç ${location}\n`;
      message += `üë• ${currentPlayers}/${maxPlayers}\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (request.description && request.description !== '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å') {
        message += `üìù ${request.description}\n`;
      }
      
      message += `\n`;
      
      buttons.push([Markup.button.callback(
        `${index + 1}. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è`, 
        `respond_request_${request.id}`
      )]);
    });

    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_game')]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);

    const keyboard = Markup.inlineKeyboard(buttons);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindGame: ${error}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.logger.error(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error, null, 2)}`);
    
    await ctx.editMessageText(
      `üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
      `üòî –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É!`,
      { parse_mode: 'Markdown' }
    );
  }
}

  @Action('create_request')
  async handleCreateRequest(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.CREATING_REQUEST,
      data: {}
    });

    await ctx.editMessageText(
      `‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É**\n\n` +
      `**–®–∞–≥ 1 –∏–∑ 4**\n\n` +
      `–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY HH:MM\n\n` +
      `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`,
      { parse_mode: 'Markdown' }
    );

    this.setUserState(userId, {
      step: ProfileStep.AWAITING_REQUEST_DATETIME,
      data: {}
    });
  }





// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@Command('rating')
async handleRatingCommand(ctx: Context) {
  try {
    const user = await this.usersService.findByTelegramId(ctx.from!.id.toString());
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const stats = await this.ratingsService.getPlayerStats(user.id);
    
    if (!stats) {
      await ctx.reply('üìä –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!');
      return;
    }

    const levelText = this.getSkillLevelText(stats.skillRating);
    
    let message = `üéæ **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥**\n\n`;
    message += `üéØ **–£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã:** ${stats.skillRating} (${levelText})\n`;
    message += `üìä **–û—á–∫–∏ —Å–∏–ª—ã:** ${stats.skillPoints}\n`;
    message += `üìà **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${stats.pointsRating}\n\n`;
    message += `üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `üìä –ü–æ–±–µ–¥: ${stats.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.losses}\n`;
    message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate}%\n`;
    message += `üéæ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${stats.totalMatches}\n\n`;
    
    if (stats.lastMatch) {
      const resultIcon = stats.lastMatch.result === 'win' ? 'üèÜ' : 'üòî';
      message += `üÜö **–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:** ${resultIcon}\n`;
      message += `üë§ –°–æ–ø–µ—Ä–Ω–∏–∫: ${stats.lastMatch.opponent} (${stats.lastMatch.opponentRating})\n`;
      message += `üèÜ –°—á–µ—Ç: ${stats.lastMatch.score}\n`;
      message += `üìÖ ${stats.lastMatch.date.toLocaleDateString('ru-RU')}\n\n`;
    }

    message += `üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leaderboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞`;

    await ctx.reply(message, { parse_mode: 'Markdown' });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRatingCommand: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

@Command('leaderboard')
async handleLeaderboardCommand(ctx: Context) {
  try {
    const [skillTop, pointsTop] = await Promise.all([
      this.ratingsService.getTopPlayersBySkill(10),
      this.ratingsService.getTopPlayersByPoints(10)
    ]);

    const buttons = [
      [
        Markup.button.callback('üéØ –ü–æ —Å–∏–ª–µ', 'leaderboard_skill'),
        Markup.button.callback('üìà –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'leaderboard_points')
      ]
    ];

    let message = `üèÜ **–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤**\n\n`;
    message += `**–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é —Å–∏–ª—ã:**\n`;
    
    skillTop.forEach((player, index) => {
      const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      message += `${index + 1}. ${name} - ${player.skillRating} (${player.skillPoints})\n`;
    });

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLeaderboardCommand: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

@Action('leaderboard_skill')
async handleSkillLeaderboard(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    const skillTop = await this.ratingsService.getTopPlayersBySkill(10);
    
    let message = `üéØ **–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é —Å–∏–ª—ã:**\n\n`;
    
    skillTop.forEach((player, index) => {
      const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      const levelText = this.getSkillLevelText(player.skillRating);
      message += `${index + 1}. **${name}**\n`;
      message += `   üéØ ${player.skillRating} (${levelText})\n`;
      message += `   üìä ${player.skillPoints} –æ—á–∫–æ–≤\n`;
      message += `   üèÜ ${player.wins}W/${player.losses}L\n\n`;
    });

    const buttons = [
      [Markup.button.callback('üìà –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'leaderboard_points')],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'leaderboard_skill')]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSkillLeaderboard: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

@Action('leaderboard_points')
async handlePointsLeaderboard(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    const pointsTop = await this.ratingsService.getTopPlayersByPoints(10);
    
    let message = `üìà **–¢–æ–ø –ø–æ –æ—á–∫–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n\n`;
    
    pointsTop.forEach((player, index) => {
      const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      message += `${index + 1}. **${name}**\n`;
      message += `   üìà ${player.pointsRating} –æ—á–∫–æ–≤\n`;
      message += `   üéØ –£—Ä–æ–≤–µ–Ω—å: ${player.skillRating}\n`;
      message += `   üèÜ ${player.wins}W/${player.losses}L\n\n`;
    });

    const buttons = [
      [Markup.button.callback('üéØ –ü–æ —Å–∏–ª–µ', 'leaderboard_skill')],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'leaderboard_points')]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePointsLeaderboard: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}




private getSkillLevelText(rating: number): string {
  if (rating < 2.5) return '–ù–æ–≤–∏—á–æ–∫';
  if (rating < 3.0) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
  if (rating < 3.5) return '–õ—é–±–∏—Ç–µ–ª—å';
  if (rating < 4.0) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª—é–±–∏—Ç–µ–ª—å';
  if (rating < 4.5) return '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  if (rating < 5.0) return '–°–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  if (rating < 5.5) return '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫';
  if (rating < 6.0) return '–í—ã—Å–æ–∫–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π';
  return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
}
  // ==================== –¢–£–†–ù–ò–†–´ ====================

  @Hears('üèÜ –¢—É—Ä–Ω–∏—Ä—ã')
  async handleTournaments(ctx: Context) {
    this.logger.log('üèÜ –¢–£–†–ù–ò–†–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', 'active_tournaments')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
        [Markup.button.callback('üìã –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'my_tournaments')],
        [Markup.button.callback('üèÜ –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è', 'tournament_history')],
      ]);

      await ctx.reply(
        `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n` +
        `–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTournaments: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  @Action('active_tournaments')
  async handleActiveTournaments(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findAll
      const tournaments = await this.tournamentsService.findAll({ 
        page: 1, 
        limit: 10 
      }) as any;

      const activeTournaments: TournamentEntity[] = tournaments.slice(0, 10);

      if (activeTournaments.length === 0) {
        await ctx.editMessageText(
          `üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n` +
          `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:**\n\n`;
      const buttons: any[] = [];

      activeTournaments.forEach((tournament: TournamentEntity, index: number) => {
        const startDate = new Date(tournament.startDate).toLocaleDateString('ru-RU');
        const regEndDate = new Date(tournament.registrationEndDate).toLocaleDateString('ru-RU');
        
        message += `${index + 1}. **${tournament.name}**\n`;
        message += `üìÖ –ù–∞—á–∞–ª–æ: ${startDate}\n`;
        message += `üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: ${regEndDate}\n`;
        message += `üë• ${tournament.currentParticipants}/${tournament.maxParticipants}\n`;
        message += `üí∞ –í–∑–Ω–æ—Å: ${tournament.entryFee || 0} –º—è—á–µ–π\n\n`;
        
        buttons.push([Markup.button.callback(
          `${index + 1}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ`, 
          `tournament_details_${tournament.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'active_tournaments')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleActiveTournaments: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  // ==================== –ö–ï–ô–°–´ ====================

  @Hears('üéÅ –ö–µ–π—Å—ã')
  async handleCases(ctx: Context) {
    this.logger.log('üéÅ –ö–ï–ô–°–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const cases = await this.casesService.getAllCases(false); // —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
      const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
      
      if (cases.length === 0) {
        await ctx.reply(
          `üéÅ **–ö–µ–π—Å—ã**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤.\n\n` +
          `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:**\n\n`;
      message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${ballsBalance} –º—è—á–µ–π\n\n`;

      const buttons: any[] = [];

      cases.forEach((caseItem: any, index: number) => {
        message += `${index + 1}. **${caseItem.name}**\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${caseItem.priceBalls} –º—è—á–µ–π\n`;
        message += `üìù ${caseItem.description}\n\n`;
        
        const canOpen = ballsBalance >= caseItem.priceBalls;
        buttons.push([Markup.button.callback(
          `${canOpen ? 'üéÅ' : 'üîí'} ${caseItem.name} (${caseItem.priceBalls} –º—è—á–µ–π)`, 
          canOpen ? `open_case_${caseItem.id}` : `case_info_${caseItem.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π', 'case_history')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCases: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤');
    }
  }

  // ==================== STORIES ====================

  @Hears('üì± Stories')
  async handleStories(ctx: Context) {
    this.logger.log('üì± STORIES –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', 'upload_photo_story')],
        [Markup.button.callback('üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ', 'upload_video_story')],
        [Markup.button.callback('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Stories', 'view_stories')],
        [Markup.button.callback('üìã –ú–æ–∏ Stories', 'my_stories')],
      ]);

      await ctx.reply(
        `üì± **Stories**\n\n` +
        `–î–µ–ª–∏—Ç–µ—Å—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStories: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Stories');
    }
  }

  // ==================== –¢–†–ï–ù–ò–†–û–í–ö–ò ====================

  @Hears('üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
  async handleTrainings(ctx: Context) {
    this.logger.log('üèÉ‚Äç‚ôÇÔ∏è –¢–†–ï–ù–ò–†–û–í–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'find_training')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'create_training')],
        [Markup.button.callback('üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'my_trainings')],
        [Markup.button.callback('üë®‚Äçüè´ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º', 'become_trainer')],
      ]);

      await ctx.reply(
        `üèÉ‚Äç‚ôÇÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
        `–ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTrainings: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }
  }

  // ==================== –ó–ê–ü–ò–°–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================

  @Hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  async handleRecordMatch(ctx: Context) {
    this.logger.log('üìù –ó–ê–ü–ò–°–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      
      this.setUserState(userId, {
        step: ProfileStep.RECORDING_MATCH,
        data: {}
      });

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéæ –û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á', 'match_type_singles')],
        [Markup.button.callback('üë• –ü–∞—Ä–Ω—ã–π –º–∞—Ç—á', 'match_type_doubles')],
      ]);

      await ctx.reply(
        `üìù **–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç—á–∞:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRecordMatch: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞');
    }
  }

  // ==================== –†–ï–§–ï–†–ê–õ–´ ====================

  @Hears('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
  async handleInviteButton(ctx: Context) {
    await this.handleInvite(ctx);
  }

  @Command('invite')
  async handleInvite(ctx: Context) {
    this.logger.log('üîó INVITE –∫–æ–º–∞–Ω–¥–∞');
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'tennistestdssbot';
      const referralCode = `ref_${user.id.toString().padStart(6, '0')}`;
      const inviteLink = `https://t.me/${botUsername}?start=${referralCode}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', 
          `https://t.me/share/url?url=${encodeURIComponent(inviteLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Ç–µ–Ω–Ω–∏—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéæ')}`
        )],
        [Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')],
      ]);

      await ctx.reply(
        `üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:**\n\n` +
        `\`${inviteLink}\`\n\n` +
        `üë• –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n` +
        `üèÜ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å—ã!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleInvite: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  }

  // ==================== AI COACH ====================

  @Hears('ü§ñ AI-Coach')
  async handleAICoach(ctx: Context) {
    this.logger.log('ü§ñ AI-COACH –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí° –°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ', 'ai_technique_tip')],
        [Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')],
        [Markup.button.callback('üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã', 'ai_game_analysis')],
        [Markup.button.callback('üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π', 'ai_goal_setting')],
      ]);

      await ctx.reply(
        `ü§ñ **AI-Coach**\n\n` +
        `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å!\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleAICoach: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ AI-Coach');
    }
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================


@On('text')
async handleText(ctx: Context) {
  if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;

  const userId = ctx.from.id.toString();
  const text = ctx.message.text;
  const userState = this.getUserState(userId);

  this.logger.log(`üìù –¢–µ–∫—Å—Ç –æ—Ç ${userId}: "${text}" (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step})`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  try {
    switch (userState.step) {
      case ProfileStep.AWAITING_FIRST_NAME:
        await this.handleFirstName(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_LAST_NAME:
        await this.handleLastName(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_CITY:
        await this.handleCity(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_COURT:
        await this.handleCourt(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_REQUEST_DATETIME:
        await this.handleRequestDateTime(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_REQUEST_LOCATION:
        await this.handleRequestLocation(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_REQUEST_DESCRIPTION:
        await this.handleRequestDescription(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_TOURNAMENT_NAME:
        await this.handleTournamentName(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION:
        await this.handleTournamentDescription(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_MATCH_OPPONENT:
        await this.handleMatchOpponent(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_MATCH_SCORE:
        await this.handleMatchScore(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_MATCH_DATE:
        await this.handleMatchDate(ctx, text, userId, userState);
        break;

      case ProfileStep.AWAITING_STORY_DESCRIPTION:
        userState.data.storyDescription = text.trim();
        await this.createStory(ctx, userId, userState);
        break;

      case ProfileStep.AWAITING_CITY_SEARCH:
        await this.handleCitySearch(ctx, text, userId, userState);
        break;

      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (!text.startsWith('/') && !['üë§', 'üéæ', 'üèÜ', 'üìù', 'üì±', 'ü§ñ', 'üèÉ‚Äç‚ôÇÔ∏è', 'üéÅ', 'üîó', 'üìç'].some(emoji => text.includes(emoji))) {
          await ctx.reply(
            `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `‚Ä¢ /start - –Ω–∞—á–∞—Ç—å\n` +
            `‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n` +
            `‚Ä¢ /debug - –æ—Ç–ª–∞–¥–∫–∞\n\n` +
            `–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
            this.getMainKeyboard()
          );
        }
        break;
    }
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}



  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô ====================


private async handleStatefulInput(ctx: Context, text: string, userId: string, userState: UserState) {
  switch (userState.step) {
    // –ü—Ä–æ—Ñ–∏–ª—å
    case ProfileStep.AWAITING_FIRST_NAME:
      await this.handleFirstName(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_LAST_NAME:
      await this.handleLastName(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_CITY:
      await this.handleCity(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_COURT:
      await this.handleCourt(ctx, text, userId, userState);
      break;

    // –ó–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É
    case ProfileStep.AWAITING_REQUEST_DATETIME:
      await this.handleRequestDateTime(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_REQUEST_LOCATION:
      await this.handleRequestLocation(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_REQUEST_DESCRIPTION:
      await this.handleRequestDescription(ctx, text, userId, userState);
      break;

    // –¢—É—Ä–Ω–∏—Ä—ã
    case ProfileStep.AWAITING_TOURNAMENT_NAME:
      await this.handleTournamentName(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION:
      await this.handleTournamentDescription(ctx, text, userId, userState);
      break;

    // –ú–∞—Ç—á–∏
    case ProfileStep.AWAITING_MATCH_OPPONENT:
      await this.handleMatchOpponent(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_MATCH_SCORE:
      await this.handleMatchScore(ctx, text, userId, userState);
      break;
    case ProfileStep.AWAITING_MATCH_DATE:
      await this.handleMatchDate(ctx, text, userId, userState);
      break;

    // Stories
    case ProfileStep.AWAITING_STORY_DESCRIPTION:
      userState.data.storyDescription = text.trim();
      await this.createStory(ctx, userId, userState);
      break;

    // –ü–æ–∏—Å–∫ –∫–æ—Ä—Ç–æ–≤
    case ProfileStep.AWAITING_CITY_SEARCH:
      await this.handleCitySearch(ctx, text, userId, userState);
      break;

    default:
      this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);
      this.clearUserState(userId);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.');
      break;
  }
}



@Hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async handleSettings(ctx: Context) {
  this.logger.log('‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
  
  try {
    if (!ctx.from) return;

    const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
      return;
    }

    const settings = await this.settingsService.getUserSettings(user.id);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üßë –ü—Ä–æ—Ñ–∏–ª—å', 'settings_profile')],
      [Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications')],
      [Markup.button.callback('üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'settings_preferences')],
      [Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')],
      [Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')],
    ]);

    const languageFlag = settings.language === 'ru' ? 'üá∑üá∫' : 'üá¨üáß';
    const notificationStatus = settings.notificationsEnabled ? 'üîî' : 'üîï';
    const profileVisibility = settings.showProfilePublicly ? 'üëÅÔ∏è' : 'üôà';

    await ctx.reply(
      `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
      `üåê **–Ø–∑—ã–∫:** ${languageFlag} ${settings.language.toUpperCase()}\n` +
      `${notificationStatus} **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** ${settings.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
      `${profileVisibility} **–ü—Ä–æ—Ñ–∏–ª—å:** ${settings.showProfilePublicly ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}\n` +
      `üèôÔ∏è **–ì–æ—Ä–æ–¥:** ${settings.city?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üéæ **–°–ø–æ—Ä—Ç:** ${settings.sport?.title || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` + // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º name –Ω–∞ title
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettings: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

@Action('settings_language')
async handleSettingsLanguage(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    if (!ctx.from) return;

    const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    if (!user) return;

    const settings = await this.settingsService.getUserSettings(user.id);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'set_language_ru')],
      [Markup.button.callback('üá¨üáß English', 'set_language_en')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')],
    ]);

    await ctx.editMessageText(
      `üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞**\n\n` +
      `–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: ${settings.language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá¨üáß English'}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettingsLanguage: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

@Action(/^set_language_(.+)$/)
async handleSetLanguage(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

    const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    if (!user) return;

    const language = ctx.callbackQuery.data.replace('set_language_', '');
    
    await this.settingsService.updateLanguage(user.id, language);

    const languageText = language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá¨üáß English';
    await ctx.reply(
      `‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${languageText}`,
      { parse_mode: 'Markdown' }
    );

    await this.handleSettings(ctx);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSetLanguage: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞');
  }
}

@Action('back_to_settings')
async handleBackToSettings(ctx: Context) {
  await this.handleSettings(ctx);
}




  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–Ø–í–û–ö ====================

  private async handleRequestDateTime(ctx: Context, text: string, userId: string, userState: UserState) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
    const match = text.match(dateTimeRegex);
    
    if (!match) {
      await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM\n` +
        `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`
      );
      return;
    }

    const [, day, month, year, hour, minute] = match;
    const dateTime = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));
    
    if (dateTime < new Date()) {
      await ctx.reply(`‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.`);
      return;
    }

    userState.data.requestDateTime = dateTime.toISOString();
    userState.step = ProfileStep.AWAITING_REQUEST_LOCATION;
    this.setUserState(userId, userState);

    await ctx.reply(
      `‚úÖ –í—Ä–µ–º—è: **${dateTime.toLocaleString('ru-RU')}**\n\n` +
      `**–®–∞–≥ 2 –∏–∑ 4**\n\n` +
      `–ì–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
      `–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ç, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞.`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleRequestLocation(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.requestLocation = text.trim();
    userState.step = ProfileStep.AWAITING_REQUEST_LEVEL;
    this.setUserState(userId, userState);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üü¢ –ù–æ–≤–∏—á–æ–∫', 'req_level_beginner')],
      [Markup.button.callback('üîµ –õ—é–±–∏—Ç–µ–ª—å', 'req_level_amateur')],
      [Markup.button.callback('üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π', 'req_level_confident')],
      [Markup.button.callback('üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π', 'req_level_tournament')],
      [Markup.button.callback('üî¥ –ü—Ä–æ—Ñ–∏', 'req_level_semi_pro')],
      [Markup.button.callback('‚ö™ –õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å', 'req_level_any')],
    ]);

    await ctx.reply(
      `‚úÖ –ú–µ—Å—Ç–æ: **${text}**\n\n` +
      `**–®–∞–≥ 3 –∏–∑ 4**\n\n` +
      `–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤ –∏—â–µ—Ç–µ?`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  }

  private async handleRequestDescription(ctx: Context, text: string, userId: string, userState: UserState) {
    userState.data.requestDescription = text.trim();
    this.setUserState(userId, userState);

    await this.createGameRequest(ctx, userId, userState);
  }









private async createGameRequest(ctx: Context, userId: string, userState: UserState) {
  try {
    const user = await this.usersService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç CreateRequestDto –±–µ–∑ playerLevel
    const requestData: CreateRequestDto = {
      type: RequestType.GAME,
      title: `–ò–≥—Ä–∞ ${new Date(userState.data.requestDateTime!).toLocaleDateString('ru-RU')}`,
      description: userState.data.requestDescription || '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å',
      gameMode: GameMode.SINGLES,
      dateTime: new Date(userState.data.requestDateTime!),
      location: userState.data.requestLocation!,
      locationName: userState.data.requestLocation!, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      maxPlayers: 2,
      // –£–±–∏—Ä–∞–µ–º playerLevel —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
      paymentType: 'FREE',
      ratingType: 'NTRP',
      formatInfo: {
        level: userState.data.requestLevel || 'ANY' // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ formatInfo
      },
    };

    const request = await this.requestsService.create(user.id.toString(), requestData);

    const summaryMessage = `‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
      `üìÖ **–í—Ä–µ–º—è:** ${new Date(requestData.dateTime).toLocaleString('ru-RU')}\n` +
      `üìç **–ú–µ—Å—Ç–æ:** ${requestData.location}\n` +
      `üéØ **–£—Ä–æ–≤–µ–Ω—å:** ${this.getLevelText(userState.data.requestLevel || 'ANY')}\n` +
      `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${requestData.description}\n\n` +
      `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;

    await ctx.reply(summaryMessage, { 
      parse_mode: 'Markdown',
      reply_markup: this.getMainKeyboard().reply_markup
    });

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
  // ==================== –î–û–ë–ê–í–ò–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ ====================


private async handleFirstName(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.firstName = text.trim();
  userState.step = ProfileStep.AWAITING_LAST_NAME;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –ò–º—è: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:`,
    { parse_mode: 'Markdown' }
  );
}

private async handleLastName(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.lastName = text.trim();
  userState.step = ProfileStep.AWAITING_CITY;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –§–∞–º–∏–ª–∏—è: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:`,
    { parse_mode: 'Markdown' }
  );
}

private async handleTournamentName(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.tournamentName = text.trim();
  userState.step = ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`,
    { parse_mode: 'Markdown' }
  );
}

private async handleMatchOpponent(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.matchOpponent = text.trim();
  userState.step = ProfileStep.AWAITING_MATCH_SCORE;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –°–æ–ø–µ—Ä–Ω–∏–∫: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6-4, 6-2):`,
    { parse_mode: 'Markdown' }
  );
}

private async handleCity(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.city = text.trim();
  userState.step = ProfileStep.AWAITING_COURT;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –ì–æ—Ä–æ–¥: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç –∏–ª–∏ –∫–ª—É–±:`,
    { parse_mode: 'Markdown' }
  );
}

private async handleCourt(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.preferredCourt = text.trim();
  await this.completeProfileSetup(ctx, userId, userState);
}

private async handleTournamentDescription(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.tournamentDescription = text.trim();
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
  await this.createTournament(ctx, userId, userState);
}






private async completeProfileSetup(ctx: Context, userId: string, userState: UserState) {
  try {
    const user = await this.usersService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
    await this.usersService.updateProfile(user.id.toString(), {
      city: userState.data.city
      // –£–±–∏—Ä–∞–µ–º profileStepOneCompleted —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ UpdateProfileDto
    });

    await ctx.reply(
      `‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n` +
      `üèôÔ∏è –ì–æ—Ä–æ–¥: ${userState.data.city}\n` +
      `üéæ –ö–æ—Ä—Ç: ${userState.data.preferredCourt}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!`,
      { 
        parse_mode: 'Markdown',
        reply_markup: this.getMainKeyboard().reply_markup
      }
    );

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}




private async createTournament(ctx: Context, userId: string, userState: UserState) {
  try {
    const user = await this.usersService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π CreateTournamentDto
    const tournamentData = {
      title: userState.data.tournamentName!,
      description: userState.data.tournamentDescription!,
      type: TournamentType.SINGLE_ELIMINATION, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum
      startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
      minPlayers: 4,
      maxPlayers: 16,
      isRanked: true,
      locationName: userState.data.city || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    };

    await this.tournamentsService.create(user.id.toString(), tournamentData);

    await ctx.reply(
      `üèÜ **–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!**\n\n` +
      `üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${tournamentData.title}\n` +
      `üìñ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${tournamentData.description}\n` +
      `üìÖ **–ù–∞—á–∞–ª–æ:** ${tournamentData.startDate.toLocaleDateString('ru-RU')}\n` +
      `üèÖ **–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π:** ${tournamentData.isRanked ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `üë• **–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${tournamentData.maxPlayers}\n\n` +
      `–¢—É—Ä–Ω–∏—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`,
      { 
        parse_mode: 'Markdown',
        reply_markup: this.getMainKeyboard().reply_markup
      }
    );

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
  }
}


private async handleMatchScore(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.matchScore = text.trim();
  userState.step = ProfileStep.AWAITING_MATCH_DATE;
  this.setUserState(userId, userState);

  await ctx.reply(
    `‚úÖ –°—á–µ—Ç: **${text}**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):`,
    { parse_mode: 'Markdown' }
  );
}

private async handleMatchDate(ctx: Context, text: string, userId: string, userState: UserState) {
  userState.data.matchDate = text.trim();
  await this.createMatch(ctx, userId, userState);
}

private async handleCitySearch(ctx: Context, text: string, userId: string, userState: UserState) {
  const city = text.trim();
  
  try {
    const courtsMessage = this.generateCityCortsMessage(city);
    
    await ctx.reply(courtsMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.getMainKeyboard().reply_markup
    });

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ—Ä—Ç–æ–≤: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Ä—Ç–æ–≤');
  }
}


  
  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

private getLevelText(level: string): string {
  const levels: { [key: string]: string } = {
    'beginner': 'üü¢ –ù–æ–≤–∏—á–æ–∫',
    'amateur': 'üîµ –õ—é–±–∏—Ç–µ–ª—å', 
    'confident': 'üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π',
    'tournament': 'üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
    'semi_pro': 'üî¥ –ü—Ä–æ—Ñ–∏',
    'any': '‚ö™ –õ—é–±–æ–π',
    'BEGINNER': 'üü¢ –ù–æ–≤–∏—á–æ–∫',
    'AMATEUR': 'üîµ –õ—é–±–∏—Ç–µ–ª—å', 
    'CONFIDENT': 'üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π',
    'TOURNAMENT': 'üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
    'SEMI_PRO': 'üî¥ –ü—Ä–æ—Ñ–∏',
    'ANY': '‚ö™ –õ—é–±–æ–π'
  };
  return levels[level] || '‚ö™ –õ—é–±–æ–π';
}

  private getFrequencyText(frequency: string): string {
    const freqMap = {
      'ONCE': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
      'TWICE': '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'THREE_TIMES': '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'FOUR_PLUS': '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'
    };
    return freqMap[frequency as keyof typeof freqMap] || frequency;
  }

  private getNtrpRating(level: string): number {
    const ratingMap = {
      'BEGINNER': 2.0,
      'AMATEUR': 3.0,
      'CONFIDENT': 4.0,
      'TOURNAMENT': 5.0,
      'SEMI_PRO': 5.5
    };
    return ratingMap[level as keyof typeof ratingMap] || 3.0;
  }

  // ==================== –î–ï–ô–°–¢–í–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò ====================

  @Action(/^open_case_(\d+)$/)
  async handleOpenCase(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    if (!ctx.from) return;

    const caseId = parseInt(ctx.callbackQuery.data.split('_')[2]);
    
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const result = await this.caseOpeningService.openCase(user.id.toString(), caseId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ', 'back_to_cases')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'case_history')],
      ]);

      await ctx.editMessageText(
        `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
        `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **${result.winning.item.name}**\n\n` +
        `üìù ${result.winning.item.description}\n\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º—è—á–µ–π: ${result.opening.ballsSpent}`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ${error}`);
      
      if (error instanceof Error && error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π')) {
        await ctx.editMessageText(
          `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π**\n\n` +
          `–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—è—á–µ–π.\n` +
          `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!`,
          { parse_mode: 'Markdown' }
        );
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
      }
    }
  }

  @Action(/^respond_request_(\d+)$/)
  async handleRespondToRequest(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    if (!ctx.from) return;

    const requestId = parseInt(ctx.callbackQuery.data.split('_')[2]);
    
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }



      await ctx.editMessageText(
        `‚úÖ **–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
        `–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n` +
        `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    }
  }

  // ==================== –ö–û–ú–ê–ù–î–´ –û–¢–õ–ê–î–ö–ò ====================

  @Command('debug')
  async handleDebug(ctx: Context) {
    this.logger.log('üêõ DEBUG –∫–æ–º–∞–Ω–¥–∞');
    
    const userId = ctx.from?.id.toString();
    const userState = userId ? this.getUserState(userId) : null;
    
    const debugInfo = {
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      updateType: ctx.updateType,
      text: ctx.message && 'text' in ctx.message ? ctx.message.text : 'no text',
      userState: userState
    };

    await ctx.reply(
      `üêõ **Debug Info:**\n` +
      `User ID: ${debugInfo.userId}\n` +
      `Chat ID: ${debugInfo.chatId}\n` +
      `Update: ${debugInfo.updateType}\n` +
      `Text: ${debugInfo.text}\n` +
      `State: ${JSON.stringify(debugInfo.userState)}`,
      { parse_mode: 'Markdown' }
    );
  }

  @Command('menu')
  async handleMenu(ctx: Context) {
    this.logger.log('üìã MENU –∫–æ–º–∞–Ω–¥–∞');
    
    await ctx.reply(
      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      this.getMainKeyboard()
    );
  }

  @Action('referral_stats')
  async handleReferralStats(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É (–ø–æ–∑–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å ReferralsService)
      const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π**\n\n` +
        `üë• **–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** 0\n` +
        `‚ö° **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:** 0\n` +
        `üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:** 0\n` +
        `üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:** 0\n` +
        `üìÖ **–ó–∞ –º–µ—Å—è—Ü:** 0\n\n` +
        `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** 0\n` +
        `üíé **–ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏:** 0\n\n` +
        `üöÄ **–°–∫–æ—Ä–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞!**`;

      await ctx.editMessageText(message, { parse_mode: 'Markdown' });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleReferralStats: ${error instanceof Error ? error.message : String(error)}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }


  // ==================== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================


@Action('my_requests')
async handleMyRequests(ctx: Context) {
  await ctx.answerCbQuery();
  
  if (!ctx.from) return;

  try {
    const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findAll —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    const allRequests = await this.requestsService.findAll({ page: 1, limit: 100 }) as any[];
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
    const myRequests = allRequests.filter((req: any) => {
      const creatorId = req.creatorId || req.creator?.id;
      return creatorId && creatorId.toString() === user.id.toString();
    });
    
    if (myRequests.length === 0) {
      await ctx.editMessageText(
        `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏**\n\n` +
        `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
        `–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!`,
        { 
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
          ]).reply_markup
        }
      );
      return;
    }

    let message = `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏ (${myRequests.length}):**\n\n`;
    const buttons: any[] = [];

    myRequests.slice(0, 5).forEach((request: any, index: number) => {
      const datetime = request.dateTime || request.scheduledTime 
        ? new Date(request.dateTime || request.scheduledTime).toLocaleString('ru-RU')
        : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const title = request.title || `–ó–∞—è–≤–∫–∞ ${index + 1}`;
      const location = request.locationName || request.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      const currentPlayers = request.currentPlayers || 0;
      const maxPlayers = request.maxPlayers || 2;
      
      message += `${index + 1}. **${title}**\n`;
      message += `üìÖ ${datetime}\n`;
      message += `üìç ${location}\n`;
      message += `üë• ${currentPlayers}/${maxPlayers}\n\n`;
      
      buttons.push([
        Markup.button.callback(`‚úèÔ∏è ${index + 1}`, `edit_request_${request.id}`),
        Markup.button.callback(`‚ùå ${index + 1}`, `delete_request_${request.id}`)
      ]);
    });

    buttons.push([Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', 'create_request')]);
    buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);

    const keyboard = Markup.inlineKeyboard(buttons);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMyRequests: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫');
  }
}



  @Action('active_requests')
  async handleActiveRequests(ctx: Context) {
    await ctx.answerCbQuery();
    await this.handleFindGame(ctx);
  }

  @Action('back_to_play')
  async handleBackToPlay(ctx: Context) {
    await ctx.answerCbQuery();
    await this.handlePlay(ctx);
  }


@Action(/^req_level_(.+)$/)
async handleRequestLevelCallback(ctx: Context) {
  await ctx.answerCbQuery();
  
  if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

  const userId = ctx.from.id.toString();
  const userState = this.getUserState(userId);
  
  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ level –∏–∑ callback_data
  const callbackData = ctx.callbackQuery.data;
  const level = callbackData.replace('req_level_', '');

  userState.data.requestLevel = level;
  userState.step = ProfileStep.AWAITING_REQUEST_DESCRIPTION;
  this.setUserState(userId, userState);

  await ctx.editMessageText(
    `‚úÖ –£—Ä–æ–≤–µ–Ω—å: **${this.getLevelText(level)}**\n\n` +
    `**–®–∞–≥ 4 –∏–∑ 4**\n\n` +
    `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`,
    { parse_mode: 'Markdown' }
  );
}

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–£–†–ù–ò–†–û–í ====================

  @Action('create_tournament')
  async handleCreateTournament(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.AWAITING_TOURNAMENT_NAME,
      data: {}
    });

    await ctx.editMessageText(
      `üèÜ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞**\n\n` +
      `**–®–∞–≥ 1 –∏–∑ 5**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('my_tournaments')
  async handleMyTournaments(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìã **–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('tournament_history')
  async handleTournamentHistory(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üèÜ **–ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —É—á–∞—Å—Ç–∏–π –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.`,
      { parse_mode: 'Markdown' }
    );
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–†–ï–ù–ò–†–û–í–û–ö ====================

  @Action('find_training')
  async handleFindTraining(ctx: Context) {
    await ctx.answerCbQuery();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
      const trainings = await this.trainingsService.findAll({ page: 1, limit: 10 }) as any[];
      
      if (trainings.length === 0) {
        await ctx.editMessageText(
          `üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n` +
          `üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n` +
          `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let message = `üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n`;
      const buttons: any[] = [];

      trainings.slice(0, 5).forEach((training: any, index: number) => {
        const datetime = new Date(training.datetime).toLocaleString('ru-RU');
        message += `${index + 1}. **${training.title}**\n`;
        message += `üë®‚Äçüè´ ${training.trainer?.first_name || '–¢—Ä–µ–Ω–µ—Ä'}\n`;
        message += `üìÖ ${datetime}\n`;
        message += `üìç ${training.location}\n`;
        message += `üë• ${training.currentParticipants || 0}/${training.maxParticipants}\n`;
        message += `üí∞ ${training.price || 0} —Ä—É–±.\n\n`;
        
        buttons.push([Markup.button.callback(
          `${index + 1}. –ó–∞–ø–∏—Å–∞—Ç—å—Å—è`, 
          `book_training_${training.id}`
        )]);
      });

      buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_training')]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindTraining: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }
  }

  @Action('my_trainings')
  async handleMyTrainings(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìã **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('become_trainer')
  async handleBecomeTrainer(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üë®‚Äçüè´ **–°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—É—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!`,
      { parse_mode: 'Markdown' }
    );
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò STORIES ====================

  @Action('upload_photo_story')
  async handleUploadPhotoStory(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.AWAITING_STORY_MEDIA,
      data: { storyType: 'PHOTO' }
    });

    await ctx.editMessageText(
      `üì∑ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ**\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('upload_video_story')
  async handleUploadVideoStory(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.AWAITING_STORY_MEDIA,
      data: { storyType: 'VIDEO' }
    });

    await ctx.editMessageText(
      `üé• **–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ**\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`,
      { parse_mode: 'Markdown' }
    );
  }



@Action('view_stories')
async handleViewStories(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º
    await ctx.editMessageText(
      `üëÄ **Stories**\n\n` +
      `üòî –ü–æ–∫–∞ –Ω–µ—Ç Stories.\n\n` +
      `–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π!`,
      { parse_mode: 'Markdown' }
    );

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleViewStories: ${error}`);
    await ctx.editMessageText(
      `üëÄ **Stories**\n\n` +
      `üòî –ü–æ–∫–∞ –Ω–µ—Ç Stories.\n\n` +
      `–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π!`,
      { parse_mode: 'Markdown' }
    );
  }
}
  @Action('my_stories')
  async handleMyStories(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìã **–ú–æ–∏ Stories**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ Stories.`,
      { parse_mode: 'Markdown' }
    );
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ï–ô–°–û–í ====================


@Action(/^open_case_(\d+)$/)
async handleOpenCaseAction(ctx: Context) {
  await ctx.answerCbQuery();
  
  if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ caseId –∏–∑ callback_data
  const callbackData = ctx.callbackQuery.data;
  const caseId = parseInt(callbackData.replace('open_case_', ''));
  
  try {
    const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const result = await this.caseOpeningService.openCase(user.id.toString(), caseId);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ', 'back_to_cases')],
      [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'case_history')],
    ]);

    await ctx.editMessageText(
      `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
      `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **${result.winning.item.name}**\n\n` +
      `üìù ${result.winning.item.description}\n\n` +
      `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º—è—á–µ–π: ${result.opening.ballsSpent}`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ${error}`);
    
    if (error instanceof Error && error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π')) {
      await ctx.editMessageText(
        `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π**\n\n` +
        `–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—è—á–µ–π.\n` +
        `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!`,
        { parse_mode: 'Markdown' }
      );
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
    }
  }
}

  @Action('case_history')
  async handleCaseHistoryAction(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìä **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–µ–π—Å–æ–≤.`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('back_to_cases')
  async handleBackToCases(ctx: Context) {
    await ctx.answerCbQuery();
    await this.handleCases(ctx);
  }

  // ==================== AI COACH ====================

  @Action('ai_technique_tip')
  async handleAITechniqueTip(ctx: Context) {
    await ctx.answerCbQuery();
    
    const tips = [
      "üéæ **–°–æ–≤–µ—Ç –ø–æ –ø–æ–¥–∞—á–µ:** –î–µ—Ä–∂–∏—Ç–µ —Ä–∞–∫–µ—Ç–∫—É –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Ö–≤–∞—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∞—á–∏.",
      "üéæ **–°–æ–≤–µ—Ç –ø–æ —É–¥–∞—Ä—É:** –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º—è—á–æ–º –≥–ª–∞–∑–∞–º–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ä–∞–∫–µ—Ç–∫–æ–π.",
      "üéæ **–°–æ–≤–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é:** –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ü–µ–Ω—Ç—Ä –∫–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞.",
      "üéæ **–°–æ–≤–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:** –ò–≥—Ä–∞–π—Ç–µ –≤ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –æ–±—ã—á–Ω–æ —ç—Ç–æ –±—ç–∫—Ö–µ–Ω–¥.",
      "üéæ **–°–æ–≤–µ—Ç –ø–æ —Ñ–∏–∑–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:** –£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç–µ –Ω–æ–≥ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã."
    ];
    
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    
    await ctx.editMessageText(
      `üí° **–°–æ–≤–µ—Ç –æ—Ç AI-Coach:**\n\n${randomTip}\n\n` +
      `–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')],
          [Markup.button.callback('üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç', 'ai_technique_tip')]
        ]).reply_markup
      }
    );
  }

  @Action('ai_training_plan')
  async handleAITrainingPlan(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üèÉ‚Äç‚ôÇÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
      `**–†–∞–∑–º–∏–Ω–∫–∞ (10 –º–∏–Ω):**\n` +
      `‚Ä¢ –õ–µ–≥–∫–∏–π –±–µ–≥ –≤–æ–∫—Ä—É–≥ –∫–æ—Ä—Ç–∞\n` +
      `‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞ –º—ã—à—Ü\n` +
      `‚Ä¢ –ú–∞—Ö–∏ —Ä–∞–∫–µ—Ç–∫–æ–π\n\n` +
      `**–¢–µ—Ö–Ω–∏–∫–∞ (20 –º–∏–Ω):**\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—Ö–µ–Ω–¥–∞ —É —Å—Ç–µ–Ω–∫–∏\n` +
      `‚Ä¢ –ü–æ–¥–∞—á–∏ –≤ –º–∏—à–µ–Ω–∏\n` +
      `‚Ä¢ –î–≤–∏–∂–µ–Ω–∏–µ –Ω–æ–≥\n\n` +
      `**–ò–≥—Ä–∞ (20 –º–∏–Ω):**\n` +
      `‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π\n\n` +
      `**–ó–∞–º–∏–Ω–∫–∞ (10 –º–∏–Ω):**\n` +
      `‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞\n` +
      `‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã', 'ai_game_analysis')],
          [Markup.button.callback('üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏', 'ai_goal_setting')]
        ]).reply_markup
      }
    );
  }

  @Action('ai_game_analysis')
  async handleAIGameAnalysis(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìä **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∏–≥—Ä—ã**\n\n` +
      `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö:\n\n` +
      `**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**\n` +
      `‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞\n` +
      `‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞\n\n` +
      `**–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n` +
      `üìà –ë—ç–∫—Ö–µ–Ω–¥ —É–¥–∞—Ä—ã\n` +
      `üìà –ò–≥—Ä–∞ —É —Å–µ—Ç–∫–∏\n` +
      `üìà –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\n\n` +
      `**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n` +
      `üéØ –ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –±—ç–∫—Ö–µ–Ω–¥\n` +
      `üéØ –ò–∑—É—á–∏—Ç–µ —Ç–∞–∫—Ç–∏–∫—É –∏–≥—Ä—ã\n` +
      `üéØ –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üí° –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç', 'ai_technique_tip')]
        ]).reply_markup
      }
    );
  }

  @Action('ai_goal_setting')
  async handleAIGoalSetting(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üéØ **–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π**\n\n` +
      `**–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (1 –º–µ—Å—è—Ü):**\n` +
      `‚Ä¢ –í—ã–∏–≥—Ä–∞—Ç—å 3 –º–∞—Ç—á–∞ –ø–æ–¥—Ä—è–¥\n` +
      `‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏ –¥–æ 60%\n` +
      `‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n\n` +
      `**–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (3 –º–µ—Å—è—Ü–∞):**\n` +
      `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 100 –ø—É–Ω–∫—Ç–æ–≤\n` +
      `‚Ä¢ –û—Å–≤–æ–∏—Ç—å —É–¥–∞—Ä —Å –ª–µ—Ç–∞\n` +
      `‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\n` +
      `**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (1 –≥–æ–¥):**\n` +
      `‚Ä¢ –î–æ–π—Ç–∏ –¥–æ —Ñ–∏–Ω–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞\n` +
      `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n` +
      `‚Ä¢ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')]
        ]).reply_markup
      }
    );
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–§–ò–õ–Ø ====================

  @Action('setup_profile')
  async handleSetupProfileAction(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.AWAITING_FIRST_NAME,
      data: {}
    });

    await ctx.editMessageText(
      `üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
      `–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('detailed_stats')
  async handleDetailedStats(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–µ–π –∏–≥—Ä—ã.`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('match_history')
  async handleMatchHistoryAction(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üéæ **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π.`,
      { parse_mode: 'Markdown' }
    );
  }


@Action('achievements')
async handleAchievements(ctx: Context) {
  await ctx.answerCbQuery();
  
  try {
    const user = await this.usersService.findByTelegramId(ctx.from!.id.toString());
    if (!user) return;

    const achievements = await this.achievementsService.getUserAchievements(user.id.toString());
    
    if (achievements.length === 0) {
      await ctx.editMessageText(
        `üèÖ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n` +
        `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n` +
        `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!`,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    let message = `üèÖ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è** (${achievements.length}):\n\n`;
    
    achievements.slice(0, 10).forEach((achievement, index) => {
      const def = achievement.definition;
      message += `${def.icon} **${def.name}**\n`;
      message += `${def.description}\n`;
      message += `üìÖ ${achievement.awardedAt.toLocaleDateString('ru-RU')}\n\n`;
    });

    if (achievements.length > 10) {
      message += `...–∏ –µ—â–µ ${achievements.length - 10} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n`;
    }

    message += `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥! üéØ`;

    await ctx.editMessageText(message, { parse_mode: 'Markdown' });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleAchievements: ${error instanceof Error ? error.message : String(error)}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
}

async notifyNewAchievement(userId: string, achievementCode: string) {
  try {
    const user = await this.usersService.findById(userId);
    if (!user || !user.telegram_id) return;

    const definitions = await this.achievementsService.getAllDefinitions();
    const achievement = definitions.find((def: any) => def.code === achievementCode);
    
    if (!achievement) return;

    const message = `üèÜ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
      `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n` +
      `${achievement.icon} **${achievement.name}**\n\n` +
      `${achievement.description}`;

    await this.bot.telegram.sendMessage(user.telegram_id, message, {
        parse_mode: 'Markdown',
    });

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: ${error}`);
  }
}
  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ê–¢–ß–ï–ô ====================

  @Action('match_type_singles')
  async handleMatchTypeSingles(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    const userState = this.getUserState(userId);
    
    userState.data.matchType = 'SINGLES';
    userState.step = ProfileStep.AWAITING_MATCH_OPPONENT;
    this.setUserState(userId, userState);

    await ctx.editMessageText(
      `üéæ **–û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('match_type_doubles')
  async handleMatchTypeDoubles(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    const userState = this.getUserState(userId);
    
    userState.data.matchType = 'DOUBLES';
    userState.step = ProfileStep.AWAITING_MATCH_OPPONENT;
    this.setUserState(userId, userState);

    await ctx.editMessageText(
      `üë• **–ü–∞—Ä–Ω—ã–π –º–∞—Ç—á**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤:`,
      { parse_mode: 'Markdown' }
    );
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê ====================

  @On('photo')
  async handlePhoto(ctx: Context) {
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    const userState = this.getUserState(userId);

    if (userState.step === ProfileStep.AWAITING_STORY_MEDIA && userState.data.storyType === 'PHOTO') {
      const photo = (ctx.message as any).photo;
      const fileId = photo[photo.length - 1].file_id;
      
      userState.data.storyMediaId = fileId;
      userState.step = ProfileStep.AWAITING_STORY_DESCRIPTION;
      this.setUserState(userId, userState);

      await ctx.reply(
        `üì∑ **–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!**\n\n` +
        `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`,
        { parse_mode: 'Markdown' }
      );
    }
  }

  @On('video')
  async handleVideo(ctx: Context) {
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    const userState = this.getUserState(userId);

    if (userState.step === ProfileStep.AWAITING_STORY_MEDIA && userState.data.storyType === 'VIDEO') {
      const video = (ctx.message as any).video;
      const fileId = video.file_id;
      
      userState.data.storyMediaId = fileId;
      userState.step = ProfileStep.AWAITING_STORY_DESCRIPTION;
      this.setUserState(userId, userState);

      await ctx.reply(
        `üé• **–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!**\n\n` +
        `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`,
        { parse_mode: 'Markdown' }
      );
    }
  }

  // ==================== –ü–û–ò–°–ö –ö–û–†–¢–û–í ====================

  @Hears('üìç –ù–∞–π—Ç–∏ –∫–æ—Ä—Ç—ã')
  async handleFindCourtsButton(ctx: Context) {
    await this.handleFindCourts(ctx);
  }

  async handleFindCourts(ctx: Context) {
    this.logger.log('üìç –ù–ê–ô–¢–ò –ö–û–†–¢–´ —Ñ—É–Ω–∫—Ü–∏—è');
    
    try {
      if (!ctx.from) return;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üèôÔ∏è –ú–æ—Å–∫–≤–∞', 'courts_moscow')],
        [Markup.button.callback('üèôÔ∏è –°–ü–±', 'courts_spb')],
        [Markup.button.callback('üåÜ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', 'courts_other_city')],
        [Markup.button.callback('üìç –ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', 'courts_location')],
      ]);

      await ctx.reply(
        `üìç **–ü–æ–∏—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindCourts: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Ä—Ç–æ–≤');
    }
  }

  @Action('courts_moscow')
  async handleCourtsMoscow(ctx: Context) {
    await ctx.answerCbQuery();
    await this.showCourtsForCity(ctx, '–ú–æ—Å–∫–≤–∞');
  }

  @Action('courts_spb')
  async handleCourtsSpb(ctx: Context) {
    await ctx.answerCbQuery();
    await this.showCourtsForCity(ctx, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥');
  }

  @Action('courts_other_city')
  async handleCourtsOtherCity(ctx: Context) {
    await ctx.answerCbQuery();
    
    if (!ctx.from) return;

    const userId = ctx.from.id.toString();
    
    this.setUserState(userId, {
      step: ProfileStep.AWAITING_CITY_SEARCH,
      data: {}
    });

    await ctx.editMessageText(
      `üåÜ **–ü–æ–∏—Å–∫ –∫–æ—Ä—Ç–æ–≤**\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`,
      { parse_mode: 'Markdown' }
    );
  }

  @Action('courts_location')
  async handleCourtsLocation(ctx: Context) {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üìç **–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
      `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ—Ä—Ç—ã –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.`,
      { parse_mode: 'Markdown' }
    );
  }

  private async showCourtsForCity(ctx: Context, city: string) {
    const courtsMessage = this.generateCityCortsMessage(city);
    
    await ctx.editMessageText(courtsMessage, {
      parse_mode: 'Markdown'
    });
  }

  // ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

private generateCityCortsMessage(city: string): string {
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  const courtsByCity: { [key: string]: any[] } = {
    '–ú–æ—Å–∫–≤–∞': [
      {
        name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
        address: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 16',
        price: '2000-3500 —Ä—É–±/—á–∞—Å',
        rating: '4.9',
        courts: 12,
        features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏', '–î—É—à–µ–≤—ã–µ', '–ü—Ä–æ–∫–∞—Ç —Ä–∞–∫–µ—Ç–æ–∫']
      },
      {
        name: '–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"',
        address: '–õ—É–∂–Ω–µ—Ü–∫–∞—è –Ω–∞–±., 24',
        price: '1500-2800 —Ä—É–±/—á–∞—Å',
        rating: '4.7',
        courts: 8,
        features: ['–ö—Ä—ã—Ç—ã–µ/–æ—Ç–∫—Ä—ã—Ç—ã–µ', '–•–∞—Ä–¥/–≥—Ä—É–Ω—Ç', '–û—Å–≤–µ—â–µ–Ω–∏–µ', '–ö–∞—Ñ–µ']
      },
      {
        name: '–ö–ª—É–± "–°–ø–∞—Ä—Ç–∞–∫"',
        address: '—É–ª. –î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤—Å–∫–∞—è, 14',
        price: '1800-3000 —Ä—É–±/—á–∞—Å',
        rating: '4.6',
        courts: 6,
        features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–¢—Ä–µ–Ω–µ—Ä—ã', '–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è']
      }
    ],
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': [
      {
        name: '–¢–ö "–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π"',
        address: '–ü–µ—Ç—Ä–æ–≤—Å–∫–∞—è –Ω–∞–±., 4',
        price: '1200-2200 —Ä—É–±/—á–∞—Å',
        rating: '4.8',
        courts: 10,
        features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–í–∏–¥ –Ω–∞ –ù–µ–≤—É', '–ü–∞—Ä–∫–æ–≤–∫–∞']
      },
      {
        name: '–ö–ª—É–± "–î–∏–Ω–∞–º–æ"',
        address: '–ø—Ä. –î–∏–Ω–∞–º–æ, 44',
        price: '1000-1800 —Ä—É–±/—á–∞—Å',
        rating: '4.5',
        courts: 8,
        features: ['–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–ì—Ä—É–Ω—Ç', '–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω']
      }
    ]
  };

  const courts = courtsByCity[city] || [
    {
      name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–±',
      address: '–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞',
      price: '1000-2000 —Ä—É–±/—á–∞—Å',
      rating: '4.5',
      courts: 4,
      features: ['–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥']
    }
  ];

  let message = `üèôÔ∏è **–ö–æ—Ä—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ ${city}:**\n\n`;

  courts.forEach((court, index) => {
    message += `${index + 1}. **${court.name}**\n`;
    message += `üìç ${court.address}\n`;
    message += `üí∞ ${court.price}\n`;
    message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${court.rating}\n`;
    message += `üéæ –ö–æ—Ä—Ç–æ–≤: ${court.courts}\n`;
    message += `‚ú® ${court.features.join(', ')}\n\n`;
  });

  message += `üìû **–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n`;
  message += `‚Ä¢ –ó–≤–æ–Ω–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é\n`;
  message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n`;
  message += `‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n\n`;
  message += `üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ä–∞–Ω–µ–µ!`;

  return message;
}


private async createMatch(ctx: Context, userId: string, userState: UserState) {
  try {
    const user = await this.usersService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å—á–µ—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    const score = userState.data.matchScore || '';
    const isWin = score.includes('6-') && score.split(' ')[0].startsWith('6');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É CreateMatchDto
    const matchData = {
      opponentName: userState.data.matchOpponent!,
      opponentId: null,
      score: userState.data.matchScore!,
      matchDate: new Date(userState.data.matchDate!),
      type: userState.data.matchType === 'DOUBLES' ? MatchType.DOUBLES : MatchType.ONE_ON_ONE, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum
      result: isWin ? 'WIN' as const : 'LOSS' as const,
      isRanked: false,
      location: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    await this.matchesService.create(user.id.toString(), matchData);

    const summaryMessage = `üéæ **–ú–∞—Ç—á –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
      `üë§ **–°–æ–ø–µ—Ä–Ω–∏–∫:** ${matchData.opponentName}\n` +
      `üèÜ **–°—á–µ—Ç:** ${matchData.score}\n` +
      `üìÖ **–î–∞—Ç–∞:** ${matchData.matchDate.toLocaleDateString('ru-RU')}\n` +
      `üéØ **–¢–∏–ø:** ${matchData.type === MatchType.ONE_ON_ONE ? '–û–¥–∏–Ω–æ—á–Ω—ã–π' : '–ü–∞—Ä–Ω—ã–π'}\n` +
      `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${matchData.result === 'WIN' ? '–ü–æ–±–µ–¥–∞ üèÜ' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n` +
      `–ú–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!`;

    await ctx.reply(summaryMessage, { 
      parse_mode: 'Markdown',
      reply_markup: this.getMainKeyboard().reply_markup
    });

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞');
  }
}

private async createStory(ctx: Context, userId: string, userState: UserState) {
  try {
    const user = await this.usersService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const storyData = {
      description: userState.data.storyDescription || '',
      mediaUrl: userState.data.storyMediaId || '',
      type: userState.data.storyType || 'PHOTO',
    };

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º
    this.logger.log(`Story —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞): ${JSON.stringify(storyData)}`);

    await ctx.reply(
      `üì∏ **–ò—Å—Ç–æ—Ä–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!**\n\n` +
      `${storyData.description ? `üìù ${storyData.description}` : ''}\n\n` +
      `–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Stories!`,
      { 
        parse_mode: 'Markdown',
        reply_markup: this.getMainKeyboard().reply_markup
      }
    );

    this.clearUserState(userId);

  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
}


 

}