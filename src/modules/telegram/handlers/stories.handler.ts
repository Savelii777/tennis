import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';
import { StoriesService } from '../../stories/application/services/stories.service';
import { UsersService } from '../../users/application/services/users.service';
import { MediaType } from '@prisma/client';
import { CreateStoryDto } from '../../stories/application/dto/create-story.dto';
import { ProfileStep, UserState } from '../interfaces/profile-state.enum'; // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

@Injectable()
export class StoriesHandler {
  private readonly logger = new Logger(StoriesHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService,
    private readonly storiesService: StoriesService,
    private readonly usersService: UsersService,
  ) {}

  register(bot: Telegraf<Context>) {
    bot.action('stories', this.handleStories.bind(this));
    bot.action('create_story', this.handleCreateStory.bind(this));
    bot.action('my_stories', this.handleMyStories.bind(this));
    bot.action('popular_stories', this.handlePopularStories.bind(this));
    bot.action('recent_stories', this.handleRecentStories.bind(this));
    bot.action('back_to_stories', this.handleBackToStories.bind(this));
  }

  async handleStories(ctx: Context) {
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Story', 'create_story')],
        [Markup.button.callback('üìã –ú–æ–∏ Stories', 'my_stories')],
        [Markup.button.callback('üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', 'popular_stories')],
        [Markup.button.callback('üïê –ù–µ–¥–∞–≤–Ω–∏–µ', 'recent_stories')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'main_menu')],
      ]);
      
      await ctx.editMessageText('üì± **Stories**\n\n–î–µ–ª–∏—Ç–µ—Å—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π!', { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard.reply_markup 
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStories: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–æ—Ä–∏—Å');
    }
  }

 async handleCreateStory(ctx: Context) {
  try {
    if (!ctx.from) return;

    await ctx.answerCbQuery();
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    const updatedUserState = {
      ...userState,
      page: 'stories' // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    };
    this.stateService.setUserState(userId, updatedUserState);
    
    await ctx.reply(
      'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 30 —Å–µ–∫—É–Ω–¥) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.\n\n' +
      '‚ÑπÔ∏è –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.'
    );
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCreateStory: ${error}`);
  }
}

 async handlePhoto(ctx: Context) {
  try {
    if (!ctx.from || !ctx.message || !('photo' in ctx.message)) return false;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if (userState.page === 'stories') {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
        return true;
      }
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
      const updatedUserState = {
        ...userState,
        step: ProfileStep.AWAITING_STORY_DESCRIPTION,
        data: {
          ...userState.data,
          fileId: photo.file_id,
          fileType: MediaType.image
        }
      };
      this.stateService.setUserState(userId, updatedUserState);
      
      await ctx.reply(
        'üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π Story (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):'
      );
      
      return true;
    }
    
    return false;
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePhoto: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ');
    return true;
  }
}

  async handleVideo(ctx: Context) {
    try {
      if (!ctx.from || !ctx.message || !('video' in ctx.message)) return false;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–æ—Ä–∏—Å
      if (userState.page === 'stories') {
        const video = ctx.message.video;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        if (video.duration > 30) {
          await ctx.reply('‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 30 —Å–µ–∫—É–Ω–¥.');
          return true;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        const user = await this.usersService.findByTelegramId(userId);
        if (!user) {
          await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
          return true;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const updatedUserState: UserState = {
          ...userState,
          step: ProfileStep.AWAITING_STORY_DESCRIPTION,
          data: {
            ...userState.data,
            fileId: video.file_id,
            fileType: MediaType.video
          }
        };
        this.stateService.setUserState(userId, updatedUserState);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
        await ctx.reply(
          'üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π Story (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):'
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleVideo: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ');
      return true;
    }
  }

 async handleStoryInput(ctx: Context, text: string, userId: string): Promise<boolean> {
  try {
    const userState = this.stateService.getUserState(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ª–∏—á–∏–µ fileId –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if (userState.step === ProfileStep.AWAITING_STORY_DESCRIPTION && userState.data?.fileId) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
        return true;
      }
      
      // –°–æ–∑–¥–∞–µ–º DTO
      const createStoryDto: CreateStoryDto = {
        telegramFileId: userState.data.fileId,
        type: userState.data.fileType as MediaType,
        caption: text === '-' ? undefined : text
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ—Ä–∏—Å
      await this.storiesService.createStory(user.id, createStoryDto);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      const resetUserState = {
        ...userState,
        step: ProfileStep.IDLE,
        data: {}, // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        page: undefined // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      };
      this.stateService.setUserState(userId, resetUserState);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        '‚úÖ –í–∞—à–∞ Story —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n' +
        '–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ Stories.',
        {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ú–æ–∏ Stories', 'my_stories')],
            [Markup.button.callback('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ', 'create_story')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
          ]).reply_markup
        }
      );
      
      return true;
    }
    
    return false;
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStoryInput: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ story');
    return true;
  }
}

  async handleMyStories(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      const userId = ctx.from.id.toString();
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stories = await this.storiesService.getUserStories(user.id);
      
      if (stories.length === 0) {
        await ctx.reply(
          'üì± –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç Stories\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏—Å—Ç–æ—Ä–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!',
          {
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å Story', 'create_story')],
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
          }
        );
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–π
      let message = 'üì± **–í–∞—à–∏ Stories**\n\n';
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const approved = stories.filter(s => s.status === 'APPROVED');
      const pending = stories.filter(s => s.status === 'PENDING');
      const rejected = stories.filter(s => s.status === 'REJECTED');
      
      if (approved.length > 0) {
        message += '‚úÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ:**\n';
        approved.slice(0, 5).forEach((story, i) => {
          message += `${i+1}. ${story.type === 'IMAGE' ? 'üì∏' : 'üé•'} ${formatDate(story.createdAt)}\n`;
          if (story.caption) message += `   "${story.caption}"\n`;
          message += `   üëÅÔ∏è ${story.viewsCount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n`;
        });
      }
      
      if (pending.length > 0) {
        message += '‚è≥ **–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**\n';
        pending.forEach((story, i) => {
          message += `${i+1}. ${story.type === 'IMAGE' ? 'üì∏' : 'üé•'} ${formatDate(story.createdAt)}\n\n`;
        });
      }
      
      if (rejected.length > 0) {
        message += '‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ:**\n';
        rejected.slice(0, 3).forEach((story, i) => {
          message += `${i+1}. ${story.type === 'IMAGE' ? 'üì∏' : 'üé•'} ${formatDate(story.createdAt)}\n\n`;
        });
      }
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é Story', 'create_story')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
        ]).reply_markup
      });
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMyStories: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π');
    }
  }

  async handlePopularStories(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
      const stories = await this.storiesService.getPopularStories(10);
      
      if (stories.length === 0) {
        await ctx.reply(
          'üì± –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Stories\n\n' +
          '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç trending story!',
          {
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å Story', 'create_story')],
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
          }
        );
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–∫–æ–º
      let message = 'üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Stories**\n\n';
      
      stories.forEach((story, i) => {
        message += `${i+1}. ${story.type === 'IMAGE' ? 'üì∏' : 'üé•'} ${story.user.firstName} ${story.user.lastName || ''}\n`;
        if (story.caption) message += `   "${story.caption}"\n`;
        message += `   üëÅÔ∏è ${story.viewsCount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n`;
      });
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é Story', 'create_story')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
        ]).reply_markup
      });
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePopularStories: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π');
    }
  }

  async handleRecentStories(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
      const stories = await this.storiesService.getRecentStories(10);
      
      if (stories.length === 0) {
        await ctx.reply(
          'üì± –ù–µ–¥–∞–≤–Ω–∏–µ Stories\n\n' +
          '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏—Å—Ç–æ—Ä–∏–π. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç story!',
          {
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å Story', 'create_story')],
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
          }
        );
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–∫–æ–º
      let message = 'üïê **–ù–µ–¥–∞–≤–Ω–∏–µ Stories**\n\n';
      
      stories.forEach((story, i) => {
        message += `${i+1}. ${story.type === 'IMAGE' ? 'üì∏' : 'üé•'} ${story.user.firstName} ${story.user.lastName || ''}\n`;
        message += `   ${formatTimeAgo(story.publishedAt || story.createdAt)}\n`;
        if (story.caption) message += `   "${story.caption}"\n\n`;
        else message += '\n';
      });
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é Story', 'create_story')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_stories')]
        ]).reply_markup
      });
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRecentStories: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏—Å—Ç–æ—Ä–∏–π');
    }
  }

  async handleBackToStories(ctx: Context) {
    return this.handleStories(ctx);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function formatTimeAgo(date: Date): string {
  const now = new Date();
  const diffMs = now.getTime() - new Date(date).getTime();
  
  const diffSec = Math.round(diffMs / 1000);
  const diffMin = Math.round(diffSec / 60);
  const diffHour = Math.round(diffMin / 60);
  const diffDay = Math.round(diffHour / 24);
  
  if (diffSec < 60) return `${diffSec} —Å–µ–∫. –Ω–∞–∑–∞–¥`;
  if (diffMin < 60) return `${diffMin} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  if (diffHour < 24) return `${diffHour} —á. –Ω–∞–∑–∞–¥`;
  if (diffDay < 30) return `${diffDay} –¥–Ω. –Ω–∞–∑–∞–¥`;
  
  return formatDate(date);
}