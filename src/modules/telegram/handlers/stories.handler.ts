import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';

@Injectable()
export class StoriesHandler {
  private readonly logger = new Logger(StoriesHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService
  ) {}

  register(bot: Telegraf<Context>) {
    bot.action('create_story', this.handleCreateStory.bind(this));
  }

  async handleStories(ctx: Context) {
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì± –°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'create_story')]
      ]);
      
      await ctx.reply('üì± **Stories**\n\n–ü—É–±–ª–∏–∫—É–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –∫–æ—Ä—Ç–∞!', { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard.reply_markup 
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStories: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–æ—Ä–∏—Å');
    }
  }

  async handleCreateStory(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCreateStory: ${error}`);
    }
  }

  async handlePhoto(ctx: Context) {
    try {
      await ctx.reply('üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePhoto: ${error}`);
    }
  }

  async handleVideo(ctx: Context) {
    try {
      await ctx.reply('üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleVideo: ${error}`);
    }
  }

  async handleStoryInput(ctx: Context, text: string, userId: string): Promise<boolean> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
    return false;
  }
}