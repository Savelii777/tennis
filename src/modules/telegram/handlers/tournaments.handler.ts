import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';
import { UsersService } from '../../users/application/services/users.service';
import { TournamentsService } from '../../tournaments/application/services/tournaments.service';
import { ProfileStep } from '../interfaces/profile-state.enum';
import { TournamentType } from '../../tournaments/domain/enums/tournament.enum';

@Injectable()
export class TournamentsHandler {
  private readonly logger = new Logger(TournamentsHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService,
    private readonly usersService: UsersService,
    private readonly tournamentsService: TournamentsService
  ) {}

  register(bot: Telegraf<Context>) {
    bot.action('create_tournament', this.handleCreateTournament.bind(this));
    bot.action('find_tournament', this.handleFindTournament.bind(this));
    bot.action('my_tournaments', this.handleMyTournaments.bind(this));
    bot.action('join_tournament', this.handleJoinTournament.bind(this));
    bot.action('leave_tournament', this.handleLeaveTournament.bind(this));
    bot.action(/^view_tournament_(\d+)$/, this.handleViewTournament.bind(this));
    bot.action(/^join_tournament_(\d+)$/, this.handleJoinSpecificTournament.bind(this));
    bot.action(/^leave_tournament_(\d+)$/, this.handleLeaveSpecificTournament.bind(this));
    bot.action('back_to_tournaments', this.handleBackToTournaments.bind(this));
  }

  async handleTournaments(ctx: Context) {
    try {
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTournaments = await this.tournamentsService.getUserTournaments(user.id.toString());
      
      let message = `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n`;
      
      if (userTournaments && userTournaments.length > 0) {
        message += `üìã **–í–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã (${userTournaments.length}):**\n\n`;
        
        userTournaments.slice(0, 5).forEach((tournament: any, index: number) => {
          const statusEmoji = tournament.status === 'ACTIVE' ? 'üü¢' : 
                            tournament.status === 'DRAFT' ? 'üü°' : 'üî¥';
          message += `${statusEmoji} **${tournament.title}**\n`;
          message += `   üìÖ ${new Date(tournament.startDate).toLocaleDateString('ru-RU')}\n`;
          message += `   üë• ${tournament.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
          message += `   üèüÔ∏è ${tournament.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
        });
        
        if (userTournaments.length > 5) {
          message += `   ... –∏ –µ—â–µ ${userTournaments.length - 5} —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n`;
        }
      } else {
        message += `–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.\n\n`;
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ —Ç—É—Ä–Ω–∏—Ä', 'find_tournament')],
        [Markup.button.callback('üèÜ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
        [Markup.button.callback('üìã –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'my_tournaments')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);
      
      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard.reply_markup 
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTournaments: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  async handleMyTournaments(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allTournaments = await this.tournamentsService.getUserTournaments(user.id.toString());
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const activeTournaments = allTournaments.filter((t: any) => t.status === 'ACTIVE');
      const upcomingTournaments = allTournaments.filter((t: any) => t.status === 'DRAFT');
      const finishedTournaments = allTournaments.filter((t: any) => t.status === 'COMPLETED');
      
      let message = `üìã **–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n`;
      
      if (activeTournaments.length > 0) {
        message += `üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ (${activeTournaments.length}):**\n`;
        activeTournaments.forEach((tournament: any) => {
          message += `‚Ä¢ ${tournament.title}\n`;
        });
        message += '\n';
      }
      
      if (upcomingTournaments.length > 0) {
        message += `üü° **–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (${upcomingTournaments.length}):**\n`;
        upcomingTournaments.forEach((tournament: any) => {
          message += `‚Ä¢ ${tournament.title}\n`;
        });
        message += '\n';
      }
      
      if (finishedTournaments.length > 0) {
        message += `üî¥ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (${finishedTournaments.length}):**\n`;
        finishedTournaments.slice(0, 3).forEach((tournament: any) => {
          message += `‚Ä¢ ${tournament.title}\n`;
        });
        if (finishedTournaments.length > 3) {
          message += `   ... –∏ –µ—â–µ ${finishedTournaments.length - 3}\n`;
        }
        message += '\n';
      }
      
      if (allTournaments.length === 0) {
        message += `–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.\n\n`;
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ —Ç—É—Ä–Ω–∏—Ä" –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.`;
      }

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', 'back_to_tournaments')]
        ]).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  async handleCreateTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
      this.stateService.setUserState(userId, {
        step: ProfileStep.CREATING_TOURNAMENT,
        data: {}
      });
      
      await ctx.reply(
        'üèÜ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞**\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCreateTournament: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
    }
  }

  async handleFindTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
      const availableTournaments = await this.tournamentsService.findAll({
        status: 'DRAFT' // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      });
      
      let message = `üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n`;
      
      if (availableTournaments && availableTournaments.length > 0) {
        message += `–ù–∞–π–¥–µ–Ω–æ ${availableTournaments.length} —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n`;
        
        availableTournaments.slice(0, 5).forEach((tournament: any, index: number) => {
          message += `${index + 1}. **${tournament.title}**\n`;
          message += `   üìÖ ${new Date(tournament.startDate).toLocaleDateString('ru-RU')}\n`;
          message += `   üë• ${tournament.currentPlayers}/${tournament.maxPlayers}\n`;
          message += `   üèüÔ∏è ${tournament.locationName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
          message += `   üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n`; // –£–±–∏—Ä–∞–µ–º entryFee
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä—ã
        const buttons = [];
        availableTournaments.slice(0, 3).forEach((tournament: any) => {
          buttons.push([
            Markup.button.callback(
              `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ "${tournament.title}"`, 
              `join_tournament_${tournament.id}`
            )
          ]);
        });
        
        buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', 'back_to_tournaments')]);
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(buttons).reply_markup
        });
      } else {
        message += `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n`;
        message += `–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä".`;
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üèÜ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', 'back_to_tournaments')]
          ]).reply_markup
        });
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindTournament: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    }
  }

  async handleJoinTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É—á–∞—Å—Ç–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleJoinTournament: ${error}`);
    }
  }

  async handleLeaveTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üëã –í—ã—Ö–æ–¥ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞...');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLeaveTournament: ${error}`);
    }
  }

  async handleViewTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
      const callbackQuery = ctx.callbackQuery as any;
      const match = callbackQuery?.data?.match(/^view_tournament_(\d+)$/);
      if (!match) return;
      
      const tournamentId = match[1];
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
      const tournament = await this.tournamentsService.findById(tournamentId);
      
      if (!tournament) {
        await ctx.reply('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const statusEmoji = tournament.status === 'ACTIVE' ? 'üü¢' : 
                        tournament.status === 'DRAFT' ? 'üü°' : 'üî¥';
      
      let message = `${statusEmoji} **${tournament.title}**\n\n`;
      message += `üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** ${new Date(tournament.startDate).toLocaleDateString('ru-RU')}\n`;
      message += `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** ${tournament.currentPlayers}/${tournament.maxPlayers}\n`;
      message += `üèüÔ∏è **–ú–µ—Å—Ç–æ:** ${tournament.locationName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üí∞ **–í–∑–Ω–æ—Å:** –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n`; // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º entryFee
      message += `üèÜ **–§–æ—Ä–º–∞—Ç:** ${this.getTournamentTypeText(tournament.type)}\n\n`;
      
      if (tournament.description) {
        message += `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${tournament.description}\n\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      const buttons = [];
      if (tournament.status === 'DRAFT') {
        buttons.push([
          Markup.button.callback('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', `join_tournament_${tournament.id}`),
          Markup.button.callback('‚ùå –ü–æ–∫–∏–Ω—É—Ç—å', `leave_tournament_${tournament.id}`)
        ]);
      }
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_tournaments')]);
      
      await ctx.reply(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(buttons).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleViewTournament: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ');
    }
  }

  async handleJoinSpecificTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
      const callbackQuery = ctx.callbackQuery as any;
      const match = callbackQuery?.data?.match(/^join_tournament_(\d+)$/);
      if (!match) return;
      
      const tournamentId = match[1];
      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      try {
        await this.tournamentsService.joinTournament(tournamentId, user.id.toString());
        await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!');
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É: ${error}`);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleJoinSpecificTournament: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É');
    }
  }

  async handleLeaveSpecificTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
      const callbackQuery = ctx.callbackQuery as any;
      const match = callbackQuery?.data?.match(/^leave_tournament_(\d+)$/);
      if (!match) return;
      
      const tournamentId = match[1];
      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      try {
        await this.tournamentsService.leaveTournament(tournamentId, user.id.toString());
        await ctx.reply('üëã –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—É—Ä–Ω–∏—Ä');
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —Ç—É—Ä–Ω–∏—Ä');
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLeaveSpecificTournament: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
    }
  }

  async handleBackToTournaments(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await this.handleTournaments(ctx);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBackToTournaments: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º');
    }
  }

  async handleLocations(ctx: Context) {
    try {
      await ctx.reply('üìç –ö–æ—Ä—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏–∏');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLocations: ${error}`);
    }
  }

  async handleTournamentInput(ctx: Context, text: string, userId: string): Promise<boolean> {
    const userState = this.stateService.getUserState(userId);
    
    this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞: ${text}, —Ç–µ–∫—É—â–∏–π —à–∞–≥: ${userState.step}`);
    
    switch (userState.step) {
      case ProfileStep.CREATING_TOURNAMENT:
        return await this.handleTournamentName(ctx, text, userId, userState);
      
      case ProfileStep.AWAITING_TOURNAMENT_NAME:
        return await this.handleTournamentName(ctx, text, userId, userState);
        
      case ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION:
        return await this.handleTournamentDescription(ctx, text, userId, userState);
        
      case ProfileStep.AWAITING_TOURNAMENT_START_DATE:
        return await this.handleTournamentStartDate(ctx, text, userId, userState);
        
      case ProfileStep.AWAITING_TOURNAMENT_MAX_PARTICIPANTS:
        return await this.handleTournamentMaxParticipants(ctx, text, userId, userState);
    }
    
    return false;
  }

  private async handleTournamentName(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    userState.data.tournamentName = text;
    userState.step = ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):');
    return true;
  }

  private async handleTournamentDescription(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      userState.data.tournamentDescription = text;
    }
    userState.step = ProfileStep.AWAITING_TOURNAMENT_START_DATE;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply('üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
    return true;
  }

  private async handleTournamentStartDate(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
    const match = text.match(dateRegex);
    
    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.12.2024)');
      return true;
    }
    
    const [, day, month, year] = match;
    const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    
    if (date < new Date()) {
      await ctx.reply('‚ùå –î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
      return true;
    }
    
    userState.data.tournamentStartDate = date.toISOString();
    userState.step = ProfileStep.AWAITING_TOURNAMENT_MAX_PARTICIPANTS;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Ç 4 –¥–æ 32):');
    return true;
  }

  private async handleTournamentMaxParticipants(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
    const maxParticipants = parseInt(text);
    
    if (isNaN(maxParticipants) || maxParticipants < 4 || maxParticipants > 32) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 4 –¥–æ 32');
      return true;
    }
    
    userState.data.tournamentMaxParticipants = maxParticipants;
    
    // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    try {
      const user = await this.usersService.findByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return true;
      }
      
      const startDate = new Date(userState.data.tournamentStartDate);
      const endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + 1); // –¢—É—Ä–Ω–∏—Ä –¥–ª–∏—Ç—Å—è –æ–¥–∏–Ω –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      const tournamentDto = {
        title: userState.data.tournamentName,
        description: userState.data.tournamentDescription || '',
        startDate: startDate,
        endDate: endDate,
        registrationDeadline: startDate,
        maxPlayers: maxParticipants,
        minPlayers: Math.max(4, Math.floor(maxParticipants / 2)),
        type: TournamentType.SINGLE_ELIMINATION, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        isRanked: true,
        locationName: '–ù–µ —É–∫–∞–∑–∞–Ω–æ' // –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
      };
      
      const tournament = await this.tournamentsService.create(user.id.toString(), tournamentDto);
      
      await ctx.reply(
        `‚úÖ **–¢—É—Ä–Ω–∏—Ä "${tournament.title}" —Å–æ–∑–¥–∞–Ω!**\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(tournament.startDate).toLocaleDateString('ru-RU')}\n` +
        `üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.maxPlayers}\n\n` +
        `–¢—É—Ä–Ω–∏—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.`,
        { parse_mode: 'Markdown' }
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.stateService.setUserState(userId, { step: ProfileStep.IDLE, data: {} });
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    return true;
  }

  private getTournamentTypeText(type: string): string {
    const types = {
      'SINGLE_ELIMINATION': '–ù–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ',
      'GROUPS_PLAYOFF': '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø + –ø–ª–µ–π-–æ—Ñ—Ñ',
      'LEAGUE': '–õ–∏–≥–∞ (–∫–∞–∂–¥—ã–π —Å –∫–∞–∂–¥—ã–º)',
      'BLITZ': '–ë–ª–∏—Ü-—Ç—É—Ä–Ω–∏—Ä'
    };
    
    return types[type as keyof typeof types] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}