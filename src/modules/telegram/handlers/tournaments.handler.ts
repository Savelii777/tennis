import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';
import { UsersService } from '../../users/application/services/users.service';

@Injectable()
export class TournamentsHandler {
  private readonly logger = new Logger(TournamentsHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService,
    private readonly usersService: UsersService
  ) {}

  register(bot: Telegraf<Context>) {
    bot.action('create_tournament', this.handleCreateTournament.bind(this));
    bot.action('find_tournament', this.handleFindTournament.bind(this));
  }

  async handleTournaments(ctx: Context) {
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ù–∞–π—Ç–∏ —Ç—É—Ä–Ω–∏—Ä', 'find_tournament')],
        [Markup.button.callback('üèÜ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')]
      ]);
      
      await ctx.reply('üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard.reply_markup 
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTournaments: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏');
    }
  }

  async handleCreateTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞...');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCreateTournament: ${error}`);
    }
  }

  async handleFindTournament(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindTournament: ${error}`);
    }
  }

  async handleLocations(ctx: Context) {
    try {
      await ctx.reply('üìç –ö–æ—Ä—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏–∏');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLocations: ${error}`);
    }
  }

  async handleTournamentInput(ctx: Context, text: string, userId: string): Promise<boolean> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
    return false;
  }
}