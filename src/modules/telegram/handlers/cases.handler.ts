import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';

@Injectable()
export class CasesHandler {
  private readonly logger = new Logger(CasesHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService
  ) {}

  register(bot: Telegraf<Context>) {
    bot.action('open_case', this.handleOpenCase.bind(this));
    bot.action('buy_balls', this.handleBuyBalls.bind(this));
  }

  async handleCases(ctx: Context) {
    try {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', 'open_case')],
        [Markup.button.callback('üí∞ –ö—É–ø–∏—Ç—å –º—è—á–∏', 'buy_balls')]
      ]);
      
      await ctx.reply('üéÅ **–ö–µ–π—Å—ã**\n\n–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã!', { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard.reply_markup 
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCases: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–µ–π—Å–∞–º–∏');
    }
  }

  async handleOpenCase(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üéÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleOpenCase: ${error}`);
    }
  }

  async handleBuyBalls(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.reply('üí∞ –ü–æ–∫—É–ø–∫–∞ –º—è—á–µ–π...');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBuyBalls: ${error}`);
    }
  }
}