import { Injectable, Logger } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { Start, Command } from 'nestjs-telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';
import { UsersService } from '../../users/application/services/users.service';
import { BallsService } from '../../users/application/services/balls.service';
import { NotificationsService } from '../../notifications/application/services/notifications.service';
import { TelegramService } from '../telegram.service';
import { ReferralsService } from '../../referrals/application/services/referrals.service';
import { PrismaService } from '../../../prisma/prisma.service';
import { MessagingHandler } from './messaging.handler';

@Injectable()
export class CommonHandler {
  private readonly logger = new Logger(CommonHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService,
    private readonly usersService: UsersService,
    private readonly ballsService: BallsService,
    private readonly notificationsService: NotificationsService,
    private readonly telegramService: TelegramService,
    private readonly referralsService: ReferralsService,
    private readonly prisma: PrismaService,
    private readonly messagingHandler: MessagingHandler
  ) {}

  register(bot: Telegraf<Context>) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    bot.action('back_to_profile', this.handleBackToProfile.bind(this));
    bot.command('menu', this.handleMenu.bind(this));
  }

  @Start()
  async handleStart(ctx: Context) {
    this.logger.log('üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞');
    
    if (!ctx.from) {
      this.logger.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    const telegramId = ctx.from.id.toString();
    let telegramChatId = ctx.chat?.id.toString();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    let startPayload = '';
    if ('startPayload' in ctx && ctx.startPayload) {
      startPayload = typeof ctx.startPayload === 'string' ? ctx.startPayload : '';
      this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω payload: ${startPayload}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (startPayload && startPayload.startsWith('msg_')) {
      const targetUserId = startPayload.replace('msg_', '');
      this.logger.log(`üí¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${targetUserId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let user = await this.usersService.findByTelegramId(telegramId);
      
      if (!user) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await ctx.reply('üìù –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        startPayload = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º payload, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.handleMessageRequest(ctx, user.id.toString(), targetUserId);
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await this.usersService.findByTelegramId(telegramId);
    
    if (!user) {
      this.logger.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º...');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        telegram_id: telegramId,
        telegramChatId: telegramChatId ? BigInt(telegramChatId) : undefined,
        username: ctx.from.username || '',
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name || undefined,
        photo_url: ''
      };

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await this.usersService.create(userData);
      this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (telegramChatId) {
        await this.usersService.updateTelegramChatId(user.id.toString(), parseInt(telegramChatId));
        this.logger.log(`üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: ${telegramChatId}`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      if (startPayload && startPayload.startsWith('ref_')) {
        const referralCode = startPayload.replace('ref_', '');
        this.logger.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
        
        try {
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
          const referrer = await this.referralsService.findUserByReferralCode(referralCode);
          
          if (referrer && referrer.id !== user.id) {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
            await this.referralsService.createReferral({
              referrerId: referrer.id,
              referredId: user.id
            });
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            const referralBonus = 50;
            await this.ballsService.addBalls(
              referrer.id.toString(),
              referralBonus,
              'REFERRAL',
              `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${user.first_name}`
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            if (this.notificationsService) {
            await this.notificationsService.createNotification({
              userId: referrer.id,
              message: `–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é! +${referralBonus} –º—è—á–µ–π`,
              type: 'REFERRAL_BONUS'
              // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ data, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ —Ç–∏–ø–µ CreateNotificationData
            });
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const startBonus = 50;
            await this.ballsService.addBalls(
              user.id.toString(),
              startBonus,
              'REFERRAL',
              `–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é`
            );
            
            await ctx.reply(
              `üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${user.first_name}!**\n\n` +
              `‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!\n` +
              `üéÅ –ë–æ–Ω—É—Å: ${startBonus} –º—è—á–µ–π\n\n` +
              `–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!`,
              { 
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                  [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')]
                ]).reply_markup
              }
            );
            
            return;
          }
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error}`);
        }
      } else {
        // –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await ctx.reply(
          `üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!**\n\n` +
          `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
          `üéæ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n` +
          `‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
          `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
          `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π\n` +
          `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
          `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç AI-Coach\n\n` +
          `–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!`,
          { 
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')]
            ]).reply_markup
          }
        );

        // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
        const startBonus = 100;
        await this.ballsService.addBalls(
          user.id.toString(),
          startBonus,
          'BONUS',
          '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
        );
      }
    } else {
      this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (telegramChatId && user.telegramChatId !== BigInt(telegramChatId)) {
        await this.usersService.updateTelegramChatId(user.id.toString(), parseInt(telegramChatId));
        this.logger.log(`üí¨ –û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${telegramChatId}`);
      }

      // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
      if (this.telegramService) {
        await this.telegramService.toggleNotifications(user.id, true);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
      const unreadNotifications = this.notificationsService 
        ? await this.notificationsService.getUnreadCount(user.id)
        : 0;

      let welcomeMessage = `üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!**\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
      if (ballsBalance > 0) {
        welcomeMessage += `üéæ **–ë–∞–ª–∞–Ω—Å:** ${ballsBalance} –º—è—á–µ–π\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      if (unreadNotifications > 0) {
        welcomeMessage += `üîî **–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${unreadNotifications}\n`;
      }
      
      welcomeMessage += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: this.keyboardService.getMainKeyboard().reply_markup
      });
    }
  }

  async handleMenu(ctx: Context) {
    try {
      await ctx.reply(
        `üéæ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: this.keyboardService.getMainKeyboard().reply_markup
        }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMenu: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é');
    }
  }

  async handleBackToProfile(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ProfileHandler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      // –í –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—É—á—à–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ProfileHandler, 
      // –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—ã–∑–æ–≤–µ–º —Å–Ω–æ–≤–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
      
      await ctx.reply(
        `–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é...`,
        {
          parse_mode: 'Markdown',
          reply_markup: this.keyboardService.getMainKeyboard().reply_markup
        }
      );
      
      // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
      await ctx.reply('üë§ –ü—Ä–æ—Ñ–∏–ª—å');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBackToProfile: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
    }
  }

  async handleInviteButton(ctx: Context) {
    try {
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ referralCode —ç—Ç–æ –ø–æ–ª–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const referralCode = `ref_${userId}`;
      const botName = process.env.TELEGRAM_BOT_USERNAME || 'your_bot_name';
      const inviteLink = `https://t.me/${botName}?start=${referralCode}`;

      await ctx.reply(
        `üîó **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!**\n\n` +
        `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –º—è—á–µ–π.\n\n` +
        `–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
        `${inviteLink}\n\n` +
        `–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleInviteButton: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async handleMessageRequest(ctx: Context, senderId: string, targetUserId: string): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const targetUser = await this.usersService.findById(targetUserId);
      if (!targetUser) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const userSettings = await this.prisma.userSettings.findFirst({
        where: { userId: parseInt(targetUserId) }
      });

      if (userSettings && !userSettings.allowDirectMessages) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const userId = ctx.from?.id.toString();
      if (!userId) return;

      const userState = this.stateService.getUserState(userId);
      const updatedState = {
        ...userState,
        step: 'AWAITING_MESSAGE_TEXT' as any,
        data: {
          ...userState.data,
          targetUserId: targetUserId,
          targetUserName: `${targetUser.first_name} ${targetUser.last_name || ''}`.trim()
        }
      };
      this.stateService.setUserState(userId, updatedState);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      await ctx.reply(
        `üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **${targetUser.first_name} ${targetUser.last_name || ''}**\n\n` +
        `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é:\n\n` +
        `_–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å –∑–∞–≤—Ç—Ä–∞?"_`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_message' }
            ]]
          }
        }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMessageRequest: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

      if (userSettings && !userSettings.allowDirectMessages) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const userId = ctx.from?.id.toString();
      if (!userId) return;

      const userState = this.stateService.getUserState(userId);
      const updatedState = {
        ...userState,
        step: 'AWAITING_MESSAGE_TEXT' as any,
        data: {
          ...userState.data,
          targetUserId: targetUserId,
          targetUserName: `${targetUser.firstName} ${targetUser.lastName || ''}`.trim()
        }
      };
      this.stateService.setUserState(userId, updatedState);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      await ctx.reply(
        `üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **${targetUser.firstName} ${targetUser.lastName || ''}**\n\n` +
        `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é:\n\n` +
        `_–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å –∑–∞–≤—Ç—Ä–∞?"_`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_message' }
            ]]
          }
        }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMessageRequest: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
   */
  async handleMessageSend(ctx: Context, messageText: string, userId: string): Promise<boolean> {
    try {
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step === 'AWAITING_MESSAGE_TEXT' && userState.data?.targetUserId) {
        const targetUserId = userState.data.targetUserId;
        const targetUserName = userState.data.targetUserName;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const sender = await this.usersService.findByTelegramId(userId);
        if (!sender) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          return true;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const recipient = await this.usersService.findById(targetUserId);
        if (!recipient || !recipient.telegramChatId) {
          await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
          return true;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const messageToRecipient = 
          `üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞:**\n\n` +
          `üë§ **–û—Ç:** ${sender.first_name} ${sender.last_name || ''}\n` +
          `üìç **–ì–æ—Ä–æ–¥:** ${sender.profile?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üéæ **–†–µ–π—Ç–∏–Ω–≥:** ${sender.profile?.ntrp_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
          `**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n_"${messageText}"_\n\n` +
          `üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ.`;

        try {
          await ctx.telegram.sendMessage(
            recipient.telegramChatId.toString(),
            messageToRecipient,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: `view_profile_${sender.id}` },
                  { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_message_${sender.id}` }
                ]]
              }
            }
          );

          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
          await ctx.reply(
            `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É **${targetUserName}**!\n\n` +
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: _"${messageText.length > 50 ? messageText.substring(0, 50) + '...' : messageText}"_\n\n` +
            `–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.`,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]]
            }
          );

          // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
          this.logger.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${sender.id} –∫ ${targetUserId}`);

        } catch (sendError) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${sendError}`);
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.');
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.stateService.setUserState(userId, {
          ...userState,
          step: 'IDLE' as any,
          data: {}
        });

        return true;
      }
      
      return false;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMessageSend: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return true;
    }
  }

  // ...existing code...