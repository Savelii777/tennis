import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { Context, Telegraf, Markup } from 'telegraf';
import { Action, Hears } from 'nestjs-telegraf';
import { StateService } from '../services/state.service';
import { KeyboardService } from '../services/keyboard.service';
import { ProfileStep, UserState } from '../interfaces/profile-state.enum';
import { UsersService } from '../../users/application/services/users.service';
import { RatingsService } from '../../ratings/ratings.service';
import { BallsService } from '../../users/application/services/balls.service';
import { PrismaService } from '../../../prisma/prisma.service';

interface Achievement {
  id: number;
  title: string;
  description: string;
  unlocked: boolean;
  progress?: number;
  totalRequired?: number;
}

@Injectable()
export class ProfileHandler {
  private readonly logger = new Logger(ProfileHandler.name);

  constructor(
    private readonly stateService: StateService,
    private readonly keyboardService: KeyboardService,
    private readonly usersService: UsersService,
    private readonly ratingsService: RatingsService,
    private readonly ballsService: BallsService,
    private readonly prisma: PrismaService
  ) {}

// –ú–µ—Ç–æ–¥ register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register(bot: Telegraf<Context>) {
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  bot.command('profile', this.handleProfileCommand.bind(this));
  bot.action('profile', this.handleProfile.bind(this));
  bot.action('detailed_stats', this.handleDetailedStats.bind(this));
  bot.action('user_achievements', this.handleUserAchievements.bind(this));
  bot.action('setup_profile', this.handleSetupProfileAction.bind(this));
  bot.action('match_history', this.handleMatchHistory.bind(this));
  bot.action('user_goals', this.handleUserGoals.bind(this));
  bot.action('back_to_profile', this.handleBackToProfile.bind(this));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É–∫–∏
  bot.action('hand_LEFT', async (ctx) => this.handleHandSelection('LEFT', ctx));
  bot.action('hand_RIGHT', async (ctx) => this.handleHandSelection('RIGHT', ctx));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä
  bot.action('frequency_1', async (ctx) => this.handleFrequencySelection('1_PER_WEEK', ctx));
  bot.action('frequency_2', async (ctx) => this.handleFrequencySelection('2_3_PER_WEEK', ctx));
  bot.action('frequency_3', async (ctx) => this.handleFrequencySelection('4_PLUS_PER_WEEK', ctx));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
  bot.action('tournaments_YES', async (ctx) => this.handleTournamentsSelection(true, ctx));
  bot.action('tournaments_NO', async (ctx) => this.handleTournamentsSelection(false, ctx));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã
  bot.action('level_BEGINNER', async (ctx) => this.handleLevelSelection('BEGINNER', ctx));
  bot.action('level_AMATEUR', async (ctx) => this.handleLevelSelection('AMATEUR', ctx));
  bot.action('level_CONFIDENT', async (ctx) => this.handleLevelSelection('CONFIDENT', ctx));
  bot.action('level_ADVANCED', async (ctx) => this.handleLevelSelection('ADVANCED', ctx));
  bot.action('level_TOURNAMENT', async (ctx) => this.handleLevelSelection('TOURNAMENT', ctx));
  
  // –®–ê–ì 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
  // –í—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞
  bot.action('sport_TENNIS', async (ctx) => this.handleSportSelection('TENNIS', ctx));
  bot.action('sport_PADEL', async (ctx) => this.handleSportSelection('PADEL', ctx));
  
  // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  bot.action('time_MORNING', async (ctx) => this.handlePlayTimeSelection('MORNING', ctx));
  bot.action('time_DAY', async (ctx) => this.handlePlayTimeSelection('DAY', ctx));
  bot.action('time_EVENING', async (ctx) => this.handlePlayTimeSelection('EVENING', ctx));
  bot.action('time_NIGHT', async (ctx) => this.handlePlayTimeSelection('NIGHT', ctx));
  bot.action('continue_to_frequency', async (ctx) => this.handleContinueToFrequency(ctx));
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 2
  bot.action('start_step_two', async (ctx) => this.handleStartStepTwo(ctx));
  
  // –®–ê–ì 2: –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —É—Ä–æ–≤–µ–Ω—å
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã (—Å NTRP –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏)
  bot.action('level_BEGINNER_1_2', async (ctx) => this.handleLevelSelection('BEGINNER', ctx));
  bot.action('level_AMATEUR_2_3', async (ctx) => this.handleLevelSelection('AMATEUR', ctx));
  bot.action('level_CONFIDENT_4', async (ctx) => this.handleLevelSelection('CONFIDENT', ctx));
  bot.action('level_TOURNAMENT_5', async (ctx) => this.handleLevelSelection('TOURNAMENT', ctx));
  bot.action('level_SEMI_PRO', async (ctx) => this.handleLevelSelection('SEMI_PRO', ctx));
  
  // –ë—ç–∫—Ö–µ–Ω–¥
  bot.action('backhand_ONE', async (ctx) => this.handleBackhandSelection('ONE_HANDED', ctx));
  bot.action('backhand_TWO', async (ctx) => this.handleBackhandSelection('TWO_HANDED', ctx));
  
  // –ü–æ–∫—Ä—ã—Ç–∏–µ
  bot.action('surface_HARD', async (ctx) => this.handleSurfaceSelection('HARD', ctx));
  bot.action('surface_CLAY', async (ctx) => this.handleSurfaceSelection('CLAY', ctx));
  bot.action('surface_GRASS', async (ctx) => this.handleSurfaceSelection('GRASS', ctx));
  bot.action('surface_CARPET', async (ctx) => this.handleSurfaceSelection('CARPET', ctx));
  
  // –°—Ç–∏–ª—å –∏–≥—Ä—ã
  bot.action('style_UNIVERSAL', async (ctx) => this.handleStyleSelection('UNIVERSAL', ctx));
  bot.action('style_DEFENSIVE', async (ctx) => this.handleStyleSelection('DEFENSIVE', ctx));
  bot.action('style_AGGRESSIVE', async (ctx) => this.handleStyleSelection('AGGRESSIVE', ctx));
  bot.action('style_NET_PLAYER', async (ctx) => this.handleStyleSelection('NET_PLAYER', ctx));
  bot.action('style_BASIC', async (ctx) => this.handleStyleSelection('BASIC', ctx));
  
  // –õ—é–±–∏–º—ã–π —É–¥–∞—Ä
  bot.action('shot_SERVE', async (ctx) => this.handleShotSelection('SERVE', ctx));
  bot.action('shot_FOREHAND', async (ctx) => this.handleShotSelection('FOREHAND', ctx));
  bot.action('shot_BACKHAND', async (ctx) => this.handleShotSelection('BACKHAND', ctx));
  bot.action('shot_VOLLEY', async (ctx) => this.handleShotSelection('VOLLEY', ctx));
  bot.action('shot_SMASH', async (ctx) => this.handleShotSelection('SMASH', ctx));
  
  // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
  bot.action('opponent_ANY', async (ctx) => this.handleOpponentSelection('ANY', ctx));
  bot.action('opponent_MEN', async (ctx) => this.handleOpponentSelection('MEN', ctx));
  bot.action('opponent_WOMEN', async (ctx) => this.handleOpponentSelection('WOMEN', ctx));
  bot.action('opponent_SAME_LEVEL', async (ctx) => this.handleOpponentSelection('SAME_LEVEL', ctx));
  bot.action('opponent_STRONGER', async (ctx) => this.handleOpponentSelection('STRONGER', ctx));
  bot.action('opponent_WEAKER', async (ctx) => this.handleOpponentSelection('WEAKER', ctx));
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  bot.on('text', this.handleTextMessage.bind(this));
}

  @Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
  async handleProfile(ctx: Context) {
    this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
    
    try {
      if (!ctx.from) return;

      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
      const userWithProfile = await this.prisma.user.findUnique({
        where: { id: parseInt(user.id.toString()) },
        include: { profile: true }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let ratingInfo = '';
      try {
        const rating = await this.ratingsService.getRatingForUser(user.id);
        
        if (rating) {
          ratingInfo = `üéØ **NTRP —Ä–µ–π—Ç–∏–Ω–≥:** ${rating.skillRating?.toFixed(1) || '?'}\n` +
                      `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n` +
                      `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n`;
        } else {
          ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!\n`;
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: ${error}`);
        ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n`;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      try {
        const stats = await this.usersService.getProfileStatistics(user.id.toString());
        const profileCompletion = await this.usersService.getProfileCompletionStatus(user.id.toString());
        const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
        const completionPercentage = Math.round(
  ((profileCompletion.stepOneCompleted ? 50 : 0) + 
   (profileCompletion.stepTwoCompleted ? 50 : 0))
);
`üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: ${completionPercentage}%`
        const message = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å ${user.first_name} ${user.last_name || ''}**\n\n` +
                      `${ratingInfo}\n` +
                      `üèôÔ∏è **–ì–æ—Ä–æ–¥:** ${userWithProfile?.profile?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                      `üëã **–†—É–∫–∞:** ${this.getDominantHandText(userWithProfile?.profile?.dominantHand)}\n` +
                      `üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${this.getLevelText(userWithProfile?.profile?.selfAssessedLevel || '')}\n\n` +
                      `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                      `üìà –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed || 0}\n` +
                      `ü•á –ü–æ–±–µ–¥: ${stats.matchWins || 0}\n` +
                      `üéæ –ú—è—á–µ–π: ${ballsBalance}\n` +
                      `üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: ${completionPercentage}%`;
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: this.keyboardService.getProfileKeyboard().reply_markup
        });
        
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
      }
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  async handleDetailedStats(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) return;

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const [stats, rating] = await Promise.all([
        this.usersService.getProfileStatistics(user.id.toString()),
        this.ratingsService.getRatingForUser(user.id)
      ]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getUserMatches –≤ UsersService
      const matches = await this.usersService.getUserMatches(user.id.toString());

      let message = `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
      
      // –†–µ–π—Ç–∏–Ω–≥–∏
      if (rating) {
        message += `üèÜ **–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n`;
        message += `üéØ **NTRP —É—Ä–æ–≤–µ–Ω—å:** ${rating.skillRating?.toFixed(1) || 'N/A'}\n`;
        message += `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n`;
        message += `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n\n`;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
      message += `üéæ **–ú–∞—Ç—á–∏:**\n`;
      message += `‚úÖ –í—Å–µ–≥–æ: ${stats.matchesPlayed || 0}\n`;
      message += `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins || 0}\n`;
      message += `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses || 0}\n`;
      message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n\n`;

      // –¢—É—Ä–Ω–∏—Ä—ã
      message += `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:**\n`;
      message += `üéØ –£—á–∞—Å—Ç–∏–µ: ${stats.tournamentsPlayed || 0}\n`;
      message += `ü•á –ü–æ–±–µ–¥—ã: ${stats.tournamentsWon || 0}\n\n`;

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
      message += `üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:**\n`;
      if (matches && matches.length > 0) {
        matches.slice(0, 3).forEach((match: any, index: number) => {
          const date = new Date(match.date || match.matchDate).toLocaleDateString('ru-RU');
          const opponent = match.opponent?.name || match.opponentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          const result = match.result === 'WIN' ? '‚úÖ' : '‚ùå';
          message += `${index + 1}. ${date} vs ${opponent} ${result} ${match.score || ''}\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π\n`;
      }

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
        ]).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async handleUserAchievements(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) return;

      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const achievements: Achievement[] = [];
      
      let message = `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n`;
      
      if (achievements && achievements.length > 0) {
        achievements.forEach((achievement: Achievement, index: number) => {
          message += `${index + 1}. ${achievement.title} - ${achievement.description}\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –º–∞—Ç—á–∏ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!\n\n`;
        message += `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n`;
        message += `‚Ä¢ –ù–æ–≤–∏—á–æ–∫ - –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á\n`;
        message += `‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - –í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –º–∞—Ç—á–µ–π\n`;
        message += `‚Ä¢ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫ - –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n`;
      }

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
        ]).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    }
  }
async handleSetupProfileAction(ctx: Context): Promise<void> {
  try {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ä—Ç–∞
    this.stateService.setUserState(userId, {
      step: ProfileStep.AWAITING_SPORT_TYPE,
      data: {}
    });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞
    await ctx.reply(
      'üéæ **–®–ê–ì 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞**\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ä—Ç:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üéæ –¢–µ–Ω–Ω–∏—Å', 'sport_TENNIS'),
          Markup.button.callback('üèì –ü–∞–¥–µ–ª', 'sport_PADEL')
        ]
      ])
    );
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
async handleTournamentsSelection(participates: boolean, ctx: Context): Promise<void> {
  try {
    await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (userState.step !== ProfileStep.AWAITING_TOURNAMENTS) {
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    userState.data.playsInTournaments = participates;
    this.stateService.setUserState(userId, userState);
    
    this.logger.log(`–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${participates} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –®–∞–≥ 1 –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –®–∞–≥—É 2
    await ctx.reply(
      `‚úÖ –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${participates ? '–î–∞' : '–ù–µ—Ç'}\n\nüéâ **–®–ê–ì 1 –ó–ê–í–ï–†–®–Å–ù!**\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥—ë–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–∏–ª—è –∏–≥—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ NTRP.`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –®–∞–≥—É 2', 'start_step_two')]
      ])
    );
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}
async handleLevelSelection(level: string, ctx: Context): Promise<void> {
  try {
    await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (userState.step !== ProfileStep.AWAITING_LEVEL) {
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
    userState.data.selfAssessedLevel = level as "BEGINNER" | "AMATEUR" | "CONFIDENT" | "TOURNAMENT" | "SEMI_PRO";
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    userState.step = ProfileStep.COMPLETE;
    this.stateService.setUserState(userId, userState);
    
    this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${level} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.completeProfileSetup(userId, userState.data);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await ctx.reply(
      '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
      Markup.inlineKeyboard([
        [Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
      ])
    );
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}


/**
 * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
 */
async completeProfileSetup(telegramUserId: string, profileData: any): Promise<void> {
  try {
    this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è Telegram ID: ${telegramUserId}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId, –∞ –Ω–µ –ø–æ id
    const user = await this.prisma.user.findUnique({
      where: { telegramId: telegramUserId }
    });
    
    if (!user) {
      throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const userId = user.id; // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    this.logger.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î —Å ID: ${userId}`);
    
    // –®–∞–≥ 1: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è API
    const profileStepOneDto = {
      city: profileData.city,
      preferredCourt: profileData.preferredCourt,
      dominantHand: profileData.dominantHand,
      preferredPlayTime: ['EVENING'], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      playsInTournaments: profileData.playsInTournaments || false,
      weeklyPlayFrequency: profileData.weeklyPlayFrequency || 'TWO_THREE',
      firstName: user.firstName, // –ë–µ—Ä–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
      lastName: user.lastName || undefined,    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º null –≤ undefined
      sportType: profileData.sportType || 'TENNIS' // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    };
    
    // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 1
    await this.usersService.completeProfileStepOne(userId.toString(), profileStepOneDto);
    
    // –®–∞–≥ 2: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ API
    const profileStepTwoDto = {
      selfAssessedLevel: profileData.selfAssessedLevel || 'BEGINNER',
      backhandType: 'TWO_HANDED', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      preferredSurface: 'HARD', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      playingStyle: 'UNIVERSAL', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      favoriteShot: 'FOREHAND', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      racket: '–õ—é–±–∞—è', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      opponentPreference: 'ANY' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    
    // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 2
    await this.usersService.completeProfileStepTwo(userId.toString(), profileStepTwoDto);
    
    this.logger.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
    throw error;
  }
}


  async handleMatchHistory(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;

      const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
      if (!user) return;

      const matches = await this.usersService.getUserMatches(user.id.toString());
      
      let message = `üìã **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n\n`;
      
      if (matches && matches.length > 0) {
        matches.slice(0, 10).forEach((match: any, index: number) => {
          const date = new Date(match.date || match.matchDate).toLocaleDateString('ru-RU');
          const opponent = match.opponent?.name || match.opponentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          const result = match.result === 'WIN' ? '‚úÖ –ü–æ–±–µ–¥–∞' : '‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
          message += `${index + 1}. ${date} vs ${opponent}\n`;
          message += `   ${result} ${match.score || ''}\n\n`;
        });
      } else {
        message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n`;
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!`;
      }

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
        ]).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π');
    }
  }

  async handleUserGoals(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      
      const message = `üéØ **–¶–µ–ª–∏**\n\n` +
        `‚Ä¢ –°—ã–≥—Ä–∞—Ç—å 10 –º–∞—Ç—á–µ–π - –ü—Ä–æ–≥—Ä–µ—Å—Å: 3/10\n` +
        `‚Ä¢ –ü–æ–±–µ–¥–∏—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ - –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
        `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å NTRP –Ω–∞ 0.5 –ø—É–Ω–∫—Ç–∞ - –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n` +
        `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!`;

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
        ]).reply_markup
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π');
    }
  }
  
  async handleBackToProfile(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await this.handleProfile(ctx);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBackToProfile: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
    }
  }

  async handleSettings(ctx: Context) {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const user = await this.usersService.findByTelegramId(userId);
      
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
      const settings = {
        notificationsEnabled: true,
        language: 'ru'
      };
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'toggle_notifications')],
        [
          Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
          Markup.button.callback('üá¨üáß English', 'lang_en')
        ],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
      ]);

      await ctx.reply(
        `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
        `üåê –Ø–∑—ã–∫: ${settings.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}`,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup 
        }
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettings: ${error}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getLevelText(level: string): string {
    const levels = {
      'BEGINNER': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å',
      'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π',
      'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
      'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
      'ANY': '–õ—é–±–æ–π'
    };
    
    return levels[level as keyof typeof levels] || '–ù–µ —É–∫–∞–∑–∞–Ω';
  }

  private getDominantHandText(hand: string | null | undefined): string {
    if (hand === 'LEFT') return '–õ–µ–≤–∞—è';
    if (hand === 'RIGHT') return '–ü—Ä–∞–≤–∞—è';
    return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  }


  async handleFrequencySelection(frequency: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      if (userState.step !== ProfileStep.AWAITING_FREQUENCY) {
        return;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
      let typedFrequency: "ONE" | "TWO_THREE" | "FOUR_PLUS";
      switch (frequency) {
        case '1_PER_WEEK':
          typedFrequency = "ONE";
          break;
        case '2_3_PER_WEEK':
          typedFrequency = "TWO_THREE";
          break;
        case '4_PLUS_PER_WEEK':
          typedFrequency = "FOUR_PLUS";
          break;
        default:
          typedFrequency = "ONE";
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userState.data.weeklyPlayFrequency = typedFrequency;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      userState.step = ProfileStep.AWAITING_TOURNAMENTS;
      this.stateService.setUserState(userId, userState);
    
    this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä ${frequency} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    await ctx.reply(
      '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('–î–∞', 'tournaments_YES'),
          Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
        ]
      ])
    );
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

async handleProfileInput(ctx: Context, text: string, userId: string): Promise<boolean> {
  const userState = this.stateService.getUserState(userId);
  
  this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: ${text}, —Ç–µ–∫—É—â–∏–π —à–∞–≥: ${userState.step}`);
  
  switch (userState.step) {
    case ProfileStep.AWAITING_CITY:
      return await this.handleCity(ctx, text, userId, userState);
      
    case ProfileStep.AWAITING_COURT:
      return await this.handleCourt(ctx, text, userId, userState);
      
    case ProfileStep.AWAITING_HAND:
      // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ", 
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üëà –õ–µ–≤–∞—è', 'hand_LEFT'),
            Markup.button.callback('üëâ –ü—Ä–∞–≤–∞—è', 'hand_RIGHT')
          ]
        ])
      );
      return true;
         case ProfileStep.AWAITING_FREQUENCY:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
      if (text.includes("1 —Ä–∞–∑")) {
        return await this.processFrequencySelection("1_PER_WEEK", ctx, userId, userState);
      } else if (text.includes("2-3")) {
        return await this.processFrequencySelection("2_3_PER_WEEK", ctx, userId, userState);
      } else if (text.includes("4+")) {
        return await this.processFrequencySelection("4_PLUS_PER_WEEK", ctx, userId, userState);
      } else {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–≥—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ");
        return true;
      }
      
    case ProfileStep.AWAITING_TOURNAMENTS:
      // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
      await ctx.reply(
        "–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö? –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ", 
        Markup.inlineKeyboard([
          [
            Markup.button.callback('–î–∞', 'tournaments_YES'),
            Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
          ]
        ])
      );
      return true;
      
    case ProfileStep.AWAITING_LEVEL:
      // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
      await ctx.reply(
        "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?", 
        Markup.inlineKeyboard([
          [Markup.button.callback('–ù–∞—á–∏–Ω–∞—é—â–∏–π', 'level_BEGINNER')],
          [Markup.button.callback('–õ—é–±–∏—Ç–µ–ª—å', 'level_AMATEUR')],
          [Markup.button.callback('–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_CONFIDENT')],
          [Markup.button.callback('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 'level_ADVANCED')],
          [Markup.button.callback('–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_TOURNAMENT')]
        ])
      );
      return true;
  }
  
  return false;
}


// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
async processFrequencySelection(frequency: string, ctx: Context, userId: string, userState: any): Promise<boolean> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userState.data.weeklyPlayFrequency = frequency;
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  userState.step = ProfileStep.AWAITING_TOURNAMENTS;
  this.stateService.setUserState(userId, userState);
  
  this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä ${frequency} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
  await ctx.reply(
    '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?',
    Markup.inlineKeyboard([
      [
        Markup.button.callback('–î–∞', 'tournaments_YES'),
        Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
      ]
    ])
  );
  
  return true;
}

async handleCity(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
  userState.data.city = text;
  userState.step = ProfileStep.AWAITING_COURT;
  this.stateService.setUserState(userId, userState);
  
  this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –≥–æ—Ä–æ–¥: ${text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—Ä—Ç
  await ctx.reply('–ù–∞ –∫–∞–∫–æ–º –∫–æ—Ä—Ç–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?');
  return true;
}

async handleCourt(ctx: Context, text: string, userId: string, userState: any): Promise<boolean> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç
  userState.data.preferredCourt = text;
  userState.step = ProfileStep.AWAITING_HAND;
  this.stateService.setUserState(userId, userState);
  
  this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ç: ${text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä—É–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
  await ctx.reply(
    '–ö–∞–∫–æ–π —Ä—É–∫–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?',
    Markup.inlineKeyboard([
      [
        Markup.button.callback('üëà –õ–µ–≤–∞—è', 'hand_LEFT'),
        Markup.button.callback('üëâ –ü—Ä–∞–≤–∞—è', 'hand_RIGHT')
      ]
    ])
  );
  return true;
}
async handleHandSelection(hand: 'LEFT' | 'RIGHT', ctx: Context): Promise<void> {
  try {
    await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (userState.step !== ProfileStep.AWAITING_HAND) {
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ä—É–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userState.data.dominantHand = hand;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    userState.step = ProfileStep.AWAITING_PLAY_TIME;
    this.stateService.setUserState(userId, userState);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    await ctx.reply(
      `‚úÖ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ä—É–∫–∞: **${hand === 'LEFT' ? '–õ–µ–≤–∞—è' : '–ü—Ä–∞–≤–∞—è'}**\n\nüïê –ö–æ–≥–¥–∞ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∏–≥—Ä–∞–µ—Ç–µ? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`,
      { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('üåÖ –£—Ç—Ä–æ–º', 'time_MORNING'),
            Markup.button.callback('‚òÄÔ∏è –î–Ω—ë–º', 'time_DAY')
          ],
          [
            Markup.button.callback('üåá –í–µ—á–µ—Ä–æ–º', 'time_EVENING'),
            Markup.button.callback('üåô –ù–æ—á—å—é', 'time_NIGHT')
          ],
          [
            Markup.button.callback('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_to_frequency')
          ]
        ]).reply_markup
      }
    );
    
    this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–∞—è —Ä—É–∫–∞ ${hand} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
  } catch (error) {
    this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–∏: ${error}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}
  private async handleFrequency(ctx: Context, text: string, userId: string, userState: UserState) {
    // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    return true;
  }

  private async handleTournaments(ctx: Context, text: string, userId: string, userState: UserState) {
    // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    return true;
  }

  private async handleLevel(ctx: Context, text: string, userId: string, userState: UserState) {
    // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    return true;
  }

 
  async formatProfileMessage(user: any): Promise<string> {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –±–µ–π–¥–∂–µ–º
    const ratingInfo = user.level?.ratingInfo || { value: '–ù–µ —É–∫–∞–∑–∞–Ω', badge: 'basic', level: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–æ–∫ —Å–ø–æ—Ä—Ç–∞
    const sportEmoji = user.sport?.emoji || 'üéæ';
    const sportTitle = user.sport?.title || '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ NTRP
    let levelBadge = '';
    switch(ratingInfo.badge) {
      case 'beginner':
        levelBadge = 'üî∞';
        break;
      case 'intermediate':
        levelBadge = 'üî∑';
        break;
      case 'advanced':
        levelBadge = 'üî∂';
        break;
      case 'expert': 
        levelBadge = 'üíé';
        break;
      case 'pro':
        levelBadge = 'üèÜ';
        break;
      default:
        levelBadge = '‚ö™Ô∏è';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    return `üë§ –ü—Ä–æ—Ñ–∏–ª—å ${user.firstName} ${user.lastName || ''}

${sportEmoji} –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: ${sportTitle}
${levelBadge} NTRP —Ä–µ–π—Ç–∏–Ω–≥: ${ratingInfo.value} (${ratingInfo.level})
‚ö°Ô∏è –û—á–∫–∏ —Å–∏–ª—ã: ${user.rating?.points || 0}
‚≠êÔ∏è –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${user.rating?.ranking || 0}

üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üëã –†—É–∫–∞: ${user.playingStyle?.dominantHand === 'RIGHT' ? '–ü—Ä–∞–≤–∞—è' : '–õ–µ–≤–∞—è'}
üèÜ –¢—É—Ä–Ω–∏—Ä–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ: ${user.statistics?.tournamentsWon || 0}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üìà –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${user.statistics?.matchesPlayed || 0}
ü•á –ü–æ–±–µ–¥: ${user.statistics?.matchWins || 0}
ü•à –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${user.statistics?.matchLosses || 0}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${user.statistics?.winRate || 0}%
`;
}

async handleProfileCommand(ctx: Context): Promise<void> {
  try {
    if (!ctx.from) return;
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const userId = ctx.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersService.getUserFullProfile(userId);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
    const message = await this.formatProfileMessage(user);
    
    // –ö–Ω–æ–ø–∫–∏
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'edit_profile')],
      [Markup.button.callback('ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
      [Markup.button.callback('üìä –†–µ–π—Ç–∏–Ω–≥', 'rating')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await ctx.reply(message, {
      ...keyboard,
      parse_mode: 'Markdown'
    });
    
  } catch (error) {
    if (error instanceof Error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, error.stack);
    } else {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
    }
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
   * –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –î–í–£–•–®–ê–ì–û–í–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
   * –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó
   */

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ä—Ç–∞
   */
  async handleSportSelection(sportType: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_SPORT_TYPE) {
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞
      userState.data.sportType = sportType as 'TENNIS' | 'PADEL';
      userState.step = ProfileStep.AWAITING_CITY;
      this.stateService.setUserState(userId, userState);
      
      const sportName = sportType === 'TENNIS' ? '—Ç–µ–Ω–Ω–∏—Å' : '–ø–∞–¥–µ–ª';
      this.logger.log(`–í—ã–±—Ä–∞–Ω —Å–ø–æ—Ä—Ç: ${sportName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      await ctx.reply(`üéæ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ ${sportName}.\n\nüìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?`);
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Ä—Ç–∞: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
   */
  async handlePlayTimeSelection(timeSlot: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_PLAY_TIME) {
        return;
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω –∏–≥—Ä—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!userState.data.preferredPlayTime) {
        userState.data.preferredPlayTime = [];
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      const timeIndex = userState.data.preferredPlayTime.indexOf(timeSlot);
      if (timeIndex === -1) {
        userState.data.preferredPlayTime.push(timeSlot);
      } else {
        userState.data.preferredPlayTime.splice(timeIndex, 1);
      }
      
      this.stateService.setUserState(userId, userState);
      
      const timeNames = {
        'MORNING': '—É—Ç—Ä–æ–º',
        'DAY': '–¥–Ω—ë–º',
        'EVENING': '–≤–µ—á–µ—Ä–æ–º',
        'NIGHT': '–Ω–æ—á—å—é'
      };
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
      const selectedTimes = userState.data.preferredPlayTime.map(t => timeNames[t as keyof typeof timeNames]).join(', ');
      
      await ctx.reply(
        `‚úÖ –í—Ä–µ–º—è –∏–≥—Ä—ã: ${selectedTimes || '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n\nüïê –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –≤—Ä–µ–º—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ:`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üåÖ –£—Ç—Ä–æ–º', 'time_MORNING'),
            Markup.button.callback('‚òÄÔ∏è –î–Ω—ë–º', 'time_DAY')
          ],
          [
            Markup.button.callback('üåá –í–µ—á–µ—Ä–æ–º', 'time_EVENING'),
            Markup.button.callback('üåô –ù–æ—á—å—é', 'time_NIGHT')
          ],
          [
            Markup.button.callback('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_to_frequency')
          ]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ —á–∞—Å—Ç–æ—Ç–µ –∏–≥—Ä
   */
  async handleContinueToFrequency(ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_PLAY_TIME) {
        return;
      }
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!userState.data.preferredPlayTime || userState.data.preferredPlayTime.length === 0) {
        userState.data.preferredPlayTime = ['EVENING'];
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Å—Ç–æ—Ç–µ –∏–≥—Ä
      userState.step = ProfileStep.AWAITING_FREQUENCY;
      this.stateService.setUserState(userId, userState);
      
      await ctx.reply(
        'üèÉ‚Äç‚ôÇÔ∏è –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?',
        Markup.inlineKeyboard([
          [Markup.button.callback('1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', 'frequency_1')],
          [Markup.button.callback('2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'frequency_2')],
          [Markup.button.callback('4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', 'frequency_3')]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —á–∞—Å—Ç–æ—Ç–µ –∏–≥—Ä: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—ç–∫—Ö–µ–Ω–¥–∞
   */
  async handleBackhandSelection(backhandType: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_BACKHAND) {
        return;
      }
      
      userState.data.backhandType = backhandType as 'ONE_HANDED' | 'TWO_HANDED';
      userState.step = ProfileStep.AWAITING_SURFACE;
      this.stateService.setUserState(userId, userState);
      
      const backhandName = backhandType === 'ONE_HANDED' ? '–æ–¥–Ω–æ—Ä—É—á–Ω—ã–π' : '–¥–≤—É—Ä—É—á–Ω—ã–π';
      this.logger.log(`–í—ã–±—Ä–∞–Ω –±—ç–∫—Ö–µ–Ω–¥: ${backhandName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–∫—Ä—ã—Ç–∏—è
      await ctx.reply(
        `‚úÖ –ë—ç–∫—Ö–µ–Ω–¥: ${backhandName}\n\nüèüÔ∏è –ö–∞–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üî¥ –•–∞—Ä–¥', 'surface_HARD'),
            Markup.button.callback('üü§ –ì—Ä—É–Ω—Ç', 'surface_CLAY')
          ],
          [
            Markup.button.callback('üü¢ –¢—Ä–∞–≤–∞', 'surface_GRASS'),
            Markup.button.callback('üîµ –ö–æ–≤–µ—Ä', 'surface_CARPET')
          ]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—ç–∫—Ö–µ–Ω–¥–∞: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
   */
  async handleSurfaceSelection(surface: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_SURFACE) {
        return;
      }
      
      userState.data.preferredSurface = surface as 'HARD' | 'CLAY' | 'GRASS' | 'CARPET';
      userState.step = ProfileStep.AWAITING_STYLE;
      this.stateService.setUserState(userId, userState);
      
      const surfaceNames = {
        'HARD': '—Ö–∞—Ä–¥',
        'CLAY': '–≥—Ä—É–Ω—Ç', 
        'GRASS': '—Ç—Ä–∞–≤–∞',
        'CARPET': '–∫–æ–≤–µ—Ä'
      };
      
      this.logger.log(`–í—ã–±—Ä–∞–Ω–æ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${surfaceNames[surface as keyof typeof surfaceNames]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –∏–≥—Ä—ã
      await ctx.reply(
        `‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ: ${surfaceNames[surface as keyof typeof surfaceNames]}\n\nüéÆ –ö–∞–∫–æ–π —É –≤–∞—Å —Å—Ç–∏–ª—å –∏–≥—Ä—ã?`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', 'style_UNIVERSAL')],
          [Markup.button.callback('üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–π', 'style_DEFENSIVE')],
          [Markup.button.callback('‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å –∑–∞–¥–Ω–µ–π –ª–∏–Ω–∏–∏', 'style_AGGRESSIVE')],
          [Markup.button.callback('üèê –°–µ—Ç–æ—á–Ω–∏–∫', 'style_NET_PLAYER')],
          [Markup.button.callback('üìö –ë–∞–∑–æ–≤—ã–π', 'style_BASIC')]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∫—Ä—ã—Ç–∏—è: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏–≥—Ä—ã
   */
  async handleStyleSelection(style: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_STYLE) {
        return;
      }
      
      userState.data.playingStyle = style as 'UNIVERSAL' | 'DEFENSIVE' | 'AGGRESSIVE' | 'NET_PLAYER' | 'BASIC';
      userState.step = ProfileStep.AWAITING_SHOT;
      this.stateService.setUserState(userId, userState);
      
      const styleNames = {
        'UNIVERSAL': '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
        'DEFENSIVE': '–∑–∞—â–∏—Ç–Ω—ã–π',
        'AGGRESSIVE': '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å –∑–∞–¥–Ω–µ–π –ª–∏–Ω–∏–∏',
        'NET_PLAYER': '—Å–µ—Ç–æ—á–Ω–∏–∫',
        'BASIC': '–±–∞–∑–æ–≤—ã–π'
      };
      
      this.logger.log(`–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${styleNames[style as keyof typeof styleNames]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª—é–±–∏–º–æ–≥–æ —É–¥–∞—Ä–∞
      await ctx.reply(
        `‚úÖ –°—Ç–∏–ª—å: ${styleNames[style as keyof typeof styleNames]}\n\nüéæ –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —É–¥–∞—Ä?`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üöÄ –ü–æ–¥–∞—á–∞', 'shot_SERVE'),
            Markup.button.callback('üí™ –§–æ—Ä—Ö–µ–Ω–¥', 'shot_FOREHAND')
          ],
          [
            Markup.button.callback('üéØ –ë—ç–∫—Ö–µ–Ω–¥', 'shot_BACKHAND'),
            Markup.button.callback('üèê –°–ª—ë—Ç', 'shot_VOLLEY')
          ],
          [Markup.button.callback('‚ö° –°–º—ç—à', 'shot_SMASH')]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è –∏–≥—Ä—ã: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º–æ–≥–æ —É–¥–∞—Ä–∞
   */
  async handleShotSelection(shot: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_SHOT) {
        return;
      }
      
      userState.data.favoriteShot = shot as 'SERVE' | 'FOREHAND' | 'BACKHAND' | 'VOLLEY' | 'SMASH';
      userState.step = ProfileStep.AWAITING_RACKET;
      this.stateService.setUserState(userId, userState);
      
      const shotNames = {
        'SERVE': '–ø–æ–¥–∞—á–∞',
        'FOREHAND': '—Ñ–æ—Ä—Ö–µ–Ω–¥',
        'BACKHAND': '–±—ç–∫—Ö–µ–Ω–¥',
        'VOLLEY': '—Å–ª—ë—Ç',
        'SMASH': '—Å–º—ç—à'
      };
      
      this.logger.log(`–í—ã–±—Ä–∞–Ω —É–¥–∞—Ä: ${shotNames[shot as keyof typeof shotNames]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–∞–∫–µ—Ç–∫–∏
      await ctx.reply(
        `‚úÖ –õ—é–±–∏–º—ã–π —É–¥–∞—Ä: ${shotNames[shot as keyof typeof shotNames]}\n\nüéæ –ö–∞–∫–æ–π —Ä–∞–∫–µ—Ç–∫–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ? (–Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ "–ª—é–±–∞—è")`
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
   */
  async handleOpponentSelection(preference: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_OPPONENT_PREF) {
        return;
      }
      
      userState.data.opponentPreference = preference as 'ANY' | 'MEN' | 'WOMEN' | 'SAME_LEVEL' | 'STRONGER' | 'WEAKER';
      userState.step = ProfileStep.COMPLETE;
      this.stateService.setUserState(userId, userState);
      
      this.logger.log(`–í—ã–±—Ä–∞–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É: ${preference} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      await this.completeProfileSetupNew(userId, userState.data);
      
      const preferenceNames = {
        'ANY': '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã',
        'MEN': '–º—É–∂—á–∏–Ω—ã',
        'WOMEN': '–∂–µ–Ω—â–∏–Ω—ã',
        'SAME_LEVEL': '–ø–æ—Ö–æ–∂–∏–π —É—Ä–æ–≤–µ–Ω—å',
        'STRONGER': '—Å–∏–ª—å–Ω–µ–µ –º–µ–Ω—è',
        'WEAKER': '—Å–ª–∞–±–µ–µ –º–µ–Ω—è'
      };
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      await ctx.reply(
        `‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É: ${preferenceNames[preference as keyof typeof preferenceNames]}\n\nüéâ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–≤–æ–∏—Ç—å –≤–∞–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üë§ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')],
          [Markup.button.callback('üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async handleTextMessage(ctx: Context): Promise<void> {
    if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;
    
    const userId = ctx.from.id.toString();
    const text = ctx.message.text;
    const userState = this.stateService.getUserState(userId);
    
    if (!userState) return;
    
    try {
      switch (userState.step) {
        case ProfileStep.AWAITING_CITY:
          await this.handleCityInput(text, ctx);
          break;
        case ProfileStep.AWAITING_COURT:
          await this.handleCourtInput(text, ctx);
          break;
        case ProfileStep.AWAITING_RACKET:
          await this.handleRacketInput(text, ctx);
          break;
        default:
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          break;
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
   */
  async handleCityInput(city: string, ctx: Context): Promise<void> {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    if (userState.step !== ProfileStep.AWAITING_CITY) return;
    
    userState.data.city = city;
    userState.step = ProfileStep.AWAITING_COURT;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply(`‚úÖ –ì–æ—Ä–æ–¥: ${city}\n\nüèüÔ∏è –ö–∞–∫–æ–π –∫–æ—Ä—Ç –≤—ã –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å" –∏–ª–∏ "–ª—é–±–æ–π")`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ—Ä—Ç–∞
   */
  async handleCourtInput(court: string, ctx: Context): Promise<void> {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    if (userState.step !== ProfileStep.AWAITING_COURT) return;
    
    userState.data.preferredCourt = court;
    userState.step = ProfileStep.AWAITING_HAND;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply(
      `‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç: ${court}\n\nü§ö –ö–∞–∫–æ–π —Ä—É–∫–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üëà –õ–µ–≤–æ–π', 'hand_LEFT'),
          Markup.button.callback('üëâ –ü—Ä–∞–≤–æ–π', 'hand_RIGHT')
        ]
      ])
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞–∫–µ—Ç–∫–∏
   */
  async handleRacketInput(racket: string, ctx: Context): Promise<void> {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    const userState = this.stateService.getUserState(userId);
    
    if (userState.step !== ProfileStep.AWAITING_RACKET) return;
    
    userState.data.racket = racket;
    userState.step = ProfileStep.AWAITING_OPPONENT_PREF;
    this.stateService.setUserState(userId, userState);
    
    await ctx.reply(
      `‚úÖ –†–∞–∫–µ—Ç–∫–∞: ${racket}\n\nüë• –° –∫–µ–º –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('ü§∑ –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã', 'opponent_ANY'),
          Markup.button.callback('üë® –¢–æ–ª—å–∫–æ —Å –º—É–∂—á–∏–Ω–∞–º–∏', 'opponent_MEN')
        ],
        [
          Markup.button.callback('üë© –¢–æ–ª—å–∫–æ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏', 'opponent_WOMEN'),
          Markup.button.callback('‚öñÔ∏è –ü–æ—Ö–æ–∂–∏–π —É—Ä–æ–≤–µ–Ω—å', 'opponent_SAME_LEVEL')
        ],
        [
          Markup.button.callback('üí™ –°–∏–ª—å–Ω–µ–µ –º–µ–Ω—è', 'opponent_STRONGER'),
          Markup.button.callback('üéØ –°–ª–∞–±–µ–µ –º–µ–Ω—è', 'opponent_WEAKER')
        ]
      ])
    );
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
   */
  async completeProfileSetupNew(telegramUserId: string, profileData: any): Promise<void> {
    try {
      this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è Telegram ID: ${telegramUserId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
      const user = await this.prisma.user.findUnique({
        where: { telegramId: telegramUserId }
      });
      
      if (!user) {
        throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      const userId = user.id;
      this.logger.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î —Å ID: ${userId}`);
      
      // –®–ê–ì 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å –í–°–ï–ú–ò —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const profileStepOneDto = {
        firstName: profileData.firstName || user.firstName,
        lastName: profileData.lastName || user.lastName || undefined,
        city: profileData.city,
        preferredCourt: profileData.preferredCourt,
        dominantHand: profileData.dominantHand,
        preferredPlayTime: profileData.preferredPlayTime || ['EVENING'],
        playsInTournaments: profileData.playsInTournaments || false,
        weeklyPlayFrequency: profileData.weeklyPlayFrequency || 'TWO_THREE',
        sportType: profileData.sportType || 'TENNIS' // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
      };
      
      this.logger.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –®–∞–≥ 1:`, profileStepOneDto);
      await this.usersService.completeProfileStepOne(userId.toString(), profileStepOneDto);
      
      // –®–ê–ì 2: –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —É—Ä–æ–≤–µ–Ω—å —Å –í–°–ï–ú–ò —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ 
      const profileStepTwoDto = {
        selfAssessedLevel: profileData.selfAssessedLevel || 'BEGINNER',
        backhandType: profileData.backhandType || 'TWO_HANDED',
        preferredSurface: profileData.preferredSurface || 'HARD',
        playingStyle: profileData.playingStyle || 'UNIVERSAL',
        favoriteShot: profileData.favoriteShot || 'FOREHAND',
        racket: profileData.racket || '–õ—é–±–∞—è',
        opponentPreference: profileData.opponentPreference || 'ANY'
      };
      
      this.logger.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –®–∞–≥ 2:`, profileStepTwoDto);
      await this.usersService.completeProfileStepTwo(userId.toString(), profileStepTwoDto);
      
      this.logger.log(`‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –®–∞–≥—É 2 –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
   */
  async handleStartStepTwo(ctx: Context): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –®–∞–≥—É 2: –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —É—Ä–æ–≤–µ–Ω—å
      userState.step = ProfileStep.AWAITING_LEVEL;
      this.stateService.setUserState(userId, userState);
      
      await ctx.reply(
        'ü•à **–®–ê–ì 2: –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —É—Ä–æ–≤–µ–Ω—å**\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ NTRP.\n\n–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?',
        Markup.inlineKeyboard([
          [Markup.button.callback('üî∞ –ù–æ–≤–∏—á–æ–∫ (1.0-2.0)', 'level_BEGINNER_1_2')],
          [Markup.button.callback('üéæ –õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)', 'level_AMATEUR_2_3')],
          [Markup.button.callback('üí™ –£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)', 'level_CONFIDENT_4')],
          [Markup.button.callback('üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0+)', 'level_TOURNAMENT_5')],
          [Markup.button.callback('üë®‚Äçüè´ –ü–æ–ª—É–ø—Ä–æ—Ñ–∏/—Ç—Ä–µ–Ω–µ—Ä', 'level_SEMI_PRO')]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –®–∞–≥—É 2: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –®–∞–≥–∞ 2
   */
  async handleLevelSelectionStepTwo(level: string, ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery();
      
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (userState.step !== ProfileStep.AWAITING_LEVEL) {
        return;
      }
      
      userState.data.selfAssessedLevel = level as "BEGINNER" | "AMATEUR" | "CONFIDENT" | "TOURNAMENT" | "SEMI_PRO";
      userState.step = ProfileStep.AWAITING_BACKHAND;
      this.stateService.setUserState(userId, userState);
      
      const levelNames = {
        'BEGINNER': '–ù–æ–≤–∏—á–æ–∫ (1.0-2.0)',
        'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)', 
        'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)',
        'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0+)',
        'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–∏/—Ç—Ä–µ–Ω–µ—Ä'
      };
      
      this.logger.log(`–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: ${levelNames[level as keyof typeof levelNames]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –±—ç–∫—Ö–µ–Ω–¥–∞
      await ctx.reply(
        `‚úÖ –£—Ä–æ–≤–µ–Ω—å: ${levelNames[level as keyof typeof levelNames]}\n\nüéæ –ö–∞–∫–æ–π —É –≤–∞—Å –±—ç–∫—Ö–µ–Ω–¥?`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('ü§ö –û–¥–Ω–æ—Ä—É—á–Ω—ã–π', 'backhand_ONE'),
            Markup.button.callback('üôå –î–≤—É—Ä—É—á–Ω—ã–π', 'backhand_TWO')
          ]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è –≤ –®–∞–≥–µ 2: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // =====================================
  // üîç –ü–£–ë–õ–ò–ß–ù–´–ï –ü–†–û–§–ò–õ–ò (–ß–£–ñ–ò–ï –ü–†–û–§–ò–õ–ò)
  // =====================================

  /**
   * –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async handlePublicProfile(ctx: Context, targetUserId: string): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const viewerUserId = ctx.from.id;
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${viewerUserId} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å ${targetUserId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const targetUser = await this.usersService.findById(targetUserId);
      if (!targetUser) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const stats = {
        matchesPlayed: 0,
        matchWins: 0,
        matchLosses: 0,
        tournamentsPlayed: 0,
        tournamentsWon: 0,
        lastActivity: new Date()
      };
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      const profileMessage = await this.formatPublicProfileMessage(targetUser, stats);
      const keyboard = this.keyboardService.getPublicProfileKeyboard(targetUserId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–∫–∞)
      await ctx.reply(profileMessage, {
        reply_markup: keyboard.reply_markup,
        parse_mode: 'HTML'
      });
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
   */
  private async formatPublicProfileMessage(user: any, userStats: any): Promise<string> {
    const username = user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
    const fullName = `${user.first_name} ${user.last_name || ''}`.trim();
    const level = this.getLevelText(user.profile?.selfAssessedLevel);
    const sportEmoji = user.profile?.sportType === 'PADEL' ? 'üèì' : 'üéæ';
    const sport = user.profile?.sportType === 'PADEL' ? '–ü–∞–¥–µ–ª' : '–¢–µ–Ω–Ω–∏—Å';
    const location = user.profile?.city ? `${user.profile.city}${user.profile.countryCode ? `, ${user.profile.countryCode}` : ''}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const rating = user.profile?.ntrpRating ? `${user.profile.ntrpRating}` : '–ù–µ –æ—Ü–µ–Ω–µ–Ω';
    
    // –ü—Ä–æ—Å—Ç—ã–µ –æ—á–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const powerPoints = user.profile?.powerPoints || 0;
    const activityPoints = user.profile?.activityPoints || 0;
    
    return `üë§ <b>${fullName}</b>
üè∑Ô∏è Username: ${username}
${sportEmoji} ${sport}

üéØ NTRP —Ä–µ–π—Ç–∏–Ω–≥: ${rating}
‚ö° –û—á–∫–∏ —Å–∏–ª—ã: ${powerPoints}
‚≠ê –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activityPoints}

üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location}
üèÜ –£—Ä–æ–≤–µ–Ω—å: ${level}
üëã –†—É–∫–∞: ${user.profile?.dominantHand === 'LEFT' ? '–õ–µ–≤–∞—è' : '–ü—Ä–∞–≤–∞—è'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìà –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${userStats?.matchesPlayed || 0}
üèÜ –ü–æ–±–µ–¥: ${userStats?.matchWins || 0}
üìâ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${userStats?.matchLosses || 0}
üîÅ –¢—É—Ä–Ω–∏—Ä–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: ${userStats?.tournamentsPlayed || 0}
üìà –ü–æ–±–µ–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${userStats?.tournamentsWon || 0}
${userStats?.lastActivity ? `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(userStats.lastActivity).toLocaleDateString('ru-RU')}` : ''}

<i>–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</i>`;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—ã–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–æ–º"
   */
  async handlePlayWithPlayer(ctx: Context, targetUserId: string): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å —Å ${targetUserId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏
      const targetUser = await this.usersService.findById(targetUserId);
      if (!targetUser) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const targetName = `${targetUser.first_name} ${targetUser.last_name || ''}`.trim();
      
      await ctx.reply(
        `üéæ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É</b>\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <b>${targetName}</b> —Å—ã–≥—Ä–∞—Ç—å –≤ –º–∞—Ç—á?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', `send_match_invite_${targetUserId}`)],
          [Markup.button.callback('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á', `schedule_match_${targetUserId}`)],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', `public_profile_${targetUserId}`)]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–°—ã–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–æ–º": ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å"
   */
  async handleMessagePlayer(ctx: Context, targetUserId: string): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏
      const targetUser = await this.usersService.findById(targetUserId);
      if (!targetUser) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const targetName = `${targetUser.first_name} ${targetUser.last_name || ''}`.trim();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const userState = this.stateService.getUserState(userId);
      userState.waitingForMessage = targetUserId;
      this.stateService.setUserState(userId, userState);
      
      await ctx.reply(
        `‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–í—ã –ø–∏—à–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${targetName}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', `public_profile_${targetUserId}`)]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ù–∞–ø–∏—Å–∞—Ç—å": ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"
   */
  async handleReportPlayer(ctx: Context, targetUserId: string): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–∞–µ—Ç –∂–∞–ª–æ–±—É –Ω–∞ ${targetUserId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏
      const targetUser = await this.usersService.findById(targetUserId);
      if (!targetUser) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const targetName = `${targetUser.first_name} ${targetUser.last_name || ''}`.trim();
      
      await ctx.reply(
        `‚ö†Ô∏è <b>–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É</b>\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ <b>${targetName}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('ü§¨ –ù–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ', `report_behavior_${targetUserId}`)],
          [Markup.button.callback('üö´ –°–ø–∞–º', `report_spam_${targetUserId}`)],
          [Markup.button.callback('üîû –ù–µ—É–º–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', `report_content_${targetUserId}`)],
          [Markup.button.callback('üé≠ –§–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç', `report_fake_${targetUserId}`)],
          [Markup.button.callback('üìù –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞', `report_other_${targetUserId}`)],
          [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', `public_profile_${targetUserId}`)]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async handleSendDirectMessage(ctx: Context, messageText: string): Promise<void> {
    try {
      if (!ctx.from) return;
      
      const userId = ctx.from.id.toString();
      const userState = this.stateService.getUserState(userId);
      
      if (!userState.waitingForMessage) {
        return;
      }
      
      const targetUserId = userState.waitingForMessage;
      const senderName = `${ctx.from.first_name} ${ctx.from.last_name || ''}`.trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.prisma.directMessage.create({
        data: {
          senderId: parseInt(userId),
          recipientId: parseInt(targetUserId),
          message: messageText
        }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      try {
        await ctx.telegram.sendMessage(parseInt(targetUserId), 
          `üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–û—Ç: <b>${senderName}</b>\n\n${messageText}`,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}: ${error}`);
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userState.waitingForMessage = undefined;
      this.stateService.setUserState(userId, userState);
      
      await ctx.reply(
        `‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', `public_profile_${targetUserId}`)]
        ])
      );
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }
}
