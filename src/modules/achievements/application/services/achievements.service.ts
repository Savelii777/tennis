import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../../../prisma/prisma.service';

export enum AchievementCode {
  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  FIRST_STEP = 'first_step',
  FIRST_MATCH = 'first_match',
  WARMUP = 'warmup', // 5 –º–∞—Ç—á–µ–π
  IN_RHYTHM = 'in_rhythm', // 10 –º–∞—Ç—á–µ–π
  REAL_PLAYER = 'real_player', // 50 –º–∞—Ç—á–µ–π
  
  // –ü–æ–±–µ–¥—ã
  FIRST_SUCCESS = 'first_success',
  CONFIDENCE_GROWS = 'confidence_grows', // 5 –ø–æ–±–µ–¥
  STABLE_WINNER = 'stable_winner', // 15 –ø–æ–±–µ–¥
  WINNING_STREAK = 'winning_streak', // 5 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥

  // –¢—É—Ä–Ω–∏—Ä—ã
  TOURNAMENT_WINNER = 'tournament_winner',
  BRACKET_MASTER = 'bracket_master',
  GROUP_CHAMPION = 'group_champion',
  LEAGUE_MASTER = 'league_master',
  SPEED_DEMON = 'speed_demon',
  CROWD_PLEASER = 'crowd_pleaser',
  TOURNAMENT_DOMINATOR = 'tournament_dominator',
  RANKED_CHAMPION = 'ranked_champion',
  TOURNAMENT_FINALIST = 'tournament_finalist',
  TOURNAMENT_MEDALIST = 'tournament_medalist',
  TOURNAMENT_STREAK_3 = 'tournament_streak_3',
  TOURNAMENT_STREAK_5 = 'tournament_streak_5',
  TOURNAMENT_LEGEND = 'tournament_legend',
  MONTHLY_CHAMPION = 'monthly_champion',
  MONTHLY_DOMINATOR = 'monthly_dominator',
}

export interface AchievementDefinition {
  code: string;
  name: string;
  description: string;
  icon: string;
  category: string;
}

@Injectable()
export class AchievementsService {
  private readonly logger = new Logger(AchievementsService.name);
  private readonly definitions: AchievementDefinition[] = [
    {
      code: 'first_step',
      name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
      icon: 'üëã',
      category: 'activity'
    },
    {
      code: 'first_match',
      name: '–ü–µ—Ä–≤—ã–π –º–∞—Ç—á',
      description: '–°—ã–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π –º–∞—Ç—á',
      icon: 'üéæ',
      category: 'matches'
    },
    {
      code: 'warmup',
      name: '–†–∞–∑–æ–≥—Ä–µ–≤',
      description: '–°—ã–≥—Ä–∞–ª 5 –º–∞—Ç—á–µ–π',
      icon: 'üî•',
      category: 'matches'
    },
    {
      code: 'in_rhythm',
      name: '–í —Ä–∏—Ç–º–µ',
      description: '–°—ã–≥—Ä–∞–ª 10 –º–∞—Ç—á–µ–π',
      icon: '‚ö°',
      category: 'matches'
    },
    {
      code: 'real_player',
      name: '–ù–∞—Å—Ç–æ—è—â–∏–π –∏–≥—Ä–æ–∫',
      description: '–°—ã–≥—Ä–∞–ª 50 –º–∞—Ç—á–µ–π',
      icon: 'üèÜ',
      category: 'matches'
    },
    {
      code: 'first_success',
      name: '–ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö',
      description: '–í—ã–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π –º–∞—Ç—á',
      icon: 'ü•á',
      category: 'victories'
    },
    {
      code: 'confidence_grows',
      name: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç',
      description: '–í—ã–∏–≥—Ä–∞–ª 5 –º–∞—Ç—á–µ–π',
      icon: 'üí™',
      category: 'victories'
    },
    {
      code: 'stable_winner',
      name: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å',
      description: '–í—ã–∏–≥—Ä–∞–ª 15 –º–∞—Ç—á–µ–π',
      icon: 'üåü',
      category: 'victories'
    },
    {
      code: 'winning_streak',
      name: '–ü–æ–±–µ–¥–Ω–∞—è —Å–µ—Ä–∏—è',
      description: '–í—ã–∏–≥—Ä–∞–ª 5 –º–∞—Ç—á–µ–π –ø–æ–¥—Ä—è–¥',
      icon: 'üî•',
      category: 'victories'
    },
    // –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    {
      code: 'tournament_winner',
      name: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞',
      description: '–í—ã–∏–≥—Ä–∞–ª —Ç—É—Ä–Ω–∏—Ä',
      icon: 'üèÜ',
      category: 'tournaments'
    },
    {
      code: 'bracket_master',
      name: '–ú–∞—Å—Ç–µ—Ä —Å–µ—Ç–∫–∏',
      description: '–í—ã–∏–≥—Ä–∞–ª —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ',
      icon: 'üéØ',
      category: 'tournaments'
    },
    {
      code: 'group_champion',
      name: '–ß–µ–º–ø–∏–æ–Ω –≥—Ä—É–ø–ø—ã',
      description: '–í—ã–∏–≥—Ä–∞–ª –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä',
      icon: 'üë•',
      category: 'tournaments'
    },
    {
      code: 'league_master',
      name: '–ú–∞—Å—Ç–µ—Ä –ª–∏–≥–∏',
      description: '–í—ã–∏–≥—Ä–∞–ª –ª–∏–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä',
      icon: 'üèÖ',
      category: 'tournaments'
    },
    {
      code: 'speed_demon',
      name: '–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏',
      description: '–í—ã–∏–≥—Ä–∞–ª –±–ª–∏—Ü-—Ç—É—Ä–Ω–∏—Ä',
      icon: '‚ö°',
      category: 'tournaments'
    },
    {
      code: 'crowd_pleaser',
      name: '–õ—é–±–∏–º–µ—Ü –ø—É–±–ª–∏–∫–∏',
      description: '–í—ã–∏–≥—Ä–∞–ª —Ç—É—Ä–Ω–∏—Ä —Å 8+ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
      icon: 'üëè',
      category: 'tournaments'
    },
    {
      code: 'tournament_dominator',
      name: '–î–æ–º–∏–Ω–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤',
      description: '–í—ã–∏–≥—Ä–∞–ª —Ç—É—Ä–Ω–∏—Ä —Å 16+ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
      icon: 'üëë',
      category: 'tournaments'
    },
    {
      code: 'ranked_champion',
      name: '–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —á–µ–º–ø–∏–æ–Ω',
      description: '–í—ã–∏–≥—Ä–∞–ª —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä',
      icon: '‚≠ê',
      category: 'tournaments'
    },
    {
      code: 'tournament_finalist',
      name: '–§–∏–Ω–∞–ª–∏—Å—Ç —Ç—É—Ä–Ω–∏—Ä–∞',
      description: '–ó–∞–Ω—è–ª 2-–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ',
      icon: 'ü•à',
      category: 'tournaments'
    },
    {
      code: 'tournament_medalist',
      name: '–ü—Ä–∏–∑–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞',
      description: '–ó–∞–Ω—è–ª 3-–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ',
      icon: 'ü•â',
      category: 'tournaments'
    },
    {
      code: 'tournament_streak_3',
      name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ä–∏—è',
      description: '–í—ã–∏–≥—Ä–∞–ª 3 —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–¥—Ä—è–¥',
      icon: 'üî•',
      category: 'tournaments'
    },
    {
      code: 'tournament_streak_5',
      name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è',
      description: '–í—ã–∏–≥—Ä–∞–ª 5 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–¥—Ä—è–¥',
      icon: 'üåü',
      category: 'tournaments'
    },
    {
      code: 'tournament_legend',
      name: '–õ–µ–≥–µ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤',
      description: '–í—ã–∏–≥—Ä–∞–ª 10 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–¥—Ä—è–¥',
      icon: 'üëë',
      category: 'tournaments'
    },
    {
      code: 'monthly_champion',
      name: '–ß–µ–º–ø–∏–æ–Ω –º–µ—Å—è—Ü–∞',
      description: '–í—ã–∏–≥—Ä–∞–ª 3 —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞ –º–µ—Å—è—Ü',
      icon: 'üìÖ',
      category: 'tournaments'
    },
    {
      code: 'monthly_dominator',
      name: '–î–æ–º–∏–Ω–∞—Ç–æ—Ä –º–µ—Å—è—Ü–∞',
      description: '–í—ã–∏–≥—Ä–∞–ª 5 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
      icon: 'üóìÔ∏è',
      category: 'tournaments'
    },
  ];

  constructor(private readonly prisma: PrismaService) {}

  async checkAndAwardAchievements(userId: string, eventType: string): Promise<string[]> {
    const newAchievements: string[] = [];

    try {
      switch (eventType) {
        case 'registration_completed':
          await this.checkRegistrationAchievements(userId, newAchievements);
          break;
        case 'match_played':
          await this.checkMatchAchievements(userId, newAchievements);
          break;
        case 'match_won':
          await this.checkVictoryAchievements(userId, newAchievements);
          break;
      }

      // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –Ω–æ–≤—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
      for (const code of newAchievements) {
        await this.awardAchievement(userId, code);
      }

    } catch (error) {
      this.logger.error(`Error checking achievements for user ${userId}:`, error);
    }

    return newAchievements;
  }

  async getAllDefinitions(): Promise<AchievementDefinition[]> {
    return this.definitions;
  }

  private async checkRegistrationAchievements(userId: string, newAchievements: string[]) {
    if (!(await this.hasAchievement(userId, AchievementCode.FIRST_STEP))) {
      newAchievements.push(AchievementCode.FIRST_STEP);
    }
  }

  private async checkMatchAchievements(userId: string, newAchievements: string[]) {
    const stats = await this.getUserStats(userId);
    if (!stats) return;

    // –ü–µ—Ä–≤—ã–π –º–∞—Ç—á
    if (stats.matchesPlayed >= 1 && !(await this.hasAchievement(userId, AchievementCode.FIRST_MATCH))) {
      newAchievements.push(AchievementCode.FIRST_MATCH);
    }

    // 5 –º–∞—Ç—á–µ–π
    if (stats.matchesPlayed >= 5 && !(await this.hasAchievement(userId, AchievementCode.WARMUP))) {
      newAchievements.push(AchievementCode.WARMUP);
    }

    // 10 –º–∞—Ç—á–µ–π
    if (stats.matchesPlayed >= 10 && !(await this.hasAchievement(userId, AchievementCode.IN_RHYTHM))) {
      newAchievements.push(AchievementCode.IN_RHYTHM);
    }

    // 50 –º–∞—Ç—á–µ–π
    if (stats.matchesPlayed >= 50 && !(await this.hasAchievement(userId, AchievementCode.REAL_PLAYER))) {
      newAchievements.push(AchievementCode.REAL_PLAYER);
    }
  }

  private async checkVictoryAchievements(userId: string, newAchievements: string[]) {
    const stats = await this.getUserStats(userId);
    if (!stats) return;

    // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
    if (stats.matchWins >= 1 && !(await this.hasAchievement(userId, AchievementCode.FIRST_SUCCESS))) {
      newAchievements.push(AchievementCode.FIRST_SUCCESS);
    }

    // 5 –ø–æ–±–µ–¥
    if (stats.matchWins >= 5 && !(await this.hasAchievement(userId, AchievementCode.CONFIDENCE_GROWS))) {
      newAchievements.push(AchievementCode.CONFIDENCE_GROWS);
    }

    // 15 –ø–æ–±–µ–¥
    if (stats.matchWins >= 15 && !(await this.hasAchievement(userId, AchievementCode.STABLE_WINNER))) {
      newAchievements.push(AchievementCode.STABLE_WINNER);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
    const winningStreak = await this.getWinningStreak(userId);
    if (winningStreak >= 5 && !(await this.hasAchievement(userId, AchievementCode.WINNING_STREAK))) {
      newAchievements.push(AchievementCode.WINNING_STREAK);
    }
  }

  private async hasAchievement(userId: string, code: AchievementCode): Promise<boolean> {
    const achievement = await this.prisma.userAchievement.findUnique({
      where: {
        userId_code: {
          userId: parseInt(userId),
          code: code,
        },
      },
    });
    return !!achievement;
  }

  private async awardAchievement(userId: string, code: string) {
    try {
      await this.prisma.userAchievement.create({
        data: {
          userId: parseInt(userId),
          code: code,
        },
      });
      this.logger.log(`Achievement ${code} awarded to user ${userId}`);
    } catch (error) {
      this.logger.error(`Failed to award achievement ${code} to user ${userId}:`, error);
    }
  }

  private async getUserStats(userId: string) {
    const user = await this.prisma.user.findUnique({
      where: { id: parseInt(userId) },
      include: {
        profile: true,
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–∑ —Å—Ö–µ–º—ã
        player1Matches: {
          where: { state: 'FINISHED' },
          orderBy: { createdAt: 'desc' },
        },
        player2Matches: {
          where: { state: 'FINISHED' },
          orderBy: { createdAt: 'desc' },
        },
        createdMatches: {
          where: { state: 'FINISHED' },
          orderBy: { createdAt: 'desc' },
        }
      },
    });

    if (!user) return null;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const allMatches = [
      ...(user.createdMatches || []),
      ...(user.player1Matches || []),
      ...(user.player2Matches || [])
    ];
    
    return {
      matchesPlayed: allMatches.length,
      matchWins: user.profile?.matchWins || 0,
      lastActivity: user.profile?.lastActivity,
      createdAt: user.createdAt,
    };
  }

  private async getWinningStreak(userId: string): Promise<number> {
    const matches = await this.prisma.match.findMany({
      where: {
        OR: [
          { creatorId: parseInt(userId) },
          { player1Id: parseInt(userId) },
          { player2Id: parseInt(userId) },
        ],
        state: 'FINISHED',
      },
      orderBy: { createdAt: 'desc' },
      take: 20,
    });

    let streak = 0;
    for (const match of matches) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
      const isWin = match.score && match.score.includes('6-');
      if (isWin) {
        streak++;
      } else {
        break;
      }
    }

    return streak;
  }

  async getUserAchievements(userId: string) {
    const userAchievements = await this.prisma.userAchievement.findMany({
      where: { userId: parseInt(userId) },
      orderBy: { awardedAt: 'desc' },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
    return userAchievements.map((achievement: any) => {
      const definition = this.definitions.find(def => def.code === achievement.code);
      return {
        ...achievement,
        definition: definition || {
          code: achievement.code,
          name: achievement.code,
          description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
          icon: 'üèÜ',
          category: 'unknown'
        }
      };
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   */
  async checkAndAwardSingleAchievement(userId: string, achievementCode: string, metadata?: any): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const hasAchievement = await this.prisma.userAchievement.findUnique({
        where: {
          userId_code: {
            userId: parseInt(userId),
            code: achievementCode,
          },
        },
      });

      if (hasAchievement) {
        return false; // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
      }

      // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      await this.awardAchievement(userId, achievementCode);
      
      this.logger.log(`üèÜ –ü—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievementCode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      return true;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievementCode}:`, error);
      return false;
    }
  }
}