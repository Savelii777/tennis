import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';
import { StoriesRepository } from '../../infrastructure/repositories/stories.repository';
import { TelegramFileService } from '../../infrastructure/external/telegram-file.service';
import { TelegramService } from '../../../telegram/telegram.service';
import { CreateStoryDto } from '../dto/create-story.dto';
import { StoryResponseDto } from '../dto/story-response.dto';
import { StoryStatus, MediaType } from '@prisma/client';
import { ConfigService } from '@nestjs/config';

interface UserStoryGroup {
  user: {
    id: number;
    name: string;
    avatar: string | null;
  };
  stories: {
    id: number;
    type: MediaType;
    fileUrl: string;
    caption: string | null;
    publishedAt: Date;
    viewsCount: number;
  }[];
}

@Injectable()
export class StoriesService {
  private readonly logger = new Logger(StoriesService.name);

  constructor(
    private readonly storiesRepository: StoriesRepository,
    private readonly telegramFileService: TelegramFileService,
    private readonly telegramService: TelegramService,
    private readonly configService: ConfigService,
  ) {}

  async createStory(userId: number, createStoryDto: CreateStoryDto): Promise<StoryResponseDto> {
    try {
      const story = await this.storiesRepository.create({
        userId,
        telegramFileId: createStoryDto.telegramFileId,
        type: createStoryDto.type,
        caption: createStoryDto.caption,
        status: StoryStatus.pending, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å PENDING –Ω–∞ pending
      });
      
      this.logger.log(`Story ${story.id} created by user ${userId} and pending approval`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Å—Ç–æ—Ä–∏—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        const adminIds = this.configService.get<string>('ADMIN_IDS', '')?.split(',') || [];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (const adminId of adminIds) {
          await this.telegramService.sendNotification(
            adminId,
            `üì± –ù–æ–≤–∞—è Story –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n` +
            `ID: ${story.id}\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n` +
            `–¢–∏–ø: ${story.type === MediaType.image ? '–§–æ—Ç–æ' : '–í–∏–¥–µ–æ'}\n\n` + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å IMAGE –Ω–∞ image
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`
          ).catch(err => this.logger.warn(`Failed to notify admin ${adminId}: ${err}`));
        }
      } catch (error) {
        this.logger.warn(`Failed to notify admins about new story: ${error}`);
      }
      
      return this.mapToResponseDto(story);
    } catch (error) {
      this.logger.error(`Error creating story: ${error}`);
      throw error;
    }
  }

  async getPublicStories(limit = 20): Promise<StoryResponseDto[]> {
    const stories = await this.storiesRepository.findPublic(limit);
    return stories.map(story => this.mapToResponseDto(story));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ—Ä–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "stories" (–∫–∞—Ä—É—Å–µ–ª—å –∞–≤–∞—Ç–∞—Ä–æ–∫)
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
   */
  async getStoriesForCarousel(): Promise<UserStoryGroup[]> {
    const stories = await this.storiesRepository.findPublicGroupedByUser();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userGroups: Record<string, UserStoryGroup> = {};
    
    for (const story of stories) {
      const userId = story.userId.toString();
      
      if (!userGroups[userId]) {
        userGroups[userId] = {
          user: {
            id: story.user?.id || story.userId,
            name: story.user ? `${story.user.firstName} ${story.user.lastName || ''}`.trim() : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            avatar: story.user?.profile?.avatarUrl || null,
          },
          stories: []
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      userGroups[userId].stories.push({
        id: story.id,
        type: story.type,
        fileUrl: `/stories/${story.id}/file`,
        caption: story.caption || null,
        publishedAt: story.publishedAt || story.createdAt,
        viewsCount: story.viewsCount || 0,
      });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    return Object.values(userGroups).sort((a, b) => {
      const lastStoryA = new Date(a.stories[a.stories.length - 1].publishedAt).getTime();
      const lastStoryB = new Date(b.stories[b.stories.length - 1].publishedAt).getTime();
      return lastStoryB - lastStoryA; // –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    });
  }

  async getUserStories(userId: string | number): Promise<any[]> {
    const userIdInt = typeof userId === 'string' ? parseInt(userId) : userId;
    const stories = await this.storiesRepository.findByUserId(userIdInt);
    return stories.map(story => this.mapToResponseDto(story));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
  async getPopularStories(limit = 10): Promise<any[]> {
    const stories = await this.storiesRepository.findPopular(limit);
    return stories.map(story => this.mapToResponseDto(story));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
  async getRecentStories(limit = 10): Promise<any[]> {
    const stories = await this.storiesRepository.findRecent(limit);
    return stories.map(story => this.mapToResponseDto(story));
  }

  async getStoryById(id: number): Promise<StoryResponseDto> {
    const story = await this.storiesRepository.findById(id);
    if (!story) {
      throw new NotFoundException('Story not found');
    }
    return this.mapToResponseDto(story);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
  async recordView(storyId: number): Promise<void> {
    await this.storiesRepository.incrementViews(storyId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞ –∏–∑ Telegram
   */
  async getFileUrl(storyId: number): Promise<{ url: string }> {
    const story = await this.storiesRepository.findById(storyId);
    if (!story) {
      throw new NotFoundException('Story not found');
    }
    
    if (story.status !== StoryStatus.approved) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å APPROVED –Ω–∞ approved
      throw new BadRequestException('Story is not published');
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL
    if (story.telegramFilePath) {
      const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
      return {
        url: `https://api.telegram.org/file/bot${token}/${story.telegramFilePath}`
      };
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ Telegram API
    try {
      const filePath = await this.telegramFileService.getFilePath(story.telegramFileId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –ë–î
      await this.storiesRepository.updateFilePath(storyId, filePath);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL
      const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
      return {
        url: `https://api.telegram.org/file/bot${token}/${filePath}`
      };
    } catch (error) {
      this.logger.error(`Error getting file path for story ${storyId}: ${error}`);
      throw new BadRequestException('Could not get file path from Telegram');
    }
  }

  async getPendingStories(): Promise<StoryResponseDto[]> {
    const stories = await this.storiesRepository.findPending();
    return stories.map(story => this.mapToResponseDto(story));
  }

  async approveStory(storyId: number): Promise<StoryResponseDto> {
    const story = await this.storiesRepository.findById(storyId);
    if (!story) {
      throw new NotFoundException('Story not found');
    }

    if (story.status !== StoryStatus.pending) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å PENDING –Ω–∞ pending
      throw new BadRequestException('Story is not pending approval');
    }

    const updatedStory = await this.storiesRepository.updateStatus(
      storyId, 
      StoryStatus.approved, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å APPROVED –Ω–∞ approved
      new Date()
    );
    
    try {
      await this.telegramService.sendNotification(
        updatedStory.userId,
        '‚úÖ –í–∞—à–∞ story –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!'
      );
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger.warn(`Failed to send approval notification: ${errorMessage}`);
    }

    this.logger.log(`Story ${storyId} approved`);
    return this.mapToResponseDto(updatedStory);
  }

  async rejectStory(storyId: number): Promise<StoryResponseDto> {
    const story = await this.storiesRepository.findById(storyId);
    if (!story) {
      throw new NotFoundException('Story not found');
    }

    if (story.status !== StoryStatus.pending) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å PENDING –Ω–∞ pending
      throw new BadRequestException('Story is not pending approval');
    }

    const updatedStory = await this.storiesRepository.updateStatus(storyId, StoryStatus.rejected); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å REJECTED –Ω–∞ rejected
    
    try {
      await this.telegramService.sendNotification(
        updatedStory.userId,
        '‚ùå –í–∞—à–∞ story –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º'
      );
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger.warn(`Failed to send rejection notification: ${errorMessage}`);
    }

    this.logger.log(`Story ${storyId} rejected`);
    return this.mapToResponseDto(updatedStory);
  }

  private mapToResponseDto(story: any): StoryResponseDto {
    return {
      id: story.id,
      userId: story.userId,
      user: story.user ? {
        id: story.user.id,
        firstName: story.user.firstName,
        lastName: story.user.lastName,
        username: story.user.username,
        avatar: story.user.profile?.avatarUrl
      } : undefined,
      type: story.type,
      status: story.status,
      caption: story.caption || null,
      viewsCount: story.viewsCount || 0,
      likesCount: story.likesCount || 0,
      createdAt: story.createdAt,
      publishedAt: story.publishedAt,
      fileUrl: story.id ? `/stories/${story.id}/file` : undefined, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å null –Ω–∞ undefined
    };
  }
}