import { PrismaClient } from '@prisma/client';
import { Logger } from '@nestjs/common';

const prisma = new PrismaClient();
const logger = new Logger('Seed');

async function main() {
  logger.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è foreign keys)
    logger.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await cleanDatabase();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    logger.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await createUsers();
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
    logger.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π...');
    const locations = await createLocations();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É
    logger.log('üéæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–≥—Ä—É...');
    await createGameRequests(users);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏
    logger.log('‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π...');
    await createMatches(users);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
    logger.log('üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
    const tournaments = await createTournaments(users);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    logger.log('üèÉ‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
    await createTrainings(users);
    
    // –°–æ–∑–¥–∞–µ–º –∫–µ–π—Å—ã –∏ –ø—Ä–∏–∑—ã
    logger.log('üéÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤...');
    await createCases();
    
    // –°–æ–∑–¥–∞–µ–º stories
    logger.log('üì± –°–æ–∑–¥–∞–Ω–∏–µ stories...');
    await createStories(users);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    logger.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
    await createReferrals(users);
    
    logger.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
    logger.log('');
    logger.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API:');
    logger.log('üëë –ê–¥–º–∏–Ω: telegram_id = "777888999", username = "admin"');
    logger.log('üèÜ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: telegram_id = "555666777", username = "organizer"');
    logger.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id = "123456789", username = "test_user"');
    logger.log('');
    logger.log('üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
    logger.log('üìö API Docs: http://localhost:3000/api');
    logger.log('üîß Auth Helper: http://localhost:3000/api/auth-helper');
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function cleanDatabase() {
  // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ foreign key constraints
  await prisma.referralActivity.deleteMany();
  await prisma.caseOpening.deleteMany();
  await prisma.caseWinning.deleteMany();
  await prisma.caseItem.deleteMany();
  await prisma.case.deleteMany();
  await prisma.story.deleteMany();
  await prisma.trainingRegistration.deleteMany();
  await prisma.training.deleteMany();
  await prisma.tournamentRegistration.deleteMany();
  await prisma.tournament.deleteMany();
  await prisma.match.deleteMany();
  await prisma.gameRequest.deleteMany();
  await prisma.userProfile.deleteMany();
  await prisma.location.deleteMany();
  await prisma.user.deleteMany();
}

async function createUsers() {
  logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  const admin = await prisma.user.create({
    data: {
      telegram_id: '777888999',
      username: 'admin',
      first_name: 'Admin',
      last_name: 'System',
      role: 'ADMIN',
      referral_code: 'ADMIN001',
      profile: {
        create: {
          avatar_url: 'https://avatars.githubusercontent.com/u/admin',
          city: '–ú–æ—Å–∫–≤–∞',
          rating_points: 2000,
          matches_played: 150,
          match_wins: 120,
          match_losses: 30,
          tournaments_played: 25,
          tournaments_won: 20
        }
      }
    },
    include: { profile: true }
  });

  logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞...');
  const organizer = await prisma.user.create({
    data: {
      telegram_id: '555666777',
      username: 'organizer',
      first_name: 'Tournament',
      last_name: 'Organizer',
      role: 'ORGANIZER',
      referral_code: 'ORG001',
      profile: {
        create: {
          avatar_url: 'https://avatars.githubusercontent.com/u/organizer',
          city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          rating_points: 1850,
          matches_played: 100,
          match_wins: 75,
          match_losses: 25,
          tournaments_played: 15,
          tournaments_won: 8
        }
      }
    },
    include: { profile: true }
  });

  logger.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const testUser = await prisma.user.create({
    data: {
      telegram_id: '123456789',
      username: 'test_user',
      first_name: 'Test',
      last_name: 'User',
      role: 'USER',
      referral_code: 'USER001',
      profile: {
        create: {
          avatar_url: 'https://avatars.githubusercontent.com/u/testuser',
          city: '–ú–æ—Å–∫–≤–∞',
          rating_points: 1200,
          matches_played: 45,
          match_wins: 28,
          match_losses: 17,
          tournaments_played: 5,
          tournaments_won: 2
        }
      }
    },
    include: { profile: true }
  });

  logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...');
  const players = [];
  const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'];
  const firstNames = ['–ê–ª–µ–∫—Å–µ–π', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–¥—Ä–µ–π', '–°–µ—Ä–≥–µ–π', '–ú–∞–∫—Å–∏–º', '–ò–≤–∞–Ω', '–ê—Ä—Ç–µ–º', '–ù–∏–∫–∏—Ç–∞', '–†–æ–º–∞–Ω', '–í–ª–∞–¥–∏–º–∏—Ä'];
  const lastNames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–í–æ–ª–∫–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ü–æ–ø–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤'];

  for (let i = 1; i <= 25; i++) {
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const city = cities[Math.floor(Math.random() * cities.length)];
    
    const player = await prisma.user.create({
      data: {
        telegram_id: `100000000${i.toString().padStart(2, '0')}`,
        username: `player${i}`,
        first_name: firstName,
        last_name: lastName,
        role: 'USER',
        referral_code: `PLR${i.toString().padStart(3, '0')}`,
        profile: {
          create: {
            avatar_url: `https://avatars.githubusercontent.com/u/player${i}`,
            city: city,
            rating_points: 800 + (i * 20) + Math.floor(Math.random() * 200),
            matches_played: 10 + Math.floor(Math.random() * 40),
            match_wins: Math.floor((10 + Math.random() * 40) * 0.6),
            match_losses: Math.floor((10 + Math.random() * 40) * 0.4),
            tournaments_played: Math.floor(i / 5) + Math.floor(Math.random() * 3),
            tournaments_won: Math.floor(i / 15) + (Math.random() > 0.7 ? 1 : 0)
          }
        }
      },
      include: { profile: true }
    });
    players.push(player);
  }

  return { admin, organizer, testUser, players };
}

async function createLocations() {
  const locations = [
    {
      name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
      address: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 16, –ú–æ—Å–∫–≤–∞',
      city: '–ú–æ—Å–∫–≤–∞',
      latitude: 55.7839,
      longitude: 37.6208,
      courts_count: 12,
      surface_type: 'HARD',
      indoor: true,
      price_per_hour: 2500,
      facilities: ['–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏', '–î—É—à–µ–≤—ã–µ', '–ü—Ä–æ–∫–∞—Ç —Ä–∞–∫–µ—Ç–æ–∫', '–ö–∞—Ñ–µ'],
      rating: 4.9,
      phone: '+7 (495) 123-45-67',
      website: 'https://olimp-tennis.ru'
    },
    {
      name: '–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"',
      address: '–õ—É–∂–Ω–µ—Ü–∫–∞—è –Ω–∞–±., 24, –ú–æ—Å–∫–≤–∞',
      city: '–ú–æ—Å–∫–≤–∞',
      latitude: 55.7158,
      longitude: 37.5615,
      courts_count: 8,
      surface_type: 'CLAY',
      indoor: false,
      price_per_hour: 3000,
      facilities: ['–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏', '–î—É—à–µ–≤—ã–µ', '–ú–∞–≥–∞–∑–∏–Ω'],
      rating: 4.7,
      phone: '+7 (495) 234-56-78',
      website: 'https://luzhniki-tennis.ru'
    },
    {
      name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–± "–ù–µ–≤—Å–∫–∏–π"',
      address: '–ù–µ–≤—Å–∫–∏–π –ø—Ä., 100, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      latitude: 59.9311,
      longitude: 30.3609,
      courts_count: 6,
      surface_type: 'HARD',
      indoor: true,
      price_per_hour: 2200,
      facilities: ['–†–∞–∑–¥–µ–≤–∞–ª–∫–∏', '–î—É—à–µ–≤—ã–µ', '–ü—Ä–æ–∫–∞—Ç —Ä–∞–∫–µ—Ç–æ–∫'],
      rating: 4.6,
      phone: '+7 (812) 345-67-89',
      website: 'https://nevsky-tennis.ru'
    },
    {
      name: '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–†—É–±–∏–Ω"',
      address: '—É–ª. –ë–∞—É–º–∞–Ω–∞, 58, –ö–∞–∑–∞–Ω—å',
      city: '–ö–∞–∑–∞–Ω—å',
      latitude: 55.7887,
      longitude: 49.1221,
      courts_count: 4,
      surface_type: 'HARD',
      indoor: true,
      price_per_hour: 1800,
      facilities: ['–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏'],
      rating: 4.4,
      phone: '+7 (843) 456-78-90'
    },
    {
      name: '–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"',
      address: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫, –ú–æ—Å–∫–≤–∞',
      city: '–ú–æ—Å–∫–≤–∞',
      latitude: 55.7903,
      longitude: 37.6739,
      courts_count: 10,
      surface_type: 'CLAY',
      indoor: false,
      price_per_hour: 1500,
      facilities: ['–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏'],
      rating: 4.2,
      phone: '+7 (495) 567-89-01'
    }
  ];

  const createdLocations = [];
  for (const locationData of locations) {
    const location = await prisma.location.create({
      data: locationData
    });
    createdLocations.push(location);
  }

  return createdLocations;
}

async function createGameRequests(users: any) {
  const { admin, organizer, testUser, players } = users;
  const allUsers = [admin, organizer, testUser, ...players];
  
  const gameTypes = ['SINGLES', 'DOUBLES'];
  const levels = ['BEGINNER', 'AMATEUR', 'INTERMEDIATE', 'ADVANCED'];
  const locations = [
    '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
    '–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"', 
    '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–± "–ù–µ–≤—Å–∫–∏–π"',
    '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å "–†—É–±–∏–Ω"',
    '–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"'
  ];

  for (let i = 0; i < 20; i++) {
    const creator = allUsers[Math.floor(Math.random() * allUsers.length)];
    const gameMode = gameTypes[Math.floor(Math.random() * gameTypes.length)];
    const level = levels[Math.floor(Math.random() * levels.length)];
    const location = locations[Math.floor(Math.random() * locations.length)];
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã (–æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ +30 –¥–Ω–µ–π)
    const daysFromNow = Math.floor(Math.random() * 30);
    const hoursFromNow = 9 + Math.floor(Math.random() * 12); // 9:00 - 21:00
    const requestDate = new Date();
    requestDate.setDate(requestDate.getDate() + daysFromNow);
    requestDate.setHours(hoursFromNow, 0, 0, 0);

    await prisma.gameRequest.create({
      data: {
        creator_id: creator.id,
        type: 'GAME',
        title: `–ò–≥—Ä–∞ ${gameMode.toLowerCase()} ${requestDate.toLocaleDateString('ru-RU')}`,
        description: `–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å. –£—Ä–æ–≤–µ–Ω—å: ${level.toLowerCase()}. –ö–æ—Ä—Ç: ${location}`,
        game_mode: gameMode,
        date_time: requestDate,
        location: location,
        location_name: location,
        max_players: gameMode === 'SINGLES' ? 2 : 4,
        current_players: 1,
        payment_type: Math.random() > 0.7 ? 'PAID' : 'FREE',
        rating_type: 'NTRP',
        status: Math.random() > 0.8 ? 'COMPLETED' : 'ACTIVE',
        format_info: {
          level: level,
          preferred_age: `${20 + Math.floor(Math.random() * 30)}-${40 + Math.floor(Math.random() * 20)}`,
          court_type: Math.random() > 0.5 ? 'HARD' : 'CLAY'
        }
      }
    });
  }
}

async function createMatches(users: any) {
  const { admin, organizer, testUser, players } = users;
  const allUsers = [admin, organizer, testUser, ...players];
  
  const matchTypes = ['ONE_ON_ONE', 'DOUBLES'];
  const results = ['WIN', 'LOSS'];
  const scores = ['6-4 6-2', '6-3 6-4', '7-5 6-3', '6-4 3-6 6-2', '6-2 6-1', '7-6 6-4'];

  for (let i = 0; i < 50; i++) {
    const player1 = allUsers[Math.floor(Math.random() * allUsers.length)];
    let player2 = allUsers[Math.floor(Math.random() * allUsers.length)];
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–≥—Ä–æ–∫–∏ —Ä–∞–∑–Ω—ã–µ
    while (player2.id === player1.id) {
      player2 = allUsers[Math.floor(Math.random() * allUsers.length)];
    }

    const matchType = matchTypes[Math.floor(Math.random() * matchTypes.length)];
    const result = results[Math.floor(Math.random() * results.length)];
    const score = scores[Math.floor(Math.random() * scores.length)];
    
    // –ú–∞—Ç—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
    const daysAgo = Math.floor(Math.random() * 90);
    const matchDate = new Date();
    matchDate.setDate(matchDate.getDate() - daysAgo);

    await prisma.match.create({
      data: {
        player1_id: player1.id,
        player2_id: player2.id,
        type: matchType,
        result: result,
        score: score,
        match_date: matchDate,
        location: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç',
        is_ranked: Math.random() > 0.3,
        duration_minutes: 60 + Math.floor(Math.random() * 120) // 60-180 –º–∏–Ω—É—Ç
      }
    });
  }
}

async function createTournaments(users: any) {
  const { admin, organizer, testUser, players } = users;
  
  const tournaments = [
    {
      title: '–ö—É–±–æ–∫ –ú–æ—Å–∫–≤—ã –ø–æ —Ç–µ–Ω–Ω–∏—Å—É 2024',
      description: '–ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π',
      type: 'SINGLE_ELIMINATION',
      start_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      end_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
      registration_end: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
      min_players: 8,
      max_players: 32,
      entry_fee: 2000,
      prize_pool: 50000,
      is_ranked: true,
      organizer_id: organizer.id,
      location: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
      location_name: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π',
      requirements: {
        min_rating: 1000,
        max_rating: 2000,
        min_age: 18,
        max_age: 45
      }
    },
    {
      title: '–û—Ç–∫—Ä—ã—Ç–æ–µ –ø–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞',
      description: '–¢—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
      type: 'ROUND_ROBIN',
      start_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
      end_date: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000),
      registration_end: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
      min_players: 6,
      max_players: 16,
      entry_fee: 3000,
      prize_pool: 80000,
      is_ranked: true,
      organizer_id: organizer.id,
      location: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–± "–ù–µ–≤—Å–∫–∏–π"',
      location_name: '–ù–µ–≤—Å–∫–∏–π',
      requirements: {
        min_rating: 1500,
        min_age: 21
      }
    },
    {
      title: '–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      description: '–î—Ä—É–∂–µ—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
      type: 'SINGLE_ELIMINATION',
      start_date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
      end_date: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000),
      registration_end: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
      min_players: 4,
      max_players: 16,
      entry_fee: 500,
      prize_pool: 5000,
      is_ranked: false,
      organizer_id: admin.id,
      location: '–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"',
      location_name: '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
      requirements: {
        max_rating: 1200,
        min_age: 16
      }
    }
  ];

  const createdTournaments = [];
  for (const tournamentData of tournaments) {
    const tournament = await prisma.tournament.create({
      data: tournamentData
    });
    createdTournaments.push(tournament);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä
    const playersToRegister = players.slice(0, Math.min(8, players.length));
    for (const player of playersToRegister) {
      await prisma.tournamentRegistration.create({
        data: {
          tournament_id: tournament.id,
          player_id: player.id,
          registration_date: new Date(),
          status: 'CONFIRMED'
        }
      });
    }
  }

  return createdTournaments;
}

async function createTrainings(users: any) {
  const { admin, organizer, players } = users;
  
  const trainings = [
    {
      title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥–∞—á–∏',
      description: '–ò–∑—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–¥–∞—á–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º',
      type: 'GROUP',
      date_time: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 10 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 2 –¥–Ω—è –≤ 10:00
      duration_minutes: 90,
      max_participants: 8,
      current_participants: 0,
      coach_id: admin.id,
      price: 1500,
      location: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
      location_name: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π',
      skill_level: 'BEGINNER',
      requirements: {
        min_age: 16,
        equipment_needed: ['–†–∞–∫–µ—Ç–∫–∞', '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞']
      }
    },
    {
      title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–∞–∫—Ç–∏–∫–∞ –∏–≥—Ä—ã',
      description: '–†–∞–∑–±–∏—Ä–∞–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–≥—Ä—ã',
      type: 'GROUP',
      date_time: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000 + 14 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –≤ 14:00
      duration_minutes: 120,
      max_participants: 6,
      current_participants: 0,
      coach_id: organizer.id,
      price: 2500,
      location: '–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"',
      location_name: '–õ—É–∂–Ω–∏–∫–∏',
      skill_level: 'ADVANCED',
      requirements: {
        min_age: 18,
        min_rating: 1400
      }
    },
    {
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      description: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º',
      type: 'INDIVIDUAL',
      date_time: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000 + 16 * 60 * 60 * 1000), // –∑–∞–≤—Ç—Ä–∞ –≤ 16:00
      duration_minutes: 60,
      max_participants: 1,
      current_participants: 0,
      coach_id: admin.id,
      price: 4000,
      location: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
      location_name: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π',
      skill_level: 'ANY'
    }
  ];

  for (const trainingData of trainings) {
    const training = await prisma.training.create({
      data: trainingData
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if (trainingData.type === 'GROUP') {
      const participantsCount = Math.min(3, players.length);
      for (let i = 0; i < participantsCount; i++) {
        await prisma.trainingRegistration.create({
          data: {
            training_id: training.id,
            participant_id: players[i].id,
            registration_date: new Date(),
            status: 'CONFIRMED'
          }
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await prisma.training.update({
        where: { id: training.id },
        data: { current_participants: participantsCount }
      });
    }
  }
}

async function createCases() {
  // –°–æ–∑–¥–∞–µ–º –∫–µ–π—Å—ã
  const cases = [
    {
      name: '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å',
      description: '–ë–∞–∑–æ–≤—ã–π –∫–µ–π—Å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏',
      price_balls: 100,
      rarity: 'COMMON',
      is_active: true,
      image_url: 'https://example.com/case1.jpg'
    },
    {
      name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å',
      description: '–ö–µ–π—Å —Å —Ü–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏',
      price_balls: 250,
      rarity: 'RARE',
      is_active: true,
      image_url: 'https://example.com/case2.jpg'
    },
    {
      name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å',
      description: '–°–∞–º—ã–π —Ä–µ–¥–∫–∏–π –∫–µ–π—Å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏',
      price_balls: 500,
      rarity: 'LEGENDARY',
      is_active: true,
      image_url: 'https://example.com/case3.jpg'
    },
    {
      name: '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–µ–π—Å',
      description: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–µ–π—Å —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏',
      price_balls: 200,
      rarity: 'EPIC',
      is_active: false, // –°–µ–∑–æ–Ω–Ω—ã–π –∫–µ–π—Å
      image_url: 'https://example.com/case4.jpg'
    }
  ];

  for (const caseData of cases) {
    const createdCase = await prisma.case.create({
      data: caseData
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
    await createCaseItems(createdCase.id, caseData.rarity);
  }
}

async function createCaseItems(caseId: string, caseRarity: string) {
  const itemsByRarity = {
    'COMMON': [
      { name: '10 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'COMMON', probability: 40, value: 10 },
      { name: '25 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'COMMON', probability: 30, value: 25 },
      { name: '–ë–µ–π–¥–∂ "–ù–æ–≤–∏—á–æ–∫"', description: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–µ–π–¥–∂', type: 'VIRTUAL', rarity: 'COMMON', probability: 20, value: 0 },
      { name: '–ë—Ä–∞—Å–ª–µ—Ç —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π', description: '–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç', type: 'PHYSICAL', rarity: 'COMMON', probability: 10, value: 300 }
    ],
    'RARE': [
      { name: '50 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'RARE', probability: 35, value: 50 },
      { name: '100 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'RARE', probability: 25, value: 100 },
      { name: '–ë–µ–π–¥–∂ "–ü—Ä–æ—Ñ–∏"', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂', type: 'VIRTUAL', rarity: 'RARE', probability: 20, value: 0 },
      { name: '–¢–µ–Ω–Ω–∏—Å–Ω–∞—è –∫–µ–ø–∫–∞', description: '–§–∏—Ä–º–µ–Ω–Ω–∞—è –∫–µ–ø–∫–∞', type: 'PHYSICAL', rarity: 'RARE', probability: 15, value: 800 },
      { name: '–ù–∞–±–æ—Ä –º—è—á–µ–π Wilson', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º—è—á–∏ (3 —à—Ç)', type: 'PHYSICAL', rarity: 'RARE', probability: 5, value: 1200 }
    ],
    'EPIC': [
      { name: '150 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'EPIC', probability: 30, value: 150 },
      { name: '250 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'EPIC', probability: 20, value: 250 },
      { name: '–ë–µ–π–¥–∂ "–≠–∫—Å–ø–µ—Ä—Ç"', description: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±–µ–π–¥–∂', type: 'VIRTUAL', rarity: 'EPIC', probability: 15, value: 0 },
      { name: '–¢–µ–Ω–Ω–∏—Å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ Nike', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞', type: 'PHYSICAL', rarity: 'EPIC', probability: 20, value: 2500 },
      { name: '–°—Ç—Ä—É–Ω—ã Luxilon', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–Ω—ã', type: 'PHYSICAL', rarity: 'EPIC', probability: 10, value: 1800 },
      { name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —É—Ä–æ–∫', description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º', type: 'PHYSICAL', rarity: 'EPIC', probability: 5, value: 4000 }
    ],
    'LEGENDARY': [
      { name: '500 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'LEGENDARY', probability: 25, value: 500 },
      { name: '1000 –º—è—á–µ–π', description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', type: 'VIRTUAL', rarity: 'LEGENDARY', probability: 15, value: 1000 },
      { name: '–ë–µ–π–¥–∂ "–õ–µ–≥–µ–Ω–¥–∞"', description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –±–µ–π–¥–∂', type: 'VIRTUAL', rarity: 'LEGENDARY', probability: 10, value: 0 },
      { name: '–†–∞–∫–µ—Ç–∫–∞ Wilson Pro Staff', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∫–µ—Ç–∫–∞', type: 'PHYSICAL', rarity: 'LEGENDARY', probability: 25, value: 15000 },
      { name: '–ö–æ–º–ø–ª–µ–∫—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ Adidas', description: '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç: —Ñ—É—Ç–±–æ–ª–∫–∞, —à–æ—Ä—Ç—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏', type: 'PHYSICAL', rarity: 'LEGENDARY', probability: 15, value: 12000 },
      { name: 'VIP —Ç—É—Ä–Ω–∏—Ä –ø–∞–∫–µ—Ç', description: '–£—á–∞—Å—Ç–∏–µ –≤ VIP —Ç—É—Ä–Ω–∏—Ä–µ + —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞', type: 'PHYSICAL', rarity: 'LEGENDARY', probability: 10, value: 25000 }
    ]
  };

  const items = itemsByRarity[caseRarity] || itemsByRarity['COMMON'];

  for (const itemData of items) {
    await prisma.caseItem.create({
      data: {
        case_id: caseId,
        name: itemData.name,
        description: itemData.description,
        type: itemData.type,
        rarity: itemData.rarity,
        probability: itemData.probability,
        value: itemData.value,
        image_url: `https://example.com/items/${itemData.name.toLowerCase().replace(/\s/g, '_')}.jpg`,
        is_active: true
      }
    });
  }
}

async function createStories(users: any) {
  const { admin, organizer, testUser, players } = users;
  const allUsers = [admin, organizer, testUser, ...players.slice(0, 10)];

  const storyTypes = ['PHOTO', 'VIDEO'];
  const descriptions = [
    '–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è! üéæ',
    '–ü–æ–±–µ–¥–∞ –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ! üèÜ',
    '–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ—Ö–Ω–∏–∫–æ–π –ø–æ–¥–∞—á–∏ üí™',
    '–ö—Ä–∞—Å–∏–≤—ã–π —É–¥–∞—Ä —Å –∑–∞–¥–Ω–µ–π –ª–∏–Ω–∏–∏ üî•',
    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–µ - –≤—Å–µ–≥–¥–∞ –≤–µ—Å–µ–ª–æ! üòä',
    '–ù–æ–≤–∞—è —Ä–∞–∫–µ—Ç–∫–∞ –≤ –¥–µ–ª–µ! üéæ',
    '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É –∏–¥–µ—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º üèÉ‚Äç‚ôÇÔ∏è',
    '–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞ ‚òÄÔ∏è',
    '–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–∞–∫—Ç–∏–∫–æ–π –∏–≥—Ä—ã üß†',
    '–ü–æ—Å–ª–µ –º–∞—Ç—á–∞ - –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö üòå'
  ];

  for (let i = 0; i < 15; i++) {
    const creator = allUsers[Math.floor(Math.random() * allUsers.length)];
    const type = storyTypes[Math.floor(Math.random() * storyTypes.length)];
    const description = descriptions[Math.floor(Math.random() * descriptions.length)];
    
    // Stories –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const hoursAgo = Math.floor(Math.random() * 168); // 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞
    const createdAt = new Date(Date.now() - hoursAgo * 60 * 60 * 1000);

    await prisma.story.create({
      data: {
        creator_id: creator.id,
        type: type,
        description: description,
        media_url: `https://example.com/stories/${type.toLowerCase()}/${i + 1}.${type === 'PHOTO' ? 'jpg' : 'mp4'}`,
        thumbnail_url: type === 'VIDEO' ? `https://example.com/stories/thumbnails/${i + 1}.jpg` : undefined,
        created_at: createdAt,
        expires_at: new Date(createdAt.getTime() + 24 * 60 * 60 * 1000), // –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        is_active: hoursAgo < 24, // –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        likes_count: Math.floor(Math.random() * 20),
        views_count: Math.floor(Math.random() * 100) + 10
      }
    });
  }
}

async function createReferrals(users: any) {
  const { admin, organizer, testUser, players } = users;
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
  // testUser –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
  const referredByTestUser = players.slice(0, 3);
  for (const player of referredByTestUser) {
    await prisma.user.update({
      where: { id: player.id },
      data: { referred_by: testUser.id }
    });

    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await prisma.referralActivity.create({
      data: {
        referrer_id: testUser.id,
        referred_id: player.id,
        action: 'REGISTRATION',
        reward_balls: 50,
        created_at: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      }
    });
  }

  // organizer –ø—Ä–∏–≥–ª–∞—Å–∏–ª –µ—â–µ –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤
  const referredByOrganizer = players.slice(3, 8);
  for (const player of referredByOrganizer) {
    await prisma.user.update({
      where: { id: player.id },
      data: { referred_by: organizer.id }
    });

    await prisma.referralActivity.create({
      data: {
        referrer_id: organizer.id,
        referred_id: player.id,
        action: 'REGISTRATION',
        reward_balls: 50,
        created_at: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000) // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π
      }
    });
  }

  // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ –º–∞—Ç—á–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
  for (const player of referredByTestUser) {
    if (Math.random() > 0.5) {
      await prisma.referralActivity.create({
        data: {
          referrer_id: testUser.id,
          referred_id: player.id,
          action: 'FIRST_MATCH',
          reward_balls: 25,
          created_at: new Date(Date.now() - Math.random() * 20 * 24 * 60 * 60 * 1000)
        }
      });
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –º—è—á–µ–π —É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
  const testUserRewards = referredByTestUser.length * 50 + Math.floor(referredByTestUser.length * 0.5) * 25;
  await prisma.user.update({
    where: { id: testUser.id },
    data: { balls_balance: 300 + testUserRewards }
  });

  const organizerRewards = referredByOrganizer.length * 50 + Math.floor(referredByOrganizer.length * 0.5) * 25;
  await prisma.user.update({
    where: { id: organizer.id },
    data: { balls_balance: 500 + organizerRewards }
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await prisma.user.update({
    where: { id: admin.id },
    data: { balls_balance: 1000 }
  });

  // –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –º—è—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
  for (const player of players) {
    await prisma.user.update({
      where: { id: player.id },
      data: { balls_balance: 50 + Math.floor(Math.random() * 200) }
    });
  }
}

main()
  .catch((e) => {
    logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–¥–∞:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });