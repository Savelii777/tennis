"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.seedReferrals = void 0;
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function seedReferrals() {
    console.log('üîó Seeding referrals...');
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
        take: 10,
        orderBy: { id: 'asc' }
    });
    if (users.length < 3) {
        console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
        return;
    }
    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < 3; i++) {
        const user = users[i];
        const referralCode = `REF${user.id.toString().padStart(3, '0')}`;
        await prisma.user.update({
            where: { id: user.id },
            data: { referralCode }
        });
        console.log(`–°–æ–∑–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ${referralCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
    }
    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const referrer = users[0]; // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ—Ñ–µ—Ä–µ—Ä
    const now = new Date();
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    for (let i = 3; i < Math.min(8, users.length); i++) {
        const referredUser = users[i];
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
        await prisma.user.update({
            where: { id: referredUser.id },
            data: { referredBy: referrer.id }
        });
        // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const registeredAt = new Date(now.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000);
        const isActive = Math.random() > 0.3; // 70% –∞–∫—Ç–∏–≤–Ω—ã—Ö
        await prisma.referralActivity.create({
            data: {
                referrerId: referrer.id,
                invitedUserId: referredUser.id,
                registeredAt,
                isActive,
                firstMatchAt: isActive ? new Date(registeredAt.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000) : null,
                inviteSource: ['telegram', 'whatsapp', 'direct'][Math.floor(Math.random() * 3)],
            }
        });
    }
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const referralCount = await prisma.referralActivity.count({
        where: { referrerId: referrer.id }
    });
    const activeCount = await prisma.referralActivity.count({
        where: {
            referrerId: referrer.id,
            isActive: true
        }
    });
    await prisma.referralStats.create({
        data: {
            userId: referrer.id,
            totalInvited: referralCount,
            activeInvited: activeCount,
            registeredToday: 0,
            registeredThisWeek: 2,
            registeredThisMonth: referralCount,
            achievementsEarned: referralCount >= 5 ? ['FIRST_INVITE', 'SOCIAL_BUTTERFLY'] : ['FIRST_INVITE'],
            bonusPointsEarned: referralCount * 10,
        }
    });
    console.log('‚úÖ Referrals seeded successfully!');
}
exports.seedReferrals = seedReferrals;
