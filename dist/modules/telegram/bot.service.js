"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BotService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotService = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const users_service_1 = require("../users/application/services/users.service");
const balls_service_1 = require("../users/application/services/balls.service");
const requests_service_1 = require("../requests/application/services/requests.service");
const tournaments_service_1 = require("../tournaments/application/services/tournaments.service");
const matches_service_1 = require("../matches/application/services/matches.service");
const trainings_service_1 = require("../trainings/application/services/trainings.service");
const stories_service_1 = require("../stories/application/services/stories.service");
const cases_service_1 = require("../cases/application/services/cases.service");
const case_opening_service_1 = require("../cases/application/services/case-opening.service");
const telegram_service_1 = require("./telegram.service");
const notifications_service_1 = require("../notifications/application/services/notifications.service");
const profile_state_enum_1 = require("./interfaces/profile-state.enum");
const create_request_dto_1 = require("../requests/application/dto/create-request.dto");
const tournament_enum_1 = require("../tournaments/domain/enums/tournament.enum");
const match_enum_1 = require("../matches/domain/enums/match.enum");
const prisma_service_1 = require("../../prisma/prisma.service");
const achievements_service_1 = require("../achievements/application/services/achievements.service");
const ratings_service_1 = require("../ratings/ratings.service");
const settings_service_1 = require("../settings/settings.service");
const locations_service_1 = require("../locations/application/services/locations.service");
const referrals_service_1 = require("../referrals/application/services/referrals.service");
let BotService = BotService_1 = class BotService {
    constructor(bot, usersService, ballsService, requestsService, tournamentsService, matchesService, trainingsService, storiesService, casesService, caseOpeningService, telegramService, notificationsService, prisma, achievementsService, ratingsService, settingsService, locationsService, referralsService) {
        this.bot = bot;
        this.usersService = usersService;
        this.ballsService = ballsService;
        this.requestsService = requestsService;
        this.tournamentsService = tournamentsService;
        this.matchesService = matchesService;
        this.trainingsService = trainingsService;
        this.storiesService = storiesService;
        this.casesService = casesService;
        this.caseOpeningService = caseOpeningService;
        this.telegramService = telegramService;
        this.notificationsService = notificationsService;
        this.prisma = prisma;
        this.achievementsService = achievementsService;
        this.ratingsService = ratingsService;
        this.settingsService = settingsService;
        this.locationsService = locationsService;
        this.referralsService = referralsService;
        this.logger = new common_1.Logger(BotService_1.name);
        // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        this.userStates = new Map();
    }
    async onModuleInit() {
        this.logger.log('üöÄ BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.logger.log(`Bot instance: ${!!this.bot}`);
        // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.bot.use(async (ctx, next) => {
            this.logger.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${ctx.updateType} –æ—Ç ${ctx.from?.id}`);
            if (ctx.message && 'text' in ctx.message) {
                this.logger.log(`üìù –¢–µ–∫—Å—Ç: "${ctx.message.text}"`);
            }
            await next();
        });
        this.logger.log('‚úÖ Middleware –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    // ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
    getMainKeyboard() {
        return telegraf_1.Markup.keyboard([
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
            ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
            ['üì± Stories', 'üéÅ –ö–µ–π—Å—ã'],
            ['üìç –ö–æ—Ä—Ç—ã', 'üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'],
            ['ü§ñ AI-Coach', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç']
        ]).resize();
    }
    getUserState(userId) {
        return this.userStates.get(userId) || { step: profile_state_enum_1.ProfileStep.IDLE, data: {} };
    }
    setUserState(userId, state) {
        this.userStates.set(userId, state);
    }
    clearUserState(userId) {
        this.userStates.delete(userId);
    }
    async handleStart(ctx) {
        this.logger.log(`üåü START –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.first_name})`);
        try {
            if (!ctx.from) {
                this.logger.warn('–ù–µ—Ç from field');
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ deep link
            const startPayload = ctx.message && 'text' in ctx.message
                ? ctx.message.text.split(' ')[1]
                : null;
            const telegramChatId = ctx.chat?.id;
            await ctx.reply('üéæ –ó–∞–ø—É—Å–∫–∞—é Tennis Bot...');
            let user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                this.logger.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                const userData = {
                    telegram_id: ctx.from.id.toString(),
                    username: ctx.from.username || `user_${ctx.from.id}`,
                    first_name: ctx.from.first_name,
                    last_name: ctx.from.last_name || undefined,
                    photo_url: ''
                };
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await this.usersService.create(userData);
                this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (telegramChatId) {
                    await this.usersService.updateTelegramChatId(user.id.toString(), telegramChatId);
                    this.logger.log(`üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: ${telegramChatId}`);
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                if (startPayload && startPayload.startsWith('ref_')) {
                    const referralCode = startPayload.replace('ref_', '');
                    this.logger.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
                    try {
                        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
                        const referralUserId = parseInt(referralCode.replace(/^0+/, '')) || null;
                        if (referralUserId && referralUserId !== user.id) {
                            const referrer = await this.usersService.findById(referralUserId.toString());
                            if (referrer) {
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                                await this.usersService.setReferrer(user.id.toString(), referrer.id.toString());
                                // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                                const bonusAmount = 50; // 50 –º—è—á–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                                await this.ballsService.addBalls(referrer.id.toString(), bonusAmount, 'BONUS', `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${user.first_name}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º firstName –≤–º–µ—Å—Ç–æ first_name
                                );
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                                if (this.notificationsService) {
                                    await this.notificationsService.sendReferralBonusNotification(referrer.id, {
                                        amount: bonusAmount,
                                        referredUserName: user.first_name,
                                        totalBalance: await this.ballsService.getUserBalance(referrer.id.toString())
                                    });
                                }
                                // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                                await ctx.reply(`üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!**\n\n` +
                                    `ü§ù –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏–≥—Ä–æ–∫–∞ **${referrer.first_name}**!\n\n` +
                                    `üéæ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
                                    `‚Ä¢ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
                                    `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
                                    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
                                    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã\n\n` +
                                    `–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üèÜ`, {
                                    parse_mode: 'Markdown',
                                    ...this.getMainKeyboard()
                                });
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                if (this.notificationsService) {
                                    await this.notificationsService.createNotification({
                                        userId: user.id,
                                        type: 'SYSTEM_MESSAGE',
                                        message: `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.`,
                                        payload: {
                                            referrerId: referrer.id,
                                            referrerName: referrer.first_name,
                                            welcomeBonus: true
                                        },
                                        sendTelegram: false // –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—ã—à–µ
                                    });
                                }
                                this.logger.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${user.id} <- ${referrer.id}`);
                            }
                            else {
                                this.logger.warn(`–†–µ—Ñ–µ—Ä–µ—Ä —Å ID ${referralUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                            }
                        }
                    }
                    catch (error) {
                        this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error}`);
                    }
                }
                else {
                    // –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    await ctx.reply(`üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!**\n\n` +
                        `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
                        `üéæ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n` +
                        `‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
                        `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
                        `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π\n` +
                        `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
                        `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
                        `–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è! üë§`, {
                        parse_mode: 'Markdown',
                        ...this.getMainKeyboard()
                    });
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (this.notificationsService) {
                        await this.notificationsService.createNotification({
                            userId: user.id,
                            type: 'SYSTEM_MESSAGE',
                            message: `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã.`,
                            payload: {
                                isNewUser: true,
                                registrationDate: new Date().toISOString()
                            },
                            sendTelegram: false
                        });
                    }
                    // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const startBonus = 100;
                    await this.ballsService.addBalls(user.id.toString(), startBonus, 'BONUS', '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
                }
            }
            else {
                this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (telegramChatId && user.telegramChatId !== BigInt(telegramChatId)) {
                    await this.usersService.updateTelegramChatId(user.id.toString(), telegramChatId);
                    this.logger.log(`üí¨ –û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${telegramChatId}`);
                }
                // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
                if (this.telegramService) {
                    await this.telegramService.toggleNotifications(user.id, true);
                }
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
                const unreadNotifications = this.notificationsService
                    ? await this.notificationsService.getUnreadCount(user.id)
                    : 0;
                let welcomeMessage = `üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!**\n\n`;
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
                if (ballsBalance > 0) {
                    welcomeMessage += `üéæ **–ë–∞–ª–∞–Ω—Å:** ${ballsBalance} –º—è—á–µ–π\n`;
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
                if (unreadNotifications > 0) {
                    welcomeMessage += `üîî **–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${unreadNotifications}\n`;
                }
                welcomeMessage += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
                await ctx.reply(welcomeMessage, {
                    parse_mode: 'Markdown',
                    ...this.getMainKeyboard()
                });
                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                if (unreadNotifications > 0) {
                    const notificationsKeyboard = telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback(`üì¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${unreadNotifications})`, 'view_notifications')]
                    ]);
                    await ctx.reply(`üîî –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`, {
                        reply_markup: notificationsKeyboard.reply_markup
                    });
                }
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStart: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        }
    }
    // ==================== –ü–†–û–§–ò–õ–¨ ====================
    async handleProfile(ctx) {
        this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            let ratingInfo = '';
            try {
                const rating = await this.ratingsService.getRatingForUser(user.id);
                if (rating) {
                    const levelText = this.getSkillLevelText(rating.skillRating);
                    ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n` +
                        `üéØ **NTRP —É—Ä–æ–≤–µ–Ω—å:** ${rating.skillRating?.toFixed(1)} (${levelText})\n` +
                        `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n` +
                        `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n`;
                }
                else {
                    ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!\n`;
                }
            }
            catch (error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: ${error}`);
                ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n`;
            }
            try {
                const stats = await this.usersService.getProfileStatistics(user.id.toString());
                const profileStatus = await this.usersService.getProfileCompletionStatus(user.id.toString());
                const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
                const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
                    `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
                    `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `ID: ${user.telegram_id}\n\n` +
                    ratingInfo + `\n` +
                    `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                    `üéæ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}\n` +
                    `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins}\n` +
                    `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}\n` +
                    `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n` +
                    `üéæ –ú—è—á–µ–π: ${ballsBalance}\n\n`;
                `${!profileStatus.profileComplete ? '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω' : '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω'}`;
                const keyboard = telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
                    [telegraf_1.Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
                    [telegraf_1.Markup.button.callback('üéæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π', 'match_history')],
                    [telegraf_1.Markup.button.callback('üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
                ]);
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                });
            }
            catch (statsError) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError instanceof Error ? statsError.message : String(statsError)}`);
                const keyboard = telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
                ]);
                await ctx.reply(`üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
                    `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
                    `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `ID: ${user.telegram_id}\n\n` +
                    `‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                });
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    // ==================== –ò–ì–†–ê –ò –ó–ê–Ø–í–ö–ò ====================
    async handlePlay(ctx) {
        this.logger.log('üéæ –ò–ì–†–ê–¢–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É', 'find_game')],
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                [telegraf_1.Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_requests')],
                [telegraf_1.Markup.button.callback('üí´ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'active_requests')],
            ]);
            await ctx.reply(`üéæ **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePlay: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä—ã');
        }
    }
    async handleFindGame(ctx) {
        await ctx.answerCbQuery();
        try {
            if (!ctx.from)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const requests = await this.requestsService.findAll({
                page: 1,
                limit: 10
            });
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            const filteredRequests = requests.filter((req) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
                const creatorTelegramId = req.creator?.telegram_id ||
                    req.creator?.telegramId ||
                    req.creatorId?.toString();
                return creatorTelegramId && creatorTelegramId !== ctx.from?.id.toString();
            }).slice(0, 10);
            if (filteredRequests.length === 0) {
                await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                    `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`, { parse_mode: 'Markdown' });
                return;
            }
            let message = `üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n`;
            const buttons = [];
            filteredRequests.forEach((request, index) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                const datetime = request.dateTime || request.scheduledTime
                    ? new Date(request.dateTime || request.scheduledTime).toLocaleString('ru-RU')
                    : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const creatorName = request.creator?.first_name ||
                    request.creator?.firstName ||
                    request.creatorName ||
                    '–ò–≥—Ä–æ–∫';
                const location = request.locationName ||
                    request.location ||
                    '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const currentPlayers = request.currentPlayers || 0;
                const maxPlayers = request.maxPlayers || 2;
                message += `${index + 1}. **${creatorName}**\n`;
                message += `üìÖ ${datetime}\n`;
                message += `üìç ${location}\n`;
                message += `üë• ${currentPlayers}/${maxPlayers}\n`;
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (request.description && request.description !== '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å') {
                    message += `üìù ${request.description}\n`;
                }
                message += `\n`;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è`, `respond_request_${request.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_game')]);
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);
            const keyboard = telegraf_1.Markup.inlineKeyboard(buttons);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindGame: ${error}`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.logger.error(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error, null, 2)}`);
            await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                `üòî –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É!`, { parse_mode: 'Markdown' });
        }
    }
    async handleCreateRequest(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.CREATING_REQUEST,
            data: {}
        });
        await ctx.editMessageText(`‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É**\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 4**\n\n` +
            `–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
            `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY HH:MM\n\n` +
            `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`, { parse_mode: 'Markdown' });
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_REQUEST_DATETIME,
            data: {}
        });
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    async handleRatingCommand(ctx) {
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const stats = await this.ratingsService.getPlayerStats(user.id);
            if (!stats) {
                await ctx.reply('üìä –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!');
                return;
            }
            const levelText = this.getSkillLevelText(stats.skillRating);
            let message = `üéæ **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥**\n\n`;
            message += `üéØ **–£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã:** ${stats.skillRating} (${levelText})\n`;
            message += `üìä **–û—á–∫–∏ —Å–∏–ª—ã:** ${stats.skillPoints}\n`;
            message += `üìà **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${stats.pointsRating}\n\n`;
            message += `üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
            message += `üìä –ü–æ–±–µ–¥: ${stats.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.losses}\n`;
            message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate}%\n`;
            message += `üéæ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${stats.totalMatches}\n\n`;
            if (stats.lastMatch) {
                const resultIcon = stats.lastMatch.result === 'win' ? 'üèÜ' : 'üòî';
                message += `üÜö **–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:** ${resultIcon}\n`;
                message += `üë§ –°–æ–ø–µ—Ä–Ω–∏–∫: ${stats.lastMatch.opponent} (${stats.lastMatch.opponentRating})\n`;
                message += `üèÜ –°—á–µ—Ç: ${stats.lastMatch.score}\n`;
                message += `üìÖ ${stats.lastMatch.date.toLocaleDateString('ru-RU')}\n\n`;
            }
            message += `üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leaderboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞`;
            await ctx.reply(message, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRatingCommand: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        }
    }
    async handleLeaderboardCommand(ctx) {
        try {
            const [skillTop, pointsTop] = await Promise.all([
                this.ratingsService.getTopPlayersBySkill(10),
                this.ratingsService.getTopPlayersByPoints(10)
            ]);
            const buttons = [
                [
                    telegraf_1.Markup.button.callback('üéØ –ü–æ —Å–∏–ª–µ', 'leaderboard_skill'),
                    telegraf_1.Markup.button.callback('üìà –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'leaderboard_points')
                ]
            ];
            let message = `üèÜ **–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤**\n\n`;
            message += `**–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é —Å–∏–ª—ã:**\n`;
            skillTop.forEach((player, index) => {
                const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                message += `${index + 1}. ${name} - ${player.skillRating} (${player.skillPoints})\n`;
            });
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLeaderboardCommand: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        }
    }
    async handleSkillLeaderboard(ctx) {
        await ctx.answerCbQuery();
        try {
            const skillTop = await this.ratingsService.getTopPlayersBySkill(10);
            let message = `üéØ **–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é —Å–∏–ª—ã:**\n\n`;
            skillTop.forEach((player, index) => {
                const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                const levelText = this.getSkillLevelText(player.skillRating);
                message += `${index + 1}. **${name}**\n`;
                message += `   üéØ ${player.skillRating} (${levelText})\n`;
                message += `   üìä ${player.skillPoints} –æ—á–∫–æ–≤\n`;
                message += `   üèÜ ${player.wins}W/${player.losses}L\n\n`;
            });
            const buttons = [
                [telegraf_1.Markup.button.callback('üìà –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'leaderboard_points')],
                [telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'leaderboard_skill')]
            ];
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSkillLeaderboard: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        }
    }
    async handlePointsLeaderboard(ctx) {
        await ctx.answerCbQuery();
        try {
            const pointsTop = await this.ratingsService.getTopPlayersByPoints(10);
            let message = `üìà **–¢–æ–ø –ø–æ –æ—á–∫–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n\n`;
            pointsTop.forEach((player, index) => {
                const name = `${player.user.firstName} ${player.user.lastName || ''}`.trim(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                message += `${index + 1}. **${name}**\n`;
                message += `   üìà ${player.pointsRating} –æ—á–∫–æ–≤\n`;
                message += `   üéØ –£—Ä–æ–≤–µ–Ω—å: ${player.skillRating}\n`;
                message += `   üèÜ ${player.wins}W/${player.losses}L\n\n`;
            });
            const buttons = [
                [telegraf_1.Markup.button.callback('üéØ –ü–æ —Å–∏–ª–µ', 'leaderboard_skill')],
                [telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'leaderboard_points')]
            ];
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePointsLeaderboard: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        }
    }
    getSkillLevelText(rating) {
        if (rating < 2.5)
            return '–ù–æ–≤–∏—á–æ–∫';
        if (rating < 3.0)
            return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
        if (rating < 3.5)
            return '–õ—é–±–∏—Ç–µ–ª—å';
        if (rating < 4.0)
            return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª—é–±–∏—Ç–µ–ª—å';
        if (rating < 4.5)
            return '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
        if (rating < 5.0)
            return '–°–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
        if (rating < 5.5)
            return '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫';
        if (rating < 6.0)
            return '–í—ã—Å–æ–∫–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π';
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
    }
    // ==================== –¢–£–†–ù–ò–†–´ ====================
    async handleTournaments(ctx) {
        this.logger.log('üèÜ –¢–£–†–ù–ò–†–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', 'active_tournaments')],
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
                [telegraf_1.Markup.button.callback('üìã –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'my_tournaments')],
                [telegraf_1.Markup.button.callback('üèÜ –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è', 'tournament_history')],
            ]);
            await ctx.reply(`üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n` +
                `–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTournaments: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
    }
    async handleActiveTournaments(ctx) {
        await ctx.answerCbQuery();
        this.logger.log('üîç –ù–∞—á–∏–Ω–∞–µ–º handleActiveTournaments');
        try {
            this.logger.log('üì° –í—ã–∑—ã–≤–∞–µ–º tournamentsService.findAll...');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findAll
            const tournaments = await this.tournamentsService.findAll({
                page: 1,
                limit: 10
            });
            this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${JSON.stringify(tournaments, null, 2)}`);
            this.logger.log(`üìè –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${typeof tournaments}`);
            this.logger.log(`üì¶ –≠—Ç–æ –º–∞—Å—Å–∏–≤? ${Array.isArray(tournaments)}`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if (tournaments && typeof tournaments === 'object') {
                this.logger.log(`üîë –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞: ${Object.keys(tournaments)}`);
                // –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å items
                if (tournaments.items) {
                    this.logger.log(`üìã –ù–∞–π–¥–µ–Ω—ã items: ${tournaments.items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    this.logger.log(`üìã Items –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tournaments.items, null, 2)}`);
                }
            }
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            let activeTournaments = [];
            if (Array.isArray(tournaments)) {
                activeTournaments = tournaments.slice(0, 10);
                this.logger.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä—ã - –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤, –≤–∑—è–ª–∏ ${activeTournaments.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            }
            else if (tournaments && tournaments.items && Array.isArray(tournaments.items)) {
                activeTournaments = tournaments.items.slice(0, 10);
                this.logger.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –≤ items, –≤–∑—è–ª–∏ ${activeTournaments.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            }
            else if (tournaments && tournaments.data && Array.isArray(tournaments.data)) {
                activeTournaments = tournaments.data.slice(0, 10);
                this.logger.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –≤ data, –≤–∑—è–ª–∏ ${activeTournaments.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            }
            else {
                this.logger.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${typeof tournaments}`);
                activeTournaments = [];
            }
            this.logger.log(`üéØ –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${activeTournaments.length}`);
            if (activeTournaments.length === 0) {
                this.logger.log('üìù –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤"');
                await ctx.editMessageText(`üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
                    `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä!`, { parse_mode: 'Markdown' });
                return;
            }
            let message = `üèÜ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:**\n\n`;
            const buttons = [];
            this.logger.log('üî® –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫...');
            activeTournaments.forEach((tournament, index) => {
                this.logger.log(`üèÜ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä ${index + 1}: ${JSON.stringify(tournament, null, 2)}`);
                const startDate = tournament.startDate
                    ? new Date(tournament.startDate).toLocaleDateString('ru-RU')
                    : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ —Å—Ö–µ–º—ã Prisma
                const title = tournament.title || '–¢—É—Ä–Ω–∏—Ä';
                const currentPlayers = tournament.currentPlayers || 0;
                const maxPlayers = tournament.maxPlayers || 0;
                this.logger.log(`üìã –¢—É—Ä–Ω–∏—Ä ${index + 1} –¥–∞–Ω–Ω—ã–µ: title="${title}", currentPlayers=${currentPlayers}, maxPlayers=${maxPlayers}, startDate="${startDate}"`);
                // –ü–æ–ª—É—á–∞–µ–º entryFee –∏–∑ formatDetails
                let entryFee = 0;
                if (tournament.formatDetails) {
                    this.logger.log(`üí∞ formatDetails –Ω–∞–π–¥–µ–Ω—ã: ${JSON.stringify(tournament.formatDetails)}`);
                    entryFee = tournament.formatDetails.entryFee || 0;
                }
                else {
                    this.logger.log(`üí∞ formatDetails –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
                }
                // –ü–æ–ª—É—á–∞–µ–º registrationEnd –∏–∑ formatDetails
                let regEndDate = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                if (tournament.formatDetails?.registrationEnd) {
                    try {
                        regEndDate = new Date(tournament.formatDetails.registrationEnd).toLocaleDateString('ru-RU');
                        this.logger.log(`üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${regEndDate}`);
                    }
                    catch (error) {
                        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`);
                    }
                }
                const tournamentText = `${index + 1}. **${title}**\n` +
                    `üìÖ –ù–∞—á–∞–ª–æ: ${startDate}\n` +
                    `üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: ${regEndDate}\n` +
                    `üë• ${currentPlayers}/${maxPlayers}\n` +
                    `üí∞ –í–∑–Ω–æ—Å: ${entryFee} –º—è—á–µ–π\n\n`;
                this.logger.log(`üìÑ –¢–µ–∫—Å—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${index + 1}: ${tournamentText}`);
                message += tournamentText;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ`, `tournament_details_${tournament.id}`)]);
                this.logger.log(`üîò –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.id}`);
            });
            buttons.push([telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'active_tournaments')]);
            this.logger.log(`üìù –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏–Ω–∞ ${message.length} —Å–∏–º–≤–æ–ª–æ–≤):`);
            this.logger.log(message);
            this.logger.log(`üîò –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: ${buttons.length}`);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
            this.logger.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleActiveTournaments:`);
            this.logger.error(`Error message: ${error instanceof Error ? error.message : String(error)}`);
            this.logger.error(`Error stack: ${error instanceof Error ? error.stack : 'No stack'}`);
            this.logger.error(`Error details: ${JSON.stringify(error, null, 2)}`);
            try {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            catch (replyError) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: ${replyError}`);
            }
        }
    }
    async handleActiveTournamentsAction(ctx) {
        this.logger.log('üéØ Action: active_tournaments');
        await this.handleActiveTournaments(ctx);
    }
    async handleCreateTournamentAction(ctx) {
        this.logger.log('üéØ Action: create_tournament');
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENT_NAME,
            data: {}
        });
        await ctx.editMessageText(`üèÜ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞**\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 5**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`, { parse_mode: 'Markdown' });
    }
    async handleJoinTournamentAction(ctx) {
        this.logger.log('üéØ Action: join_tournament');
        await this.handleJoinTournament(ctx);
    }
    async handleMyTournamentsAction(ctx) {
        this.logger.log('üéØ Action: my_tournaments');
        await ctx.answerCbQuery();
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
            const tournaments = await this.tournamentsService.findAll({ page: 1, limit: 10 });
            const myTournaments = tournaments.filter((t) => t.creatorId === user.id ||
                (t.players && t.players.some((p) => p.id === user.id)));
            if (myTournaments.length === 0) {
                await ctx.editMessageText(`üèÜ **–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
                    `–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.\n\n` +
                    `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', 'active_tournaments')],
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')],
                        [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_tournaments')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üèÜ **–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã (${myTournaments.length}):**\n\n`;
            const buttons = [];
            myTournaments.forEach((tournament, index) => {
                const title = tournament.title || '–¢—É—Ä–Ω–∏—Ä';
                const startDate = new Date(tournament.startDate).toLocaleDateString('ru-RU');
                const isCreator = tournament.creatorId === user.id;
                message += `${index + 1}. **${title}**\n`;
                message += `üìÖ ${startDate}\n`;
                message += `${isCreator ? 'üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' : 'üéæ –£—á–∞—Å—Ç–Ω–∏–∫'}\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ`, `tournament_details_${tournament.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', 'back_to_tournaments')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMyTournaments: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
    }
    async handleBackToTournaments(ctx) {
        this.logger.log('üéØ Action: back_to_tournaments');
        await ctx.answerCbQuery();
        await this.handleTournaments(ctx);
    }
    async handleBackToProfileAction(ctx) {
        this.logger.log('üéØ Action: back_to_profile');
        await ctx.answerCbQuery();
        await this.handleProfile(ctx);
    }
    async handleDetailedStatsAction(ctx) {
        this.logger.log('üéØ Action: detailed_stats');
        await this.handleDetailedStats(ctx);
    }
    // ==================== –ö–ï–ô–°–´ ====================
    async handleCases(ctx) {
        this.logger.log('üéÅ –ö–ï–ô–°–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const cases = await this.casesService.getAllCases(false); // —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
            const ballsBalance = await this.ballsService.getUserBalance(user.id.toString()); // ‚Üê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BallsService
            if (cases.length === 0) {
                await ctx.reply(`üéÅ **–ö–µ–π—Å—ã**\n\n` +
                    `üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤.\n\n` +
                    `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`, { parse_mode: 'Markdown' });
                return;
            }
            let message = `üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:**\n\n`;
            message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${ballsBalance} –º—è—á–µ–π\n\n`;
            const buttons = [];
            cases.forEach((caseItem, index) => {
                message += `${index + 1}. **${caseItem.name}**\n`;
                message += `üí∞ –¶–µ–Ω–∞: ${caseItem.priceBalls} –º—è—á–µ–π\n`;
                message += `üìù ${caseItem.description}\n\n`;
                const canOpen = ballsBalance >= caseItem.priceBalls;
                buttons.push([telegraf_1.Markup.button.callback(`${canOpen ? 'üéÅ' : 'üîí'} ${caseItem.name} (${caseItem.priceBalls} –º—è—á–µ–π)`, canOpen ? `open_case_${caseItem.id}` : `case_info_${caseItem.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π', 'case_history')]);
            const keyboard = telegraf_1.Markup.inlineKeyboard(buttons);
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCases: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤');
        }
    }
    // ==================== STORIES ====================
    async handleStories(ctx) {
        this.logger.log('üì± STORIES –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è stories
            let stories = [];
            try {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ StoriesService
                // stories = await this.storiesService.findAll({ page: 1, limit: 5 });
                stories = []; // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            }
            catch (error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è stories: ${error}`);
                stories = [];
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å Story', 'create_story')],
                [telegraf_1.Markup.button.callback('üì∑ –ú–æ–∏ Stories', 'my_stories')],
                [telegraf_1.Markup.button.callback('üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', 'popular_stories')],
                [telegraf_1.Markup.button.callback('üë• –î—Ä—É–∑—å—è', 'friends_stories')],
            ]);
            let message = `üì± **Stories**\n\n`;
            if (stories && stories.length > 0) {
                message += `üî• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏:**\n\n`;
                stories.slice(0, 3).forEach((story, index) => {
                    const authorName = story.author?.firstName || story.author?.username || '–ò–≥—Ä–æ–∫';
                    const timeAgo = this.getTimeAgo(new Date(story.createdAt));
                    message += `${index + 1}. **${authorName}**\n`;
                    message += `‚è∞ ${timeAgo}\n`;
                    if (story.caption) {
                        message += `üìù ${story.caption.substring(0, 50)}${story.caption.length > 50 ? '...' : ''}\n`;
                    }
                    message += `\n`;
                });
            }
            else {
                message += `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π.\n\n`;
            }
            message += `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!`;
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStories: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Stories');
        }
    }
    // –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥:
    getTimeAgo(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        if (diffMins < 1)
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffMins < 60)
            return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diffHours < 24)
            return `${diffHours} —á –Ω–∞–∑–∞–¥`;
        if (diffDays < 7)
            return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
        return date.toLocaleDateString('ru-RU');
    }
    async handleCreateStoryAction(ctx) {
        this.logger.log('üéØ Action: create_story');
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üì± **–°–æ–∑–¥–∞–Ω–∏–µ Story**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n` +
            `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n` +
            `‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ —Å –º–∞—Ç—á–µ–π\n` +
            `‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏\n` +
            `‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n` +
            `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–∞ –∏–≥—Ä—É`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Stories', 'back_to_stories')]
            ]).reply_markup
        });
    }
    async handleMyStoriesAction(ctx) {
        this.logger.log('üéØ Action: my_stories');
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üì∑ **–ú–æ–∏ Stories**\n\n` +
            `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π.\n\n` +
            `–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é Story –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö –≤ —Ç–µ–Ω–Ω–∏—Å–µ!`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å Story', 'create_story')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
        });
    }
    async handlePopularStoriesAction(ctx) {
        this.logger.log('üéØ Action: popular_stories');
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Stories**\n\n` +
            `–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n` +
            `‚Ä¢ –°–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n` +
            `‚Ä¢ –í–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n` +
            `‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –ø–æ—Å—Ç—ã\n` +
            `‚Ä¢ –°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
        });
    }
    async handleFriendsStoriesAction(ctx) {
        this.logger.log('üéØ Action: friends_stories');
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üë• **Stories –¥—Ä—É–∑–µ–π**\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —Ç–µ–Ω–Ω–∏—Å—É.\n\n` +
            `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º!`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite_friends')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_stories')]
            ]).reply_markup
        });
    }
    async handleBackToStoriesAction(ctx) {
        this.logger.log('üéØ Action: back_to_stories');
        await ctx.answerCbQuery();
        await this.handleStories(ctx);
    }
    async handleInviteFriendsAction(ctx) {
        this.logger.log('üéØ Action: invite_friends');
        await this.handleInvite(ctx);
    }
    // ==================== –¢–†–ï–ù–ò–†–û–í–ö–ò ====================
    async handleTrainings(ctx) {
        this.logger.log('üèÉ‚Äç‚ôÇÔ∏è –¢–†–ï–ù–ò–†–û–í–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'find_training')],
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'create_training')],
                [telegraf_1.Markup.button.callback('üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'my_trainings')],
                [telegraf_1.Markup.button.callback('üë®‚Äçüè´ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º', 'become_trainer')],
            ]);
            await ctx.reply(`üèÉ‚Äç‚ôÇÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
                `–ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleTrainings: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
        }
    }
    // ==================== –ó–ê–ü–ò–°–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================
    async handleRecordMatch(ctx) {
        this.logger.log('üìù –ó–ê–ü–ò–°–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            this.setUserState(userId, {
                step: profile_state_enum_1.ProfileStep.RECORDING_MATCH,
                data: {}
            });
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üéæ –û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á', 'match_type_singles')],
                [telegraf_1.Markup.button.callback('üë• –ü–∞—Ä–Ω—ã–π –º–∞—Ç—á', 'match_type_doubles')],
            ]);
            await ctx.reply(`üìù **–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞**\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç—á–∞:`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleRecordMatch: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞');
        }
    }
    // ==================== –†–ï–§–ï–†–ê–õ–´ ====================
    async handleInviteButton(ctx) {
        await this.handleInvite(ctx);
    }
    async handleInvite(ctx) {
        this.logger.log('üîó INVITE –∫–æ–º–∞–Ω–¥–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'tennistestdssbot';
            const referralCode = `ref_${user.id.toString().padStart(6, '0')}`;
            const inviteLink = `https://t.me/${botUsername}?start=${referralCode}`;
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.url('üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', `https://t.me/share/url?url=${encodeURIComponent(inviteLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Ç–µ–Ω–Ω–∏—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéæ')}`)],
                [telegraf_1.Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')],
            ]);
            await ctx.reply(`üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:**\n\n` +
                `\`${inviteLink}\`\n\n` +
                `üë• –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n` +
                `üèÜ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å—ã!`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleInvite: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }
    }
    // ==================== AI COACH ====================
    async handleAICoach(ctx) {
        this.logger.log('ü§ñ AI-COACH –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üí° –°–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ', 'ai_technique_tip')],
                [telegraf_1.Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')],
                [telegraf_1.Markup.button.callback('üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã', 'ai_game_analysis')],
                [telegraf_1.Markup.button.callback('üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π', 'ai_goal_setting')],
            ]);
            await ctx.reply(`ü§ñ **AI-Coach**\n\n` +
                `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å!\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleAICoach: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ AI-Coach');
        }
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================
    async handleText(ctx) {
        if (!ctx.from || !ctx.message || !('text' in ctx.message))
            return;
        const userId = ctx.from.id.toString();
        const text = ctx.message.text;
        const userState = this.getUserState(userId);
        this.logger.log(`üìù –¢–µ–∫—Å—Ç –æ—Ç ${userId}: "${text}" (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step})`);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        try {
            switch (userState.step) {
                case profile_state_enum_1.ProfileStep.AWAITING_FIRST_NAME:
                    await this.handleFirstName(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_LAST_NAME:
                    await this.handleLastName(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_CITY:
                    await this.handleCity(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_COURT:
                    await this.handleCourt(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_REQUEST_DATETIME:
                    await this.handleRequestDateTime(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_REQUEST_LOCATION:
                    await this.handleRequestLocation(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_REQUEST_DESCRIPTION:
                    await this.handleRequestDescription(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENT_NAME:
                    await this.handleTournamentName(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION:
                    await this.handleTournamentDescription(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_MATCH_OPPONENT:
                    await this.handleMatchOpponent(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_MATCH_SCORE:
                    await this.handleMatchScore(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_MATCH_DATE:
                    await this.handleMatchDate(ctx, text, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_STORY_DESCRIPTION:
                    userState.data.storyDescription = text.trim();
                    await this.createStory(ctx, userId, userState);
                    break;
                case profile_state_enum_1.ProfileStep.AWAITING_CITY_SEARCH:
                    await this.handleCitySearch(ctx, text, userId, userState);
                    break;
                default:
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if (!text.startsWith('/') && !['üë§', 'üéæ', 'üèÜ', 'üìù', 'üì±', 'ü§ñ', 'üèÉ‚Äç‚ôÇÔ∏è', 'üéÅ', 'üîó', 'üìç'].some(emoji => text.includes(emoji))) {
                        await ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n` +
                            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                            `‚Ä¢ /start - –Ω–∞—á–∞—Ç—å\n` +
                            `‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n` +
                            `‚Ä¢ /debug - –æ—Ç–ª–∞–¥–∫–∞\n\n` +
                            `–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`, this.getMainKeyboard());
                    }
                    break;
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
    async handleSettings(ctx) {
        this.logger.log('‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const settings = await this.settingsService.getUserSettings(user.id);
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üßë –ü—Ä–æ—Ñ–∏–ª—å', 'settings_profile')],
                [telegraf_1.Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications')],
                [telegraf_1.Markup.button.callback('üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'settings_preferences')],
                [telegraf_1.Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')],
                [telegraf_1.Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')],
            ]);
            const languageFlag = settings.language === 'ru' ? 'üá∑üá∫' : 'üá¨üáß';
            const notificationStatus = settings.notificationsEnabled ? 'üîî' : 'üîï';
            const profileVisibility = settings.showProfilePublicly ? 'üëÅÔ∏è' : 'üôà';
            await ctx.reply(`‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
                `üåê **–Ø–∑—ã–∫:** ${languageFlag} ${settings.language.toUpperCase()}\n` +
                `${notificationStatus} **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** ${settings.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
                `${profileVisibility} **–ü—Ä–æ—Ñ–∏–ª—å:** ${settings.showProfilePublicly ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}\n` +
                `üèôÔ∏è **–ì–æ—Ä–æ–¥:** ${settings.city?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `üéæ **–°–ø–æ—Ä—Ç:** ${settings.sport?.title || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` + // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º name –Ω–∞ title
                `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettings: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }
    async handleSettingsLanguage(ctx) {
        await ctx.answerCbQuery();
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            const settings = await this.settingsService.getUserSettings(user.id);
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'set_language_ru')],
                [telegraf_1.Markup.button.callback('üá¨üáß English', 'set_language_en')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')],
            ]);
            await ctx.editMessageText(`üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞**\n\n` +
                `–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: ${settings.language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá¨üáß English'}\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettingsLanguage: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }
    async handleSetLanguage(ctx) {
        await ctx.answerCbQuery();
        try {
            if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery))
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            const language = ctx.callbackQuery.data.replace('set_language_', '');
            await this.settingsService.updateLanguage(user.id, language);
            const languageText = language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá¨üáß English';
            await ctx.reply(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${languageText}`, { parse_mode: 'Markdown' });
            await this.handleSettings(ctx);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSetLanguage: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞');
        }
    }
    async handleBackToSettings(ctx) {
        await this.handleSettings(ctx);
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–Ø–í–û–ö ====================
    async handleRequestDateTime(ctx, text, userId, userState) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
        const match = text.match(dateTimeRegex);
        if (!match) {
            await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM\n` +
                `–ü—Ä–∏–º–µ—Ä: 25.12.2024 18:00`);
            return;
        }
        const [, day, month, year, hour, minute] = match;
        const dateTime = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));
        if (dateTime < new Date()) {
            await ctx.reply(`‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.`);
            return;
        }
        userState.data.requestDateTime = dateTime.toISOString();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_REQUEST_LOCATION;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –í—Ä–µ–º—è: **${dateTime.toLocaleString('ru-RU')}**\n\n` +
            `**–®–∞–≥ 2 –∏–∑ 4**\n\n` +
            `–ì–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?\n` +
            `–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ç, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞.`, { parse_mode: 'Markdown' });
    }
    async handleRequestLocation(ctx, text, userId, userState) {
        userState.data.requestLocation = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_REQUEST_LEVEL;
        this.setUserState(userId, userState);
        const keyboard = telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('üü¢ –ù–æ–≤–∏—á–æ–∫', 'req_level_beginner')],
            [telegraf_1.Markup.button.callback('üîµ –õ—é–±–∏—Ç–µ–ª—å', 'req_level_amateur')],
            [telegraf_1.Markup.button.callback('üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π', 'req_level_confident')],
            [telegraf_1.Markup.button.callback('üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π', 'req_level_tournament')],
            [telegraf_1.Markup.button.callback('üî¥ –ü—Ä–æ—Ñ–∏', 'req_level_semi_pro')],
            [telegraf_1.Markup.button.callback('‚ö™ –õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å', 'req_level_any')],
        ]);
        await ctx.reply(`‚úÖ –ú–µ—Å—Ç–æ: **${text}**\n\n` +
            `**–®–∞–≥ 3 –∏–∑ 4**\n\n` +
            `–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤ –∏—â–µ—Ç–µ?`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
    async handleRequestDescription(ctx, text, userId, userState) {
        userState.data.requestDescription = text.trim();
        this.setUserState(userId, userState);
        await this.createGameRequest(ctx, userId, userState);
    }
    async createGameRequest(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç CreateRequestDto –±–µ–∑ playerLevel
            const requestData = {
                type: create_request_dto_1.RequestType.GAME,
                title: `–ò–≥—Ä–∞ ${new Date(userState.data.requestDateTime).toLocaleDateString('ru-RU')}`,
                description: userState.data.requestDescription || '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å',
                gameMode: create_request_dto_1.GameMode.SINGLES,
                dateTime: new Date(userState.data.requestDateTime),
                location: userState.data.requestLocation,
                locationName: userState.data.requestLocation,
                maxPlayers: 2,
                // –£–±–∏—Ä–∞–µ–º playerLevel —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
                paymentType: 'FREE',
                ratingType: 'NTRP',
                formatInfo: {
                    level: userState.data.requestLevel || 'ANY' // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ formatInfo
                },
            };
            const request = await this.requestsService.create(user.id.toString(), requestData);
            const summaryMessage = `‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                `üìÖ **–í—Ä–µ–º—è:** ${new Date(requestData.dateTime).toLocaleString('ru-RU')}\n` +
                `üìç **–ú–µ—Å—Ç–æ:** ${requestData.location}\n` +
                `üéØ **–£—Ä–æ–≤–µ–Ω—å:** ${this.getLevelText(userState.data.requestLevel || 'ANY')}\n` +
                `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${requestData.description}\n\n` +
                `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`;
            await ctx.reply(summaryMessage, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    // ==================== –î–û–ë–ê–í–ò–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ ====================
    async handleFirstName(ctx, text, userId, userState) {
        userState.data.firstName = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_LAST_NAME;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –ò–º—è: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:`, { parse_mode: 'Markdown' });
    }
    async handleLastName(ctx, text, userId, userState) {
        userState.data.lastName = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_CITY;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –§–∞–º–∏–ª–∏—è: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:`, { parse_mode: 'Markdown' });
    }
    async handleTournamentName(ctx, text, userId, userState) {
        userState.data.tournamentName = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENT_DESCRIPTION;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`, { parse_mode: 'Markdown' });
    }
    async handleMatchOpponent(ctx, text, userId, userState) {
        userState.data.matchOpponent = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_MATCH_SCORE;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –°–æ–ø–µ—Ä–Ω–∏–∫: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6-4, 6-2):`, { parse_mode: 'Markdown' });
    }
    async handleCity(ctx, text, userId, userState) {
        userState.data.city = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_COURT;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –ì–æ—Ä–æ–¥: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç –∏–ª–∏ –∫–ª—É–±:`, { parse_mode: 'Markdown' });
    }
    async handleCourt(ctx, text, userId, userState) {
        userState.data.preferredCourt = text.trim();
        await this.completeProfileSetup(ctx, userId, userState);
    }
    async handleTournamentDescription(ctx, text, userId, userState) {
        userState.data.tournamentDescription = text.trim();
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await this.createTournament(ctx, userId, userState);
    }
    async completeProfileSetup(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
            await this.usersService.updateProfile(user.id.toString(), {
                city: userState.data.city
                // –£–±–∏—Ä–∞–µ–º profileStepOneCompleted —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ UpdateProfileDto
            });
            await ctx.reply(`‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n` +
                `üèôÔ∏è –ì–æ—Ä–æ–¥: ${userState.data.city}\n` +
                `üéæ –ö–æ—Ä—Ç: ${userState.data.preferredCourt}\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!`, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    async createTournament(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π CreateTournamentDto
            const tournamentData = {
                title: userState.data.tournamentName,
                description: userState.data.tournamentDescription,
                type: tournament_enum_1.TournamentType.SINGLE_ELIMINATION,
                startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
                minPlayers: 4,
                maxPlayers: 16,
                isRanked: true,
                locationName: userState.data.city || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            };
            await this.tournamentsService.create(user.id.toString(), tournamentData);
            await ctx.reply(`üèÜ **–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${tournamentData.title}\n` +
                `üìñ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${tournamentData.description}\n` +
                `üìÖ **–ù–∞—á–∞–ª–æ:** ${tournamentData.startDate.toLocaleDateString('ru-RU')}\n` +
                `üèÖ **–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π:** ${tournamentData.isRanked ? '–î–∞' : '–ù–µ—Ç'}\n` +
                `üë• **–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${tournamentData.maxPlayers}\n\n` +
                `–¢—É—Ä–Ω–∏—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
    }
    async handleMatchScore(ctx, text, userId, userState) {
        userState.data.matchScore = text.trim();
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_MATCH_DATE;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –°—á–µ—Ç: **${text}**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):`, { parse_mode: 'Markdown' });
    }
    async handleMatchDate(ctx, text, userId, userState) {
        userState.data.matchDate = text.trim();
        await this.createMatch(ctx, userId, userState);
    }
    async handleCitySearch(ctx, text, userId, userState) {
        const city = text.trim();
        try {
            const courtsMessage = this.generateCityCortsMessage(city);
            await ctx.reply(courtsMessage, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ—Ä—Ç–æ–≤: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Ä—Ç–æ–≤');
        }
    }
    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    getLevelText(level) {
        const levels = {
            'beginner': 'üü¢ –ù–æ–≤–∏—á–æ–∫',
            'amateur': 'üîµ –õ—é–±–∏—Ç–µ–ª—å',
            'confident': 'üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π',
            'tournament': 'üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
            'semi_pro': 'üî¥ –ü—Ä–æ—Ñ–∏',
            'any': '‚ö™ –õ—é–±–æ–π',
            'BEGINNER': 'üü¢ –ù–æ–≤–∏—á–æ–∫',
            'AMATEUR': 'üîµ –õ—é–±–∏—Ç–µ–ª—å',
            'CONFIDENT': 'üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π',
            'TOURNAMENT': 'üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
            'SEMI_PRO': 'üî¥ –ü—Ä–æ—Ñ–∏',
            'ANY': '‚ö™ –õ—é–±–æ–π'
        };
        return levels[level] || '‚ö™ –õ—é–±–æ–π';
    }
    getFrequencyText(frequency) {
        const freqMap = {
            'ONCE': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
            'TWICE': '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            'THREE_TIMES': '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            'FOUR_PLUS': '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'
        };
        return freqMap[frequency] || frequency;
    }
    getNtrpRating(level) {
        const ratingMap = {
            'BEGINNER': 2.0,
            'AMATEUR': 3.0,
            'CONFIDENT': 4.0,
            'TOURNAMENT': 5.0,
            'SEMI_PRO': 5.5
        };
        return ratingMap[level] || 3.0;
    }
    // ==================== –î–ï–ô–°–¢–í–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò ====================
    async handleOpenCase(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const caseId = parseInt(ctx.callbackQuery.data.split('_')[2]);
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const result = await this.caseOpeningService.openCase(user.id.toString(), caseId);
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ', 'back_to_cases')],
                [telegraf_1.Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'case_history')],
            ]);
            await ctx.editMessageText(`üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
                `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **${result.winning.item.name}**\n\n` +
                `üìù ${result.winning.item.description}\n\n` +
                `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º—è—á–µ–π: ${result.opening.ballsSpent}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ${error}`);
            if (error instanceof Error && error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π')) {
                await ctx.editMessageText(`‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π**\n\n` +
                    `–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—è—á–µ–π.\n` +
                    `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!`, { parse_mode: 'Markdown' });
            }
            else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
            }
        }
    }
    async handleRespondToRequest(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const requestId = parseInt(ctx.callbackQuery.data.split('_')[2]);
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            await ctx.editMessageText(`‚úÖ **–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
                `–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n` +
                `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
        }
    }
    // ==================== –ö–û–ú–ê–ù–î–´ –û–¢–õ–ê–î–ö–ò ====================
    async handleDebug(ctx) {
        this.logger.log('üêõ DEBUG –∫–æ–º–∞–Ω–¥–∞');
        const userId = ctx.from?.id.toString();
        const userState = userId ? this.getUserState(userId) : null;
        const debugInfo = {
            userId: ctx.from?.id,
            chatId: ctx.chat?.id,
            updateType: ctx.updateType,
            text: ctx.message && 'text' in ctx.message ? ctx.message.text : 'no text',
            userState: userState
        };
        await ctx.reply(`üêõ **Debug Info:**\n` +
            `User ID: ${debugInfo.userId}\n` +
            `Chat ID: ${debugInfo.chatId}\n` +
            `Update: ${debugInfo.updateType}\n` +
            `Text: ${debugInfo.text}\n` +
            `State: ${JSON.stringify(debugInfo.userState)}`, { parse_mode: 'Markdown' });
    }
    async handleMenu(ctx) {
        this.logger.log('üìã MENU –∫–æ–º–∞–Ω–¥–∞');
        await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', this.getMainKeyboard());
    }
    async handleReferralStats(ctx) {
        await ctx.answerCbQuery();
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É (–ø–æ–∑–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å ReferralsService)
            const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π**\n\n` +
                `üë• **–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** 0\n` +
                `‚ö° **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:** 0\n` +
                `üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:** 0\n` +
                `üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:** 0\n` +
                `üìÖ **–ó–∞ –º–µ—Å—è—Ü:** 0\n\n` +
                `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** 0\n` +
                `üíé **–ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏:** 0\n\n` +
                `üöÄ **–°–∫–æ—Ä–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞!**`;
            await ctx.editMessageText(message, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleReferralStats: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
    // ==================== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
    async handleMyRequests(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findAll —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            const allRequests = await this.requestsService.findAll({ page: 1, limit: 100 });
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
            const myRequests = allRequests.filter((req) => {
                const creatorId = req.creatorId || req.creator?.id;
                return creatorId && creatorId.toString() === user.id.toString();
            });
            if (myRequests.length === 0) {
                await ctx.editMessageText(`üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏**\n\n` +
                    `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                        [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏ (${myRequests.length}):**\n\n`;
            const buttons = [];
            myRequests.slice(0, 5).forEach((request, index) => {
                const datetime = request.dateTime || request.scheduledTime
                    ? new Date(request.dateTime || request.scheduledTime).toLocaleString('ru-RU')
                    : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const title = request.title || `–ó–∞—è–≤–∫–∞ ${index + 1}`;
                const location = request.locationName || request.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const currentPlayers = request.currentPlayers || 0;
                const maxPlayers = request.maxPlayers || 2;
                message += `${index + 1}. **${title}**\n`;
                message += `üìÖ ${datetime}\n`;
                message += `üìç ${location}\n`;
                message += `üë• ${currentPlayers}/${maxPlayers}\n\n`;
                buttons.push([
                    telegraf_1.Markup.button.callback(`‚úèÔ∏è ${index + 1}`, `edit_request_${request.id}`),
                    telegraf_1.Markup.button.callback(`‚ùå ${index + 1}`, `delete_request_${request.id}`)
                ]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', 'create_request')]);
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);
            const keyboard = telegraf_1.Markup.inlineKeyboard(buttons);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMyRequests: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫');
        }
    }
    async handleActiveRequests(ctx) {
        await ctx.answerCbQuery();
        await this.handleFindGame(ctx);
    }
    async handleBackToPlay(ctx) {
        await ctx.answerCbQuery();
        await this.handlePlay(ctx);
    }
    async handleRequestLevelCallback(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ level –∏–∑ callback_data
        const callbackData = ctx.callbackQuery.data;
        const level = callbackData.replace('req_level_', '');
        userState.data.requestLevel = level;
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_REQUEST_DESCRIPTION;
        this.setUserState(userId, userState);
        await ctx.editMessageText(`‚úÖ –£—Ä–æ–≤–µ–Ω—å: **${this.getLevelText(level)}**\n\n` +
            `**–®–∞–≥ 4 –∏–∑ 4**\n\n` +
            `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`, { parse_mode: 'Markdown' });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–£–†–ù–ò–†–û–í ====================
    async handleCreateTournament(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENT_NAME,
            data: {}
        });
        await ctx.editMessageText(`üèÜ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞**\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 4**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:`, { parse_mode: 'Markdown' });
    }
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:
    async handleTournamentPlayers(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const tournamentId = ctx.callbackQuery.data.split('_')[2];
        try {
            const tournament = await this.tournamentsService.findById(tournamentId);
            if (!tournament) {
                await ctx.editMessageText('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            const players = await this.tournamentsService['tournamentsRepository'].getTournamentPlayers(tournamentId);
            let message = `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.title}"**\n\n`;
            if (players.length === 0) {
                message += `üòî –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!`;
            }
            else {
                message += `**–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${players.length}/${tournament.maxPlayers}**\n\n`;
                players.forEach((player, index) => {
                    const name = player.firstName || player.username || `–ò–≥—Ä–æ–∫ ${player.id}`;
                    const rating = player.rating_points || 0;
                    message += `${index + 1}. ${name} (${rating} –æ—á–∫–æ–≤)\n`;
                });
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üéæ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', `join_tournament_${tournament.id}`)],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É', `tournament_details_${tournament.id}`)],
            ]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        }
    }
    async handleTournamentDetails(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const tournamentId = ctx.callbackQuery.data.split('_')[2];
        try {
            const tournament = await this.tournamentsService.findById(tournamentId);
            if (!tournament) {
                await ctx.editMessageText('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const startDate = new Date(tournament.startDate).toLocaleDateString('ru-RU');
            const endDate = new Date(tournament.endDate).toLocaleDateString('ru-RU');
            let regEndDate = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            if (tournament.formatDetails?.registrationEnd) {
                regEndDate = new Date(tournament.formatDetails.registrationEnd).toLocaleDateString('ru-RU');
            }
            const entryFee = tournament.formatDetails?.entryFee || 0;
            const prizePool = tournament.formatDetails?.prizePool || 0;
            const requirements = tournament.formatDetails?.requirements || {};
            let message = `üèÜ **${tournament.title}**\n\n`;
            message += `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${tournament.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n`;
            message += `üìÖ **–î–∞—Ç—ã:**\n`;
            message += `‚Ä¢ –ù–∞—á–∞–ª–æ: ${startDate}\n`;
            message += `‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${endDate}\n`;
            message += `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: ${regEndDate}\n\n`;
            message += `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** ${tournament.currentPlayers}/${tournament.maxPlayers}\n`;
            message += `üéæ **–¢–∏–ø:** ${this.getTournamentTypeText(tournament.type)}\n`;
            message += `üìç **–ú–µ—Å—Ç–æ:** ${tournament.locationName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
            if (entryFee > 0) {
                message += `üí∞ **–í–∑–Ω–æ—Å:** ${entryFee} –º—è—á–µ–π\n`;
            }
            if (prizePool > 0) {
                message += `üèÜ **–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:** ${prizePool} –º—è—á–µ–π\n`;
            }
            if (requirements.minRating || requirements.maxRating) {
                message += `üìä **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:** ${requirements.minRating || 0} - ${requirements.maxRating || '‚àû'}\n`;
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üéæ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', `join_tournament_${tournament.id}`)],
                [telegraf_1.Markup.button.callback('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', `tournament_players_${tournament.id}`)],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', 'active_tournaments')],
            ]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
    }
    // –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤:
    getTournamentTypeText(type) {
        switch (type) {
            case 'SINGLE_ELIMINATION':
                return '–ù–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ';
            case 'GROUPS_PLAYOFF':
                return '–ì—Ä—É–ø–ø—ã + –ü–ª–µ–π-–æ—Ñ—Ñ';
            case 'LEAGUE':
                return '–õ–∏–≥–∞ (–∫—Ä—É–≥–æ–≤–∞—è)';
            case 'BLITZ':
                return '–ë–ª–∏—Ü-—Ç—É—Ä–Ω–∏—Ä';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
        }
    }
    async handleJoinTournament(ctx) {
        await ctx.answerCbQuery();
        try {
            const tournaments = await this.tournamentsService.findAll({
                page: 1,
                limit: 10,
                status: 'DRAFT' // –¢–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            });
            if (tournaments.length === 0) {
                await ctx.editMessageText(`üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n` +
                    `üòî –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Ç—É—Ä–Ω–∏—Ä!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', 'create_tournament')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üèÜ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:**\n\n`;
            const buttons = [];
            tournaments.forEach((tournament, index) => {
                const startDate = new Date(tournament.startDate).toLocaleDateString('ru-RU');
                // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
                const title = tournament.title || '–¢—É—Ä–Ω–∏—Ä';
                const currentPlayers = tournament.currentPlayers || 0;
                const maxPlayers = tournament.maxPlayers || 0;
                const entryFee = tournament.formatDetails?.entryFee || 0;
                message += `${index + 1}. **${title}**\n`;
                message += `üìÖ –ù–∞—á–∞–ª–æ: ${startDate}\n`;
                message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${currentPlayers}/${maxPlayers}\n`;
                message += `üí∞ –í–∑–Ω–æ—Å: ${entryFee} –º—è—á–µ–π\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`üéæ ${title}`, `join_tournament_${tournament.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_tournaments')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
    }
    async handleJoinSpecificTournament(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const tournamentId = parseInt(ctx.callbackQuery.data.split('_')[2]);
        const userId = ctx.from?.id.toString();
        if (!userId)
            return;
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user)
                return;
            await this.tournamentsService.joinTournament(tournamentId.toString(), user.id.toString());
            await ctx.editMessageText(`‚úÖ **–£—Å–ø–µ—à–Ω–æ!**\n\n` +
                `–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ!\n\n` +
                `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–≥—Ä–µ! üéæ`, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
        }
    }
    async handleMyTournaments(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìã **–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.`, { parse_mode: 'Markdown' });
    }
    async handleTournamentHistory(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üèÜ **–ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —É—á–∞—Å—Ç–∏–π –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.`, { parse_mode: 'Markdown' });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–†–ï–ù–ò–†–û–í–û–ö ====================
    async handleFindTraining(ctx) {
        await ctx.answerCbQuery();
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            const trainings = await this.trainingsService.findAll({ page: 1, limit: 10 });
            if (trainings.length === 0) {
                await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n` +
                    `üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`, { parse_mode: 'Markdown' });
                return;
            }
            let message = `üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n`;
            const buttons = [];
            trainings.slice(0, 5).forEach((training, index) => {
                const datetime = new Date(training.datetime).toLocaleString('ru-RU');
                message += `${index + 1}. **${training.title}**\n`;
                message += `üë®‚Äçüè´ ${training.trainer?.first_name || '–¢—Ä–µ–Ω–µ—Ä'}\n`;
                message += `üìÖ ${datetime}\n`;
                message += `üìç ${training.location}\n`;
                message += `üë• ${training.currentParticipants || 0}/${training.maxParticipants}\n`;
                message += `üí∞ ${training.price || 0} —Ä—É–±.\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –ó–∞–ø–∏—Å–∞—Ç—å—Å—è`, `book_training_${training.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_training')]);
            const keyboard = telegraf_1.Markup.inlineKeyboard(buttons);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindTraining: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
        }
    }
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:
    async handleCreateTraining(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_TRAINING_TITLE,
            data: {}
        });
        await ctx.editMessageText(`üèÉ‚Äç‚ôÇÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 3**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`, { parse_mode: 'Markdown' });
    }
    async handleJoinTraining(ctx) {
        await ctx.answerCbQuery();
        try {
            const trainings = await this.trainingsService.findAll({
                page: 1,
                limit: 10
            });
            if (trainings.length === 0) {
                await ctx.editMessageText(`üèÉ‚Äç‚ôÇÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
                    `üòî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'create_training')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üèÉ‚Äç‚ôÇÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n`;
            const buttons = [];
            trainings.forEach((training, index) => {
                const date = new Date(training.scheduledTime).toLocaleString('ru-RU');
                const participantsCount = training.participants?.length || 0;
                const maxParticipants = training.maxParticipants || '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ';
                message += `${index + 1}. **${training.title}**\n`;
                message += `üìÖ ${date}\n`;
                message += `üë• ${participantsCount}/${maxParticipants}\n`;
                message += `üìç ${training.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`üèÉ‚Äç‚ôÇÔ∏è ${training.title}`, `join_training_${training.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_trainings')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
        }
    }
    async handleMyTrainings(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìã **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.`, { parse_mode: 'Markdown' });
    }
    async handleBecomeTrainer(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üë®‚Äçüè´ **–°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—É—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!`, { parse_mode: 'Markdown' });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò STORIES ====================
    async handleUploadPhotoStory(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_STORY_MEDIA,
            data: { storyType: 'PHOTO' }
        });
        await ctx.editMessageText(`üì∑ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ**\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`, { parse_mode: 'Markdown' });
    }
    async handleUploadVideoStory(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_STORY_MEDIA,
            data: { storyType: 'VIDEO' }
        });
        await ctx.editMessageText(`üé• **–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ**\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`, { parse_mode: 'Markdown' });
    }
    async handleViewStories(ctx) {
        await ctx.answerCbQuery();
        try {
            // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º
            await ctx.editMessageText(`üëÄ **Stories**\n\n` +
                `üòî –ü–æ–∫–∞ –Ω–µ—Ç Stories.\n\n` +
                `–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π!`, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleViewStories: ${error}`);
            await ctx.editMessageText(`üëÄ **Stories**\n\n` +
                `üòî –ü–æ–∫–∞ –Ω–µ—Ç Stories.\n\n` +
                `–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π!`, { parse_mode: 'Markdown' });
        }
    }
    async handleMyStories(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìã **–ú–æ–∏ Stories**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ Stories.`, { parse_mode: 'Markdown' });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ï–ô–°–û–í ====================
    async handleOpenCaseAction(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ caseId –∏–∑ callback_data
        const callbackData = ctx.callbackQuery.data;
        const caseId = parseInt(callbackData.replace('open_case_', ''));
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const result = await this.caseOpeningService.openCase(user.id.toString(), caseId);
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ', 'back_to_cases')],
                [telegraf_1.Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'case_history')],
            ]);
            await ctx.editMessageText(`üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
                `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **${result.winning.item.name}**\n\n` +
                `üìù ${result.winning.item.description}\n\n` +
                `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º—è—á–µ–π: ${result.opening.ballsSpent}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ${error}`);
            if (error instanceof Error && error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π')) {
                await ctx.editMessageText(`‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º—è—á–µ–π**\n\n` +
                    `–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º—è—á–µ–π.\n` +
                    `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!`, { parse_mode: 'Markdown' });
            }
            else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
            }
        }
    }
    async handleCaseHistoryAction(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìä **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–µ–π—Å–æ–≤.`, { parse_mode: 'Markdown' });
    }
    async handleBackToCases(ctx) {
        await ctx.answerCbQuery();
        await this.handleCases(ctx);
    }
    // ==================== AI COACH ====================
    async handleAITechniqueTip(ctx) {
        await ctx.answerCbQuery();
        const tips = [
            "üéæ **–°–æ–≤–µ—Ç –ø–æ –ø–æ–¥–∞—á–µ:** –î–µ—Ä–∂–∏—Ç–µ —Ä–∞–∫–µ—Ç–∫—É –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Ö–≤–∞—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∞—á–∏.",
            "üéæ **–°–æ–≤–µ—Ç –ø–æ —É–¥–∞—Ä—É:** –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º—è—á–æ–º –≥–ª–∞–∑–∞–º–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ä–∞–∫–µ—Ç–∫–æ–π.",
            "üéæ **–°–æ–≤–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é:** –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ü–µ–Ω—Ç—Ä –∫–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞.",
            "üéæ **–°–æ–≤–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:** –ò–≥—Ä–∞–π—Ç–µ –≤ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –æ–±—ã—á–Ω–æ —ç—Ç–æ –±—ç–∫—Ö–µ–Ω–¥.",
            "üéæ **–°–æ–≤–µ—Ç –ø–æ —Ñ–∏–∑–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:** –£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç–µ –Ω–æ–≥ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã."
        ];
        const randomTip = tips[Math.floor(Math.random() * tips.length)];
        await ctx.editMessageText(`üí° **–°–æ–≤–µ—Ç –æ—Ç AI-Coach:**\n\n${randomTip}\n\n` +
            `–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')],
                [telegraf_1.Markup.button.callback('üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç', 'ai_technique_tip')]
            ]).reply_markup
        });
    }
    async handleAITrainingPlan(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üèÉ‚Äç‚ôÇÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n` +
            `**–†–∞–∑–º–∏–Ω–∫–∞ (10 –º–∏–Ω):**\n` +
            `‚Ä¢ –õ–µ–≥–∫–∏–π –±–µ–≥ –≤–æ–∫—Ä—É–≥ –∫–æ—Ä—Ç–∞\n` +
            `‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞ –º—ã—à—Ü\n` +
            `‚Ä¢ –ú–∞—Ö–∏ —Ä–∞–∫–µ—Ç–∫–æ–π\n\n` +
            `**–¢–µ—Ö–Ω–∏–∫–∞ (20 –º–∏–Ω):**\n` +
            `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—Ö–µ–Ω–¥–∞ —É —Å—Ç–µ–Ω–∫–∏\n` +
            `‚Ä¢ –ü–æ–¥–∞—á–∏ –≤ –º–∏—à–µ–Ω–∏\n` +
            `‚Ä¢ –î–≤–∏–∂–µ–Ω–∏–µ –Ω–æ–≥\n\n` +
            `**–ò–≥—Ä–∞ (20 –º–∏–Ω):**\n` +
            `‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n` +
            `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π\n\n` +
            `**–ó–∞–º–∏–Ω–∫–∞ (10 –º–∏–Ω):**\n` +
            `‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞\n` +
            `‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã', 'ai_game_analysis')],
                [telegraf_1.Markup.button.callback('üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏', 'ai_goal_setting')]
            ]).reply_markup
        });
    }
    async handleAIGameAnalysis(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìä **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∏–≥—Ä—ã**\n\n` +
            `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö:\n\n` +
            `**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**\n` +
            `‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞\n` +
            `‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞\n\n` +
            `**–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n` +
            `üìà –ë—ç–∫—Ö–µ–Ω–¥ —É–¥–∞—Ä—ã\n` +
            `üìà –ò–≥—Ä–∞ —É —Å–µ—Ç–∫–∏\n` +
            `üìà –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\n\n` +
            `**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n` +
            `üéØ –ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –±—ç–∫—Ö–µ–Ω–¥\n` +
            `üéØ –ò–∑—É—á–∏—Ç–µ —Ç–∞–∫—Ç–∏–∫—É –∏–≥—Ä—ã\n` +
            `üéØ –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üí° –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç', 'ai_technique_tip')]
            ]).reply_markup
        });
    }
    async handleAIGoalSetting(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üéØ **–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π**\n\n` +
            `**–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (1 –º–µ—Å—è—Ü):**\n` +
            `‚Ä¢ –í—ã–∏–≥—Ä–∞—Ç—å 3 –º–∞—Ç—á–∞ –ø–æ–¥—Ä—è–¥\n` +
            `‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏ –¥–æ 60%\n` +
            `‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n\n` +
            `**–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (3 –º–µ—Å—è—Ü–∞):**\n` +
            `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 100 –ø—É–Ω–∫—Ç–æ–≤\n` +
            `‚Ä¢ –û—Å–≤–æ–∏—Ç—å —É–¥–∞—Ä —Å –ª–µ—Ç–∞\n` +
            `‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\n` +
            `**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (1 –≥–æ–¥):**\n` +
            `‚Ä¢ –î–æ–π—Ç–∏ –¥–æ —Ñ–∏–Ω–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞\n` +
            `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n` +
            `‚Ä¢ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üèÉ‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'ai_training_plan')]
            ]).reply_markup
        });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–§–ò–õ–Ø ====================
    async handleSetupProfileAction(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_FIRST_NAME,
            data: {}
        });
        await ctx.editMessageText(`üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
            `–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`, { parse_mode: 'Markdown' });
    }
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
    async handleDetailedStats(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const [stats, rating, matches] = await Promise.all([
                this.usersService.getProfileStatistics(user.id.toString()),
                this.ratingsService.getRatingForUser(user.id),
                this.matchesService.findByCreator(user.id.toString())
            ]);
            let message = `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
            // –†–µ–π—Ç–∏–Ω–≥–∏
            if (rating) {
                message += `üèÜ **–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n`;
                message += `üéØ **NTRP —É—Ä–æ–≤–µ–Ω—å:** ${rating.skillRating?.toFixed(1) || 'N/A'}\n`;
                message += `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n`;
                message += `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n\n`;
            }
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
            message += `üéæ **–ú–∞—Ç—á–∏:**\n`;
            message += `‚úÖ –í—Å–µ–≥–æ: ${stats.matchesPlayed || 0}\n`;
            message += `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins || 0}\n`;
            message += `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses || 0}\n`;
            message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n\n`;
            // –¢—É—Ä–Ω–∏—Ä—ã
            message += `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:**\n`;
            message += `üéØ –£—á–∞—Å—Ç–∏–π: ${stats.tournamentsPlayed || 0}\n`;
            message += `ü•á –ü–æ–±–µ–¥: ${stats.tournamentsWon || 0}\n\n`;
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const achievements = await this.achievementsService.getUserAchievements(user.id.toString());
            message += `üèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** ${achievements.length}\n`;
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'user_achievements')],
                [telegraf_1.Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'progress_chart')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')],
            ]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
    async handleUserAchievements(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            const achievements = await this.achievementsService.getUserAchievements(user.id.toString());
            if (achievements.length === 0) {
                await ctx.editMessageText(`üèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n` +
                    `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n` +
                    `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'detailed_stats')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üèÖ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${achievements.length}):**\n\n`;
            achievements.forEach((achievement, index) => {
                const earnedDate = new Date(achievement.earnedAt).toLocaleDateString('ru-RU');
                message += `${index + 1}. **${achievement.achievement.title}**\n`;
                message += `üìù ${achievement.achievement.description}\n`;
                message += `üìÖ –ü–æ–ª—É—á–µ–Ω–æ: ${earnedDate}\n\n`;
            });
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'detailed_stats')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        }
    }
    async handleMatchHistoryAction(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üéæ **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π.`, { parse_mode: 'Markdown' });
    }
    async handleAchievements(ctx) {
        await ctx.answerCbQuery();
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            const achievements = await this.achievementsService.getUserAchievements(user.id.toString());
            if (achievements.length === 0) {
                await ctx.editMessageText(`üèÖ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n` +
                    `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n` +
                    `–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∞—Ç—á–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!`, { parse_mode: 'Markdown' });
                return;
            }
            let message = `üèÖ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è** (${achievements.length}):\n\n`;
            achievements.slice(0, 10).forEach((achievement, index) => {
                const def = achievement.definition;
                message += `${def.icon} **${def.name}**\n`;
                message += `${def.description}\n`;
                message += `üìÖ ${achievement.awardedAt.toLocaleDateString('ru-RU')}\n\n`;
            });
            if (achievements.length > 10) {
                message += `...–∏ –µ—â–µ ${achievements.length - 10} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n`;
            }
            message += `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥! üéØ`;
            await ctx.editMessageText(message, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleAchievements: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        }
    }
    async notifyNewAchievement(userId, achievementCode) {
        try {
            const user = await this.usersService.findById(userId);
            if (!user || !user.telegram_id)
                return;
            const definitions = await this.achievementsService.getAllDefinitions();
            const achievement = definitions.find((def) => def.code === achievementCode);
            if (!achievement)
                return;
            const message = `üèÜ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
                `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n` +
                `${achievement.icon} **${achievement.name}**\n\n` +
                `${achievement.description}`;
            await this.bot.telegram.sendMessage(user.telegram_id, message, {
                parse_mode: 'Markdown',
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: ${error}`);
        }
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ê–¢–ß–ï–ô ====================
    async handleMatchTypeSingles(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        userState.data.matchType = 'SINGLES';
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_MATCH_OPPONENT;
        this.setUserState(userId, userState);
        await ctx.editMessageText(`üéæ **–û–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:`, { parse_mode: 'Markdown' });
    }
    async handleMatchTypeDoubles(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        userState.data.matchType = 'DOUBLES';
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_MATCH_OPPONENT;
        this.setUserState(userId, userState);
        await ctx.editMessageText(`üë• **–ü–∞—Ä–Ω—ã–π –º–∞—Ç—á**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤:`, { parse_mode: 'Markdown' });
    }
    // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê ====================
    async handlePhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        if (userState.step === profile_state_enum_1.ProfileStep.AWAITING_STORY_MEDIA && userState.data.storyType === 'PHOTO') {
            const photo = ctx.message.photo;
            const fileId = photo[photo.length - 1].file_id;
            userState.data.storyMediaId = fileId;
            userState.step = profile_state_enum_1.ProfileStep.AWAITING_STORY_DESCRIPTION;
            this.setUserState(userId, userState);
            await ctx.reply(`üì∑ **–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!**\n\n` +
                `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`, { parse_mode: 'Markdown' });
        }
    }
    async handleVideo(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        if (userState.step === profile_state_enum_1.ProfileStep.AWAITING_STORY_MEDIA && userState.data.storyType === 'VIDEO') {
            const video = ctx.message.video;
            const fileId = video.file_id;
            userState.data.storyMediaId = fileId;
            userState.step = profile_state_enum_1.ProfileStep.AWAITING_STORY_DESCRIPTION;
            this.setUserState(userId, userState);
            await ctx.reply(`üé• **–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!**\n\n` +
                `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏:`, { parse_mode: 'Markdown' });
        }
    }
    // ==================== –ü–û–ò–°–ö –ö–û–†–¢–û–í ====================
    async handleLocations(ctx) {
        this.logger.log('üìç –ö–û–†–¢–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∫–æ—Ä—Ç—ã', 'find_courts')],
                [telegraf_1.Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ç', 'add_court')],
                [telegraf_1.Markup.button.callback('üìç –ö–æ—Ä—Ç—ã —Ä—è–¥–æ–º', 'nearby_courts')],
                [telegraf_1.Markup.button.callback('‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', 'popular_courts')],
            ]);
            await ctx.reply(`üìç **–¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã**\n\n` +
                `üéæ –ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ –∫–æ—Ä—Ç—ã –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!\n\n` +
                `–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLocations: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∫–æ—Ä—Ç–æ–≤');
        }
    }
    async handleFindCourts(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_CITY_SEARCH,
            data: {}
        });
        await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∫–æ—Ä—Ç–æ–≤**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`, { parse_mode: 'Markdown' });
    }
    async handleCourtsMoscow(ctx) {
        await ctx.answerCbQuery();
        await this.showCourtsForCity(ctx, '–ú–æ—Å–∫–≤–∞');
    }
    async handleCourtsSpb(ctx) {
        await ctx.answerCbQuery();
        await this.showCourtsForCity(ctx, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥');
    }
    async handleCourtsOtherCity(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_CITY_SEARCH,
            data: {}
        });
        await ctx.editMessageText(`üåÜ **–ü–æ–∏—Å–∫ –∫–æ—Ä—Ç–æ–≤**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`, { parse_mode: 'Markdown' });
    }
    async handleCourtsLocation(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìç **–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n` +
            `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ—Ä—Ç—ã –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.`, { parse_mode: 'Markdown' });
    }
    async showCourtsForCity(ctx, city) {
        const courtsMessage = this.generateCityCortsMessage(city);
        await ctx.editMessageText(courtsMessage, {
            parse_mode: 'Markdown'
        });
    }
    // ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
    generateCityCortsMessage(city) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        const courtsByCity = {
            '–ú–æ—Å–∫–≤–∞': [
                {
                    name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"',
                    address: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 16',
                    price: '2000-3500 —Ä—É–±/—á–∞—Å',
                    rating: '4.9',
                    courts: 12,
                    features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–ü–∞—Ä–∫–æ–≤–∫–∞', '–†–∞–∑–¥–µ–≤–∞–ª–∫–∏', '–î—É—à–µ–≤—ã–µ', '–ü—Ä–æ–∫–∞—Ç —Ä–∞–∫–µ—Ç–æ–∫']
                },
                {
                    name: '–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"',
                    address: '–õ—É–∂–Ω–µ—Ü–∫–∞—è –Ω–∞–±., 24',
                    price: '1500-2800 —Ä—É–±/—á–∞—Å',
                    rating: '4.7',
                    courts: 8,
                    features: ['–ö—Ä—ã—Ç—ã–µ/–æ—Ç–∫—Ä—ã—Ç—ã–µ', '–•–∞—Ä–¥/–≥—Ä—É–Ω—Ç', '–û—Å–≤–µ—â–µ–Ω–∏–µ', '–ö–∞—Ñ–µ']
                },
                {
                    name: '–ö–ª—É–± "–°–ø–∞—Ä—Ç–∞–∫"',
                    address: '—É–ª. –î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤—Å–∫–∞—è, 14',
                    price: '1800-3000 —Ä—É–±/—á–∞—Å',
                    rating: '4.6',
                    courts: 6,
                    features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–¢—Ä–µ–Ω–µ—Ä—ã', '–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è']
                }
            ],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': [
                {
                    name: '–¢–ö "–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π"',
                    address: '–ü–µ—Ç—Ä–æ–≤—Å–∫–∞—è –Ω–∞–±., 4',
                    price: '1200-2200 —Ä—É–±/—á–∞—Å',
                    rating: '4.8',
                    courts: 10,
                    features: ['–ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥', '–í–∏–¥ –Ω–∞ –ù–µ–≤—É', '–ü–∞—Ä–∫–æ–≤–∫–∞']
                },
                {
                    name: '–ö–ª—É–± "–î–∏–Ω–∞–º–æ"',
                    address: '–ø—Ä. –î–∏–Ω–∞–º–æ, 44',
                    price: '1000-1800 —Ä—É–±/—á–∞—Å',
                    rating: '4.5',
                    courts: 8,
                    features: ['–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–ì—Ä—É–Ω—Ç', '–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω']
                }
            ]
        };
        const courts = courtsByCity[city] || [
            {
                name: '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–±',
                address: '–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞',
                price: '1000-2000 —Ä—É–±/—á–∞—Å',
                rating: '4.5',
                courts: 4,
                features: ['–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã', '–•–∞—Ä–¥']
            }
        ];
        let message = `üèôÔ∏è **–ö–æ—Ä—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ ${city}:**\n\n`;
        courts.forEach((court, index) => {
            message += `${index + 1}. **${court.name}**\n`;
            message += `üìç ${court.address}\n`;
            message += `üí∞ ${court.price}\n`;
            message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${court.rating}\n`;
            message += `üéæ –ö–æ—Ä—Ç–æ–≤: ${court.courts}\n`;
            message += `‚ú® ${court.features.join(', ')}\n\n`;
        });
        message += `üìû **–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n`;
        message += `‚Ä¢ –ó–≤–æ–Ω–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é\n`;
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n`;
        message += `‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n\n`;
        message += `üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ä–∞–Ω–µ–µ!`;
        return message;
    }
    async createMatch(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å—á–µ—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            const score = userState.data.matchScore || '';
            const isWin = score.includes('6-') && score.split(' ')[0].startsWith('6');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É CreateMatchDto
            const matchData = {
                opponentName: userState.data.matchOpponent,
                opponentId: null,
                score: userState.data.matchScore,
                matchDate: new Date(userState.data.matchDate),
                type: userState.data.matchType === 'DOUBLES' ? match_enum_1.MatchType.DOUBLES : match_enum_1.MatchType.ONE_ON_ONE,
                result: isWin ? 'WIN' : 'LOSS',
                isRanked: false,
                location: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            };
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            await this.matchesService.create(user.id.toString(), matchData);
            const summaryMessage = `üéæ **–ú–∞—Ç—á –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
                `üë§ **–°–æ–ø–µ—Ä–Ω–∏–∫:** ${matchData.opponentName}\n` +
                `üèÜ **–°—á–µ—Ç:** ${matchData.score}\n` +
                `üìÖ **–î–∞—Ç–∞:** ${matchData.matchDate.toLocaleDateString('ru-RU')}\n` +
                `üéØ **–¢–∏–ø:** ${matchData.type === match_enum_1.MatchType.ONE_ON_ONE ? '–û–¥–∏–Ω–æ—á–Ω—ã–π' : '–ü–∞—Ä–Ω—ã–π'}\n` +
                `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${matchData.result === 'WIN' ? '–ü–æ–±–µ–¥–∞ üèÜ' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n` +
                `–ú–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!`;
            await ctx.reply(summaryMessage, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞—Ç—á–∞');
        }
    }
    async createStory(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const storyData = {
                description: userState.data.storyDescription || '',
                mediaUrl: userState.data.storyMediaId || '',
                type: userState.data.storyType || 'PHOTO',
            };
            // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º
            this.logger.log(`Story —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞): ${JSON.stringify(storyData)}`);
            await ctx.reply(`üì∏ **–ò—Å—Ç–æ—Ä–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!**\n\n` +
                `${storyData.description ? `üìù ${storyData.description}` : ''}\n\n` +
                `–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Stories!`, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
    }
};
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStart", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üéæ –ò–≥—Ä–∞—Ç—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePlay", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('find_game'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFindGame", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_request'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateRequest", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('rating'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleRatingCommand", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('leaderboard'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLeaderboardCommand", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('leaderboard_skill'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSkillLeaderboard", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('leaderboard_points'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePointsLeaderboard", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üèÜ –¢—É—Ä–Ω–∏—Ä—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournaments", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('active_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleActiveTournamentsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateTournamentAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('join_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleJoinTournamentAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyTournamentsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToTournaments", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToProfileAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('detailed_stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDetailedStatsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üéÅ –ö–µ–π—Å—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCases", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üì± Stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStories", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_story'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateStoryAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyStoriesAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('popular_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePopularStoriesAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('friends_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFriendsStoriesAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToStoriesAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('invite_friends'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleInviteFriendsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTrainings", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleRecordMatch", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleInviteButton", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('invite'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleInvite", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('ü§ñ AI-Coach'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAICoach", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleText", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSettings", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('settings_language'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSettingsLanguage", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^set_language_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSetLanguage", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_settings'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToSettings", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^open_case_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpenCase", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^respond_request_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleRespondToRequest", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('debug'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDebug", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('menu'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMenu", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('referral_stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleReferralStats", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_requests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyRequests", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('active_requests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleActiveRequests", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_play'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToPlay", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^req_level_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleRequestLevelCallback", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^tournament_players_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentPlayers", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^tournament_details_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentDetails", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('join_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleJoinTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^join_tournament_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleJoinSpecificTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyTournaments", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('tournament_history'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentHistory", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('find_training'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFindTraining", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_training'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateTraining", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('join_training'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleJoinTraining", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_trainings'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyTrainings", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('become_trainer'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBecomeTrainer", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('upload_photo_story'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleUploadPhotoStory", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('upload_video_story'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleUploadVideoStory", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('view_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleViewStories", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyStories", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^open_case_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpenCaseAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('case_history'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCaseHistoryAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_cases'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToCases", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('ai_technique_tip'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAITechniqueTip", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('ai_training_plan'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAITrainingPlan", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('ai_game_analysis'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAIGameAnalysis", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('ai_goal_setting'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAIGoalSetting", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('setup_profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSetupProfileAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('detailed_stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDetailedStats", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('user_achievements'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleUserAchievements", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('match_history'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMatchHistoryAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('achievements'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAchievements", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('match_type_singles'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMatchTypeSingles", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('match_type_doubles'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMatchTypeDoubles", null);
__decorate([
    (0, nestjs_telegraf_1.On)('photo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePhoto", null);
__decorate([
    (0, nestjs_telegraf_1.On)('video'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleVideo", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üìç –ö–æ—Ä—Ç—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLocations", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('find_courts'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFindCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('courts_moscow'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCourtsMoscow", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('courts_spb'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCourtsSpb", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('courts_other_city'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCourtsOtherCity", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('courts_location'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCourtsLocation", null);
BotService = BotService_1 = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    (0, common_1.Injectable)(),
    __param(0, (0, nestjs_telegraf_1.InjectBot)()),
    __metadata("design:paramtypes", [telegraf_1.Telegraf,
        users_service_1.UsersService,
        balls_service_1.BallsService,
        requests_service_1.RequestsService,
        tournaments_service_1.TournamentsService,
        matches_service_1.MatchesService,
        trainings_service_1.TrainingsService,
        stories_service_1.StoriesService,
        cases_service_1.CasesService,
        case_opening_service_1.CaseOpeningService,
        telegram_service_1.TelegramService,
        notifications_service_1.NotificationsService,
        prisma_service_1.PrismaService,
        achievements_service_1.AchievementsService,
        ratings_service_1.RatingsService,
        settings_service_1.SettingsService,
        locations_service_1.LocationsService,
        referrals_service_1.ReferralsService])
], BotService);
exports.BotService = BotService;
