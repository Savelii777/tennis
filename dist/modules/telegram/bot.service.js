"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BotService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotService = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const profile_handler_1 = require("./handlers/profile.handler");
const matches_handler_1 = require("./handlers/matches.handler");
const requests_handler_1 = require("./handlers/requests.handler");
const tournaments_handler_1 = require("./handlers/tournaments.handler");
const trainings_handler_1 = require("./handlers/trainings.handler");
const stories_handler_1 = require("./handlers/stories.handler");
const cases_handler_1 = require("./handlers/cases.handler");
const ai_coach_handler_1 = require("./handlers/ai-coach.handler");
const common_handler_1 = require("./handlers/common.handler");
const messaging_handler_1 = require("./handlers/messaging.handler");
const state_service_1 = require("./services/state.service");
let BotService = BotService_1 = class BotService {
    constructor(bot, profileHandler, matchesHandler, requestsHandler, tournamentsHandler, trainingHandler, storiesHandler, casesHandler, aiCoachHandler, commonHandler, messagingHandler, stateService) {
        this.bot = bot;
        this.profileHandler = profileHandler;
        this.matchesHandler = matchesHandler;
        this.requestsHandler = requestsHandler;
        this.tournamentsHandler = tournamentsHandler;
        this.trainingHandler = trainingHandler;
        this.storiesHandler = storiesHandler;
        this.casesHandler = casesHandler;
        this.aiCoachHandler = aiCoachHandler;
        this.commonHandler = commonHandler;
        this.messagingHandler = messagingHandler;
        this.stateService = stateService;
        this.logger = new common_1.Logger(BotService_1.name);
    }
    async onModuleInit() {
        this.logger.debug('üîß BotService.onModuleInit() –∑–∞–ø—É—â–µ–Ω');
        this.logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            this.logger.debug('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
            const botInfo = await this.bot.telegram.getMe();
            this.logger.log(`ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username} (${botInfo.first_name})`);
            this.logger.debug(`üìä –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: ${JSON.stringify(botInfo)}`);
            // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å polling
            this.logger.debug('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
            await this.bot.telegram.deleteWebhook();
            this.logger.log('üîÑ Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ polling');
            // –ù–ï –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–†–£–ß–ù–£–Æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
            this.logger.debug('üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã nestjs-telegraf');
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            this.logger.debug('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫...');
            this.bot.catch((err, ctx) => {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
                this.logger.error('üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', JSON.stringify(ctx.update));
                console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
                console.error('–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', ctx);
            });
            this.logger.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.logger.debug('‚úÖ BotService.onModuleInit() –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
            this.logger.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error));
        }
    }
    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    // @On('message')
    async onMessage_DISABLED(ctx) {
        this.logger.debug('üîç DECORATOR @On("message") –≤—ã–∑–≤–∞–Ω');
        this.logger.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(ctx.message)}`);
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username}, ID: ${ctx.from?.id})`);
        this.logger.debug(`üí¨ –í —á–∞—Ç–µ: ${ctx.chat?.id} (—Ç–∏–ø: ${ctx.chat?.type})`);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (ctx.message && 'text' in ctx.message) {
            const text = ctx.message.text;
            this.logger.log(`üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${text}"`);
            this.logger.debug(`üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
            if (text.startsWith('/')) {
                this.logger.log(`üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${text}`);
                this.logger.debug('üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º...');
                return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
            }
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            this.logger.debug('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç...');
            await this.handleText(ctx);
        }
        else {
            this.logger.debug('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞');
            if (ctx.message && 'photo' in ctx.message) {
                this.logger.debug('üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ');
            }
            if (ctx.message && 'document' in ctx.message) {
                this.logger.debug('üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç');
            }
            if (ctx.message && 'voice' in ctx.message) {
                this.logger.debug('üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            }
        }
        this.logger.debug('‚úÖ onMessage –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query —á–µ—Ä–µ–∑ Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    // @On('callback_query') - –û–¢–ö–õ–Æ–ß–ï–ù, —á—Ç–æ–±—ã Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    async onCallbackQuery_DISABLED(ctx) {
        this.logger.debug('ÔøΩ DECORATOR @On("callback_query") –≤—ã–∑–≤–∞–Ω - –û–¢–ö–õ–Æ–ß–ï–ù');
        // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω, —á—Ç–æ–±—ã @Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    }
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
    async handleStart(ctx) {
        this.logger.debug('üîç DECORATOR @Start() –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
        this.logger.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        this.logger.log(`üí¨ Chat ID: ${ctx.chat?.id}`);
        this.logger.debug(`üìä –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${JSON.stringify(ctx.from)}`);
        this.logger.debug(`üìä –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: ${JSON.stringify(ctx.chat)}`);
        try {
            this.logger.debug('üîÑ –í—ã–∑–æ–≤ commonHandler.handleStart...');
            await this.commonHandler.handleStart(ctx);
            this.logger.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
            this.logger.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error));
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
        }
    }
    async handleHelp(ctx) {
        this.logger.debug('üîç DECORATOR @Command("help") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await ctx.reply('üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å');
            this.logger.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /help:', error);
        }
    }
    async handleProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üë§ –ü—Ä–æ—Ñ–∏–ª—å") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.profileHandler.handleProfile(ctx);
            this.logger.debug('‚úÖ handleProfile –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å:', error);
            throw error;
        }
    }
    async handlePlay(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üéæ –ò–≥—Ä–∞—Ç—å") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ò–≥—Ä–∞—Ç—å');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.requestsHandler.handlePlay(ctx);
            this.logger.debug('‚úÖ handlePlay –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ò–≥—Ä–∞—Ç—å:', error);
            throw error;
        }
    }
    async handleTournaments(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üèÜ –¢—É—Ä–Ω–∏—Ä—ã") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –¢—É—Ä–Ω–∏—Ä—ã');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.tournamentsHandler.handleTournaments(ctx);
            this.logger.debug('‚úÖ handleTournaments –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¢—É—Ä–Ω–∏—Ä—ã:', error);
            throw error;
        }
    }
    async handleTrainings(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.trainingHandler.handleTrainings(ctx);
            this.logger.debug('‚úÖ handleTrainings –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
            throw error;
        }
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    async handleStories(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üì± Stories") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì± –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: Stories');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await this.storiesHandler.handleStories(ctx);
            this.logger.debug('‚úÖ handleStories –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Stories:', error);
            throw error;
        }
    }
    async handleCases(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üéÅ –ö–µ–π—Å—ã") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üéÅ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ö–µ–π—Å—ã');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await this.casesHandler.handleCases(ctx);
            this.logger.debug('‚úÖ handleCases –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ö–µ–π—Å–æ–≤:', error);
            throw error;
        }
    }
    async handleRecordResult(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üìù –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await this.matchesHandler.handleRecordMatch(ctx);
            this.logger.debug('‚úÖ handleRecordMatch –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            throw error;
        }
    }
    async handleInviteFriend(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üîó –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await this.commonHandler.handleInviteButton(ctx);
            this.logger.debug('‚úÖ handleInviteButton –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:', error);
            throw error;
        }
    }
    async handleAiCoach(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("ü§ñ AI-Coach") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('ü§ñ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: AI-Coach');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await this.aiCoachHandler.handleAICoach(ctx);
            this.logger.debug('‚úÖ handleAICoach –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-Coach:', error);
            throw error;
        }
    }
    async handleCourts(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("üìç –ö–æ—Ä—Ç—ã") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üìç –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ö–æ—Ä—Ç—ã');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await ctx.reply('üìç –†–∞–∑–¥–µ–ª "–ö–æ—Ä—Ç—ã" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
            this.logger.debug('‚úÖ handleCourts –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ö–æ—Ä—Ç–æ–≤:', error);
            throw error;
        }
    }
    async handleSettings(ctx) {
        this.logger.debug('üîç DECORATOR @Hears("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('‚öôÔ∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            await ctx.reply('‚öôÔ∏è –†–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
            this.logger.debug('‚úÖ handleSettings –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ù–∞—Å—Ç—Ä–æ–µ–∫:', error);
            throw error;
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleText(ctx) {
        this.logger.debug('üîç DECORATOR @On("text") –≤—ã–∑–≤–∞–Ω');
        if (!ctx.from || !ctx.message || !('text' in ctx.message)) {
            this.logger.debug('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞');
            return;
        }
        const userId = ctx.from.id.toString();
        const text = ctx.message.text;
        this.logger.debug(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
        this.logger.debug(`üìù –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: "${text}"`);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userState = this.stateService.getUserState(userId);
        this.logger.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);
        this.logger.debug(`üîç –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(userState)}`);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try {
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ ProfileHandler...');
            // –ü—Ä–æ—Ñ–∏–ª—å
            if (await this.profileHandler.handleProfileInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ProfileHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MatchesHandler...');
            // –ú–∞—Ç—á–∏
            if (await this.matchesHandler.handleMatchInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ MatchesHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ RequestsHandler...');
            // –ó–∞—è–≤–∫–∏
            if (await this.requestsHandler.handleRequestInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ RequestsHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ TournamentsHandler...');
            // –¢—É—Ä–Ω–∏—Ä—ã
            if (await this.tournamentsHandler.handleTournamentInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ TournamentsHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ TrainingsHandler...');
            // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if (await this.trainingHandler.handleTrainingInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ TrainingsHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ StoriesHandler...');
            // Stories
            if (await this.storiesHandler.handleStoryInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ StoriesHandler');
                return;
            }
            this.logger.debug('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ AiCoachHandler...');
            // AI Coach
            if (await this.aiCoachHandler.handleAIInput(ctx, text, userId)) {
                this.logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AiCoachHandler');
                return;
            }
            this.logger.debug('‚ùì –¢–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º');
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await ctx.reply(`ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, {
                reply_markup: {
                    keyboard: [
                        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
                        ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
                        ['üìç –ö–æ—Ä—Ç—ã', 'ü§ñ AI-Coach'],
                        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                    ],
                    resize_keyboard: true
                }
            });
            this.logger.debug('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π');
        }
        catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: ${error}`);
            this.logger.error(`üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error)}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
        this.logger.debug('‚úÖ handleText –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Stories
    async handlePhoto(ctx) {
        this.logger.debug('üîç DECORATOR @On("photo") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.storiesHandler.handlePhoto(ctx);
            this.logger.debug('‚úÖ handlePhoto –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
            throw error;
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è Stories
    async handleVideo(ctx) {
        this.logger.debug('üîç DECORATOR @On("video") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üé• –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ');
        this.logger.debug(`üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.first_name} (@${ctx.from?.username})`);
        try {
            const result = await this.storiesHandler.handleVideo(ctx);
            this.logger.debug('‚úÖ handleVideo –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', error);
            throw error;
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    async handleDebug(ctx) {
        this.logger.debug('üîç DECORATOR @Command("debug") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug');
        if (!ctx.from) {
            this.logger.debug('‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
            return;
        }
        const userId = ctx.from.id.toString();
        const userState = this.stateService.getUserState(userId);
        this.logger.debug(`üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        await ctx.reply(`üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n` +
            `User ID: ${userId}\n` +
            `State: ${userState.step}\n` +
            `Data: ${JSON.stringify(userState.data, null, 2)}`, { parse_mode: 'Markdown' });
        this.logger.debug('‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async processUpdate(update) {
        this.logger.debug('üîç processUpdate –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        this.logger.debug(`üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${JSON.stringify(update)}`);
        try {
            await this.bot.handleUpdate(update);
            this.logger.debug('‚úÖ processUpdate –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            this.logger.error(`üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error)}`);
            throw error;
        }
    }
    async getBotInfo() {
        return this.bot.telegram.getMe();
    }
    // Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è callback –∫–Ω–æ–ø–æ–∫
    async handleMainMenuAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("main_menu") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        try {
            await ctx.answerCbQuery();
            await this.commonHandler.handleStart(ctx);
            this.logger.debug('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleMyTournamentsAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("my_tournaments") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üìã –ü–æ–∫–∞–∑ –º–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleMyTournaments(ctx);
            this.logger.debug('‚úÖ –ü–æ–∫–∞–∑ –º–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleFindTournamentAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("find_tournament") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleFindTournament(ctx);
            this.logger.debug('‚úÖ –ü–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleCreateTournamentAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("create_tournament") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleCreateTournament(ctx);
            this.logger.debug('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    async handleDetailedStatsAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("detailed_stats") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üìä –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleDetailedStats(ctx);
            this.logger.debug('‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleUserAchievementsAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("user_achievements") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üèÜ –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleUserAchievements(ctx);
            this.logger.debug('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleSetupProfileAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("setup_profile") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSetupProfileAction(ctx);
            this.logger.debug('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleUserGoalsAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("user_goals") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üéØ –ü–æ–∫–∞–∑ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleUserGoals(ctx);
            this.logger.debug('‚úÖ –¶–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ü–µ–ª–µ–π:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleMatchHistoryAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("match_history") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üìú –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleMatchHistory(ctx);
            this.logger.debug('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä—ã
    async handleFindGameAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("find_game") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã');
        try {
            await ctx.answerCbQuery();
            await this.requestsHandler.handleFindGame(ctx);
            this.logger.debug('‚úÖ –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleCreateRequestAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("create_request") –≤—ã–∑–≤–∞–Ω');
        this.logger.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏');
        try {
            await ctx.answerCbQuery();
            await this.requestsHandler.handleCreateRequest(ctx);
            this.logger.debug('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    async handleBackToProfileAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("back_to_profile") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleBackToProfile(ctx);
            this.logger.debug('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleBackToTournamentsAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("back_to_tournaments") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleBackToTournaments(ctx);
            this.logger.debug('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã
    async handleLevelBeginner(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_BEGINNER") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            // –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã - –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.editMessageText('üü¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è BEGINNER –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelAmateur(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_AMATEUR") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText('üîµ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –õ—é–±–∏—Ç–µ–ª—å');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è AMATEUR –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelConfident(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_CONFIDENT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText('üü° –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –£–≤–µ—Ä–µ–Ω–Ω—ã–π');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è CONFIDENT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelTournament(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_TOURNAMENT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText('üü† –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –¢—É—Ä–Ω–∏—Ä–Ω—ã–π');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è TOURNAMENT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelSemiPro(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_SEMI_PRO") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText('üî¥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è SEMI_PRO –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelAny(ctx) {
        this.logger.debug('üîç DECORATOR @Action("req_level_ANY") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await ctx.editMessageText('üë• –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: –õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å');
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ANY –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    async handleHandLeft(ctx) {
        this.logger.debug('üîç DECORATOR @Action("hand_LEFT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleHandSelection('LEFT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Ä—É–∫–∏ LEFT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–∏:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleHandRight(ctx) {
        this.logger.debug('üîç DECORATOR @Action("hand_RIGHT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleHandSelection('RIGHT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Ä—É–∫–∏ RIGHT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–∏:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (messaging)
    async handleCancelMessage(ctx) {
        this.logger.debug('üîç DECORATOR @Action("cancel_message") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.messagingHandler.handleCancelMessage(ctx);
            this.logger.debug('‚úÖ –û—Ç–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback_data (—Å ID)
    async handleJoinTournament(ctx) {
        this.logger.debug('üîç DECORATOR @Action(join_tournament_) –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleJoinTournament(ctx);
            this.logger.debug('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLeaveTournament(ctx) {
        this.logger.debug('üîç DECORATOR @Action(leave_tournament_) –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.tournamentsHandler.handleLeaveTournament(ctx);
            this.logger.debug('‚úÖ –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleViewProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action(view_profile_) –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.messagingHandler.handleViewProfile(ctx);
            this.logger.debug('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleReplyMessage(ctx) {
        this.logger.debug('üîç DECORATOR @Action(reply_message_) –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.messagingHandler.handleReplyMessage(ctx);
            this.logger.debug('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –ü–æ–ª–Ω—ã–µ Action –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –∞–Ω–∫–µ—Ç—ã
    async handleProfileAction(ctx) {
        this.logger.debug('üîç DECORATOR @Action("profile") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleProfile(ctx);
            this.logger.debug('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞
    async handleSportTennis(ctx) {
        this.logger.debug('üîç DECORATOR @Action("sport_TENNIS") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSportSelection('TENNIS', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞ TENNIS –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Ä—Ç–∞ TENNIS:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleSportPadel(ctx) {
        this.logger.debug('üîç DECORATOR @Action("sport_PADEL") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSportSelection('PADEL', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞ PADEL –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Ä—Ç–∞ PADEL:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 2
    async handleStartStepTwo(ctx) {
        this.logger.debug('üîç DECORATOR @Action("start_step_two") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStartStepTwo(ctx);
            this.logger.debug('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 2 –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —à–∞–≥—É 2:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    async handleTournamentsYes(ctx) {
        this.logger.debug('üîç DECORATOR @Action("tournaments_YES") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleTournamentsSelection(true, ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤ YES –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ YES:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleTournamentsNo(ctx) {
        this.logger.debug('üîç DECORATOR @Action("tournaments_NO") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleTournamentsSelection(false, ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤ NO –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ NO:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
    async handleLevelBeginnerProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_BEGINNER") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('BEGINNER', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è BEGINNER –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è BEGINNER:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelAmateurProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_AMATEUR") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('AMATEUR', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è AMATEUR –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è AMATEUR:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelConfidentProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_CONFIDENT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('CONFIDENT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è CONFIDENT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è CONFIDENT:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelAdvancedProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_ADVANCED") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('ADVANCED', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ADVANCED –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è ADVANCED:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelTournamentProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_TOURNAMENT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('TOURNAMENT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è TOURNAMENT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è TOURNAMENT:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelSemiProProfile(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_SEMI_PRO") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('SEMI_PRO', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è SEMI_PRO –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è SEMI_PRO:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å NTRP
    async handleLevelBeginnerNtrp(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_BEGINNER_1_2") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('BEGINNER', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è BEGINNER_1_2 –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è BEGINNER_1_2:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelAmateurNtrp(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_AMATEUR_2_3") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('AMATEUR', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è AMATEUR_2_3 –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è AMATEUR_2_3:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelConfidentNtrp(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_CONFIDENT_4") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('CONFIDENT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è CONFIDENT_4 –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è CONFIDENT_4:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleLevelTournamentNtrp(ctx) {
        this.logger.debug('üîç DECORATOR @Action("level_TOURNAMENT_5") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleLevelSelection('TOURNAMENT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è TOURNAMENT_5 –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è TOURNAMENT_5:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä
    async handleFrequency1(ctx) {
        this.logger.debug('üîç DECORATOR @Action("frequency_1") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleFrequencySelection('1_PER_WEEK', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å—Ç–æ—Ç—ã 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleFrequency2(ctx) {
        this.logger.debug('üîç DECORATOR @Action("frequency_2") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleFrequencySelection('2_3_PER_WEEK', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å—Ç–æ—Ç—ã 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleFrequency3(ctx) {
        this.logger.debug('üîç DECORATOR @Action("frequency_3") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleFrequencySelection('4_PLUS_PER_WEEK', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã 4+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å—Ç–æ—Ç—ã 4+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—Ä–µ–º—è –∏–≥—Ä—ã
    async handleTimeMorning(ctx) {
        this.logger.debug('üîç DECORATOR @Action("time_MORNING") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handlePlayTimeSelection('MORNING', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ MORNING –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ MORNING:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleTimeDay(ctx) {
        this.logger.debug('üîç DECORATOR @Action("time_DAY") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handlePlayTimeSelection('DAY', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ DAY –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ DAY:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleTimeEvening(ctx) {
        this.logger.debug('üîç DECORATOR @Action("time_EVENING") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handlePlayTimeSelection('EVENING', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ EVENING –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ EVENING:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleTimeNight(ctx) {
        this.logger.debug('üîç DECORATOR @Action("time_NIGHT") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handlePlayTimeSelection('NIGHT', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ NIGHT –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ NIGHT:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleContinueToFrequency(ctx) {
        this.logger.debug('üîç DECORATOR @Action("continue_to_frequency") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleContinueToFrequency(ctx);
            this.logger.debug('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Å—Ç–æ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —á–∞—Å—Ç–æ—Ç–µ:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä –±—ç–∫—Ö–µ–Ω–¥–∞
    async handleBackhandOne(ctx) {
        this.logger.debug('üîç DECORATOR @Action("backhand_ONE") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleBackhandSelection('ONE_HANDED', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –æ–¥–Ω–æ—Ä—É—á–Ω–æ–≥–æ –±—ç–∫—Ö–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–¥–Ω–æ—Ä—É—á–Ω–æ–≥–æ –±—ç–∫—Ö–µ–Ω–¥–∞:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleBackhandTwo(ctx) {
        this.logger.debug('üîç DECORATOR @Action("backhand_TWO") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleBackhandSelection('TWO_HANDED', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –¥–≤—É—Ä—É—á–Ω–æ–≥–æ –±—ç–∫—Ö–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–≤—É—Ä—É—á–Ω–æ–≥–æ –±—ç–∫—Ö–µ–Ω–¥–∞:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è
    async handleSurfaceHard(ctx) {
        this.logger.debug('üîç DECORATOR @Action("surface_HARD") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSurfaceSelection('HARD', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è HARD –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∫—Ä—ã—Ç–∏—è HARD:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleSurfaceClay(ctx) {
        this.logger.debug('üîç DECORATOR @Action("surface_CLAY") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSurfaceSelection('CLAY', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è CLAY –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∫—Ä—ã—Ç–∏—è CLAY:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleSurfaceGrass(ctx) {
        this.logger.debug('üîç DECORATOR @Action("surface_GRASS") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSurfaceSelection('GRASS', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è GRASS –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∫—Ä—ã—Ç–∏—è GRASS:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleSurfaceCarpet(ctx) {
        this.logger.debug('üîç DECORATOR @Action("surface_CARPET") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleSurfaceSelection('CARPET', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è CARPET –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∫—Ä—ã—Ç–∏—è CARPET:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–≥—Ä—ã
    async handleStyleUniversal(ctx) {
        this.logger.debug('üîç DECORATOR @Action("style_UNIVERSAL") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStyleSelection('UNIVERSAL', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å—Ç–∏–ª—è UNIVERSAL –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è UNIVERSAL:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleStyleDefensive(ctx) {
        this.logger.debug('üîç DECORATOR @Action("style_DEFENSIVE") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStyleSelection('DEFENSIVE', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å—Ç–∏–ª—è DEFENSIVE –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è DEFENSIVE:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleStyleAggressive(ctx) {
        this.logger.debug('üîç DECORATOR @Action("style_AGGRESSIVE") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStyleSelection('AGGRESSIVE', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å—Ç–∏–ª—è AGGRESSIVE –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è AGGRESSIVE:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleStyleNetPlayer(ctx) {
        this.logger.debug('üîç DECORATOR @Action("style_NET_PLAYER") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStyleSelection('NET_PLAYER', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å—Ç–∏–ª—è NET_PLAYER –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è NET_PLAYER:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleStyleBasic(ctx) {
        this.logger.debug('üîç DECORATOR @Action("style_BASIC") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleStyleSelection('BASIC', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å—Ç–∏–ª—è BASIC –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è BASIC:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä –ª—é–±–∏–º–æ–≥–æ —É–¥–∞—Ä–∞
    async handleShotServe(ctx) {
        this.logger.debug('üîç DECORATOR @Action("shot_SERVE") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleShotSelection('SERVE', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É–¥–∞—Ä–∞ SERVE –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞ SERVE:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleShotForehand(ctx) {
        this.logger.debug('üîç DECORATOR @Action("shot_FOREHAND") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleShotSelection('FOREHAND', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É–¥–∞—Ä–∞ FOREHAND –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞ FOREHAND:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleShotBackhand(ctx) {
        this.logger.debug('üîç DECORATOR @Action("shot_BACKHAND") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleShotSelection('BACKHAND', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É–¥–∞—Ä–∞ BACKHAND –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞ BACKHAND:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleShotVolley(ctx) {
        this.logger.debug('üîç DECORATOR @Action("shot_VOLLEY") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleShotSelection('VOLLEY', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É–¥–∞—Ä–∞ VOLLEY –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞ VOLLEY:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleShotSmash(ctx) {
        this.logger.debug('üîç DECORATOR @Action("shot_SMASH") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleShotSelection('SMASH', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —É–¥–∞—Ä–∞ SMASH –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–¥–∞—Ä–∞ SMASH:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    // –í—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
    async handleOpponentAny(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_ANY") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('ANY', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ANY –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ANY:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleOpponentMen(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_MEN") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('MEN', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ MEN –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ MEN:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleOpponentWomen(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_WOMEN") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('WOMEN', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ WOMEN –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ WOMEN:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleOpponentSameLevel(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_SAME_LEVEL") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('SAME_LEVEL', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ SAME_LEVEL –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ SAME_LEVEL:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleOpponentStronger(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_STRONGER") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('STRONGER', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ STRONGER –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ STRONGER:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async handleOpponentWeaker(ctx) {
        this.logger.debug('üîç DECORATOR @Action("opponent_WEAKER") –≤—ã–∑–≤–∞–Ω');
        try {
            await ctx.answerCbQuery();
            await this.profileHandler.handleOpponentSelection('WEAKER', ctx);
            this.logger.debug('‚úÖ –í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ WEAKER –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ WEAKER:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
};
exports.BotService = BotService;
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStart", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('help'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleHelp", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üéæ –ò–≥—Ä–∞—Ç—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePlay", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üèÜ –¢—É—Ä–Ω–∏—Ä—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournaments", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTrainings", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üì± Stories'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStories", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üéÅ –ö–µ–π—Å—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCases", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleRecordResult", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleInviteFriend", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('ü§ñ AI-Coach'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleAiCoach", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üìç –ö–æ—Ä—Ç—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSettings", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleText", null);
__decorate([
    (0, nestjs_telegraf_1.On)('photo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePhoto", null);
__decorate([
    (0, nestjs_telegraf_1.On)('video'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleVideo", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('debug'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDebug", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('main_menu'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMainMenuAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMyTournamentsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('find_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFindTournamentAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_tournament'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateTournamentAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('detailed_stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDetailedStatsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('user_achievements'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleUserAchievementsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('setup_profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSetupProfileAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('user_goals'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleUserGoalsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('match_history'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMatchHistoryAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('find_game'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFindGameAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_request'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCreateRequestAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToProfileAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_tournaments'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackToTournamentsAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_BEGINNER'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelBeginner", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_AMATEUR'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelAmateur", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_CONFIDENT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelConfident", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_TOURNAMENT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_SEMI_PRO'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelSemiPro", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('req_level_ANY'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelAny", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('hand_LEFT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleHandLeft", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('hand_RIGHT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleHandRight", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('cancel_message'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleCancelMessage", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^join_tournament_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleJoinTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^leave_tournament_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLeaveTournament", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^view_profile_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleViewProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^reply_message_(.+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleReplyMessage", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleProfileAction", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('sport_TENNIS'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSportTennis", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('sport_PADEL'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSportPadel", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('start_step_two'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStartStepTwo", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('tournaments_YES'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentsYes", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('tournaments_NO'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentsNo", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_BEGINNER'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelBeginnerProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_AMATEUR'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelAmateurProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_CONFIDENT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelConfidentProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_ADVANCED'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelAdvancedProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_TOURNAMENT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelTournamentProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_SEMI_PRO'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelSemiProProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_BEGINNER_1_2'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelBeginnerNtrp", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_AMATEUR_2_3'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelAmateurNtrp", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_CONFIDENT_4'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelConfidentNtrp", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('level_TOURNAMENT_5'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevelTournamentNtrp", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('frequency_1'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFrequency1", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('frequency_2'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFrequency2", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('frequency_3'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFrequency3", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('time_MORNING'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTimeMorning", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('time_DAY'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTimeDay", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('time_EVENING'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTimeEvening", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('time_NIGHT'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTimeNight", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('continue_to_frequency'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleContinueToFrequency", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('backhand_ONE'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackhandOne", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('backhand_TWO'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleBackhandTwo", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('surface_HARD'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSurfaceHard", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('surface_CLAY'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSurfaceClay", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('surface_GRASS'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSurfaceGrass", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('surface_CARPET'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSurfaceCarpet", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('style_UNIVERSAL'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStyleUniversal", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('style_DEFENSIVE'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStyleDefensive", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('style_AGGRESSIVE'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStyleAggressive", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('style_NET_PLAYER'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStyleNetPlayer", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('style_BASIC'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStyleBasic", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('shot_SERVE'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleShotServe", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('shot_FOREHAND'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleShotForehand", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('shot_BACKHAND'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleShotBackhand", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('shot_VOLLEY'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleShotVolley", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('shot_SMASH'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleShotSmash", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_ANY'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentAny", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_MEN'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentMen", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_WOMEN'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentWomen", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_SAME_LEVEL'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentSameLevel", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_STRONGER'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentStronger", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('opponent_WEAKER'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleOpponentWeaker", null);
exports.BotService = BotService = BotService_1 = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    (0, common_1.Injectable)(),
    __param(0, (0, nestjs_telegraf_1.InjectBot)()),
    __metadata("design:paramtypes", [telegraf_1.Telegraf,
        profile_handler_1.ProfileHandler,
        matches_handler_1.MatchesHandler,
        requests_handler_1.RequestsHandler,
        tournaments_handler_1.TournamentsHandler,
        trainings_handler_1.TrainingsHandler,
        stories_handler_1.StoriesHandler,
        cases_handler_1.CasesHandler,
        ai_coach_handler_1.AiCoachHandler,
        common_handler_1.CommonHandler,
        messaging_handler_1.MessagingHandler,
        state_service_1.StateService])
], BotService);
