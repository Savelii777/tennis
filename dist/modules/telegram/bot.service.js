"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BotService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotService = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const users_service_1 = require("../users/application/services/users.service");
const user_state_interface_1 = require("./interfaces/user-state.interface");
let BotService = BotService_1 = class BotService {
    constructor(bot, usersService) {
        this.bot = bot;
        this.usersService = usersService;
        this.logger = new common_1.Logger(BotService_1.name);
        // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        this.userStates = new Map();
    }
    async onModuleInit() {
        this.logger.log('üöÄ BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.logger.log(`Bot instance: ${!!this.bot}`);
        // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.bot.use(async (ctx, next) => {
            this.logger.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${ctx.updateType} –æ—Ç ${ctx.from?.id}`);
            if (ctx.message && 'text' in ctx.message) {
                this.logger.log(`üìù –¢–µ–∫—Å—Ç: "${ctx.message.text}"`);
            }
            await next();
        });
        this.logger.log('‚úÖ Middleware –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    getMainKeyboard() {
        return telegraf_1.Markup.keyboard([
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
            ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'],
            ['üì± Stories', 'ü§ñ AI-Coach']
        ]).resize().persistent();
    }
    getUserState(userId) {
        return this.userStates.get(userId) || { step: user_state_interface_1.ProfileStep.IDLE, data: {} };
    }
    setUserState(userId, state) {
        this.userStates.set(userId, state);
    }
    clearUserState(userId) {
        this.userStates.delete(userId);
    }
    async handleStart(ctx) {
        this.logger.log(`üåü START –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.first_name})`);
        try {
            if (!ctx.from) {
                this.logger.warn('–ù–µ—Ç from field');
                return;
            }
            await ctx.reply('üéæ –ó–∞–ø—É—Å–∫–∞—é Tennis Bot...');
            let user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                this.logger.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                const userData = {
                    telegram_id: ctx.from.id.toString(),
                    username: ctx.from.username || `user_${ctx.from.id}`,
                    first_name: ctx.from.first_name,
                    last_name: ctx.from.last_name || undefined,
                    photo_url: ''
                };
                user = await this.usersService.create(userData);
                this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
                await ctx.reply(`üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`, this.getMainKeyboard());
            }
            else {
                this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                await ctx.reply(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, this.getMainKeyboard());
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleStart: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async handleDebug(ctx) {
        this.logger.log('üêõ DEBUG –∫–æ–º–∞–Ω–¥–∞');
        const userId = ctx.from?.id.toString();
        const userState = userId ? this.getUserState(userId) : null;
        const debugInfo = {
            userId: ctx.from?.id,
            chatId: ctx.chat?.id,
            updateType: ctx.updateType,
            text: ctx.message && 'text' in ctx.message ? ctx.message.text : 'no text',
            userState: userState
        };
        await ctx.reply(`üêõ **Debug Info:**\n` +
            `User ID: ${debugInfo.userId}\n` +
            `Chat ID: ${debugInfo.chatId}\n` +
            `Update: ${debugInfo.updateType}\n` +
            `Text: ${debugInfo.text}\n` +
            `State: ${JSON.stringify(debugInfo.userState)}`, { parse_mode: 'Markdown' });
    }
    async handleMenu(ctx) {
        this.logger.log('üìã MENU –∫–æ–º–∞–Ω–¥–∞');
        await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', this.getMainKeyboard());
    }
    async handleProfile(ctx) {
        this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            try {
                const stats = await this.usersService.getProfileStatistics(user.id.toString());
                const profileStatus = await this.usersService.getProfileCompletionStatus(user.id.toString());
                const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
                    `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
                    `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `ID: ${user.telegram_id}\n\n` +
                    `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                    `üéæ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}\n` +
                    `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins}\n` +
                    `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}\n` +
                    `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n` +
                    `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${stats.ratingPoints} –æ—á–∫–æ–≤\n\n` +
                    `${!profileStatus.profileComplete ? '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω' : '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω'}`;
                const keyboard = telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
                    [telegraf_1.Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
                    [telegraf_1.Markup.button.callback('üéæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π', 'match_history')],
                ]);
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                });
            }
            catch (statsError) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError instanceof Error ? statsError.message : String(statsError)}`);
                const keyboard = telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')],
                ]);
                await ctx.reply(`üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
                    `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
                    `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `ID: ${user.telegram_id}\n\n` +
                    `‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                });
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    async handleSetupProfile(ctx) {
        this.logger.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—á–∞—Ç–∞');
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        this.setUserState(userId, {
            step: user_state_interface_1.ProfileStep.AWAITING_FIRST_NAME,
            data: {}
        });
        await ctx.reply(`üëã **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
            `–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤!\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 8: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n` +
            `–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–∏–º—è**:`, { parse_mode: 'Markdown' });
    }
    async handleDetailedStats(ctx) {
        this.logger.log('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const stats = await this.usersService.getProfileStatistics(user.id.toString());
            const achievements = await this.usersService.getUserAchievements(user.id.toString());
            const statsMessage = `üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
                `üéæ **–ú–∞—Ç—á–∏:**\n` +
                `‚Ä¢ –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed}\n` +
                `‚Ä¢ –ü–æ–±–µ–¥: ${stats.matchWins}\n` +
                `‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses}\n` +
                `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n\n` +
                `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:**\n` +
                `‚Ä¢ –£—á–∞—Å—Ç–∏–µ: ${stats.tournamentsPlayed}\n` +
                `‚Ä¢ –ü–æ–±–µ–¥: ${stats.tournamentsWon}\n\n` +
                `üèÖ **–†–µ–π—Ç–∏–Ω–≥:**\n` +
                `‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.ratingPoints} –æ—á–∫–æ–≤\n` +
                `‚Ä¢ NTRP: ${user.profile?.ntrp_rating || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n` +
                `üèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** ${Object.keys(achievements).length > 0 ? Object.keys(achievements).join(', ') : '–ü–æ–∫–∞ –Ω–µ—Ç'}\n\n` +
                `üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${stats.lastActivity ? new Date(stats.lastActivity).toLocaleDateString() : '–ù–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞'}`;
            await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
    async handleMatchHistory(ctx) {
        this.logger.log('üéæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const recentMatches = await this.usersService.getRecentMatches(user.id.toString(), 5);
            if (recentMatches.length === 0) {
                await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π');
                return;
            }
            let historyMessage = `üéæ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:**\n\n`;
            recentMatches.forEach((match, index) => {
                historyMessage += `${index + 1}. ${match.result || '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}\n`;
                historyMessage += `   üìÖ ${new Date(match.scheduledTime).toLocaleDateString()}\n`;
                historyMessage += `   üë• –°–æ–ø–µ—Ä–Ω–∏–∫: ${match.opponentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
            });
            await ctx.reply(historyMessage, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π');
        }
    }
    async handlePlay(ctx) {
        this.logger.log('üéæ –ò–ì–†–ê–¢–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        await ctx.reply('üéæ **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.', { parse_mode: 'Markdown' });
    }
    async handleTournaments(ctx) {
        this.logger.log('üèÜ –¢–£–†–ù–ò–†–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        await ctx.reply('üèÜ **–¢—É—Ä–Ω–∏—Ä—ã**\n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.', { parse_mode: 'Markdown' });
    }
    async handleText(ctx) {
        if (!ctx.message || !('text' in ctx.message))
            return;
        const text = ctx.message.text;
        const userId = ctx.from?.id.toString();
        if (!userId)
            return;
        const userState = this.getUserState(userId);
        this.logger.log(`üí¨ –¢–µ–∫—Å—Ç –æ—Ç ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}, —Ç–µ–∫—Å—Ç: "${text}"`);
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if (userState.step !== user_state_interface_1.ProfileStep.IDLE) {
            await this.handleProfileSetup(ctx, text, userId, userState);
            return;
        }
        // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if (!text.startsWith('/') && !['üë§', 'üéæ', 'üèÜ', 'üìù', 'üì±', 'ü§ñ'].some(emoji => text.includes(emoji))) {
            await ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                `‚Ä¢ /start - –Ω–∞—á–∞—Ç—å\n` +
                `‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n` +
                `‚Ä¢ /debug - –æ—Ç–ª–∞–¥–∫–∞\n\n` +
                `–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`, this.getMainKeyboard());
        }
    }
    async handleProfileSetup(ctx, text, userId, userState) {
        switch (userState.step) {
            case user_state_interface_1.ProfileStep.AWAITING_FIRST_NAME:
                await this.handleFirstName(ctx, text, userId, userState);
                break;
            case user_state_interface_1.ProfileStep.AWAITING_LAST_NAME:
                await this.handleLastName(ctx, text, userId, userState);
                break;
            case user_state_interface_1.ProfileStep.AWAITING_CITY:
                await this.handleCity(ctx, text, userId, userState);
                break;
            case user_state_interface_1.ProfileStep.AWAITING_COURT:
                await this.handleCourt(ctx, text, userId, userState);
                break;
            default:
                this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);
                break;
        }
    }
    async handleFirstName(ctx, text, userId, userState) {
        userState.data.firstName = text.trim();
        userState.step = user_state_interface_1.ProfileStep.AWAITING_LAST_NAME;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –ò–º—è: **${text}**\n\n` +
            `**–®–∞–≥ 2 –∏–∑ 8**\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É **—Ñ–∞–º–∏–ª–∏—é**:`, { parse_mode: 'Markdown' });
    }
    async handleLastName(ctx, text, userId, userState) {
        userState.data.lastName = text.trim();
        userState.step = user_state_interface_1.ProfileStep.AWAITING_CITY;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –§–∞–º–∏–ª–∏—è: **${text}**\n\n` +
            `**–®–∞–≥ 3 –∏–∑ 8**\n\n` +
            `–í –∫–∞–∫–æ–º **–≥–æ—Ä–æ–¥–µ** –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ–Ω–Ω–∏—Å?`, { parse_mode: 'Markdown' });
    }
    async handleCity(ctx, text, userId, userState) {
        userState.data.city = text.trim();
        userState.step = user_state_interface_1.ProfileStep.AWAITING_COURT;
        this.setUserState(userId, userState);
        await ctx.reply(`‚úÖ –ì–æ—Ä–æ–¥: **${text}**\n\n` +
            `**–®–∞–≥ 4 –∏–∑ 8**\n\n` +
            `–ù–∞ –∫–∞–∫–æ–º **–∫–æ—Ä—Ç–µ** –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∏–≥—Ä–∞–µ—Ç–µ? (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–∞ –∏–ª–∏ "–ª—é–±–æ–π")`, { parse_mode: 'Markdown' });
    }
    async handleCourt(ctx, text, userId, userState) {
        userState.data.preferredCourt = text.trim();
        userState.step = user_state_interface_1.ProfileStep.AWAITING_HAND;
        this.setUserState(userId, userState);
        const keyboard = telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('ü§ö –ü—Ä–∞–≤—à–∞', 'hand_right')],
            [telegraf_1.Markup.button.callback('ü§ö –õ–µ–≤—à–∞', 'hand_left')],
        ]);
        await ctx.reply(`‚úÖ –ö–æ—Ä—Ç: **${text}**\n\n` +
            `**–®–∞–≥ 5 –∏–∑ 8**\n\n` +
            `–ö–∞–∫–æ–π —Ä—É–∫–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
    async handleHand(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        const hand = ctx.callbackQuery.data === 'hand_right' ? 'RIGHT' : 'LEFT';
        const handText = hand === 'RIGHT' ? '–ü—Ä–∞–≤—à–∞' : '–õ–µ–≤—à–∞';
        userState.data.dominantHand = hand;
        userState.step = user_state_interface_1.ProfileStep.AWAITING_FREQUENCY;
        this.setUserState(userId, userState);
        const keyboard = telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', 'freq_once')],
            [telegraf_1.Markup.button.callback('2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'freq_twice')],
            [telegraf_1.Markup.button.callback('3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'freq_three')],
            [telegraf_1.Markup.button.callback('4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', 'freq_four_plus')],
        ]);
        await ctx.editMessageText(`‚úÖ –ò–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞: **${handText}**\n\n` +
            `**–®–∞–≥ 6 –∏–∑ 8**\n\n` +
            `–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ–Ω–Ω–∏—Å?`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
    async handleFrequency(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        const freqMap = {
            'freq_once': { value: 'ONCE', text: '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' },
            'freq_twice': { value: 'TWICE', text: '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é' },
            'freq_three': { value: 'THREE_TIMES', text: '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é' },
            'freq_four_plus': { value: 'FOUR_PLUS', text: '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' }
        };
        const freq = freqMap[ctx.callbackQuery.data];
        userState.data.weeklyPlayFrequency = freq.value;
        userState.step = user_state_interface_1.ProfileStep.AWAITING_TOURNAMENTS;
        this.setUserState(userId, userState);
        const keyboard = telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('‚úÖ –î–∞, —É—á–∞—Å—Ç–≤—É—é', 'tournaments_yes')],
            [telegraf_1.Markup.button.callback('‚ùå –ù–µ—Ç, –Ω–µ —É—á–∞—Å—Ç–≤—É—é', 'tournaments_no')],
        ]);
        await ctx.editMessageText(`‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä—ã: **${freq.text}**\n\n` +
            `**–®–∞–≥ 7 –∏–∑ 8**\n\n` +
            `–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
    async handleTournamentsChoice(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        const playsInTournaments = ctx.callbackQuery.data === 'tournaments_yes';
        const tournamentsText = playsInTournaments ? '–î–∞, —É—á–∞—Å—Ç–≤—É—é' : '–ù–µ—Ç, –Ω–µ —É—á–∞—Å—Ç–≤—É—é';
        userState.data.playsInTournaments = playsInTournaments;
        userState.step = user_state_interface_1.ProfileStep.AWAITING_LEVEL;
        this.setUserState(userId, userState);
        const keyboard = telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('üü¢ –ù–æ–≤–∏—á–æ–∫ (1.0-2.0)', 'level_beginner')],
            [telegraf_1.Markup.button.callback('üîµ –õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)', 'level_amateur')],
            [telegraf_1.Markup.button.callback('üü° –£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)', 'level_confident')],
            [telegraf_1.Markup.button.callback('üü† –¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0-6.0)', 'level_tournament')],
            [telegraf_1.Markup.button.callback('üî¥ –ü–æ–ª—É–ø—Ä–æ—Ñ–∏ / —Ç—Ä–µ–Ω–µ—Ä', 'level_semipro')],
        ]);
        await ctx.editMessageText(`‚úÖ –¢—É—Ä–Ω–∏—Ä—ã: **${tournamentsText}**\n\n` +
            `**–®–∞–≥ 8 –∏–∑ 8**\n\n` +
            `–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
    async handleLevel(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        const userState = this.getUserState(userId);
        const levelMap = {
            'level_beginner': { value: 'BEGINNER', text: '–ù–æ–≤–∏—á–æ–∫ (1.0-2.0)' },
            'level_amateur': { value: 'AMATEUR', text: '–õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)' },
            'level_confident': { value: 'CONFIDENT', text: '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)' },
            'level_tournament': { value: 'TOURNAMENT', text: '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0-6.0)' },
            'level_semipro': { value: 'SEMI_PRO', text: '–ü–æ–ª—É–ø—Ä–æ—Ñ–∏ / —Ç—Ä–µ–Ω–µ—Ä' }
        };
        const level = levelMap[ctx.callbackQuery.data];
        userState.data.selfAssessedLevel = level.value;
        this.setUserState(userId, userState);
        await ctx.editMessageText(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: **${level.text}**\n\n` +
            `üîÑ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...`, { parse_mode: 'Markdown' });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await this.saveProfile(ctx, userId, userState);
    }
    async saveProfile(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const profileData = userState.data;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –ø—Ä–æ—Ñ–∏–ª—è
            const stepOneData = {
                firstName: profileData.firstName,
                lastName: profileData.lastName,
                city: profileData.city,
                preferredCourt: profileData.preferredCourt,
                dominantHand: profileData.dominantHand,
                preferredPlayTime: ['EVENING'],
                playsInTournaments: profileData.playsInTournaments,
                weeklyPlayFrequency: profileData.weeklyPlayFrequency,
            };
            await this.usersService.completeProfileStepOne(user.id.toString(), stepOneData);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ –ø—Ä–æ—Ñ–∏–ª—è
            const stepTwoData = {
                selfAssessedLevel: profileData.selfAssessedLevel,
                ntrpRating: this.getNtrpRating(profileData.selfAssessedLevel),
                backhandType: 'TWO_HANDED',
                preferredSurface: 'HARD',
                playingStyle: 'UNIVERSAL',
                favoriteShot: 'FOREHAND',
                opponentPreference: 'ANY' // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };
            await this.usersService.completeProfileStepTwo(user.id.toString(), stepTwoData);
            const summaryMessage = `‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n` +
                `üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n` +
                `‚Ä¢ –ò–º—è: ${profileData.firstName} ${profileData.lastName}\n` +
                `‚Ä¢ –ì–æ—Ä–æ–¥: ${profileData.city}\n` +
                `‚Ä¢ –ö–æ—Ä—Ç: ${profileData.preferredCourt || '–õ—é–±–æ–π'}\n` +
                `‚Ä¢ –ò–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞: ${profileData.dominantHand === 'RIGHT' ? '–ü—Ä–∞–≤—à–∞' : '–õ–µ–≤—à–∞'}\n` +
                `‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä—ã: ${this.getFrequencyText(profileData.weeklyPlayFrequency)}\n` +
                `‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã: ${profileData.playsInTournaments ? '–£—á–∞—Å—Ç–≤—É—é' : '–ù–µ —É—á–∞—Å—Ç–≤—É—é'}\n` +
                `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${this.getLevelText(profileData.selfAssessedLevel)}\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã! üéæ`;
            await ctx.editMessageText(summaryMessage, { parse_mode: 'Markdown' });
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', this.getMainKeyboard());
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error instanceof Error ? error.message : String(error)}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    getNtrpRating(level) {
        const ratingMap = {
            'BEGINNER': 2.0,
            'AMATEUR': 3.0,
            'CONFIDENT': 4.0,
            'TOURNAMENT': 5.0,
            'SEMI_PRO': 5.5
        };
        return ratingMap[level] || 3.0;
    }
    getFrequencyText(frequency) {
        const freqMap = {
            'ONCE': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
            'TWICE': '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            'THREE_TIMES': '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            'FOUR_PLUS': '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'
        };
        return freqMap[frequency] || frequency;
    }
    getLevelText(level) {
        const levelMap = {
            'BEGINNER': '–ù–æ–≤–∏—á–æ–∫ (1.0-2.0)',
            'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å (2.5-3.5)',
            'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (4.0-4.5)',
            'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (5.0-6.0)',
            'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–∏ / —Ç—Ä–µ–Ω–µ—Ä'
        };
        return levelMap[level] || level;
    }
};
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleStart", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('debug'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDebug", null);
__decorate([
    (0, nestjs_telegraf_1.Command)('menu'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMenu", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('setup_profile'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleSetupProfile", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('detailed_stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleDetailedStats", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('match_history'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleMatchHistory", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üéæ –ò–≥—Ä–∞—Ç—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handlePlay", null);
__decorate([
    (0, nestjs_telegraf_1.Hears)('üèÜ –¢—É—Ä–Ω–∏—Ä—ã'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournaments", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleText", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(['hand_right', 'hand_left']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleHand", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(['freq_once', 'freq_twice', 'freq_three', 'freq_four_plus']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleFrequency", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(['tournaments_yes', 'tournaments_no']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleTournamentsChoice", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(['level_beginner', 'level_amateur', 'level_confident', 'level_tournament', 'level_semipro']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotService.prototype, "handleLevel", null);
BotService = BotService_1 = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    (0, common_1.Injectable)(),
    __param(0, (0, nestjs_telegraf_1.InjectBot)()),
    __metadata("design:paramtypes", [telegraf_1.Telegraf,
        users_service_1.UsersService])
], BotService);
exports.BotService = BotService;
