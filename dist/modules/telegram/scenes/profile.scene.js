"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ProfileScene_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileScene = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const users_service_1 = require("../../users/application/services/users.service");
const sport_type_enum_1 = require("../../users/domain/enums/sport-type.enum");
let ProfileScene = ProfileScene_1 = class ProfileScene {
    constructor(usersService) {
        this.usersService = usersService;
        this.logger = new common_1.Logger(ProfileScene_1.name);
        this.logger.log('ProfileScene constructor called');
    }
    async onSceneEnter(ctx) {
        this.logger.log('=== ENTERING PROFILE SCENE ===');
        this.logger.log(`User ID: ${ctx.from?.id}`);
        this.logger.log(`Scene context available: ${!!ctx.scene}`);
        this.logger.log(`Session available: ${!!ctx.session}`);
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!ctx.session) {
                this.logger.log('Initializing session');
                ctx.session = {};
            }
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            ctx.session.profile = {
                step: 0,
                data: {}
            };
            this.logger.log('Session profile initialized');
            await ctx.reply(`üëã *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*

–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤!

*–®–∞–≥ 1 –∏–∑ 7: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`, { parse_mode: 'Markdown' });
            this.logger.log('Welcome message sent successfully');
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error in onSceneEnter: ${errorMsg}`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async onText(ctx) {
        this.logger.log('=== TEXT MESSAGE RECEIVED ===');
        if (!ctx.message || !('text' in ctx.message)) {
            this.logger.warn('No text in message');
            return;
        }
        if (!ctx.session?.profile) {
            this.logger.error('No profile session data');
            await ctx.reply('–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /start');
            return;
        }
        const text = ctx.message.text;
        const step = ctx.session.profile.step;
        this.logger.log(`Current step: ${step}, Text: "${text}"`);
        try {
            switch (step) {
                case 0: // –ò–º—è
                    await this.handleFirstName(ctx, text);
                    break;
                case 1: // –§–∞–º–∏–ª–∏—è
                    await this.handleLastName(ctx, text);
                    break;
                case 2: // –ì–æ—Ä–æ–¥
                    await this.handleCity(ctx, text);
                    break;
                case 3: // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç
                    await this.handlePreferredCourt(ctx, text);
                    break;
                default:
                    this.logger.warn(`Unknown step: ${step}`);
                    await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.');
            }
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error handling text at step ${step}: ${errorMsg}`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
    async handleFirstName(ctx, firstName) {
        this.logger.log(`Handling first name: ${firstName}`);
        if (firstName.length < 2 || firstName.length > 50) {
            await ctx.reply('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        ctx.session.profile.data.firstName = firstName;
        ctx.session.profile.step = 1;
        this.logger.log('First name saved, moving to step 1');
        await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:');
    }
    async handleLastName(ctx, lastName) {
        this.logger.log(`Handling last name: ${lastName}`);
        if (lastName.length < 2 || lastName.length > 50) {
            await ctx.reply('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        ctx.session.profile.data.lastName = lastName;
        ctx.session.profile.step = 2;
        this.logger.log('Last name saved, moving to step 2');
        await ctx.reply('–•–æ—Ä–æ—à–æ! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ–Ω–Ω–∏—Å?');
    }
    async handleCity(ctx, city) {
        this.logger.log(`Handling city: ${city}`);
        if (city.length < 2 || city.length > 100) {
            await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        ctx.session.profile.data.city = city;
        ctx.session.profile.step = 3;
        this.logger.log('City saved, moving to step 3');
        await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ª—é–±–æ–π":');
    }
    async handlePreferredCourt(ctx, court) {
        this.logger.log(`Handling preferred court: ${court}`);
        ctx.session.profile.data.preferredCourt = court === '–ª—é–±–æ–π' ? null : court;
        ctx.session.profile.step = 4;
        this.logger.log('Preferred court saved, showing dominant hand selection');
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –∏–≥—Ä–æ–≤—É—é —Ä—É–∫—É:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ü§ö –ü—Ä–∞–≤—à–∞', callback_data: 'hand_RIGHT' }],
                    [{ text: 'ü§ö –õ–µ–≤—à–∞', callback_data: 'hand_LEFT' }],
                ]
            }
        });
    }
    async onHandSelect(ctx) {
        this.logger.log('=== HAND SELECTION ===');
        if (!ctx.callbackQuery || !ctx.match) {
            this.logger.warn('No callback query or match');
            return;
        }
        if (!ctx.session?.profile) {
            this.logger.error('No profile session data in hand select');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏');
            return;
        }
        const hand = ctx.match[1];
        this.logger.log(`Selected hand: ${hand}`);
        try {
            ctx.session.profile.data.dominantHand = hand;
            ctx.session.profile.step = 5;
            await ctx.answerCbQuery();
            await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞: ${hand === 'RIGHT' ? '–ü—Ä–∞–≤—à–∞' : '–õ–µ–≤—à–∞'}`);
            await ctx.reply('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ–Ω–Ω–∏—Å –≤ –Ω–µ–¥–µ–ª—é?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1 —Ä–∞–∑', callback_data: 'frequency_ONE' }],
                        [{ text: '2-3 —Ä–∞–∑–∞', callback_data: 'frequency_TWO_THREE' }],
                        [{ text: '4+ —Ä–∞–∑', callback_data: 'frequency_FOUR_PLUS' }],
                    ]
                }
            });
            this.logger.log('Hand selection completed, showing frequency options');
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error in onHandSelect: ${errorMsg}`);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async onFrequencySelect(ctx) {
        this.logger.log('=== FREQUENCY SELECTION ===');
        if (!ctx.callbackQuery || !ctx.match) {
            this.logger.warn('No callback query or match');
            return;
        }
        if (!ctx.session?.profile) {
            this.logger.error('No profile session data in frequency select');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏');
            return;
        }
        const frequency = ctx.match[1];
        this.logger.log(`Selected frequency: ${frequency}`);
        try {
            ctx.session.profile.data.weeklyPlayFrequency = frequency;
            ctx.session.profile.step = 6;
            let frequencyText;
            switch (frequency) {
                case 'ONE':
                    frequencyText = '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é';
                    break;
                case 'TWO_THREE':
                    frequencyText = '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é';
                    break;
                case 'FOUR_PLUS':
                    frequencyText = '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é';
                    break;
                default: frequencyText = frequency;
            }
            await ctx.answerCbQuery();
            await ctx.editMessageText(`–ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä—ã: ${frequencyText}`);
            await ctx.reply('–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –î–∞, —É—á–∞—Å—Ç–≤—É—é', callback_data: 'tournaments_true' }],
                        [{ text: '‚ùå –ù–µ—Ç, –Ω–µ —É—á–∞—Å—Ç–≤—É—é', callback_data: 'tournaments_false' }],
                    ]
                }
            });
            this.logger.log('Frequency selection completed, showing tournament options');
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error in onFrequencySelect: ${errorMsg}`);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async onTournamentsSelect(ctx) {
        this.logger.log('=== TOURNAMENTS SELECTION ===');
        if (!ctx.callbackQuery || !ctx.match) {
            this.logger.warn('No callback query or match');
            return;
        }
        if (!ctx.session?.profile) {
            this.logger.error('No profile session data in tournaments select');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏');
            return;
        }
        const participates = ctx.match[1] === 'true';
        this.logger.log(`Participates in tournaments: ${participates}`);
        try {
            ctx.session.profile.data.playsInTournaments = participates;
            ctx.session.profile.step = 7;
            await ctx.answerCbQuery();
            await ctx.editMessageText(`–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${participates ? '–î–∞' : '–ù–µ—Ç'}`);
            await ctx.reply('–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üü¢ –ù–æ–≤–∏—á–æ–∫', callback_data: 'level_BEGINNER' }],
                        [{ text: 'üü° –õ—é–±–∏—Ç–µ–ª—å', callback_data: 'level_AMATEUR' }],
                        [{ text: 'üü† –£–≤–µ—Ä–µ–Ω–Ω—ã–π', callback_data: 'level_CONFIDENT' }],
                        [{ text: 'üî¥ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π', callback_data: 'level_TOURNAMENT' }],
                        [{ text: '‚ö´ –ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', callback_data: 'level_SEMI_PRO' }],
                    ]
                }
            });
            this.logger.log('Tournaments selection completed, showing level options');
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error in onTournamentsSelect: ${errorMsg}`);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async onLevelSelect(ctx) {
        this.logger.log('=== LEVEL SELECTION AND PROFILE COMPLETION ===');
        if (!ctx.callbackQuery || !ctx.match) {
            this.logger.warn('No callback query or match');
            return;
        }
        if (!ctx.session?.profile) {
            this.logger.error('No profile session data in level select');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏');
            return;
        }
        const level = ctx.match[1];
        this.logger.log(`Selected level: ${level}`);
        try {
            ctx.session.profile.data.selfAssessedLevel = level;
            let levelText;
            switch (level) {
                case 'BEGINNER':
                    levelText = '–ù–æ–≤–∏—á–æ–∫';
                    break;
                case 'AMATEUR':
                    levelText = '–õ—é–±–∏—Ç–µ–ª—å';
                    break;
                case 'CONFIDENT':
                    levelText = '–£–≤–µ—Ä–µ–Ω–Ω—ã–π';
                    break;
                case 'TOURNAMENT':
                    levelText = '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π';
                    break;
                case 'SEMI_PRO':
                    levelText = '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
                    break;
                default: levelText = level;
            }
            await ctx.answerCbQuery();
            await ctx.editMessageText(`–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: ${levelText}`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await this.saveProfile(ctx);
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error in onLevelSelect: ${errorMsg}`);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
    async saveProfile(ctx) {
        this.logger.log('=== SAVING PROFILE ===');
        try {
            if (!ctx.from) {
                this.logger.error('No user from data');
                await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return;
            }
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user) {
                this.logger.error('User not found in database');
                await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                return;
            }
            const profileData = ctx.session.profile.data;
            this.logger.log('Profile data to save:', JSON.stringify(profileData, null, 2));
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –ø—Ä–æ—Ñ–∏–ª—è
            const stepOneData = {
                firstName: profileData.firstName,
                lastName: profileData.lastName,
                city: profileData.city,
                preferredCourt: profileData.preferredCourt,
                dominantHand: profileData.dominantHand,
                preferredPlayTime: ['EVENING'],
                playsInTournaments: profileData.playsInTournaments,
                weeklyPlayFrequency: profileData.weeklyPlayFrequency,
                sportType: sport_type_enum_1.SportType.TENNIS
            };
            this.logger.log('Calling completeProfileStepOne...');
            await this.usersService.completeProfileStepOne(user.id.toString(), stepOneData);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ –ø—Ä–æ—Ñ–∏–ª—è
            const stepTwoData = {
                selfAssessedLevel: profileData.selfAssessedLevel,
                ntrpRating: 3.0,
                backhandType: 'TWO_HANDED',
                preferredSurface: 'HARD',
                playingStyle: 'UNIVERSAL',
                favoriteShot: 'FOREHAND',
                opponentPreference: 'ANY' // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };
            this.logger.log('Calling completeProfileStepTwo...');
            await this.usersService.completeProfileStepTwo(user.id.toString(), stepTwoData);
            this.logger.log('Profile saved successfully');
            await ctx.reply(`‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
–ò–º—è: ${profileData.firstName} ${profileData.lastName}
–ì–æ—Ä–æ–¥: ${profileData.city}
–ö–æ—Ä—Ç: ${profileData.preferredCourt || '–õ—é–±–æ–π'}
–ò–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞: ${profileData.dominantHand === 'RIGHT' ? '–ü—Ä–∞–≤—à–∞' : '–õ–µ–≤—à–∞'}
–ß–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä—ã: ${this.getFrequencyText(profileData.weeklyPlayFrequency)}
–¢—É—Ä–Ω–∏—Ä—ã: ${profileData.playsInTournaments ? '–£—á–∞—Å—Ç–≤—É—é' : '–ù–µ —É—á–∞—Å—Ç–≤—É—é'}
–£—Ä–æ–≤–µ–Ω—å: ${this.getLevelText(profileData.selfAssessedLevel)}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã! üéæ`, { parse_mode: 'Markdown' });
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
            if (ctx.session?.profile) {
                delete ctx.session.profile;
            }
            this.logger.log('Leaving profile scene');
            await ctx.scene.leave();
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error saving profile: ${errorMsg}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    getFrequencyText(frequency) {
        switch (frequency) {
            case 'ONE': return '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é';
            case 'TWO_THREE': return '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é';
            case 'FOUR_PLUS': return '4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é';
            default: return frequency;
        }
    }
    getLevelText(level) {
        switch (level) {
            case 'BEGINNER': return '–ù–æ–≤–∏—á–æ–∫';
            case 'AMATEUR': return '–õ—é–±–∏—Ç–µ–ª—å';
            case 'CONFIDENT': return '–£–≤–µ—Ä–µ–Ω–Ω—ã–π';
            case 'TOURNAMENT': return '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π';
            case 'SEMI_PRO': return '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
            default: return level;
        }
    }
    async onUnhandledCallback(ctx) {
        this.logger.warn('Unhandled callback query in profile scene');
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }
};
__decorate([
    (0, nestjs_telegraf_1.SceneEnter)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onSceneEnter", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onText", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/hand_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onHandSelect", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/frequency_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onFrequencySelect", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/tournaments_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onTournamentsSelect", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/level_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onLevelSelect", null);
__decorate([
    (0, nestjs_telegraf_1.On)('callback_query'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ProfileScene.prototype, "onUnhandledCallback", null);
ProfileScene = ProfileScene_1 = __decorate([
    (0, common_1.Injectable)(),
    (0, nestjs_telegraf_1.Scene)('profile-setup'),
    __metadata("design:paramtypes", [users_service_1.UsersService])
], ProfileScene);
exports.ProfileScene = ProfileScene;
