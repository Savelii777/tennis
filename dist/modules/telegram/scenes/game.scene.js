"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameScene = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const requests_service_1 = require("../../requests/application/services/requests.service");
const users_service_1 = require("../../users/application/services/users.service");
const request_type_enum_1 = require("../../requests/domain/enums/request-type.enum");
let GameScene = class GameScene {
    constructor(requestsService, usersService) {
        this.requestsService = requestsService;
        this.usersService = usersService;
    }
    async enter(ctx) {
        if (!ctx.session) {
            ctx.session = {};
        }
        ctx.session.game = {
            step: 0,
            data: {
                type: 'SINGLE_GAME',
            }
        };
        await ctx.reply('–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ò–≥—Ä–∞ –≤ —Å—É–±–±–æ—Ç—É" –∏–ª–∏ "–ò—â—É —Å–ø–∞—Ä—Ä–∏–Ω–≥")');
    }
    async onText(ctx) {
        if (!ctx.message || !('text' in ctx.message))
            return;
        if (!ctx.session || !ctx.session.game)
            return;
        const text = ctx.message.text;
        switch (ctx.session.game.step) {
            case 0: // –ù–∞–∑–≤–∞–Ω–∏–µ
                ctx.session.game.data.title = text;
                ctx.session.game.step = 1;
                await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)');
                break;
            case 1: // –û–ø–∏—Å–∞–Ω–∏–µ
                ctx.session.game.data.description = text !== '–Ω–µ—Ç' ? text : '';
                ctx.session.game.step = 2;
                await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∫–æ—Ä—Ç)');
                break;
            case 2: // –ú–µ—Å—Ç–æ
                ctx.session.game.data.locationName = text;
                ctx.session.game.step = 3;
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–û–¥–∏–Ω–æ—á–Ω—ã–π (1x1)', callback_data: 'format_ONE_ON_ONE' }],
                            [{ text: '–ü–∞—Ä–Ω—ã–π (2x2)', callback_data: 'format_DOUBLES' }],
                        ]
                    }
                });
                break;
            case 4: // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º)
                try {
                    const dateTime = new Date(text);
                    if (isNaN(dateTime.getTime())) {
                        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15 18:00)');
                        return;
                    }
                    ctx.session.game.data.dateTime = dateTime;
                    ctx.session.game.step = 5;
                    await ctx.reply('–ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ–º –∫–æ—Ä—Ç?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ü–æ—Ä–æ–≤–Ω—É (50/50)', callback_data: 'payment_DIVIDED' }],
                                [{ text: '–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–ª–∞—Ç–∏—Ç', callback_data: 'payment_LOSER_PAYS' }],
                                [{ text: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–ª–∞—Ç–∏—Ç', callback_data: 'payment_HOST_PAYS' }],
                                [{ text: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data: 'payment_FREE' }],
                            ]
                        }
                    });
                }
                catch (error) {
                    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú');
                }
                break;
        }
    }
    async onFormatSelect(ctx) {
        if (!ctx.callbackQuery || !ctx.match)
            return;
        if (!ctx.session || !ctx.session.game)
            return;
        const format = ctx.match[1];
        ctx.session.game.data.gameMode = format;
        ctx.session.game.data.maxPlayers = format === 'ONE_ON_ONE' ? 2 : 4;
        ctx.session.game.step = 4;
        await ctx.editMessageText('–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: ' + (format === 'ONE_ON_ONE' ? '–û–¥–∏–Ω–æ—á–Ω—ã–π (1x1)' : '–ü–∞—Ä–Ω—ã–π (2x2)'));
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15 18:00)');
    }
    async onPaymentSelect(ctx) {
        if (!ctx.callbackQuery || !ctx.match)
            return;
        if (!ctx.session || !ctx.session.game)
            return;
        const payment = ctx.match[1];
        ctx.session.game.data.paymentType = payment;
        ctx.session.game.step = 6;
        let paymentText;
        switch (payment) {
            case 'DIVIDED':
                paymentText = '–ü–æ—Ä–æ–≤–Ω—É (50/50)';
                break;
            case 'LOSER_PAYS':
                paymentText = '–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–ª–∞—Ç–∏—Ç';
                break;
            case 'HOST_PAYS':
                paymentText = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–ª–∞—Ç–∏—Ç';
                break;
            case 'FREE':
                paymentText = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
                break;
        }
        await ctx.editMessageText(`–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentText}`);
        await ctx.reply('–ò–≥—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–î–∞, —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è', callback_data: 'rating_RATED' }],
                    [{ text: '–ù–µ—Ç, –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞', callback_data: 'rating_UNRATED' }],
                ]
            }
        });
    }
    async onRatingSelect(ctx) {
        if (!ctx.callbackQuery || !ctx.match)
            return;
        if (!ctx.session || !ctx.session.game)
            return;
        const rating = ctx.match[1];
        ctx.session.game.data.ratingType = rating;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        try {
            if (!ctx.callbackQuery.from)
                return;
            const from = ctx.callbackQuery.from;
            const user = await this.usersService.findByTelegramId(from.id.toString());
            if (user) {
                // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∏–≥—Ä—É
                const requestData = {
                    type: request_type_enum_1.RequestType.SINGLE_GAME,
                    title: ctx.session.game.data.title,
                    description: ctx.session.game.data.description,
                    locationName: ctx.session.game.data.locationName,
                    maxPlayers: ctx.session.game.data.maxPlayers,
                    gameMode: ctx.session.game.data.gameMode,
                    dateTime: ctx.session.game.data.dateTime,
                    paymentType: ctx.session.game.data.paymentType,
                    ratingType: ctx.session.game.data.ratingType,
                    formatInfo: {},
                };
                await this.requestsService.create(user.id.toString(), requestData);
                let ratingText = rating === 'RATED' ? '–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è' : '–ù–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è';
                await ctx.reply(`
üéæ *–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–≥—Ä—É —Å–æ–∑–¥–∞–Ω–∞*
–ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.session.game.data.title}
–ú–µ—Å—Ç–æ: ${ctx.session.game.data.locationName}
–§–æ—Ä–º–∞—Ç: ${ctx.session.game.data.gameMode === 'ONE_ON_ONE' ? '1x1' : '2x2'}
–î–∞—Ç–∞: ${ctx.session.game.data.dateTime.toLocaleString('ru-RU')}
–û–ø–ª–∞—Ç–∞: ${ctx.session.game.data.paymentType}
–¢–∏–ø: ${ratingText}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
        `, { parse_mode: 'Markdown' });
            }
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            console.error(`Error creating game request: ${errorMsg}`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
        if (ctx.scene) {
            await ctx.scene.leave();
        }
    }
};
__decorate([
    (0, nestjs_telegraf_1.SceneEnter)(),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], GameScene.prototype, "enter", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], GameScene.prototype, "onText", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/format_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], GameScene.prototype, "onFormatSelect", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/payment_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], GameScene.prototype, "onPaymentSelect", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/rating_(.+)/),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], GameScene.prototype, "onRatingSelect", null);
GameScene = __decorate([
    (0, common_1.Injectable)(),
    (0, nestjs_telegraf_1.Scene)('create-game'),
    __metadata("design:paramtypes", [requests_service_1.RequestsService,
        users_service_1.UsersService])
], GameScene);
exports.GameScene = GameScene;
