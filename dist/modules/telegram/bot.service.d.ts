import { OnModuleInit } from '@nestjs/common';
import { Telegraf, Context } from 'telegraf';
import { UsersService } from '../users/application/services/users.service';
import { BallsService } from '../users/application/services/balls.service';
import { RequestsService } from '../requests/application/services/requests.service';
import { TournamentsService } from '../tournaments/application/services/tournaments.service';
import { MatchesService } from '../matches/application/services/matches.service';
import { TrainingsService } from '../trainings/application/services/trainings.service';
import { StoriesService } from '../stories/application/services/stories.service';
import { CasesService } from '../cases/application/services/cases.service';
import { CaseOpeningService } from '../cases/application/services/case-opening.service';
import { TelegramService } from './telegram.service';
import { NotificationsService } from '../notifications/application/services/notifications.service';
import { PrismaService } from '../../prisma/prisma.service';
import { AchievementsService } from '../achievements/application/services/achievements.service';
import { RatingsService } from '../ratings/ratings.service';
import { SettingsService } from '../settings/settings.service';
import { LocationsService } from '../locations/application/services/locations.service';
import { ReferralsService } from '../referrals/application/services/referrals.service';
export declare class BotService implements OnModuleInit {
    private readonly bot;
    private readonly usersService;
    private readonly ballsService;
    private readonly requestsService;
    private readonly tournamentsService;
    private readonly matchesService;
    private readonly trainingsService;
    private readonly storiesService;
    private readonly casesService;
    private readonly caseOpeningService;
    private readonly telegramService;
    private readonly notificationsService;
    private readonly prisma;
    private readonly achievementsService;
    private readonly ratingsService;
    private readonly settingsService;
    private readonly locationsService;
    private readonly referralsService;
    private readonly logger;
    private userStates;
    constructor(bot: Telegraf<Context>, usersService: UsersService, ballsService: BallsService, requestsService: RequestsService, tournamentsService: TournamentsService, matchesService: MatchesService, trainingsService: TrainingsService, storiesService: StoriesService, casesService: CasesService, caseOpeningService: CaseOpeningService, telegramService: TelegramService, notificationsService: NotificationsService, prisma: PrismaService, achievementsService: AchievementsService, ratingsService: RatingsService, settingsService: SettingsService, locationsService: LocationsService, referralsService: ReferralsService);
    onModuleInit(): Promise<void>;
    private getMainKeyboard;
    private getUserState;
    private setUserState;
    private clearUserState;
    handleStart(ctx: Context): Promise<void>;
    handleProfile(ctx: Context): Promise<void>;
    handlePlay(ctx: Context): Promise<void>;
    handleFindGame(ctx: Context): Promise<void>;
    handleCreateRequest(ctx: Context): Promise<void>;
    handleRatingCommand(ctx: Context): Promise<void>;
    handleLeaderboardCommand(ctx: Context): Promise<void>;
    handleSkillLeaderboard(ctx: Context): Promise<void>;
    handlePointsLeaderboard(ctx: Context): Promise<void>;
    private getSkillLevelText;
    handleTournaments(ctx: Context): Promise<void>;
    handleActiveTournaments(ctx: Context): Promise<void>;
    handleActiveTournamentsAction(ctx: Context): Promise<void>;
    handleCreateTournamentAction(ctx: Context): Promise<void>;
    handleJoinTournamentAction(ctx: Context): Promise<void>;
    handleMyTournamentsAction(ctx: Context): Promise<void>;
    handleBackToTournaments(ctx: Context): Promise<void>;
    handleBackToProfileAction(ctx: Context): Promise<void>;
    handleDetailedStatsAction(ctx: Context): Promise<void>;
    handleCases(ctx: Context): Promise<void>;
    handleStories(ctx: Context): Promise<void>;
    private getTimeAgo;
    handleCreateStoryAction(ctx: Context): Promise<void>;
    handleMyStoriesAction(ctx: Context): Promise<void>;
    handlePopularStoriesAction(ctx: Context): Promise<void>;
    handleFriendsStoriesAction(ctx: Context): Promise<void>;
    handleBackToStoriesAction(ctx: Context): Promise<void>;
    handleInviteFriendsAction(ctx: Context): Promise<void>;
    handleTrainings(ctx: Context): Promise<void>;
    handleRecordMatch(ctx: Context): Promise<void>;
    handleInviteButton(ctx: Context): Promise<void>;
    handleInvite(ctx: Context): Promise<void>;
    handleAICoach(ctx: Context): Promise<void>;
    handleText(ctx: Context): Promise<void>;
    handleSettings(ctx: Context): Promise<void>;
    handleSettingsLanguage(ctx: Context): Promise<void>;
    handleSetLanguage(ctx: Context): Promise<void>;
    handleBackToSettings(ctx: Context): Promise<void>;
    private handleRequestDateTime;
    private handleRequestLocation;
    private handleRequestDescription;
    private createGameRequest;
    private handleFirstName;
    private handleLastName;
    private handleTournamentName;
    private handleMatchOpponent;
    private handleCity;
    private handleCourt;
    private handleTournamentDescription;
    private completeProfileSetup;
    private createTournament;
    private handleMatchScore;
    private handleMatchDate;
    private handleCitySearch;
    private getLevelText;
    private getFrequencyText;
    private getNtrpRating;
    handleOpenCase(ctx: Context): Promise<void>;
    handleRespondToRequest(ctx: Context): Promise<void>;
    handleDebug(ctx: Context): Promise<void>;
    handleMenu(ctx: Context): Promise<void>;
    handleReferralStats(ctx: Context): Promise<void>;
    handleMyRequests(ctx: Context): Promise<void>;
    handleActiveRequests(ctx: Context): Promise<void>;
    handleBackToPlay(ctx: Context): Promise<void>;
    handleRequestLevelCallback(ctx: Context): Promise<void>;
    handleCreateTournament(ctx: Context): Promise<void>;
    handleTournamentPlayers(ctx: Context): Promise<void>;
    handleTournamentDetails(ctx: Context): Promise<void>;
    private getTournamentTypeText;
    handleJoinTournament(ctx: Context): Promise<void>;
    handleJoinSpecificTournament(ctx: Context): Promise<void>;
    handleMyTournaments(ctx: Context): Promise<void>;
    handleTournamentHistory(ctx: Context): Promise<void>;
    handleFindTraining(ctx: Context): Promise<void>;
    handleCreateTraining(ctx: Context): Promise<void>;
    handleJoinTraining(ctx: Context): Promise<void>;
    handleMyTrainings(ctx: Context): Promise<void>;
    handleBecomeTrainer(ctx: Context): Promise<void>;
    handleUploadPhotoStory(ctx: Context): Promise<void>;
    handleUploadVideoStory(ctx: Context): Promise<void>;
    handleViewStories(ctx: Context): Promise<void>;
    handleMyStories(ctx: Context): Promise<void>;
    handleOpenCaseAction(ctx: Context): Promise<void>;
    handleCaseHistoryAction(ctx: Context): Promise<void>;
    handleBackToCases(ctx: Context): Promise<void>;
    handleAITechniqueTip(ctx: Context): Promise<void>;
    handleAITrainingPlan(ctx: Context): Promise<void>;
    handleAIGameAnalysis(ctx: Context): Promise<void>;
    handleAIGoalSetting(ctx: Context): Promise<void>;
    handleSetupProfileAction(ctx: Context): Promise<void>;
    handleDetailedStats(ctx: Context): Promise<void>;
    handleUserAchievements(ctx: Context): Promise<void>;
    handleMatchHistoryAction(ctx: Context): Promise<void>;
    handleAchievements(ctx: Context): Promise<void>;
    notifyNewAchievement(userId: string, achievementCode: string): Promise<void>;
    handleMatchTypeSingles(ctx: Context): Promise<void>;
    handleMatchTypeDoubles(ctx: Context): Promise<void>;
    handlePhoto(ctx: Context): Promise<void>;
    handleVideo(ctx: Context): Promise<void>;
    handleLocations(ctx: Context): Promise<void>;
    handleFindCourts(ctx: Context): Promise<void>;
    handleCourtsMoscow(ctx: Context): Promise<void>;
    handleCourtsSpb(ctx: Context): Promise<void>;
    handleCourtsOtherCity(ctx: Context): Promise<void>;
    handleCourtsLocation(ctx: Context): Promise<void>;
    private showCourtsForCity;
    private generateCityCortsMessage;
    private createMatch;
    private createStory;
}
