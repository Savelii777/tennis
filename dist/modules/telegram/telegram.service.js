"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TelegramService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const prisma_service_1 = require("../../prisma/prisma.service");
let TelegramService = TelegramService_1 = class TelegramService {
    constructor(bot, configService, prisma) {
        this.bot = bot;
        this.configService = configService;
        this.prisma = prisma;
        this.logger = new common_1.Logger(TelegramService_1.name);
    }
    // ==================== –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –û–¢–ü–†–ê–í–ö–ò ====================
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendMessage(chatId, text, extra) {
        try {
            return await this.bot.telegram.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                ...extra,
            });
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error sending message to ${chatId}: ${errorMsg}`);
            throw error;
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
     */
    async sendPhoto(chatId, photo, extra) {
        try {
            return await this.bot.telegram.sendPhoto(chatId, photo, {
                parse_mode: 'Markdown',
                ...extra,
            });
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error sending photo to ${chatId}: ${errorMsg}`);
            throw error;
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
     */
    async sendMediaGroup(chatId, media) {
        try {
            return await this.bot.telegram.sendMediaGroup(chatId, media);
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`Error sending media group to ${chatId}: ${errorMsg}`);
            throw error;
        }
    }
    // ==================== –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    async sendNotification(userId, message, options) {
        try {
            const telegramChatId = await this.getTelegramChatId(userId);
            if (!telegramChatId) {
                this.logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const notificationsEnabled = await this.areNotificationsEnabled(userId);
            if (!notificationsEnabled) {
                this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                return;
            }
            await this.bot.telegram.sendMessage(telegramChatId, message, {
                parse_mode: options?.parseMode || 'Markdown',
                // –£–±–∏—Ä–∞–µ–º disable_web_page_preview
                reply_markup: options?.replyMarkup,
            });
            this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${errorMsg}`);
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if (errorMsg.includes('blocked') || errorMsg.includes('chat not found')) {
                await this.handleBlockedUser(userId);
            }
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
     */
    async sendNotificationWithPhoto(userId, photo, caption, options) {
        try {
            const telegramChatId = await this.getTelegramChatId(userId);
            if (!telegramChatId) {
                this.logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                return;
            }
            const notificationsEnabled = await this.areNotificationsEnabled(userId);
            if (!notificationsEnabled) {
                this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                return;
            }
            await this.bot.telegram.sendPhoto(telegramChatId, photo, {
                caption,
                parse_mode: 'Markdown',
                ...options,
            });
            this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${errorMsg}`);
        }
    }
    /**
     * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async sendBulkNotifications(userIds, message, options) {
        const delay = options?.delay || 100; // 100–º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        const batchSize = options?.batchSize || 10; // –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
        this.logger.log(`üì§ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        for (let i = 0; i < userIds.length; i += batchSize) {
            const batch = userIds.slice(i, i + batchSize);
            const promises = batch.map(async (userId, index) => {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                await new Promise(resolve => setTimeout(resolve, index * delay));
                return this.sendNotification(userId, message);
            });
            await Promise.allSettled(promises);
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + batchSize < userIds.length) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        this.logger.log(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    }
    // ==================== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ
     */
    async sendMatchNotification(userId, matchData) {
        const message = `üéæ **–ù–æ–≤—ã–π –º–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω!**\n\n` +
            `üë§ **–°–æ–ø–µ—Ä–Ω–∏–∫:** ${matchData.opponentName}\n` +
            `üìÖ **–î–∞—Ç–∞:** ${matchData.date}\n` +
            `‚è∞ **–í—Ä–µ–º—è:** ${matchData.time}\n` +
            `üìç **–ö–æ—Ä—Ç:** ${matchData.court}\n\n` +
            `–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üèÜ`;
        await this.sendNotification(userId, message);
    }
    /**
     * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Ç—á–µ
     */
    async sendMatchReminder(userId, matchData) {
        const message = `‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Ç—á–µ!**\n\n` +
            `üéæ –í–∞—à –º–∞—Ç—á —Å **${matchData.opponentName}** –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ **${matchData.minutesUntil} –º–∏–Ω—É—Ç**\n\n` +
            `üìç **–ö–æ—Ä—Ç:** ${matchData.court}\n` +
            `‚è∞ **–í—Ä–µ–º—è:** ${matchData.time}\n\n` +
            `–ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ! üèÉ‚Äç‚ôÇÔ∏è`;
        await this.sendNotification(userId, message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
     */
    async sendInviteNotification(userId, inviteData) {
        const message = `ü§ù **–ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!**\n\n` +
            `üë§ **–û—Ç:** ${inviteData.senderName}\n` +
            `üéæ **–¢–∏–ø –∏–≥—Ä—ã:** ${inviteData.gameType}\n` +
            `üìÖ **–î–∞—Ç–∞:** ${inviteData.date}\n` +
            `${inviteData.court ? `üìç **–ö–æ—Ä—Ç:** ${inviteData.court}\n` : ''}` +
            `\n–û—Ç–≤–µ—Ç—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üì±`;
        await this.sendNotification(userId, message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
     */
    async sendTournamentResultNotification(userId, resultData) {
        const medal = resultData.place === 1 ? 'ü•á' :
            resultData.place === 2 ? 'ü•à' :
                resultData.place === 3 ? 'ü•â' : 'üèÖ';
        const message = `üèÜ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞!**\n\n` +
            `${medal} **–ú–µ—Å—Ç–æ:** ${resultData.place} –∏–∑ ${resultData.participantsCount}\n` +
            `üéæ **–¢—É—Ä–Ω–∏—Ä:** ${resultData.tournamentName}\n` +
            `${resultData.prize ? `üí∞ **–ü—Ä–∏–∑:** ${resultData.prize}\n` : ''}` +
            `\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ`;
        await this.sendNotification(userId, message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–∞—Ö –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
     */
    async sendReferralBonusNotification(userId, bonusData) {
        const message = `üí∞ **–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!**\n\n` +
            `üéæ –í—ã –ø–æ–ª—É—á–∏–ª–∏ **${bonusData.amount} –º—è—á–µ–π** –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ **${bonusData.referredUserName}**!\n\n` +
            `üí≥ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** ${bonusData.totalBalance} –º—è—á–µ–π\n\n` +
            `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π! üîó`;
        await this.sendNotification(userId, message);
    }
    /**
     * –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async sendSystemNotification(userId, title, message, isImportant = false) {
        const icon = isImportant ? 'üö®' : '‚ÑπÔ∏è';
        const formattedMessage = `${icon} **${title}**\n\n` +
            `${message}`;
        await this.sendNotification(userId, formattedMessage);
    }
    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getTelegramChatId(userId) {
        try {
            const user = await this.prisma.user.findUnique({
                where: { id: Number(userId) },
                select: {
                    telegramChatId: true,
                    telegramId: true,
                },
            });
            if (!user) {
                this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                return null;
            }
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: telegramChatId –∏–∑ user, –∑–∞—Ç–µ–º telegramId
            if (user.telegramChatId) {
                return Number(user.telegramChatId);
            }
            if (user.telegramId) {
                return Number(user.telegramId);
            }
            this.logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return null;
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`);
            return null;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async areNotificationsEnabled(userId) {
        try {
            const userSettings = await this.prisma.userSettings.findUnique({
                where: { userId: Number(userId) },
                select: { notificationsEnabled: true }
            });
            return userSettings?.notificationsEnabled ?? true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`);
            return true; // –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleBlockedUser(userId) {
        try {
            // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.prisma.userSettings.upsert({
                where: { userId: Number(userId) },
                update: { notificationsEnabled: false },
                create: {
                    userId: Number(userId),
                    notificationsEnabled: false
                }
            });
            this.logger.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.`);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`);
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateUserChatId(userId, chatId) {
        try {
            await this.prisma.user.update({
                where: { id: Number(userId) },
                data: { telegramChatId: BigInt(chatId) }
            });
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ userSettings –µ—Å–ª–∏ –µ—Å—Ç—å
            await this.prisma.userSettings.upsert({
                where: { userId: Number(userId) },
                update: {
                    telegramChatId: chatId.toString(),
                    notificationsEnabled: true // –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_id
                },
                create: {
                    userId: Number(userId),
                    telegramChatId: chatId.toString(),
                    notificationsEnabled: true
                }
            });
            this.logger.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${chatId}`);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`);
        }
    }
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async toggleNotifications(userId, enabled) {
        try {
            await this.prisma.userSettings.upsert({
                where: { userId: Number(userId) },
                update: { notificationsEnabled: enabled },
                create: {
                    userId: Number(userId),
                    notificationsEnabled: enabled
                }
            });
            this.logger.log(`${enabled ? 'üîî' : 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`);
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async getNotificationStats() {
        try {
            const totalUsers = await this.prisma.user.count();
            const enabledUsers = await this.prisma.userSettings.count({
                where: { notificationsEnabled: true }
            });
            const disabledUsers = await this.prisma.userSettings.count({
                where: { notificationsEnabled: false }
            });
            return {
                totalUsers,
                enabledUsers,
                disabledUsers: disabledUsers
            };
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error}`);
            return { totalUsers: 0, enabledUsers: 0, disabledUsers: 0 };
        }
    }
};
TelegramService = TelegramService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, nestjs_telegraf_1.InjectBot)()),
    __metadata("design:paramtypes", [telegraf_1.Telegraf,
        config_1.ConfigService,
        prisma_service_1.PrismaService])
], TelegramService);
exports.TelegramService = TelegramService;
