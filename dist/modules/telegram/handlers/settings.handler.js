"use strict";
// // src/modules/telegram/handlers/settings.handler.ts
// import { Injectable } from '@nestjs/common';
// import { Action } from 'nestjs-telegraf';
// import { Context, Markup } from 'telegraf';
// import { BaseBotHandler } from './base-bot.handler';
// import { SettingsService } from '../../settings/settings.service';
// import { ProfileStep } from '../interfaces/profile-state.enum';
// @Injectable()
// export class SettingsHandler extends BaseBotHandler {
//   constructor(
//     usersService: any,
//     ballsService: any,
//     private readonly settingsService: SettingsService,
//   ) {
//     super(usersService, ballsService);
//   }
//   async handleSettings(ctx: Context) {
//     this.logger.log('‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) {
//         await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
//         return;
//       }
//       const keyboard = Markup.inlineKeyboard([
//         [Markup.button.callback('üßë –ü—Ä–æ—Ñ–∏–ª—å', 'settings_profile')],
//         [Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications')],
//         [Markup.button.callback('üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'settings_preferences')],
//         [Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')],
//         [Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')],
//       ]);
//       await ctx.reply(
//         `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
//         `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n\n` +
//         `üßë **–ü—Ä–æ—Ñ–∏–ª—å** - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n` +
//         `üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ push-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n` +
//         `üéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è** - –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n` +
//         `üåê **–Ø–∑—ã–∫** - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n` +
//         `üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å** - –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è\n\n` +
//         `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`,
//         {
//           parse_mode: 'Markdown',
//           reply_markup: keyboard.reply_markup
//         }
//       );
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettings: ${error}`);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
//     }
//   }
//   // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–°–¢–û–Ø–ù–ò–ô ====================
//   async handleTextState(ctx: Context, userState: any): Promise<void> {
//     if (!ctx.message || !('text' in ctx.message)) return;
//     if (!ctx.from) return;
//     const text = ctx.message.text;
//     const userId = ctx.from.id.toString();
//     switch (userState.step) {
//       case ProfileStep.AWAITING_NEW_NAME:
//         await this.processNewName(ctx, text, userId);
//         break;
//       case ProfileStep.AWAITING_NEW_CITY:
//         await this.processNewCity(ctx, text, userId);
//         break;
//       case ProfileStep.AWAITING_NEW_BIO:
//         await this.processNewBio(ctx, text, userId);
//         break;
//       default:
//         this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState.step}`);
//         await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//         this.clearUserState(userId);
//         break;
//     }
//   }
//   private async processNewName(ctx: Context, text: string, userId: string) {
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ update –∏–∑ UsersService
//       await this.usersService.update(user.id.toString(), {
//         first_name: text.trim()
//       });
//       await ctx.reply(
//         `‚úÖ **–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n` +
//         `–ù–æ–≤–æ–µ –∏–º—è: **${text.trim()}**`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//       this.clearUserState(userId);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: ${error}`);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏');
//       this.clearUserState(userId);
//     }
//   }
//   private async processNewCity(ctx: Context, text: string, userId: string) {
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SettingsService
//       await this.settingsService.updateSettings(user.id, {
//         cityId: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
//         language: 'ru' // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫
//       });
//       await ctx.reply(
//         `‚úÖ **–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n` +
//         `–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥: **${text.trim()}**`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//       this.clearUserState(userId);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞: ${error}`);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞');
//       this.clearUserState(userId);
//     }
//   }
//   private async processNewBio(ctx: Context, text: string, userId: string) {
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å bio –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       await ctx.reply(
//         `‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n` +
//         `–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: **${text.trim()}**`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//       this.clearUserState(userId);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: ${error}`);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è');
//       this.clearUserState(userId);
//     }
//   }
//   // ==================== ACTION –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
//   @Action('settings_profile')
//   async handleSettingsProfile(ctx: Context) {
//     this.logger.log('üéØ Action: settings_profile');
//     await ctx.answerCbQuery();
//     await ctx.editMessageText(
//       `üßë **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
//       `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
//       { 
//         parse_mode: 'Markdown',
//         reply_markup: Markup.inlineKeyboard([
//           [Markup.button.callback('üìù –ò–º—è', 'change_name')],
//           [Markup.button.callback('üèôÔ∏è –ì–æ—Ä–æ–¥', 'change_city')],
//           [Markup.button.callback('üìñ –û —Å–µ–±–µ', 'change_bio')],
//           [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//         ]).reply_markup
//       }
//     );
//   }
//   @Action('settings_notifications')
//   async handleSettingsNotifications(ctx: Context) {
//     this.logger.log('üéØ Action: settings_notifications');
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
//       const settings = await this.settingsService.getSettings(user.id);
//       const telegramStatus = settings?.notifyTelegram ? '‚úÖ' : '‚ùå';
//       const emailStatus = settings?.notifyEmail ? '‚úÖ' : '‚ùå';
//       const allNotifications = settings?.notificationsEnabled ? '‚úÖ' : '‚ùå';
//       await ctx.editMessageText(
//         `üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n` +
//         `${allNotifications} –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
//         `${telegramStatus} Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
//         `${emailStatus} Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
//         `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'toggle_all_notifications')],
//             [Markup.button.callback('üì± Telegram', 'toggle_telegram_notifications')],
//             [Markup.button.callback('üìß Email', 'toggle_email_notifications')],
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error}`);
//       await ctx.editMessageText(
//         `üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n` +
//         `–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//     }
//   }
//   @Action('settings_preferences')
//   async handleSettingsPreferences(ctx: Context) {
//     this.logger.log('üéØ Action: settings_preferences');
//     await ctx.answerCbQuery();
//     await ctx.editMessageText(
//       `üéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è**\n\n` +
//       `–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n` +
//       `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n` +
//       `‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n` +
//       `‚Ä¢ –í—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã\n` +
//       `‚Ä¢ –¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ—Ä—Ç–∞\n` +
//       `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ`,
//       { 
//         parse_mode: 'Markdown',
//         reply_markup: Markup.inlineKeyboard([
//           [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//         ]).reply_markup
//       }
//     );
//   }
//   @Action('settings_language')
//   async handleSettingsLanguage(ctx: Context) {
//     this.logger.log('üéØ Action: settings_language');
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       const settings = await this.settingsService.getSettings(user.id);
//       const currentLang = settings?.language || 'ru';
//       await ctx.editMessageText(
//         `üåê **–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞**\n\n` +
//         `–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: **${currentLang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}**\n\n` +
//         `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback(currentLang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚úÖ' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'set_language_ru')],
//             [Markup.button.callback(currentLang === 'en' ? 'üá¨üáß English ‚úÖ' : 'üá¨üáß English', 'set_language_en')],
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error}`);
//       await ctx.editMessageText(
//         `üåê **–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞**\n\n` +
//         `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:`,
//         { 
//           parse_mode: 'Markdown',
//           reply_markup: Markup.inlineKeyboard([
//             [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚úÖ', 'set_language_ru')],
//             [Markup.button.callback('üá¨üáß English', 'set_language_en')],
//             [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//           ]).reply_markup
//         }
//       );
//     }
//   }
//   @Action('settings_privacy')
//   async handleSettingsPrivacy(ctx: Context) {
//     this.logger.log('üéØ Action: settings_privacy');
//     await ctx.answerCbQuery();
//     await ctx.editMessageText(
//       `üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å**\n\n` +
//       `üëÅÔ∏è **–ü—Ä–æ—Ñ–∏–ª—å:** –ü—É–±–ª–∏—á–Ω—ã–π\n` +
//       `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è\n` +
//       `üéÆ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** –†–∞–∑—Ä–µ—à–µ–Ω—ã\n\n` +
//       `–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`,
//       { 
//         parse_mode: 'Markdown',
//         reply_markup: Markup.inlineKeyboard([
//           [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_settings')]
//         ]).reply_markup
//       }
//     );
//   }
//   // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô ====================
//   @Action('toggle_all_notifications')
//   async handleToggleAllNotifications(ctx: Context) {
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       const settings = await this.settingsService.getSettings(user.id);
//       const newValue = !settings?.notificationsEnabled;
//       await this.settingsService.updateSettings(user.id, {
//         notificationsEnabled: newValue
//       });
//       await ctx.answerCbQuery(`–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newValue ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
//       await this.handleSettingsNotifications(ctx);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error}`);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
//     }
//   }
//   @Action('toggle_telegram_notifications')
//   async handleToggleTelegramNotifications(ctx: Context) {
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       const settings = await this.settingsService.getSettings(user.id);
//       const newValue = !settings?.notifyTelegram;
//       await this.settingsService.updateSettings(user.id, {
//         notifyTelegram: newValue
//       });
//       await ctx.answerCbQuery(`Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newValue ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
//       await this.handleSettingsNotifications(ctx);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error}`);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
//     }
//   }
//   @Action('toggle_email_notifications')
//   async handleToggleEmailNotifications(ctx: Context) {
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       const settings = await this.settingsService.getSettings(user.id);
//       const newValue = !settings?.notifyEmail;
//       await this.settingsService.updateSettings(user.id, {
//         notifyEmail: newValue
//       });
//       await ctx.answerCbQuery(`Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newValue ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
//       await this.handleSettingsNotifications(ctx);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error}`);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
//     }
//   }
//   @Action('set_language_ru')
//   async handleSetLanguageRu(ctx: Context) {
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       await this.settingsService.updateSettings(user.id, {
//         language: 'ru'
//       });
//       await ctx.answerCbQuery('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
//       await this.handleSettingsLanguage(ctx);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: ${error}`);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞');
//     }
//   }
//   @Action('set_language_en')
//   async handleSetLanguageEn(ctx: Context) {
//     await ctx.answerCbQuery();
//     try {
//       const user = await this.getUser(ctx);
//       if (!user) return;
//       await this.settingsService.updateSettings(user.id, {
//         language: 'en'
//       });
//       await ctx.answerCbQuery('Language changed to English');
//       await this.handleSettingsLanguage(ctx);
//     } catch (error) {
//       this.logger.error(`–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: ${error}`);
//       await ctx.answerCbQuery('‚ùå Error changing language');
//     }
//   }
//   @Action('change_name')
//   async handleChangeName(ctx: Context) {
//     await ctx.answerCbQuery();
//     if (!ctx.from) return;
//     const userId = ctx.from.id.toString();
//     this.setUserState(userId, {
//       step: ProfileStep.AWAITING_NEW_NAME,
//       data: {}
//     });
//     await ctx.editMessageText(
//       `üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n` +
//       `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:`,
//       { parse_mode: 'Markdown' }
//     );
//   }
//   @Action('change_city')
//   async handleChangeCity(ctx: Context) {
//     await ctx.answerCbQuery();
//     if (!ctx.from) return;
//     const userId = ctx.from.id.toString();
//     this.setUserState(userId, {
//       step: ProfileStep.AWAITING_NEW_CITY,
//       data: {}
//     });
//     await ctx.editMessageText(
//       `üèôÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞**\n\n` +
//       `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`,
//       { parse_mode: 'Markdown' }
//     );
//   }
//   @Action('change_bio')
//   async handleChangeBio(ctx: Context) {
//     await ctx.answerCbQuery();
//     if (!ctx.from) return;
//     const userId = ctx.from.id.toString();
//     this.setUserState(userId, {
//       step: ProfileStep.AWAITING_NEW_BIO,
//       data: {}
//     });
//     await ctx.editMessageText(
//       `üìñ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n` +
//       `–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–æ–ø—ã—Ç –∏–≥—Ä—ã, –ª—é–±–∏–º—ã–µ –∫–æ—Ä—Ç—ã, —Ü–µ–ª–∏):`,
//       { parse_mode: 'Markdown' }
//     );
//   }
//   @Action('back_to_settings')
//   async handleBackToSettings(ctx: Context) {
//     this.logger.log('üéØ Action: back_to_settings');
//     await ctx.answerCbQuery();
//     await this.handleSettings(ctx);
//   }
// }
