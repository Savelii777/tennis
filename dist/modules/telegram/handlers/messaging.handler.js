"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MessagingHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingHandler = void 0;
const common_1 = require("@nestjs/common");
const state_service_1 = require("../services/state.service");
const users_service_1 = require("../../users/application/services/users.service");
const prisma_service_1 = require("../../../prisma/prisma.service");
const profile_state_enum_1 = require("../interfaces/profile-state.enum");
let MessagingHandler = MessagingHandler_1 = class MessagingHandler {
    constructor(stateService, usersService, prisma) {
        this.stateService = stateService;
        this.usersService = usersService;
        this.prisma = prisma;
        this.logger = new common_1.Logger(MessagingHandler_1.name);
    }
    register(bot) {
        bot.action('cancel_message', this.handleCancelMessage.bind(this));
        bot.action(/^reply_message_(\d+)$/, this.handleReplyMessage.bind(this));
        bot.action(/^view_profile_(\d+)$/, this.handleViewProfile.bind(this));
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    async handleMessageRequest(ctx, senderId, targetUserId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const targetUser = await this.usersService.findById(targetUserId);
            if (!targetUser) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const userSettings = await this.prisma.userSettings.findFirst({
                where: { userId: parseInt(targetUserId) }
            });
            if (userSettings && !userSettings.allowDirectMessages) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            const userId = ctx.from?.id.toString();
            if (!userId)
                return;
            const userState = this.stateService.getUserState(userId);
            const updatedState = {
                ...userState,
                step: profile_state_enum_1.ProfileStep.AWAITING_MESSAGE_TEXT,
                data: {
                    ...userState.data,
                    targetUserId: targetUserId,
                    targetUserName: `${targetUser.first_name} ${targetUser.last_name || ''}`.trim()
                }
            };
            this.stateService.setUserState(userId, updatedState);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await ctx.reply(`üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **${targetUser.first_name} ${targetUser.last_name || ''}**\n\n` +
                `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é:\n\n` +
                `_–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å –∑–∞–≤—Ç—Ä–∞?"_`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_message' }
                        ]]
                }
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMessageRequest: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
     */
    async handleMessageSend(ctx, messageText, userId) {
        try {
            const userState = this.stateService.getUserState(userId);
            if (userState.step === profile_state_enum_1.ProfileStep.AWAITING_MESSAGE_TEXT && userState.data?.targetUserId) {
                const targetUserId = userState.data.targetUserId;
                const targetUserName = userState.data.targetUserName;
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                const sender = await this.usersService.findByTelegramId(userId);
                if (!sender) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return true;
                }
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                const recipient = await this.usersService.findById(targetUserId);
                if (!recipient || !recipient.telegramChatId) {
                    await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
                    return true;
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                const messageToRecipient = `üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞:**\n\n` +
                    `üë§ **–û—Ç:** ${sender.first_name} ${sender.last_name || ''}\n` +
                    `üìç **–ì–æ—Ä–æ–¥:** ${sender.profile?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `üéæ **–†–µ–π—Ç–∏–Ω–≥:** ${sender.profile?.ntrp_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                    `**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n_"${messageText}"_\n\n` +
                    `üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ.`;
                try {
                    await ctx.telegram.sendMessage(recipient.telegramChatId.toString(), messageToRecipient, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [[
                                    { text: 'üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: `view_profile_${sender.id}` },
                                    { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_message_${sender.id}` }
                                ]]
                        }
                    });
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                    await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É **${targetUserName}**!\n\n` +
                        `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: _"${messageText.length > 50 ? messageText.substring(0, 50) + '...' : messageText}"_\n\n` +
                        `–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.`, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [[
                                    { text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'main_menu' }
                                ]]
                        }
                    });
                    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    this.logger.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${sender.id} –∫ ${targetUserId}`);
                }
                catch (sendError) {
                    this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${sendError}`);
                    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.');
                }
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.stateService.setUserState(userId, {
                    ...userState,
                    step: profile_state_enum_1.ProfileStep.IDLE,
                    data: {}
                });
                return true;
            }
            return false;
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMessageSend: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
            return true;
        }
    }
    async handleCancelMessage(ctx) {
        try {
            await ctx.answerCbQuery();
            const userId = ctx.from?.id.toString();
            if (!userId)
                return;
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const userState = this.stateService.getUserState(userId);
            this.stateService.setUserState(userId, {
                ...userState,
                step: profile_state_enum_1.ProfileStep.IDLE,
                data: {}
            });
            await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', {
                reply_markup: {
                    inline_keyboard: [[
                            { text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'main_menu' }
                        ]]
                }
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleCancelMessage: ${error}`);
        }
    }
    async handleReplyMessage(ctx) {
        try {
            await ctx.answerCbQuery();
            const data = ctx.callbackQuery?.data;
            const match = data?.match(/^reply_message_(\d+)$/);
            if (!match)
                return;
            const targetUserId = match[1];
            const userId = ctx.from?.id.toString();
            if (!userId)
                return;
            // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.handleMessageRequest(ctx, userId, targetUserId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleReplyMessage: ${error}`);
        }
    }
    async handleViewProfile(ctx) {
        try {
            await ctx.answerCbQuery();
            const data = ctx.callbackQuery?.data;
            const match = data?.match(/^view_profile_(\d+)$/);
            if (!match)
                return;
            const targetUserId = match[1];
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.usersService.findById(targetUserId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            const profileMessage = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞**\n\n` +
                `**–ò–º—è:** ${user.first_name} ${user.last_name || ''}\n` +
                `**–ì–æ—Ä–æ–¥:** ${user.profile?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `**–†–µ–π—Ç–∏–Ω–≥:** ${user.profile?.ntrp_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `**–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ:** ${user.profile?.matches_played || 0}\n` +
                `**–ü–æ–±–µ–¥:** ${user.profile?.match_wins || 0}`;
            await ctx.reply(profileMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                            { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `reply_message_${user.id}` },
                            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
                        ]]
                }
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleViewProfile: ${error}`);
        }
    }
};
exports.MessagingHandler = MessagingHandler;
exports.MessagingHandler = MessagingHandler = MessagingHandler_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [state_service_1.StateService,
        users_service_1.UsersService,
        prisma_service_1.PrismaService])
], MessagingHandler);
