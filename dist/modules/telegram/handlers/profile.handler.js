"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ProfileHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileHandler = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const state_service_1 = require("../services/state.service");
const keyboard_service_1 = require("../services/keyboard.service");
const profile_state_enum_1 = require("../interfaces/profile-state.enum");
const users_service_1 = require("../../users/application/services/users.service");
const ratings_service_1 = require("../../ratings/ratings.service");
const balls_service_1 = require("../../users/application/services/balls.service");
const prisma_service_1 = require("../../../prisma/prisma.service");
let ProfileHandler = ProfileHandler_1 = class ProfileHandler {
    constructor(stateService, keyboardService, usersService, ratingsService, ballsService, prisma) {
        this.stateService = stateService;
        this.keyboardService = keyboardService;
        this.usersService = usersService;
        this.ratingsService = ratingsService;
        this.ballsService = ballsService;
        this.prisma = prisma;
        this.logger = new common_1.Logger(ProfileHandler_1.name);
    }
    // –ú–µ—Ç–æ–¥ register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register(bot) {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot.command('profile', this.handleProfileCommand.bind(this));
        bot.action('profile', this.handleProfile.bind(this));
        bot.action('detailed_stats', this.handleDetailedStats.bind(this));
        bot.action('user_achievements', this.handleUserAchievements.bind(this));
        bot.action('setup_profile', this.handleSetupProfileAction.bind(this));
        bot.action('match_history', this.handleMatchHistory.bind(this));
        bot.action('user_goals', this.handleUserGoals.bind(this));
        bot.action('back_to_profile', this.handleBackToProfile.bind(this));
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É–∫–∏
        bot.action('hand_LEFT', async (ctx) => this.handleHandSelection('LEFT', ctx));
        bot.action('hand_RIGHT', async (ctx) => this.handleHandSelection('RIGHT', ctx));
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä
        bot.action('frequency_1', async (ctx) => this.handleFrequencySelection('1_PER_WEEK', ctx));
        bot.action('frequency_2', async (ctx) => this.handleFrequencySelection('2_3_PER_WEEK', ctx));
        bot.action('frequency_3', async (ctx) => this.handleFrequencySelection('4_PLUS_PER_WEEK', ctx));
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        bot.action('tournaments_YES', async (ctx) => this.handleTournamentsSelection(true, ctx));
        bot.action('tournaments_NO', async (ctx) => this.handleTournamentsSelection(false, ctx));
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã
        bot.action('level_BEGINNER', async (ctx) => this.handleLevelSelection('BEGINNER', ctx));
        bot.action('level_AMATEUR', async (ctx) => this.handleLevelSelection('AMATEUR', ctx));
        bot.action('level_CONFIDENT', async (ctx) => this.handleLevelSelection('CONFIDENT', ctx));
        bot.action('level_ADVANCED', async (ctx) => this.handleLevelSelection('ADVANCED', ctx));
        bot.action('level_TOURNAMENT', async (ctx) => this.handleLevelSelection('TOURNAMENT', ctx));
    }
    async handleProfile(ctx) {
        this.logger.log('üë§ –ü–†–û–§–ò–õ–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            const userWithProfile = await this.prisma.user.findUnique({
                where: { id: parseInt(user.id.toString()) },
                include: { profile: true }
            });
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let ratingInfo = '';
            try {
                const rating = await this.ratingsService.getRatingForUser(user.id);
                if (rating) {
                    ratingInfo = `üéØ **NTRP —Ä–µ–π—Ç–∏–Ω–≥:** ${rating.skillRating?.toFixed(1) || '?'}\n` +
                        `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n` +
                        `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n`;
                }
                else {
                    ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!\n`;
                }
            }
            catch (error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: ${error}`);
                ratingInfo = `üèÜ **–†–µ–π—Ç–∏–Ω–≥:** –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n`;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            try {
                const stats = await this.usersService.getProfileStatistics(user.id.toString());
                const profileCompletion = await this.usersService.getProfileCompletionStatus(user.id.toString());
                const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
                const completionPercentage = Math.round(((profileCompletion.stepOneCompleted ? 50 : 0) +
                    (profileCompletion.stepTwoCompleted ? 50 : 0)));
                `üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: ${completionPercentage}%`;
                const message = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å ${user.first_name} ${user.last_name || ''}**\n\n` +
                    `${ratingInfo}\n` +
                    `üèôÔ∏è **–ì–æ—Ä–æ–¥:** ${userWithProfile?.profile?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `üëã **–†—É–∫–∞:** ${this.getDominantHandText(userWithProfile?.profile?.dominantHand)}\n` +
                    `üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${this.getLevelText(userWithProfile?.profile?.selfAssessedLevel || '')}\n\n` +
                    `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                    `üìà –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${stats.matchesPlayed || 0}\n` +
                    `ü•á –ü–æ–±–µ–¥: ${stats.matchWins || 0}\n` +
                    `üéæ –ú—è—á–µ–π: ${ballsBalance}\n` +
                    `üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: ${completionPercentage}%`;
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: this.keyboardService.getProfileKeyboard().reply_markup
                });
            }
            catch (error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
            }
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleProfile: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    async handleDetailedStats(ctx) {
        try {
            await ctx.answerCbQuery();
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const [stats, rating] = await Promise.all([
                this.usersService.getProfileStatistics(user.id.toString()),
                this.ratingsService.getRatingForUser(user.id)
            ]);
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getUserMatches –≤ UsersService
            const matches = await this.usersService.getUserMatches(user.id.toString());
            let message = `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n`;
            // –†–µ–π—Ç–∏–Ω–≥–∏
            if (rating) {
                message += `üèÜ **–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n`;
                message += `üéØ **NTRP —É—Ä–æ–≤–µ–Ω—å:** ${rating.skillRating?.toFixed(1) || 'N/A'}\n`;
                message += `‚ö° **–û—á–∫–∏ —Å–∏–ª—ã:** ${rating.skillPoints || 0}\n`;
                message += `‚≠ê **–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** ${rating.pointsRating || 0}\n\n`;
            }
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
            message += `üéæ **–ú–∞—Ç—á–∏:**\n`;
            message += `‚úÖ –í—Å–µ–≥–æ: ${stats.matchesPlayed || 0}\n`;
            message += `üèÜ –ü–æ–±–µ–¥: ${stats.matchWins || 0}\n`;
            message += `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.matchLosses || 0}\n`;
            message += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate || 0}%\n\n`;
            // –¢—É—Ä–Ω–∏—Ä—ã
            message += `üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:**\n`;
            message += `üéØ –£—á–∞—Å—Ç–∏–µ: ${stats.tournamentsPlayed || 0}\n`;
            message += `ü•á –ü–æ–±–µ–¥—ã: ${stats.tournamentsWon || 0}\n\n`;
            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
            message += `üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:**\n`;
            if (matches && matches.length > 0) {
                matches.slice(0, 3).forEach((match, index) => {
                    const date = new Date(match.date || match.matchDate).toLocaleDateString('ru-RU');
                    const opponent = match.opponent?.name || match.opponentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    const result = match.result === 'WIN' ? '‚úÖ' : '‚ùå';
                    message += `${index + 1}. ${date} vs ${opponent} ${result} ${match.score || ''}\n`;
                });
            }
            else {
                message += `–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π\n`;
            }
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
    async handleUserAchievements(ctx) {
        try {
            await ctx.answerCbQuery();
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            const achievements = [];
            let message = `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n`;
            if (achievements && achievements.length > 0) {
                achievements.forEach((achievement, index) => {
                    message += `${index + 1}. ${achievement.title} - ${achievement.description}\n`;
                });
            }
            else {
                message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –º–∞—Ç—á–∏ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!\n\n`;
                message += `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n`;
                message += `‚Ä¢ –ù–æ–≤–∏—á–æ–∫ - –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á\n`;
                message += `‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - –í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –º–∞—Ç—á–µ–π\n`;
                message += `‚Ä¢ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫ - –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n`;
            }
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        }
    }
    async handleSetupProfileAction(ctx) {
        try {
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
            this.stateService.setUserState(userId, {
                step: profile_state_enum_1.ProfileStep.AWAITING_CITY,
                data: {}
            });
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
            await ctx.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?');
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async handleTournamentsSelection(participates, ctx) {
        try {
            await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const userState = this.stateService.getUserState(userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (userState.step !== profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENTS) {
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            userState.data.playsInTournaments = participates;
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            userState.step = profile_state_enum_1.ProfileStep.AWAITING_LEVEL;
            this.stateService.setUserState(userId, userState);
            this.logger.log(`–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${participates} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã
            await ctx.reply('–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?', telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('–ù–∞—á–∏–Ω–∞—é—â–∏–π', 'level_BEGINNER')],
                [telegraf_1.Markup.button.callback('–õ—é–±–∏—Ç–µ–ª—å', 'level_AMATEUR')],
                [telegraf_1.Markup.button.callback('–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_CONFIDENT')],
                [telegraf_1.Markup.button.callback('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 'level_ADVANCED')],
                [telegraf_1.Markup.button.callback('–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_TOURNAMENT')]
            ]));
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
    }
    async handleLevelSelection(level, ctx) {
        try {
            await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const userState = this.stateService.getUserState(userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (userState.step !== profile_state_enum_1.ProfileStep.AWAITING_LEVEL) {
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
            userState.data.selfAssessedLevel = level;
            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            userState.step = profile_state_enum_1.ProfileStep.COMPLETE;
            this.stateService.setUserState(userId, userState);
            this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${level} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.completeProfileSetup(userId, userState.data);
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await ctx.reply('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.', telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')],
                [telegraf_1.Markup.button.callback('üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]));
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
    }
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    async completeProfileSetup(telegramUserId, profileData) {
        try {
            this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è Telegram ID: ${telegramUserId}`);
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId, –∞ –Ω–µ –ø–æ id
            const user = await this.prisma.user.findUnique({
                where: { telegramId: telegramUserId }
            });
            if (!user) {
                throw new common_1.NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            const userId = user.id; // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            this.logger.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î —Å ID: ${userId}`);
            // –®–∞–≥ 1: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è API
            const profileStepOneDto = {
                city: profileData.city,
                preferredCourt: profileData.preferredCourt,
                dominantHand: profileData.dominantHand,
                preferredPlayTime: ['EVENING'], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                playsInTournaments: profileData.playsInTournaments || false,
                weeklyPlayFrequency: profileData.weeklyPlayFrequency || '1_PER_WEEK',
                firstName: user.firstName, // –ë–µ—Ä–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                lastName: user.lastName || undefined // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º null –≤ undefined
            };
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 1
            await this.usersService.completeProfileStepOne(userId.toString(), profileStepOneDto);
            // –®–∞–≥ 2: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ API
            const profileStepTwoDto = {
                selfAssessedLevel: profileData.selfAssessedLevel || 'BEGINNER',
                backhandType: 'TWO_HANDED', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                preferredSurface: 'HARD', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                playingStyle: 'UNIVERSAL', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                favoriteShot: 'FOREHAND', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                racket: '–õ—é–±–∞—è', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                opponentPreference: 'ANY' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 2
            await this.usersService.completeProfileStepTwo(userId.toString(), profileStepTwoDto);
            this.logger.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
            throw error;
        }
    }
    async handleMatchHistory(ctx) {
        try {
            await ctx.answerCbQuery();
            if (!ctx.from)
                return;
            const user = await this.usersService.findByTelegramId(ctx.from.id.toString());
            if (!user)
                return;
            const matches = await this.usersService.getUserMatches(user.id.toString());
            let message = `üìã **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n\n`;
            if (matches && matches.length > 0) {
                matches.slice(0, 10).forEach((match, index) => {
                    const date = new Date(match.date || match.matchDate).toLocaleDateString('ru-RU');
                    const opponent = match.opponent?.name || match.opponentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    const result = match.result === 'WIN' ? '‚úÖ –ü–æ–±–µ–¥–∞' : '‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
                    message += `${index + 1}. ${date} vs ${opponent}\n`;
                    message += `   ${result} ${match.score || ''}\n\n`;
                });
            }
            else {
                message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n`;
                message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!`;
            }
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π');
        }
    }
    async handleUserGoals(ctx) {
        try {
            await ctx.answerCbQuery();
            const message = `üéØ **–¶–µ–ª–∏**\n\n` +
                `‚Ä¢ –°—ã–≥—Ä–∞—Ç—å 10 –º–∞—Ç—á–µ–π - –ü—Ä–æ–≥—Ä–µ—Å—Å: 3/10\n` +
                `‚Ä¢ –ü–æ–±–µ–¥–∏—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ - –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
                `‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å NTRP –Ω–∞ 0.5 –ø—É–Ω–∫—Ç–∞ - –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n` +
                `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'back_to_profile')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π');
        }
    }
    async handleBackToProfile(ctx) {
        try {
            await ctx.answerCbQuery();
            await this.handleProfile(ctx);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBackToProfile: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
        }
    }
    async handleSettings(ctx) {
        try {
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            const settings = {
                notificationsEnabled: true,
                language: 'ru'
            };
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'toggle_notifications')],
                [
                    telegraf_1.Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
                    telegraf_1.Markup.button.callback('üá¨üáß English', 'lang_en')
                ],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
            ]);
            await ctx.reply(`‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
                `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
                `üåê –Ø–∑—ã–∫: ${settings.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleSettings: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getLevelText(level) {
        const levels = {
            'BEGINNER': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å',
            'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π',
            'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
            'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
            'ANY': '–õ—é–±–æ–π'
        };
        return levels[level] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
    getDominantHandText(hand) {
        if (hand === 'LEFT')
            return '–õ–µ–≤–∞—è';
        if (hand === 'RIGHT')
            return '–ü—Ä–∞–≤–∞—è';
        return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    }
    async handleFrequencySelection(frequency, ctx) {
        try {
            await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const userState = this.stateService.getUserState(userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (userState.step !== profile_state_enum_1.ProfileStep.AWAITING_FREQUENCY) {
                return;
            }
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
            let typedFrequency;
            switch (frequency) {
                case '1_PER_WEEK':
                    typedFrequency = "ONCE";
                    break;
                case '2_3_PER_WEEK':
                    typedFrequency = "TWICE";
                    break;
                case '4_PLUS_PER_WEEK':
                    typedFrequency = "FOUR_PLUS";
                    break;
                default:
                    typedFrequency = "ONCE";
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userState.data.weeklyPlayFrequency = typedFrequency;
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            userState.step = profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENTS;
            this.stateService.setUserState(userId, userState);
            this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä ${frequency} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            await ctx.reply('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?', telegraf_1.Markup.inlineKeyboard([
                [
                    telegraf_1.Markup.button.callback('–î–∞', 'tournaments_YES'),
                    telegraf_1.Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
                ]
            ]));
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
    }
    async handleProfileInput(ctx, text, userId) {
        const userState = this.stateService.getUserState(userId);
        this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: ${text}, —Ç–µ–∫—É—â–∏–π —à–∞–≥: ${userState.step}`);
        switch (userState.step) {
            case profile_state_enum_1.ProfileStep.AWAITING_CITY:
                return await this.handleCity(ctx, text, userId, userState);
            case profile_state_enum_1.ProfileStep.AWAITING_COURT:
                return await this.handleCourt(ctx, text, userId, userState);
            case profile_state_enum_1.ProfileStep.AWAITING_HAND:
                // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
                await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ", telegraf_1.Markup.inlineKeyboard([
                    [
                        telegraf_1.Markup.button.callback('üëà –õ–µ–≤–∞—è', 'hand_LEFT'),
                        telegraf_1.Markup.button.callback('üëâ –ü—Ä–∞–≤–∞—è', 'hand_RIGHT')
                    ]
                ]));
                return true;
            case profile_state_enum_1.ProfileStep.AWAITING_FREQUENCY:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
                if (text.includes("1 —Ä–∞–∑")) {
                    return await this.processFrequencySelection("1_PER_WEEK", ctx, userId, userState);
                }
                else if (text.includes("2-3")) {
                    return await this.processFrequencySelection("2_3_PER_WEEK", ctx, userId, userState);
                }
                else if (text.includes("4+")) {
                    return await this.processFrequencySelection("4_PLUS_PER_WEEK", ctx, userId, userState);
                }
                else {
                    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–≥—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ");
                    return true;
                }
            case profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENTS:
                // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
                await ctx.reply("–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö? –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ", telegraf_1.Markup.inlineKeyboard([
                    [
                        telegraf_1.Markup.button.callback('–î–∞', 'tournaments_YES'),
                        telegraf_1.Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
                    ]
                ]));
                return true;
            case profile_state_enum_1.ProfileStep.AWAITING_LEVEL:
                // –î–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
                await ctx.reply("–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?", telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('–ù–∞—á–∏–Ω–∞—é—â–∏–π', 'level_BEGINNER')],
                    [telegraf_1.Markup.button.callback('–õ—é–±–∏—Ç–µ–ª—å', 'level_AMATEUR')],
                    [telegraf_1.Markup.button.callback('–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_CONFIDENT')],
                    [telegraf_1.Markup.button.callback('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 'level_ADVANCED')],
                    [telegraf_1.Markup.button.callback('–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –∏–≥—Ä–æ–∫', 'level_TOURNAMENT')]
                ]));
                return true;
        }
        return false;
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
    async processFrequencySelection(frequency, ctx, userId, userState) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userState.data.weeklyPlayFrequency = frequency;
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_TOURNAMENTS;
        this.stateService.setUserState(userId, userState);
        this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–≥—Ä ${frequency} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        await ctx.reply('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö?', telegraf_1.Markup.inlineKeyboard([
            [
                telegraf_1.Markup.button.callback('–î–∞', 'tournaments_YES'),
                telegraf_1.Markup.button.callback('–ù–µ—Ç', 'tournaments_NO')
            ]
        ]));
        return true;
    }
    async handleCity(ctx, text, userId, userState) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
        userState.data.city = text;
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_COURT;
        this.stateService.setUserState(userId, userState);
        this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –≥–æ—Ä–æ–¥: ${text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—Ä—Ç
        await ctx.reply('–ù–∞ –∫–∞–∫–æ–º –∫–æ—Ä—Ç–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?');
        return true;
    }
    async handleCourt(ctx, text, userId, userState) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ—Ä—Ç
        userState.data.preferredCourt = text;
        userState.step = profile_state_enum_1.ProfileStep.AWAITING_HAND;
        this.stateService.setUserState(userId, userState);
        this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ç: ${text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä—É–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        await ctx.reply('–ö–∞–∫–æ–π —Ä—É–∫–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?', telegraf_1.Markup.inlineKeyboard([
            [
                telegraf_1.Markup.button.callback('üëà –õ–µ–≤–∞—è', 'hand_LEFT'),
                telegraf_1.Markup.button.callback('üëâ –ü—Ä–∞–≤–∞—è', 'hand_RIGHT')
            ]
        ]));
        return true;
    }
    async handleHandSelection(hand, ctx) {
        try {
            await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const userState = this.stateService.getUserState(userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (userState.step !== profile_state_enum_1.ProfileStep.AWAITING_HAND) {
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ä—É–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userState.data.dominantHand = hand;
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            userState.step = profile_state_enum_1.ProfileStep.AWAITING_FREQUENCY;
            this.stateService.setUserState(userId, userState);
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¢–û–õ–¨–ö–û –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –∏–≥—Ä—ã (—É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
            const keyboard = telegraf_1.Markup.keyboard([
                ['1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'],
                ['2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'],
                ['4+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é']
            ]).resize();
            await ctx.reply(`‚úÖ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ä—É–∫–∞: **${hand === 'LEFT' ? '–õ–µ–≤–∞—è' : '–ü—Ä–∞–≤–∞—è'}**\n\n` +
                `–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–∞—è —Ä—É–∫–∞ ${hand} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–∏: ${error}`);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
    }
    async handleFrequency(ctx, text, userId, userState) {
        // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        return true;
    }
    async handleTournaments(ctx, text, userId, userState) {
        // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        return true;
    }
    async handleLevel(ctx, text, userId, userState) {
        // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        return true;
    }
    async formatProfileMessage(user) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –±–µ–π–¥–∂–µ–º
        const ratingInfo = user.level?.ratingInfo || { value: '–ù–µ —É–∫–∞–∑–∞–Ω', badge: 'basic', level: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–æ–∫ —Å–ø–æ—Ä—Ç–∞
        const sportEmoji = user.sport?.emoji || 'üéæ';
        const sportTitle = user.sport?.title || '–ù–µ —É–∫–∞–∑–∞–Ω';
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ NTRP
        let levelBadge = '';
        switch (ratingInfo.badge) {
            case 'beginner':
                levelBadge = 'üî∞';
                break;
            case 'intermediate':
                levelBadge = 'üî∑';
                break;
            case 'advanced':
                levelBadge = 'üî∂';
                break;
            case 'expert':
                levelBadge = 'üíé';
                break;
            case 'pro':
                levelBadge = 'üèÜ';
                break;
            default:
                levelBadge = '‚ö™Ô∏è';
        }
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        return `üë§ –ü—Ä–æ—Ñ–∏–ª—å ${user.firstName} ${user.lastName || ''}

${sportEmoji} –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: ${sportTitle}
${levelBadge} NTRP —Ä–µ–π—Ç–∏–Ω–≥: ${ratingInfo.value} (${ratingInfo.level})
‚ö°Ô∏è –û—á–∫–∏ —Å–∏–ª—ã: ${user.rating?.points || 0}
‚≠êÔ∏è –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${user.rating?.ranking || 0}

üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üëã –†—É–∫–∞: ${user.playingStyle?.dominantHand === 'RIGHT' ? '–ü—Ä–∞–≤–∞—è' : '–õ–µ–≤–∞—è'}
üèÜ –¢—É—Ä–Ω–∏—Ä–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ: ${user.statistics?.tournamentsWon || 0}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üìà –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: ${user.statistics?.matchesPlayed || 0}
ü•á –ü–æ–±–µ–¥: ${user.statistics?.matchWins || 0}
ü•à –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${user.statistics?.matchLosses || 0}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${user.statistics?.winRate || 0}%
`;
    }
    async handleProfileCommand(ctx) {
        try {
            if (!ctx.from)
                return;
            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const userId = ctx.from.id.toString();
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.usersService.getUserFullProfile(userId);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
            const message = await this.formatProfileMessage(user);
            // –ö–Ω–æ–ø–∫–∏
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'edit_profile')],
                [telegraf_1.Markup.button.callback('ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
                [telegraf_1.Markup.button.callback('üìä –†–µ–π—Ç–∏–Ω–≥', 'rating')],
                [telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
            ]);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await ctx.reply(message, {
                ...keyboard,
                parse_mode: 'Markdown'
            });
        }
        catch (error) {
            if (error instanceof Error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, error.stack);
            }
            else {
                this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error}`);
            }
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
};
exports.ProfileHandler = ProfileHandler;
__decorate([
    (0, nestjs_telegraf_1.Hears)('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], ProfileHandler.prototype, "handleProfile", null);
exports.ProfileHandler = ProfileHandler = ProfileHandler_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [state_service_1.StateService,
        keyboard_service_1.KeyboardService,
        users_service_1.UsersService,
        ratings_service_1.RatingsService,
        balls_service_1.BallsService,
        prisma_service_1.PrismaService])
], ProfileHandler);
