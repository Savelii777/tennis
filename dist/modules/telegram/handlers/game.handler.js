"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameHandler = void 0;
// src/modules/telegram/handlers/game.handler.ts
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const base_bot_handler_1 = require("./base-bot.handler");
const requests_service_1 = require("../../requests/application/services/requests.service");
const profile_state_enum_1 = require("../interfaces/profile-state.enum");
const create_request_dto_1 = require("../../requests/application/dto/create-request.dto");
let GameHandler = class GameHandler extends base_bot_handler_1.BaseBotHandler {
    constructor(usersService, ballsService, requestsService) {
        super(usersService, ballsService);
        this.requestsService = requestsService;
    }
    async handlePlay(ctx) {
        this.logger.log('üéæ –ò–ì–†–ê–¢–¨ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            const user = await this.getUser(ctx);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É', 'find_game')],
                [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                [telegraf_1.Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_requests')],
                [telegraf_1.Markup.button.callback('üí´ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'active_requests')],
            ]);
            await ctx.reply(`üéæ **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                `–ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É!\n\n` +
                `–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handlePlay: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä—ã');
        }
    }
    async handleFindGame(ctx) {
        await ctx.answerCbQuery();
        this.logger.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã');
        try {
            const requests = await this.requestsService.findAll({
                page: 1,
                limit: 10
            });
            const filteredRequests = requests.filter((req) => {
                const creatorTelegramId = req.creator?.telegramId ||
                    req.creator?.telegram_id ||
                    req.creatorId?.toString();
                return creatorTelegramId && creatorTelegramId !== ctx.from?.id.toString();
            }).slice(0, 10);
            if (filteredRequests.length === 0) {
                await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                    `üòî –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                        [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n`;
            const buttons = [];
            filteredRequests.forEach((request, index) => {
                const datetime = request.dateTime || request.scheduledTime
                    ? new Date(request.dateTime || request.scheduledTime).toLocaleString('ru-RU')
                    : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const creatorName = request.creator?.firstName ||
                    request.creator?.first_name ||
                    request.creatorName ||
                    '–ò–≥—Ä–æ–∫';
                const location = request.locationName ||
                    request.location ||
                    '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const currentPlayers = request.currentPlayers || 0;
                const maxPlayers = request.maxPlayers || 2;
                message += `${index + 1}. **${creatorName}**\n`;
                message += `üìÖ ${datetime}\n`;
                message += `üìç ${location}\n`;
                message += `üë• ${currentPlayers}/${maxPlayers}\n`;
                if (request.description && request.description !== '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å') {
                    message += `üìù ${request.description}\n`;
                }
                message += `\n`;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è`, `respond_request_${request.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'find_game')]);
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleFindGame: ${error}`);
            await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n` +
                `üòî –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É!`, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
                ]).reply_markup
            });
        }
    }
    async handleCreateRequest(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_REQUEST_DESCRIPTION,
            data: {}
        });
        await ctx.editMessageText(`‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏**\n\n` +
            `**–®–∞–≥ 1 –∏–∑ 3**\n\n` +
            `–û–ø–∏—à–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∏–≥—Ä—É:\n` +
            `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n` +
            `‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–≥—Ä–µ\n` +
            `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`, { parse_mode: 'Markdown' });
    }
    async handleMyRequests(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        try {
            const user = await this.getUser(ctx);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const allRequests = await this.requestsService.findAll({ page: 1, limit: 100 });
            const myRequests = allRequests.filter((req) => {
                const creatorId = req.creatorId || req.creator?.id;
                return creatorId && creatorId.toString() === user.id.toString();
            });
            if (myRequests.length === 0) {
                await ctx.editMessageText(`üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏**\n\n` +
                    `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n` +
                    `–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_request')],
                        [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏ (${myRequests.length}):**\n\n`;
            const buttons = [];
            myRequests.forEach((request, index) => {
                const datetime = request.dateTime
                    ? new Date(request.dateTime).toLocaleString('ru-RU')
                    : '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const location = request.locationName || request.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const currentPlayers = request.currentPlayers || 0;
                const maxPlayers = request.maxPlayers || 2;
                message += `${index + 1}. **${request.title || '–ó–∞—è–≤–∫–∞'}**\n`;
                message += `üìÖ ${datetime}\n`;
                message += `üìç ${location}\n`;
                message += `üë• ${currentPlayers}/${maxPlayers}\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`${index + 1}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ`, `request_details_${request.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMyRequests: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫');
        }
    }
    async handleActiveRequests(ctx) {
        await ctx.answerCbQuery();
        await this.handleFindGame(ctx);
    }
    async handleBackToPlay(ctx) {
        await ctx.answerCbQuery();
        await this.handlePlay(ctx);
    }
    async handleRespondToRequest(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const requestId = ctx.callbackQuery.data.split('_')[2];
        try {
            const user = await this.getUser(ctx);
            if (!user)
                return;
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É
            await ctx.editMessageText(`‚úÖ **–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
                `–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é.\n\n` +
                `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîç –î—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏', 'find_game')],
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_play')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
        }
    }
    async handleRequestDetails(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const requestId = ctx.callbackQuery.data.split('_')[2];
        try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
            await ctx.editMessageText(`üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏**\n\n` +
                `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n` +
                `–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n` +
                `‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n` +
                `‚Ä¢ –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤\n` +
                `‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_request_${requestId}`)],
                    [telegraf_1.Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_request_${requestId}`)],
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'my_requests')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏');
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞)
    async createGameRequest(ctx, userId, userState) {
        try {
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const requestData = {
                type: create_request_dto_1.RequestType.GAME,
                title: `–ò–≥—Ä–∞ ${new Date(userState.data.requestDateTime).toLocaleDateString('ru-RU')}`,
                description: userState.data.requestDescription || '–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å',
                gameMode: create_request_dto_1.GameMode.SINGLES,
                dateTime: new Date(userState.data.requestDateTime),
                location: userState.data.requestLocation,
                maxPlayers: 2,
                locationName: userState.data.requestLocation,
            };
            const request = await this.requestsService.create(user.id.toString(), requestData);
            await ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                `üìÖ **–î–∞—Ç–∞:** ${new Date(request.dateTime).toLocaleString('ru-RU')}\n` +
                `üìç **–ú–µ—Å—Ç–æ:** ${request.locationName}\n` +
                `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${request.description}\n\n` +
                `–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!`, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard().reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    }
    getMainKeyboard() {
        return telegraf_1.Markup.keyboard([
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéæ –ò–≥—Ä–∞—Ç—å'],
            ['üèÜ –¢—É—Ä–Ω–∏—Ä—ã', 'üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
            ['üì± Stories', 'üéÅ –ö–µ–π—Å—ã'],
            ['üìç –ö–æ—Ä—Ç—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 'üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç']
        ]).resize();
    }
};
__decorate([
    (0, nestjs_telegraf_1.Action)('find_game'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleFindGame", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('create_request'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleCreateRequest", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('my_requests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleMyRequests", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('active_requests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleActiveRequests", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_play'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleBackToPlay", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^respond_request_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleRespondToRequest", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^request_details_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], GameHandler.prototype, "handleRequestDetails", null);
GameHandler = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, requests_service_1.RequestsService])
], GameHandler);
exports.GameHandler = GameHandler;
