"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CommonHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonHandler = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const state_service_1 = require("../services/state.service");
const keyboard_service_1 = require("../services/keyboard.service");
const users_service_1 = require("../../users/application/services/users.service");
const balls_service_1 = require("../../users/application/services/balls.service");
const notifications_service_1 = require("../../notifications/application/services/notifications.service");
const telegram_service_1 = require("../telegram.service");
const referrals_service_1 = require("../../referrals/application/services/referrals.service");
const prisma_service_1 = require("../../../prisma/prisma.service");
let CommonHandler = CommonHandler_1 = class CommonHandler {
    constructor(stateService, keyboardService, usersService, ballsService, notificationsService, telegramService, referralsService, prisma) {
        this.stateService = stateService;
        this.keyboardService = keyboardService;
        this.usersService = usersService;
        this.ballsService = ballsService;
        this.notificationsService = notificationsService;
        this.telegramService = telegramService;
        this.referralsService = referralsService;
        this.prisma = prisma;
        this.logger = new common_1.Logger(CommonHandler_1.name);
    }
    register(bot) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        bot.action('back_to_profile', this.handleBackToProfile.bind(this));
        bot.command('menu', this.handleMenu.bind(this));
    }
    async handleStart(ctx) {
        this.logger.log('üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞');
        if (!ctx.from) {
            this.logger.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        const telegramId = ctx.from.id.toString();
        let telegramChatId = ctx.chat?.id.toString();
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        let startPayload = '';
        if ('startPayload' in ctx && ctx.startPayload) {
            startPayload = typeof ctx.startPayload === 'string' ? ctx.startPayload : '';
            this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω payload: ${startPayload}`);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        let user = await this.usersService.findByTelegramId(telegramId);
        if (!user) {
            this.logger.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º...');
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = {
                telegram_id: telegramId,
                telegramChatId: telegramChatId ? BigInt(telegramChatId) : undefined,
                username: ctx.from.username || '',
                first_name: ctx.from.first_name,
                last_name: ctx.from.last_name || undefined,
                photo_url: ''
            };
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await this.usersService.create(userData);
            this.logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (telegramChatId) {
                await this.usersService.updateTelegramChatId(user.id.toString(), parseInt(telegramChatId));
                this.logger.log(`üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: ${telegramChatId}`);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            if (startPayload && startPayload.startsWith('ref_')) {
                const referralCode = startPayload.replace('ref_', '');
                this.logger.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
                try {
                    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                    const referrer = await this.referralsService.findUserByReferralCode(referralCode);
                    if (referrer && referrer.id !== user.id) {
                        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
                        await this.referralsService.createReferral({
                            referrerId: referrer.id,
                            referredId: user.id
                        });
                        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                        const referralBonus = 50;
                        await this.ballsService.addBalls(referrer.id.toString(), referralBonus, 'REFERRAL', `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${user.first_name}`);
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                        if (this.notificationsService) {
                            await this.notificationsService.createNotification({
                                userId: referrer.id,
                                message: `–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é! +${referralBonus} –º—è—á–µ–π`,
                                type: 'REFERRAL_BONUS'
                                // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ data, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ —Ç–∏–ø–µ CreateNotificationData
                            });
                        }
                        // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        const startBonus = 50;
                        await this.ballsService.addBalls(user.id.toString(), startBonus, 'REFERRAL', `–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é`);
                        await ctx.reply(`üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${user.first_name}!**\n\n` +
                            `‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!\n` +
                            `üéÅ –ë–æ–Ω—É—Å: ${startBonus} –º—è—á–µ–π\n\n` +
                            `–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!`, {
                            parse_mode: 'Markdown',
                            reply_markup: telegraf_1.Markup.inlineKeyboard([
                                [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')]
                            ]).reply_markup
                        });
                        return;
                    }
                }
                catch (error) {
                    this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error}`);
                }
            }
            else {
                // –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                await ctx.reply(`üéæ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Bot, ${ctx.from.first_name}!**\n\n` +
                    `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
                    `üéæ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n` +
                    `‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n` +
                    `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
                    `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π\n` +
                    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º—è—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n` +
                    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç AI-Coach\n\n` +
                    `–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'setup_profile')]
                    ]).reply_markup
                });
                // –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
                const startBonus = 100;
                await this.ballsService.addBalls(user.id.toString(), startBonus, 'BONUS', '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
            }
        }
        else {
            this.logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (telegramChatId && user.telegramChatId !== BigInt(telegramChatId)) {
                await this.usersService.updateTelegramChatId(user.id.toString(), parseInt(telegramChatId));
                this.logger.log(`üí¨ –û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${telegramChatId}`);
            }
            // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
            if (this.telegramService) {
                await this.telegramService.toggleNotifications(user.id, true);
            }
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            const ballsBalance = await this.ballsService.getUserBalance(user.id.toString());
            const unreadNotifications = this.notificationsService
                ? await this.notificationsService.getUnreadCount(user.id)
                : 0;
            let welcomeMessage = `üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!**\n\n`;
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            if (ballsBalance > 0) {
                welcomeMessage += `üéæ **–ë–∞–ª–∞–Ω—Å:** ${ballsBalance} –º—è—á–µ–π\n`;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
            if (unreadNotifications > 0) {
                welcomeMessage += `üîî **–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${unreadNotifications}\n`;
            }
            welcomeMessage += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await ctx.reply(welcomeMessage, {
                parse_mode: 'Markdown',
                reply_markup: this.keyboardService.getMainKeyboard().reply_markup
            });
        }
    }
    async handleMenu(ctx) {
        try {
            await ctx.reply(`üéæ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
                parse_mode: 'Markdown',
                reply_markup: this.keyboardService.getMainKeyboard().reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleMenu: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é');
        }
    }
    async handleBackToProfile(ctx) {
        try {
            await ctx.answerCbQuery();
            if (!ctx.from)
                return;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ProfileHandler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            // –í –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—É—á—à–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ProfileHandler, 
            // –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—ã–∑–æ–≤–µ–º —Å–Ω–æ–≤–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
            await ctx.reply(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é...`, {
                parse_mode: 'Markdown',
                reply_markup: this.keyboardService.getMainKeyboard().reply_markup
            });
            // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
            await ctx.reply('üë§ –ü—Ä–æ—Ñ–∏–ª—å');
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleBackToProfile: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
        }
    }
    async handleInviteButton(ctx) {
        try {
            if (!ctx.from)
                return;
            const userId = ctx.from.id.toString();
            const user = await this.usersService.findByTelegramId(userId);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ referralCode —ç—Ç–æ –ø–æ–ª–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const referralCode = `ref_${userId}`;
            const botName = process.env.TELEGRAM_BOT_USERNAME || 'your_bot_name';
            const inviteLink = `https://t.me/${botName}?start=${referralCode}`;
            await ctx.reply(`üîó **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!**\n\n` +
                `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –º—è—á–µ–π.\n\n` +
                `–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
                `${inviteLink}\n\n` +
                `–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!`, { parse_mode: 'Markdown' });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleInviteButton: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }
    }
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getLevelText(level) {
        const levels = {
            'BEGINNER': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'AMATEUR': '–õ—é–±–∏—Ç–µ–ª—å',
            'CONFIDENT': '–£–≤–µ—Ä–µ–Ω–Ω—ã–π',
            'TOURNAMENT': '–¢—É—Ä–Ω–∏—Ä–Ω—ã–π',
            'SEMI_PRO': '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
            'ANY': '–õ—é–±–æ–π'
        };
        return levels[level] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
};
__decorate([
    (0, nestjs_telegraf_1.Start)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], CommonHandler.prototype, "handleStart", null);
CommonHandler = CommonHandler_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [state_service_1.StateService,
        keyboard_service_1.KeyboardService,
        users_service_1.UsersService,
        balls_service_1.BallsService,
        notifications_service_1.NotificationsService,
        telegram_service_1.TelegramService,
        referrals_service_1.ReferralsService,
        prisma_service_1.PrismaService])
], CommonHandler);
exports.CommonHandler = CommonHandler;
