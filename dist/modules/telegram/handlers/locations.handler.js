"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationsHandler = void 0;
// src/modules/telegram/handlers/locations.handler.ts
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const base_bot_handler_1 = require("./base-bot.handler");
const locations_service_1 = require("../../locations/application/services/locations.service");
const profile_state_enum_1 = require("../interfaces/profile-state.enum");
let LocationsHandler = class LocationsHandler extends base_bot_handler_1.BaseBotHandler {
    constructor(usersService, ballsService, locationsService) {
        super(usersService, ballsService);
        this.locationsService = locationsService;
    }
    async handleLocations(ctx) {
        this.logger.log('üìç –ö–û–†–¢–´ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        try {
            const user = await this.getUser(ctx);
            if (!user) {
                await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                return;
            }
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∫–æ—Ä—Ç—ã', 'find_courts')],
                [telegraf_1.Markup.button.callback('üìç –ö–æ—Ä—Ç—ã —Ä—è–¥–æ–º', 'nearby_courts')],
                [telegraf_1.Markup.button.callback('‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ—Ä—Ç—ã', 'popular_courts')],
                [telegraf_1.Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ç', 'add_court')],
            ]);
            await ctx.reply(`üìç **–ö–æ—Ä—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏–∏**\n\n` +
                `üéæ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏–≥—Ä—ã!\n\n` +
                `–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤ handleLocations: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –∫–æ—Ä—Ç–æ–≤');
        }
    }
    async handleFindCourts(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_CITY_SEARCH,
            data: {}
        });
        await ctx.editMessageText(`üîç **–ü–æ–∏—Å–∫ –∫–æ—Ä—Ç–æ–≤**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`, { parse_mode: 'Markdown' });
    }
    async handleNearbyCourts(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`üìç **–ö–æ—Ä—Ç—ã —Ä—è–¥–æ–º**\n\n` +
            `–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –∫–æ—Ä—Ç–æ–≤\n` +
            `–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å.`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üó∫Ô∏è –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å', 'specify_address')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_locations')]
            ]).reply_markup
        });
    }
    async handlePopularCourts(ctx) {
        await ctx.answerCbQuery();
        const message = `‚≠ê **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ—Ä—Ç—ã:**\n\n` +
            `üèÜ **–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û–ª–∏–º–ø–∏–π—Å–∫–∏–π"**\n` +
            `üìç –û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 16\n` +
            `‚≠ê 4.9/5.0 ‚Ä¢ üéæ 12 –∫–æ—Ä—Ç–æ–≤\n` +
            `üí∞ 2000-3500 —Ä—É–±/—á–∞—Å\n` +
            `üèÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ö—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã, –•–∞—Ä–¥, –ü–∞—Ä–∫–æ–≤–∫–∞\n\n` +
            `ü•á **–¢–¶ "–õ—É–∂–Ω–∏–∫–∏"**\n` +
            `üìç –õ—É–∂–Ω–∏–∫–∏, —Å—Ç—Ä. 24\n` +
            `‚≠ê 4.8/5.0 ‚Ä¢ üéæ 8 –∫–æ—Ä—Ç–æ–≤\n` +
            `üí∞ 1800-3000 —Ä—É–±/—á–∞—Å\n` +
            `üèÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ç—ã, –ì—Ä—É–Ω—Ç\n\n` +
            `ü•à **–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–± "–ù–µ–≤—Å–∫–∏–π"**\n` +
            `üìç –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 120\n` +
            `‚≠ê 4.7/5.0 ‚Ä¢ üéæ 6 –∫–æ—Ä—Ç–æ–≤\n` +
            `üí∞ 1500-2500 —Ä—É–±/—á–∞—Å\n` +
            `üèÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞, –•–∞—Ä–¥`;
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ', 'find_courts')],
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_locations')]
            ]).reply_markup
        });
    }
    async handleAddCourt(ctx) {
        await ctx.answerCbQuery();
        await ctx.editMessageText(`‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ç**\n\n` +
            `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n` +
            `–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n` +
            `‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–æ—Ä—Ç—ã\n` +
            `‚Ä¢ –£–∫–∞–∑—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n` +
            `‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n` +
            `‚Ä¢ –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã`, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_locations')]
            ]).reply_markup
        });
    }
    async handleSpecifyAddress(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.from)
            return;
        const userId = ctx.from.id.toString();
        this.setUserState(userId, {
            step: profile_state_enum_1.ProfileStep.AWAITING_CITY_SEARCH,
            data: {}
        });
        await ctx.editMessageText(`üó∫Ô∏è **–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å**\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω:`, { parse_mode: 'Markdown' });
    }
    async handleBackToLocations(ctx) {
        await ctx.answerCbQuery();
        await this.handleLocations(ctx);
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
    async handleCitySearch(ctx, text, userId, userState) {
        try {
            const cities = await this.locationsService.searchCities({
                query: text,
                limit: 5
            });
            if (cities.length === 0) {
                await ctx.reply(`üòî **–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n` +
                    `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞', 'popular_cities')],
                        [telegraf_1.Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'find_courts')]
                    ]).reply_markup
                });
                return;
            }
            let message = `üèôÔ∏è **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:**\n\n`;
            const buttons = [];
            cities.forEach((city, index) => {
                message += `${index + 1}. **${city.name}**, ${city.country.name}\n`;
                message += `üë• –ò–≥—Ä–æ–∫–æ–≤: ${city._count.users}\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`üéæ ${city.name}`, `city_courts_${city.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_locations')]);
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
            this.clearUserState(userId);
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞');
            this.clearUserState(userId);
        }
    }
    async handleCityCourts(ctx) {
        await ctx.answerCbQuery();
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery))
            return;
        const cityId = parseInt(ctx.callbackQuery.data.split('_')[2]);
        try {
            const city = await this.locationsService.getCityById(cityId);
            const message = `üéæ **–ö–æ—Ä—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ ${city.name}**\n\n` +
                `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                `üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ: ${city._count.users}\n` +
                `üèôÔ∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${city.population?.toLocaleString('ru-RU') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                `üèÜ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ—Ä—Ç—ã:**\n\n` +
                `1. **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–ª—É–±**\n` +
                `üìç –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞\n` +
                `‚≠ê 4.8/5.0 ‚Ä¢ üéæ 6 –∫–æ—Ä—Ç–æ–≤\n` +
                `üí∞ –æ—Ç 1500 —Ä—É–±/—á–∞—Å\n\n` +
                `2. **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–û–ª–∏–º–ø"**\n` +
                `üìç –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ä–∞–π–æ–Ω\n` +
                `‚≠ê 4.6/5.0 ‚Ä¢ üéæ 4 –∫–æ—Ä—Ç–∞\n` +
                `üí∞ –æ—Ç 1200 —Ä—É–±/—á–∞—Å\n\n` +
                `3. **–¢–µ–Ω–Ω–∏—Å–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—è**\n` +
                `üìç –ñ–∏–ª–æ–π —Ä–∞–π–æ–Ω\n` +
                `‚≠ê 4.7/5.0 ‚Ä¢ üéæ 8 –∫–æ—Ä—Ç–æ–≤\n` +
                `üí∞ –æ—Ç 1800 —Ä—É–±/—á–∞—Å`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', `city_courts_${cityId}`)],
                    [telegraf_1.Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ç', 'add_court')],
                    [telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É', 'find_courts')]
                ]).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ç–æ–≤ –≥–æ—Ä–æ–¥–∞: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä—Ç–æ–≤');
        }
    }
    async handlePopularCities(ctx) {
        await ctx.answerCbQuery();
        try {
            const cities = await this.locationsService.getPopularCities('RU');
            let message = `‚≠ê **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏:**\n\n`;
            const buttons = [];
            cities.forEach((city, index) => {
                message += `${index + 1}. **${city.name}**\n`;
                message += `üë• –ò–≥—Ä–æ–∫–æ–≤: ${city._count.users}\n`;
                message += `üèôÔ∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${city.population?.toLocaleString('ru-RU')}\n\n`;
                buttons.push([telegraf_1.Markup.button.callback(`üéæ ${city.name}`, `city_courts_${city.id}`)]);
            });
            buttons.push([telegraf_1.Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_locations')]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(buttons).reply_markup
            });
        }
        catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: ${error}`);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ–¥–æ–≤');
        }
    }
};
__decorate([
    (0, nestjs_telegraf_1.Action)('find_courts'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleFindCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('nearby_courts'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleNearbyCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('popular_courts'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handlePopularCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('add_court'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleAddCourt", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('specify_address'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleSpecifyAddress", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('back_to_locations'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleBackToLocations", null);
__decorate([
    (0, nestjs_telegraf_1.Action)(/^city_courts_(\d+)$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handleCityCourts", null);
__decorate([
    (0, nestjs_telegraf_1.Action)('popular_cities'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], LocationsHandler.prototype, "handlePopularCities", null);
LocationsHandler = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, Object, locations_service_1.LocationsService])
], LocationsHandler);
exports.LocationsHandler = LocationsHandler;
