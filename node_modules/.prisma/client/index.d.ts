
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Story
 * 
 */
export type Story = {
  id: number
  userId: number
  telegramFileId: string
  telegramFilePath: string | null
  type: MediaType
  status: StoryStatus
  createdAt: Date
  publishedAt: Date | null
  updatedAt: Date
}

/**
 * Model Country
 * 
 */
export type Country = {
  id: number
  name: string
  code: string
  flagUrl: string | null
  createdAt: Date
}

/**
 * Model City
 * 
 */
export type City = {
  id: number
  name: string
  countryCode: string
  population: number
  lat: number
  lng: number
  timezone: string | null
  createdAt: Date
}

/**
 * Model Sport
 * 
 */
export type Sport = {
  id: number
  title: string
  slug: string
  emoji: string | null
  createdAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  telegramId: string
  username: string
  firstName: string
  lastName: string | null
  isVerified: boolean
  role: Role
  countryCode: string | null
  cityId: number | null
  sportId: number | null
  updatedAt: Date
  createdAt: Date
  authSource: AuthSource
  lastLogin: Date | null
  ballsBalance: number
  casesOpened: number
  telegramChatId: bigint | null
}

/**
 * Model BallTransaction
 * 
 */
export type BallTransaction = {
  id: number
  userId: number
  amount: number
  description: string
  type: string
  createdAt: Date
}

/**
 * Model Case
 * 
 */
export type Case = {
  id: number
  name: string
  description: string
  price: number
  image: string | null
  rewards: Prisma.JsonValue
  isActive: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model CaseOpening
 * 
 */
export type CaseOpening = {
  id: number
  userId: number
  caseId: number
  reward: Prisma.JsonValue
  createdAt: Date
}

/**
 * Model Match
 * 
 */
export type Match = {
  id: number
  creatorId: number
  player1Id: number | null
  player2Id: number | null
  optionalId: number | null
  type: MatchType
  state: MatchState
  score: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Training
 * 
 */
export type Training = {
  id: number
  creatorId: number
  location: string
  time: Date
  participantLimit: number
  description: string | null
  state: TrainingState
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Tournament
 * 
 */
export type Tournament = {
  id: number
  title: string
  description: string | null
  type: TournamentType
  status: string
  creatorId: number
  startDate: Date
  endDate: Date
  formatDetails: Prisma.JsonValue | null
  minPlayers: number
  maxPlayers: number
  currentPlayers: number
  isRanked: boolean
  locationId: number | null
  locationName: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TournamentMatch
 * 
 */
export type TournamentMatch = {
  id: number
  tournamentId: number
  round: number | null
  group: string | null
  playerAId: number
  playerBId: number | null
  score: string | null
  winnerId: number | null
  status: string
  court: string | null
  scheduledAt: Date | null
  confirmedBy: number[]
  isThirdPlaceMatch: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Invite
 * 
 */
export type Invite = {
  id: number
  matchId: number | null
  trainingId: number | null
  senderId: number
  receiverId: number
  status: InviteStatus
  createdAt: Date
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  id: number
  userId: number
  message: string
  createdAt: Date
}

/**
 * Model UserProfile
 * 
 */
export type UserProfile = {
  id: number
  userId: number
  avatarUrl: string | null
  city: string | null
  countryCode: string | null
  ntrpRating: number | null
  ratingPoints: number
  matchesPlayed: number
  matchWins: number
  matchLosses: number
  tournamentsPlayed: number
  tournamentsWon: number
  lastActivity: Date | null
  achievements: Prisma.JsonValue | null
  isPublicProfile: boolean
  createdAt: Date
  updatedAt: Date
  preferredCourt: string | null
  dominantHand: string | null
  preferredPlayTime: string[]
  playsInTournaments: boolean
  weeklyPlayFrequency: string | null
  backhandType: string | null
  preferredSurface: string | null
  playingStyle: string | null
  favoriteShot: string | null
  racket: string | null
  opponentPreference: string | null
  initialRatingPoints: number | null
  selfAssessedLevel: string | null
  profileStepOneCompleted: boolean
  profileStepTwoCompleted: boolean
}

/**
 * Model GameRequest
 * 
 */
export type GameRequest = {
  id: number
  type: string
  title: string
  description: string | null
  creatorId: number
  locationName: string | null
  maxPlayers: number
  currentPlayers: number
  gameMode: string
  dateTime: Date
  paymentType: string
  ratingType: string
  formatInfo: Prisma.JsonValue | null
  status: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model RequestResponse
 * 
 */
export type RequestResponse = {
  id: number
  requestId: number
  userId: number
  status: string
  message: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TrainingSession
 * 
 */
export type TrainingSession = {
  id: number
  title: string
  description: string | null
  creatorId: number
  locationName: string | null
  courtSurface: CourtSurface | null
  minLevel: number | null
  maxLevel: number | null
  maxSlots: number
  currentSlots: number
  paymentType: PaymentType
  pricePerPerson: number | null
  dateTime: Date
  endTime: Date
  status: TrainingState
  trainingType: TrainingType
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const MediaType: {
  image: 'image',
  video: 'video'
};

export type MediaType = (typeof MediaType)[keyof typeof MediaType]


export const StoryStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type StoryStatus = (typeof StoryStatus)[keyof typeof StoryStatus]


export const Role: {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const AuthSource: {
  WEB: 'WEB',
  TELEGRAM_BOT: 'TELEGRAM_BOT',
  MOBILE_APP: 'MOBILE_APP'
};

export type AuthSource = (typeof AuthSource)[keyof typeof AuthSource]


export const MatchType: {
  ONE_ON_ONE: 'ONE_ON_ONE',
  DOUBLES: 'DOUBLES'
};

export type MatchType = (typeof MatchType)[keyof typeof MatchType]


export const MatchState: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
};

export type MatchState = (typeof MatchState)[keyof typeof MatchState]


export const TrainingState: {
  OPEN: 'OPEN',
  FULL: 'FULL',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE'
};

export type TrainingState = (typeof TrainingState)[keyof typeof TrainingState]


export const TournamentType: {
  SINGLE_ELIMINATION: 'SINGLE_ELIMINATION',
  GROUPS_PLAYOFF: 'GROUPS_PLAYOFF',
  LEAGUE: 'LEAGUE',
  BLITZ: 'BLITZ'
};

export type TournamentType = (typeof TournamentType)[keyof typeof TournamentType]


export const InviteStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type InviteStatus = (typeof InviteStatus)[keyof typeof InviteStatus]


export const CourtSurface: {
  HARD: 'HARD',
  CLAY: 'CLAY',
  GRASS: 'GRASS',
  CARPET: 'CARPET'
};

export type CourtSurface = (typeof CourtSurface)[keyof typeof CourtSurface]


export const PaymentType: {
  FREE: 'FREE',
  HOST_PAYS: 'HOST_PAYS',
  LOSER_PAYS: 'LOSER_PAYS',
  DIVIDED: 'DIVIDED',
  FIXED_PRICE: 'FIXED_PRICE'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const TrainingType: {
  WITH_COACH: 'WITH_COACH',
  WITHOUT_COACH: 'WITHOUT_COACH',
  TIEBREAK: 'TIEBREAK',
  SPARRING: 'SPARRING',
  TECHNIQUE: 'TECHNIQUE'
};

export type TrainingType = (typeof TrainingType)[keyof typeof TrainingType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stories
 * const stories = await prisma.story.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stories
   * const stories = await prisma.story.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<GlobalReject>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<GlobalReject>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<GlobalReject>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sports
    * const sports = await prisma.sport.findMany()
    * ```
    */
  get sport(): Prisma.SportDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.ballTransaction`: Exposes CRUD operations for the **BallTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BallTransactions
    * const ballTransactions = await prisma.ballTransaction.findMany()
    * ```
    */
  get ballTransaction(): Prisma.BallTransactionDelegate<GlobalReject>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<GlobalReject>;

  /**
   * `prisma.caseOpening`: Exposes CRUD operations for the **CaseOpening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseOpenings
    * const caseOpenings = await prisma.caseOpening.findMany()
    * ```
    */
  get caseOpening(): Prisma.CaseOpeningDelegate<GlobalReject>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<GlobalReject>;

  /**
   * `prisma.training`: Exposes CRUD operations for the **Training** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trainings
    * const trainings = await prisma.training.findMany()
    * ```
    */
  get training(): Prisma.TrainingDelegate<GlobalReject>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<GlobalReject>;

  /**
   * `prisma.tournamentMatch`: Exposes CRUD operations for the **TournamentMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentMatches
    * const tournamentMatches = await prisma.tournamentMatch.findMany()
    * ```
    */
  get tournamentMatch(): Prisma.TournamentMatchDelegate<GlobalReject>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invites
    * const invites = await prisma.invite.findMany()
    * ```
    */
  get invite(): Prisma.InviteDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<GlobalReject>;

  /**
   * `prisma.gameRequest`: Exposes CRUD operations for the **GameRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameRequests
    * const gameRequests = await prisma.gameRequest.findMany()
    * ```
    */
  get gameRequest(): Prisma.GameRequestDelegate<GlobalReject>;

  /**
   * `prisma.requestResponse`: Exposes CRUD operations for the **RequestResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestResponses
    * const requestResponses = await prisma.requestResponse.findMany()
    * ```
    */
  get requestResponse(): Prisma.RequestResponseDelegate<GlobalReject>;

  /**
   * `prisma.trainingSession`: Exposes CRUD operations for the **TrainingSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingSessions
    * const trainingSessions = await prisma.trainingSession.findMany()
    * ```
    */
  get trainingSession(): Prisma.TrainingSessionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Story: 'Story',
    Country: 'Country',
    City: 'City',
    Sport: 'Sport',
    User: 'User',
    BallTransaction: 'BallTransaction',
    Case: 'Case',
    CaseOpening: 'CaseOpening',
    Match: 'Match',
    Training: 'Training',
    Tournament: 'Tournament',
    TournamentMatch: 'TournamentMatch',
    Invite: 'Invite',
    Notification: 'Notification',
    UserProfile: 'UserProfile',
    GameRequest: 'GameRequest',
    RequestResponse: 'RequestResponse',
    TrainingSession: 'TrainingSession'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CountryCountOutputType
   */


  export type CountryCountOutputType = {
    cities: number
    users: number
  }

  export type CountryCountOutputTypeSelect = {
    cities?: boolean
    users?: boolean
  }

  export type CountryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CountryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CountryCountOutputType
    : S extends undefined
    ? never
    : S extends CountryCountOutputTypeArgs
    ?'include' extends U
    ? CountryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CountryCountOutputType ? CountryCountOutputType[P] : never
  } 
    : CountryCountOutputType
  : CountryCountOutputType




  // Custom InputTypes

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     * 
    **/
    select?: CountryCountOutputTypeSelect | null
  }



  /**
   * Count Type CityCountOutputType
   */


  export type CityCountOutputType = {
    users: number
  }

  export type CityCountOutputTypeSelect = {
    users?: boolean
  }

  export type CityCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CityCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CityCountOutputType
    : S extends undefined
    ? never
    : S extends CityCountOutputTypeArgs
    ?'include' extends U
    ? CityCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CityCountOutputType ? CityCountOutputType[P] : never
  } 
    : CityCountOutputType
  : CityCountOutputType




  // Custom InputTypes

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     * 
    **/
    select?: CityCountOutputTypeSelect | null
  }



  /**
   * Count Type SportCountOutputType
   */


  export type SportCountOutputType = {
    users: number
  }

  export type SportCountOutputTypeSelect = {
    users?: boolean
  }

  export type SportCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SportCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SportCountOutputType
    : S extends undefined
    ? never
    : S extends SportCountOutputTypeArgs
    ?'include' extends U
    ? SportCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SportCountOutputType ? SportCountOutputType[P] : never
  } 
    : SportCountOutputType
  : SportCountOutputType




  // Custom InputTypes

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SportCountOutputType
     * 
    **/
    select?: SportCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    matches: number
    createdMatches: number
    createdTrainings: number
    createdTrainingSessions: number
    createdTournaments: number
    sentInvites: number
    receivedInvites: number
    notifications: number
    tournaments: number
    createdRequests: number
    requestParticipations: number
    requestResponses: number
    trainingSessionParticipations: number
    ballTransactions: number
    caseOpenings: number
    stories: number
  }

  export type UserCountOutputTypeSelect = {
    matches?: boolean
    createdMatches?: boolean
    createdTrainings?: boolean
    createdTrainingSessions?: boolean
    createdTournaments?: boolean
    sentInvites?: boolean
    receivedInvites?: boolean
    notifications?: boolean
    tournaments?: boolean
    createdRequests?: boolean
    requestParticipations?: boolean
    requestResponses?: boolean
    trainingSessionParticipations?: boolean
    ballTransactions?: boolean
    caseOpenings?: boolean
    stories?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CaseCountOutputType
   */


  export type CaseCountOutputType = {
    openings: number
  }

  export type CaseCountOutputTypeSelect = {
    openings?: boolean
  }

  export type CaseCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CaseCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CaseCountOutputType
    : S extends undefined
    ? never
    : S extends CaseCountOutputTypeArgs
    ?'include' extends U
    ? CaseCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CaseCountOutputType ? CaseCountOutputType[P] : never
  } 
    : CaseCountOutputType
  : CaseCountOutputType




  // Custom InputTypes

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     * 
    **/
    select?: CaseCountOutputTypeSelect | null
  }



  /**
   * Count Type MatchCountOutputType
   */


  export type MatchCountOutputType = {
    invites: number
  }

  export type MatchCountOutputTypeSelect = {
    invites?: boolean
  }

  export type MatchCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MatchCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MatchCountOutputType
    : S extends undefined
    ? never
    : S extends MatchCountOutputTypeArgs
    ?'include' extends U
    ? MatchCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MatchCountOutputType ? MatchCountOutputType[P] : never
  } 
    : MatchCountOutputType
  : MatchCountOutputType




  // Custom InputTypes

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     * 
    **/
    select?: MatchCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainingCountOutputType
   */


  export type TrainingCountOutputType = {
    invites: number
  }

  export type TrainingCountOutputTypeSelect = {
    invites?: boolean
  }

  export type TrainingCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TrainingCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TrainingCountOutputType
    : S extends undefined
    ? never
    : S extends TrainingCountOutputTypeArgs
    ?'include' extends U
    ? TrainingCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TrainingCountOutputType ? TrainingCountOutputType[P] : never
  } 
    : TrainingCountOutputType
  : TrainingCountOutputType




  // Custom InputTypes

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainingCountOutputType
     * 
    **/
    select?: TrainingCountOutputTypeSelect | null
  }



  /**
   * Count Type TournamentCountOutputType
   */


  export type TournamentCountOutputType = {
    players: number
    matches: number
  }

  export type TournamentCountOutputTypeSelect = {
    players?: boolean
    matches?: boolean
  }

  export type TournamentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TournamentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TournamentCountOutputType
    : S extends undefined
    ? never
    : S extends TournamentCountOutputTypeArgs
    ?'include' extends U
    ? TournamentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TournamentCountOutputType ? TournamentCountOutputType[P] : never
  } 
    : TournamentCountOutputType
  : TournamentCountOutputType




  // Custom InputTypes

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     * 
    **/
    select?: TournamentCountOutputTypeSelect | null
  }



  /**
   * Count Type GameRequestCountOutputType
   */


  export type GameRequestCountOutputType = {
    participants: number
    responses: number
  }

  export type GameRequestCountOutputTypeSelect = {
    participants?: boolean
    responses?: boolean
  }

  export type GameRequestCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GameRequestCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GameRequestCountOutputType
    : S extends undefined
    ? never
    : S extends GameRequestCountOutputTypeArgs
    ?'include' extends U
    ? GameRequestCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GameRequestCountOutputType ? GameRequestCountOutputType[P] : never
  } 
    : GameRequestCountOutputType
  : GameRequestCountOutputType




  // Custom InputTypes

  /**
   * GameRequestCountOutputType without action
   */
  export type GameRequestCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GameRequestCountOutputType
     * 
    **/
    select?: GameRequestCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainingSessionCountOutputType
   */


  export type TrainingSessionCountOutputType = {
    participants: number
  }

  export type TrainingSessionCountOutputTypeSelect = {
    participants?: boolean
  }

  export type TrainingSessionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TrainingSessionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TrainingSessionCountOutputType
    : S extends undefined
    ? never
    : S extends TrainingSessionCountOutputTypeArgs
    ?'include' extends U
    ? TrainingSessionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TrainingSessionCountOutputType ? TrainingSessionCountOutputType[P] : never
  } 
    : TrainingSessionCountOutputType
  : TrainingSessionCountOutputType




  // Custom InputTypes

  /**
   * TrainingSessionCountOutputType without action
   */
  export type TrainingSessionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainingSessionCountOutputType
     * 
    **/
    select?: TrainingSessionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Story
   */


  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StorySumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    telegramFileId: string | null
    telegramFilePath: string | null
    type: MediaType | null
    status: StoryStatus | null
    createdAt: Date | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type StoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    telegramFileId: string | null
    telegramFilePath: string | null
    type: MediaType | null
    status: StoryStatus | null
    createdAt: Date | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type StoryCountAggregateOutputType = {
    id: number
    userId: number
    telegramFileId: number
    telegramFilePath: number
    type: number
    status: number
    createdAt: number
    publishedAt: number
    updatedAt: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StorySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StoryMinAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    status?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type StoryMaxAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    status?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type StoryCountAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    status?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoryAggregateArgs = {
    /**
     * Filter which Story to aggregate.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs = {
    where?: StoryWhereInput
    orderBy?: Enumerable<StoryOrderByWithAggregationInput>
    by: Array<StoryScalarFieldEnum>
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }


  export type StoryGroupByOutputType = {
    id: number
    userId: number
    telegramFileId: string
    telegramFilePath: string | null
    type: MediaType
    status: StoryStatus
    createdAt: Date
    publishedAt: Date | null
    updatedAt: Date
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect = {
    id?: boolean
    userId?: boolean
    telegramFileId?: boolean
    telegramFilePath?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }

  export type StoryInclude = {
    user?: boolean | UserArgs
  }

  export type StoryGetPayload<
    S extends boolean | null | undefined | StoryArgs,
    U = keyof S
      > = S extends true
        ? Story
    : S extends undefined
    ? never
    : S extends StoryArgs | StoryFindManyArgs
    ?'include' extends U
    ? Story  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Story ? Story[P] : never
  } 
    : Story
  : Story


  type StoryCountArgs = Merge<
    Omit<StoryFindManyArgs, 'select' | 'include'> & {
      select?: StoryCountAggregateInputType | true
    }
  >

  export interface StoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Story'> extends True ? CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>> : CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Story'> extends True ? CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>> : CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyWithIdOnly = await prisma.story.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StoryFindManyArgs>(
      args?: SelectSubset<T, StoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Story>>, PrismaPromise<Array<StoryGetPayload<T>>>>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
    **/
    create<T extends StoryCreateArgs>(
      args: SelectSubset<T, StoryCreateArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Create many Stories.
     *     @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     *     @example
     *     // Create many Stories
     *     const story = await prisma.story.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoryCreateManyArgs>(
      args?: SelectSubset<T, StoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
    **/
    delete<T extends StoryDeleteArgs>(
      args: SelectSubset<T, StoryDeleteArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoryUpdateArgs>(
      args: SelectSubset<T, StoryUpdateArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoryDeleteManyArgs>(
      args?: SelectSubset<T, StoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoryUpdateManyArgs>(
      args: SelectSubset<T, StoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
    **/
    upsert<T extends StoryUpsertArgs>(
      args: SelectSubset<T, StoryUpsertArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Throw an Error if a Story can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Story to fetch.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Throw an Error if a Story can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Story to fetch.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     * 
    **/
    distinct?: Enumerable<StoryScalarFieldEnum>
  }


  /**
   * Story findMany
   */
  export type StoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Filter, which Stories to fetch.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StoryScalarFieldEnum>
  }


  /**
   * Story create
   */
  export type StoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The data needed to create a Story.
     * 
    **/
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }


  /**
   * Story createMany
   */
  export type StoryCreateManyArgs = {
    /**
     * The data used to create many Stories.
     * 
    **/
    data: Enumerable<StoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Story update
   */
  export type StoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The data needed to update a Story.
     * 
    **/
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs = {
    /**
     * The data used to update Stories.
     * 
    **/
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     * 
    **/
    where?: StoryWhereInput
  }


  /**
   * Story upsert
   */
  export type StoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The filter to search for the Story to update in case it exists.
     * 
    **/
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     * 
    **/
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }


  /**
   * Story delete
   */
  export type StoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Filter which Story to delete.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs = {
    /**
     * Filter which Stories to delete
     * 
    **/
    where?: StoryWhereInput
  }


  /**
   * Story without action
   */
  export type StoryArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
  }



  /**
   * Model Country
   */


  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flagUrl: string | null
    createdAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flagUrl: string | null
    createdAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    flagUrl: number
    createdAt: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
    _all?: true
  }

  export type CountryAggregateArgs = {
    /**
     * Filter which Country to aggregate.
     * 
    **/
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs = {
    where?: CountryWhereInput
    orderBy?: Enumerable<CountryOrderByWithAggregationInput>
    by: Array<CountryScalarFieldEnum>
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }


  export type CountryGroupByOutputType = {
    id: number
    name: string
    code: string
    flagUrl: string | null
    createdAt: Date
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect = {
    id?: boolean
    name?: boolean
    code?: boolean
    flagUrl?: boolean
    cities?: boolean | CityFindManyArgs
    users?: boolean | UserFindManyArgs
    createdAt?: boolean
    _count?: boolean | CountryCountOutputTypeArgs
  }

  export type CountryInclude = {
    cities?: boolean | CityFindManyArgs
    users?: boolean | UserFindManyArgs
    _count?: boolean | CountryCountOutputTypeArgs
  }

  export type CountryGetPayload<
    S extends boolean | null | undefined | CountryArgs,
    U = keyof S
      > = S extends true
        ? Country
    : S extends undefined
    ? never
    : S extends CountryArgs | CountryFindManyArgs
    ?'include' extends U
    ? Country  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cities' ? Array < CityGetPayload<S['include'][P]>>  :
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? CountryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cities' ? Array < CityGetPayload<S['select'][P]>>  :
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? CountryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Country ? Country[P] : never
  } 
    : Country
  : Country


  type CountryCountArgs = Merge<
    Omit<CountryFindManyArgs, 'select' | 'include'> & {
      select?: CountryCountAggregateInputType | true
    }
  >

  export interface CountryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CountryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Country'> extends True ? CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>> : CheckSelect<T, Prisma__CountryClient<Country | null >, Prisma__CountryClient<CountryGetPayload<T> | null >>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CountryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Country'> extends True ? CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>> : CheckSelect<T, Prisma__CountryClient<Country | null >, Prisma__CountryClient<CountryGetPayload<T> | null >>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryFindManyArgs>(
      args?: SelectSubset<T, CountryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Country>>, PrismaPromise<Array<CountryGetPayload<T>>>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends CountryCreateArgs>(
      args: SelectSubset<T, CountryCreateArgs>
    ): CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>>

    /**
     * Create many Countries.
     *     @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     *     @example
     *     // Create many Countries
     *     const country = await prisma.country.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CountryCreateManyArgs>(
      args?: SelectSubset<T, CountryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends CountryDeleteArgs>(
      args: SelectSubset<T, CountryDeleteArgs>
    ): CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryUpdateArgs>(
      args: SelectSubset<T, CountryUpdateArgs>
    ): CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryDeleteManyArgs>(
      args?: SelectSubset<T, CountryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryUpdateManyArgs>(
      args: SelectSubset<T, CountryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends CountryUpsertArgs>(
      args: SelectSubset<T, CountryUpsertArgs>
    ): CheckSelect<T, Prisma__CountryClient<Country>, Prisma__CountryClient<CountryGetPayload<T>>>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CountryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cities<T extends CityFindManyArgs = {}>(args?: Subset<T, CityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<City>>, PrismaPromise<Array<CityGetPayload<T>>>>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * Throw an Error if a Country can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Country to fetch.
     * 
    **/
    where: CountryWhereUniqueInput
  }


  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * Throw an Error if a Country can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Country to fetch.
     * 
    **/
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     * 
    **/
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     * 
    **/
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * Country findMany
   */
  export type CountryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * Filter, which Countries to fetch.
     * 
    **/
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     * 
    **/
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * Country create
   */
  export type CountryCreateArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * The data needed to create a Country.
     * 
    **/
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }


  /**
   * Country createMany
   */
  export type CountryCreateManyArgs = {
    /**
     * The data used to create many Countries.
     * 
    **/
    data: Enumerable<CountryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Country update
   */
  export type CountryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * The data needed to update a Country.
     * 
    **/
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     * 
    **/
    where: CountryWhereUniqueInput
  }


  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs = {
    /**
     * The data used to update Countries.
     * 
    **/
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     * 
    **/
    where?: CountryWhereInput
  }


  /**
   * Country upsert
   */
  export type CountryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * The filter to search for the Country to update in case it exists.
     * 
    **/
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     * 
    **/
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }


  /**
   * Country delete
   */
  export type CountryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
    /**
     * Filter which Country to delete.
     * 
    **/
    where: CountryWhereUniqueInput
  }


  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs = {
    /**
     * Filter which Countries to delete
     * 
    **/
    where?: CountryWhereInput
  }


  /**
   * Country without action
   */
  export type CountryArgs = {
    /**
     * Select specific fields to fetch from the Country
     * 
    **/
    select?: CountrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryInclude | null
  }



  /**
   * Model City
   */


  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityAvgAggregateOutputType = {
    id: number | null
    population: number | null
    lat: number | null
    lng: number | null
  }

  export type CitySumAggregateOutputType = {
    id: number | null
    population: number | null
    lat: number | null
    lng: number | null
  }

  export type CityMinAggregateOutputType = {
    id: number | null
    name: string | null
    countryCode: string | null
    population: number | null
    lat: number | null
    lng: number | null
    timezone: string | null
    createdAt: Date | null
  }

  export type CityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    countryCode: string | null
    population: number | null
    lat: number | null
    lng: number | null
    timezone: string | null
    createdAt: Date | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    name: number
    countryCode: number
    population: number
    lat: number
    lng: number
    timezone: number
    createdAt: number
    _all: number
  }


  export type CityAvgAggregateInputType = {
    id?: true
    population?: true
    lat?: true
    lng?: true
  }

  export type CitySumAggregateInputType = {
    id?: true
    population?: true
    lat?: true
    lng?: true
  }

  export type CityMinAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
    _all?: true
  }

  export type CityAggregateArgs = {
    /**
     * Filter which City to aggregate.
     * 
    **/
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     * 
    **/
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs = {
    where?: CityWhereInput
    orderBy?: Enumerable<CityOrderByWithAggregationInput>
    by: Array<CityScalarFieldEnum>
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _avg?: CityAvgAggregateInputType
    _sum?: CitySumAggregateInputType
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }


  export type CityGroupByOutputType = {
    id: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone: string | null
    createdAt: Date
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect = {
    id?: boolean
    name?: boolean
    countryCode?: boolean
    country?: boolean | CountryArgs
    population?: boolean
    lat?: boolean
    lng?: boolean
    timezone?: boolean
    users?: boolean | UserFindManyArgs
    createdAt?: boolean
    _count?: boolean | CityCountOutputTypeArgs
  }

  export type CityInclude = {
    country?: boolean | CountryArgs
    users?: boolean | UserFindManyArgs
    _count?: boolean | CityCountOutputTypeArgs
  }

  export type CityGetPayload<
    S extends boolean | null | undefined | CityArgs,
    U = keyof S
      > = S extends true
        ? City
    : S extends undefined
    ? never
    : S extends CityArgs | CityFindManyArgs
    ?'include' extends U
    ? City  & {
    [P in TrueKeys<S['include']>]:
        P extends 'country' ? CountryGetPayload<S['include'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? CityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'country' ? CountryGetPayload<S['select'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? CityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof City ? City[P] : never
  } 
    : City
  : City


  type CityCountArgs = Merge<
    Omit<CityFindManyArgs, 'select' | 'include'> & {
      select?: CityCountAggregateInputType | true
    }
  >

  export interface CityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'City'> extends True ? CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>> : CheckSelect<T, Prisma__CityClient<City | null >, Prisma__CityClient<CityGetPayload<T> | null >>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'City'> extends True ? CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>> : CheckSelect<T, Prisma__CityClient<City | null >, Prisma__CityClient<CityGetPayload<T> | null >>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CityFindManyArgs>(
      args?: SelectSubset<T, CityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<City>>, PrismaPromise<Array<CityGetPayload<T>>>>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
    **/
    create<T extends CityCreateArgs>(
      args: SelectSubset<T, CityCreateArgs>
    ): CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>>

    /**
     * Create many Cities.
     *     @param {CityCreateManyArgs} args - Arguments to create many Cities.
     *     @example
     *     // Create many Cities
     *     const city = await prisma.city.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CityCreateManyArgs>(
      args?: SelectSubset<T, CityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
    **/
    delete<T extends CityDeleteArgs>(
      args: SelectSubset<T, CityDeleteArgs>
    ): CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CityUpdateArgs>(
      args: SelectSubset<T, CityUpdateArgs>
    ): CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CityDeleteManyArgs>(
      args?: SelectSubset<T, CityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CityUpdateManyArgs>(
      args: SelectSubset<T, CityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
    **/
    upsert<T extends CityUpsertArgs>(
      args: SelectSubset<T, CityUpsertArgs>
    ): CheckSelect<T, Prisma__CityClient<City>, Prisma__CityClient<CityGetPayload<T>>>

    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    country<T extends CountryArgs = {}>(args?: Subset<T, CountryArgs>): CheckSelect<T, Prisma__CountryClient<Country | null >, Prisma__CountryClient<CountryGetPayload<T> | null >>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * City findUnique
   */
  export type CityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * Throw an Error if a City can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which City to fetch.
     * 
    **/
    where: CityWhereUniqueInput
  }


  /**
   * City findFirst
   */
  export type CityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * Throw an Error if a City can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which City to fetch.
     * 
    **/
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     * 
    **/
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     * 
    **/
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     * 
    **/
    distinct?: Enumerable<CityScalarFieldEnum>
  }


  /**
   * City findMany
   */
  export type CityFindManyArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * Filter, which Cities to fetch.
     * 
    **/
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     * 
    **/
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     * 
    **/
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CityScalarFieldEnum>
  }


  /**
   * City create
   */
  export type CityCreateArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * The data needed to create a City.
     * 
    **/
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }


  /**
   * City createMany
   */
  export type CityCreateManyArgs = {
    /**
     * The data used to create many Cities.
     * 
    **/
    data: Enumerable<CityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * City update
   */
  export type CityUpdateArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * The data needed to update a City.
     * 
    **/
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     * 
    **/
    where: CityWhereUniqueInput
  }


  /**
   * City updateMany
   */
  export type CityUpdateManyArgs = {
    /**
     * The data used to update Cities.
     * 
    **/
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     * 
    **/
    where?: CityWhereInput
  }


  /**
   * City upsert
   */
  export type CityUpsertArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * The filter to search for the City to update in case it exists.
     * 
    **/
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     * 
    **/
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }


  /**
   * City delete
   */
  export type CityDeleteArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
    /**
     * Filter which City to delete.
     * 
    **/
    where: CityWhereUniqueInput
  }


  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs = {
    /**
     * Filter which Cities to delete
     * 
    **/
    where?: CityWhereInput
  }


  /**
   * City without action
   */
  export type CityArgs = {
    /**
     * Select specific fields to fetch from the City
     * 
    **/
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CityInclude | null
  }



  /**
   * Model Sport
   */


  export type AggregateSport = {
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  export type SportAvgAggregateOutputType = {
    id: number | null
  }

  export type SportSumAggregateOutputType = {
    id: number | null
  }

  export type SportMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    emoji: string | null
    createdAt: Date | null
  }

  export type SportMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    emoji: string | null
    createdAt: Date | null
  }

  export type SportCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    emoji: number
    createdAt: number
    _all: number
  }


  export type SportAvgAggregateInputType = {
    id?: true
  }

  export type SportSumAggregateInputType = {
    id?: true
  }

  export type SportMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    createdAt?: true
  }

  export type SportMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    createdAt?: true
  }

  export type SportCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    createdAt?: true
    _all?: true
  }

  export type SportAggregateArgs = {
    /**
     * Filter which Sport to aggregate.
     * 
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     * 
    **/
    orderBy?: Enumerable<SportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sports
    **/
    _count?: true | SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SportMaxAggregateInputType
  }

  export type GetSportAggregateType<T extends SportAggregateArgs> = {
        [P in keyof T & keyof AggregateSport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSport[P]>
      : GetScalarType<T[P], AggregateSport[P]>
  }




  export type SportGroupByArgs = {
    where?: SportWhereInput
    orderBy?: Enumerable<SportOrderByWithAggregationInput>
    by: Array<SportScalarFieldEnum>
    having?: SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SportCountAggregateInputType | true
    _avg?: SportAvgAggregateInputType
    _sum?: SportSumAggregateInputType
    _min?: SportMinAggregateInputType
    _max?: SportMaxAggregateInputType
  }


  export type SportGroupByOutputType = {
    id: number
    title: string
    slug: string
    emoji: string | null
    createdAt: Date
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  type GetSportGroupByPayload<T extends SportGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SportGroupByOutputType[P]>
            : GetScalarType<T[P], SportGroupByOutputType[P]>
        }
      >
    >


  export type SportSelect = {
    id?: boolean
    title?: boolean
    slug?: boolean
    emoji?: boolean
    users?: boolean | UserFindManyArgs
    createdAt?: boolean
    _count?: boolean | SportCountOutputTypeArgs
  }

  export type SportInclude = {
    users?: boolean | UserFindManyArgs
    _count?: boolean | SportCountOutputTypeArgs
  }

  export type SportGetPayload<
    S extends boolean | null | undefined | SportArgs,
    U = keyof S
      > = S extends true
        ? Sport
    : S extends undefined
    ? never
    : S extends SportArgs | SportFindManyArgs
    ?'include' extends U
    ? Sport  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? SportCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? SportCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Sport ? Sport[P] : never
  } 
    : Sport
  : Sport


  type SportCountArgs = Merge<
    Omit<SportFindManyArgs, 'select' | 'include'> & {
      select?: SportCountAggregateInputType | true
    }
  >

  export interface SportDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sport that matches the filter.
     * @param {SportFindUniqueArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sport'> extends True ? CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>> : CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>

    /**
     * Find the first Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sport'> extends True ? CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>> : CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>

    /**
     * Find zero or more Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sports
     * const sports = await prisma.sport.findMany()
     * 
     * // Get first 10 Sports
     * const sports = await prisma.sport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sportWithIdOnly = await prisma.sport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SportFindManyArgs>(
      args?: SelectSubset<T, SportFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sport>>, PrismaPromise<Array<SportGetPayload<T>>>>

    /**
     * Create a Sport.
     * @param {SportCreateArgs} args - Arguments to create a Sport.
     * @example
     * // Create one Sport
     * const Sport = await prisma.sport.create({
     *   data: {
     *     // ... data to create a Sport
     *   }
     * })
     * 
    **/
    create<T extends SportCreateArgs>(
      args: SelectSubset<T, SportCreateArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Create many Sports.
     *     @param {SportCreateManyArgs} args - Arguments to create many Sports.
     *     @example
     *     // Create many Sports
     *     const sport = await prisma.sport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SportCreateManyArgs>(
      args?: SelectSubset<T, SportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sport.
     * @param {SportDeleteArgs} args - Arguments to delete one Sport.
     * @example
     * // Delete one Sport
     * const Sport = await prisma.sport.delete({
     *   where: {
     *     // ... filter to delete one Sport
     *   }
     * })
     * 
    **/
    delete<T extends SportDeleteArgs>(
      args: SelectSubset<T, SportDeleteArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Update one Sport.
     * @param {SportUpdateArgs} args - Arguments to update one Sport.
     * @example
     * // Update one Sport
     * const sport = await prisma.sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SportUpdateArgs>(
      args: SelectSubset<T, SportUpdateArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Delete zero or more Sports.
     * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
     * @example
     * // Delete a few Sports
     * const { count } = await prisma.sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SportDeleteManyArgs>(
      args?: SelectSubset<T, SportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SportUpdateManyArgs>(
      args: SelectSubset<T, SportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sport.
     * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
     * @example
     * // Update or create a Sport
     * const sport = await prisma.sport.upsert({
     *   create: {
     *     // ... data to create a Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sport we want to update
     *   }
     * })
    **/
    upsert<T extends SportUpsertArgs>(
      args: SelectSubset<T, SportUpsertArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Count the number of Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportCountArgs} args - Arguments to filter Sports to count.
     * @example
     * // Count the number of Sports
     * const count = await prisma.sport.count({
     *   where: {
     *     // ... the filter for the Sports we want to count
     *   }
     * })
    **/
    count<T extends SportCountArgs>(
      args?: Subset<T, SportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SportAggregateArgs>(args: Subset<T, SportAggregateArgs>): PrismaPromise<GetSportAggregateType<T>>

    /**
     * Group by Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SportGroupByArgs['orderBy'] }
        : { orderBy?: SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSportGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SportClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sport findUnique
   */
  export type SportFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * Throw an Error if a Sport can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sport to fetch.
     * 
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport findFirst
   */
  export type SportFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * Throw an Error if a Sport can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sport to fetch.
     * 
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     * 
    **/
    orderBy?: Enumerable<SportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     * 
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     * 
    **/
    distinct?: Enumerable<SportScalarFieldEnum>
  }


  /**
   * Sport findMany
   */
  export type SportFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * Filter, which Sports to fetch.
     * 
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     * 
    **/
    orderBy?: Enumerable<SportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sports.
     * 
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SportScalarFieldEnum>
  }


  /**
   * Sport create
   */
  export type SportCreateArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * The data needed to create a Sport.
     * 
    **/
    data: XOR<SportCreateInput, SportUncheckedCreateInput>
  }


  /**
   * Sport createMany
   */
  export type SportCreateManyArgs = {
    /**
     * The data used to create many Sports.
     * 
    **/
    data: Enumerable<SportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sport update
   */
  export type SportUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * The data needed to update a Sport.
     * 
    **/
    data: XOR<SportUpdateInput, SportUncheckedUpdateInput>
    /**
     * Choose, which Sport to update.
     * 
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport updateMany
   */
  export type SportUpdateManyArgs = {
    /**
     * The data used to update Sports.
     * 
    **/
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    /**
     * Filter which Sports to update
     * 
    **/
    where?: SportWhereInput
  }


  /**
   * Sport upsert
   */
  export type SportUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * The filter to search for the Sport to update in case it exists.
     * 
    **/
    where: SportWhereUniqueInput
    /**
     * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
     * 
    **/
    create: XOR<SportCreateInput, SportUncheckedCreateInput>
    /**
     * In case the Sport was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SportUpdateInput, SportUncheckedUpdateInput>
  }


  /**
   * Sport delete
   */
  export type SportDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
    /**
     * Filter which Sport to delete.
     * 
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport deleteMany
   */
  export type SportDeleteManyArgs = {
    /**
     * Filter which Sports to delete
     * 
    **/
    where?: SportWhereInput
  }


  /**
   * Sport without action
   */
  export type SportArgs = {
    /**
     * Select specific fields to fetch from the Sport
     * 
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SportInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    cityId: number | null
    sportId: number | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    cityId: number | null
    sportId: number | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: Role | null
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    updatedAt: Date | null
    createdAt: Date | null
    authSource: AuthSource | null
    lastLogin: Date | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: Role | null
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    updatedAt: Date | null
    createdAt: Date | null
    authSource: AuthSource | null
    lastLogin: Date | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    telegramId: number
    username: number
    firstName: number
    lastName: number
    isVerified: number
    role: number
    countryCode: number
    cityId: number
    sportId: number
    updatedAt: number
    createdAt: number
    authSource: number
    lastLogin: number
    ballsBalance: number
    casesOpened: number
    telegramChatId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    cityId?: true
    sportId?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    cityId?: true
    sportId?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    telegramId: string
    username: string
    firstName: string
    lastName: string | null
    isVerified: boolean
    role: Role
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    updatedAt: Date
    createdAt: Date
    authSource: AuthSource
    lastLogin: Date | null
    ballsBalance: number
    casesOpened: number
    telegramChatId: bigint | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    telegramId?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    isVerified?: boolean
    role?: boolean
    countryCode?: boolean
    country?: boolean | CountryArgs
    cityId?: boolean
    city?: boolean | CityArgs
    sportId?: boolean
    sport?: boolean | SportArgs
    profile?: boolean | UserProfileArgs
    matches?: boolean | MatchFindManyArgs
    createdMatches?: boolean | MatchFindManyArgs
    createdTrainings?: boolean | TrainingFindManyArgs
    createdTrainingSessions?: boolean | TrainingSessionFindManyArgs
    createdTournaments?: boolean | TournamentFindManyArgs
    sentInvites?: boolean | InviteFindManyArgs
    receivedInvites?: boolean | InviteFindManyArgs
    notifications?: boolean | NotificationFindManyArgs
    tournaments?: boolean | TournamentFindManyArgs
    createdRequests?: boolean | GameRequestFindManyArgs
    requestParticipations?: boolean | GameRequestFindManyArgs
    requestResponses?: boolean | RequestResponseFindManyArgs
    trainingSessionParticipations?: boolean | TrainingSessionFindManyArgs
    updatedAt?: boolean
    createdAt?: boolean
    authSource?: boolean
    lastLogin?: boolean
    ballsBalance?: boolean
    casesOpened?: boolean
    telegramChatId?: boolean
    ballTransactions?: boolean | BallTransactionFindManyArgs
    caseOpenings?: boolean | CaseOpeningFindManyArgs
    stories?: boolean | StoryFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    country?: boolean | CountryArgs
    city?: boolean | CityArgs
    sport?: boolean | SportArgs
    profile?: boolean | UserProfileArgs
    matches?: boolean | MatchFindManyArgs
    createdMatches?: boolean | MatchFindManyArgs
    createdTrainings?: boolean | TrainingFindManyArgs
    createdTrainingSessions?: boolean | TrainingSessionFindManyArgs
    createdTournaments?: boolean | TournamentFindManyArgs
    sentInvites?: boolean | InviteFindManyArgs
    receivedInvites?: boolean | InviteFindManyArgs
    notifications?: boolean | NotificationFindManyArgs
    tournaments?: boolean | TournamentFindManyArgs
    createdRequests?: boolean | GameRequestFindManyArgs
    requestParticipations?: boolean | GameRequestFindManyArgs
    requestResponses?: boolean | RequestResponseFindManyArgs
    trainingSessionParticipations?: boolean | TrainingSessionFindManyArgs
    ballTransactions?: boolean | BallTransactionFindManyArgs
    caseOpenings?: boolean | CaseOpeningFindManyArgs
    stories?: boolean | StoryFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'country' ? CountryGetPayload<S['include'][P]> | null :
        P extends 'city' ? CityGetPayload<S['include'][P]> | null :
        P extends 'sport' ? SportGetPayload<S['include'][P]> | null :
        P extends 'profile' ? UserProfileGetPayload<S['include'][P]> | null :
        P extends 'matches' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'createdMatches' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'createdTrainings' ? Array < TrainingGetPayload<S['include'][P]>>  :
        P extends 'createdTrainingSessions' ? Array < TrainingSessionGetPayload<S['include'][P]>>  :
        P extends 'createdTournaments' ? Array < TournamentGetPayload<S['include'][P]>>  :
        P extends 'sentInvites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends 'receivedInvites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends 'notifications' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends 'tournaments' ? Array < TournamentGetPayload<S['include'][P]>>  :
        P extends 'createdRequests' ? Array < GameRequestGetPayload<S['include'][P]>>  :
        P extends 'requestParticipations' ? Array < GameRequestGetPayload<S['include'][P]>>  :
        P extends 'requestResponses' ? Array < RequestResponseGetPayload<S['include'][P]>>  :
        P extends 'trainingSessionParticipations' ? Array < TrainingSessionGetPayload<S['include'][P]>>  :
        P extends 'ballTransactions' ? Array < BallTransactionGetPayload<S['include'][P]>>  :
        P extends 'caseOpenings' ? Array < CaseOpeningGetPayload<S['include'][P]>>  :
        P extends 'stories' ? Array < StoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'country' ? CountryGetPayload<S['select'][P]> | null :
        P extends 'city' ? CityGetPayload<S['select'][P]> | null :
        P extends 'sport' ? SportGetPayload<S['select'][P]> | null :
        P extends 'profile' ? UserProfileGetPayload<S['select'][P]> | null :
        P extends 'matches' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'createdMatches' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'createdTrainings' ? Array < TrainingGetPayload<S['select'][P]>>  :
        P extends 'createdTrainingSessions' ? Array < TrainingSessionGetPayload<S['select'][P]>>  :
        P extends 'createdTournaments' ? Array < TournamentGetPayload<S['select'][P]>>  :
        P extends 'sentInvites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends 'receivedInvites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends 'notifications' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends 'tournaments' ? Array < TournamentGetPayload<S['select'][P]>>  :
        P extends 'createdRequests' ? Array < GameRequestGetPayload<S['select'][P]>>  :
        P extends 'requestParticipations' ? Array < GameRequestGetPayload<S['select'][P]>>  :
        P extends 'requestResponses' ? Array < RequestResponseGetPayload<S['select'][P]>>  :
        P extends 'trainingSessionParticipations' ? Array < TrainingSessionGetPayload<S['select'][P]>>  :
        P extends 'ballTransactions' ? Array < BallTransactionGetPayload<S['select'][P]>>  :
        P extends 'caseOpenings' ? Array < CaseOpeningGetPayload<S['select'][P]>>  :
        P extends 'stories' ? Array < StoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    country<T extends CountryArgs = {}>(args?: Subset<T, CountryArgs>): CheckSelect<T, Prisma__CountryClient<Country | null >, Prisma__CountryClient<CountryGetPayload<T> | null >>;

    city<T extends CityArgs = {}>(args?: Subset<T, CityArgs>): CheckSelect<T, Prisma__CityClient<City | null >, Prisma__CityClient<CityGetPayload<T> | null >>;

    sport<T extends SportArgs = {}>(args?: Subset<T, SportArgs>): CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>;

    profile<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    matches<T extends MatchFindManyArgs = {}>(args?: Subset<T, MatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>;

    createdMatches<T extends MatchFindManyArgs = {}>(args?: Subset<T, MatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>;

    createdTrainings<T extends TrainingFindManyArgs = {}>(args?: Subset<T, TrainingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Training>>, PrismaPromise<Array<TrainingGetPayload<T>>>>;

    createdTrainingSessions<T extends TrainingSessionFindManyArgs = {}>(args?: Subset<T, TrainingSessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TrainingSession>>, PrismaPromise<Array<TrainingSessionGetPayload<T>>>>;

    createdTournaments<T extends TournamentFindManyArgs = {}>(args?: Subset<T, TournamentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>;

    sentInvites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    receivedInvites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    notifications<T extends NotificationFindManyArgs = {}>(args?: Subset<T, NotificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>;

    tournaments<T extends TournamentFindManyArgs = {}>(args?: Subset<T, TournamentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>;

    createdRequests<T extends GameRequestFindManyArgs = {}>(args?: Subset<T, GameRequestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GameRequest>>, PrismaPromise<Array<GameRequestGetPayload<T>>>>;

    requestParticipations<T extends GameRequestFindManyArgs = {}>(args?: Subset<T, GameRequestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GameRequest>>, PrismaPromise<Array<GameRequestGetPayload<T>>>>;

    requestResponses<T extends RequestResponseFindManyArgs = {}>(args?: Subset<T, RequestResponseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequestResponse>>, PrismaPromise<Array<RequestResponseGetPayload<T>>>>;

    trainingSessionParticipations<T extends TrainingSessionFindManyArgs = {}>(args?: Subset<T, TrainingSessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TrainingSession>>, PrismaPromise<Array<TrainingSessionGetPayload<T>>>>;

    ballTransactions<T extends BallTransactionFindManyArgs = {}>(args?: Subset<T, BallTransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BallTransaction>>, PrismaPromise<Array<BallTransactionGetPayload<T>>>>;

    caseOpenings<T extends CaseOpeningFindManyArgs = {}>(args?: Subset<T, CaseOpeningFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CaseOpening>>, PrismaPromise<Array<CaseOpeningGetPayload<T>>>>;

    stories<T extends StoryFindManyArgs = {}>(args?: Subset<T, StoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Story>>, PrismaPromise<Array<StoryGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model BallTransaction
   */


  export type AggregateBallTransaction = {
    _count: BallTransactionCountAggregateOutputType | null
    _avg: BallTransactionAvgAggregateOutputType | null
    _sum: BallTransactionSumAggregateOutputType | null
    _min: BallTransactionMinAggregateOutputType | null
    _max: BallTransactionMaxAggregateOutputType | null
  }

  export type BallTransactionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
  }

  export type BallTransactionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
  }

  export type BallTransactionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    description: string | null
    type: string | null
    createdAt: Date | null
  }

  export type BallTransactionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    description: string | null
    type: string | null
    createdAt: Date | null
  }

  export type BallTransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    description: number
    type: number
    createdAt: number
    _all: number
  }


  export type BallTransactionAvgAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type BallTransactionSumAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type BallTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    description?: true
    type?: true
    createdAt?: true
  }

  export type BallTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    description?: true
    type?: true
    createdAt?: true
  }

  export type BallTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    description?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type BallTransactionAggregateArgs = {
    /**
     * Filter which BallTransaction to aggregate.
     * 
    **/
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<BallTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BallTransactions
    **/
    _count?: true | BallTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BallTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BallTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BallTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BallTransactionMaxAggregateInputType
  }

  export type GetBallTransactionAggregateType<T extends BallTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateBallTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBallTransaction[P]>
      : GetScalarType<T[P], AggregateBallTransaction[P]>
  }




  export type BallTransactionGroupByArgs = {
    where?: BallTransactionWhereInput
    orderBy?: Enumerable<BallTransactionOrderByWithAggregationInput>
    by: Array<BallTransactionScalarFieldEnum>
    having?: BallTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BallTransactionCountAggregateInputType | true
    _avg?: BallTransactionAvgAggregateInputType
    _sum?: BallTransactionSumAggregateInputType
    _min?: BallTransactionMinAggregateInputType
    _max?: BallTransactionMaxAggregateInputType
  }


  export type BallTransactionGroupByOutputType = {
    id: number
    userId: number
    amount: number
    description: string
    type: string
    createdAt: Date
    _count: BallTransactionCountAggregateOutputType | null
    _avg: BallTransactionAvgAggregateOutputType | null
    _sum: BallTransactionSumAggregateOutputType | null
    _min: BallTransactionMinAggregateOutputType | null
    _max: BallTransactionMaxAggregateOutputType | null
  }

  type GetBallTransactionGroupByPayload<T extends BallTransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BallTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BallTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BallTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], BallTransactionGroupByOutputType[P]>
        }
      >
    >


  export type BallTransactionSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    amount?: boolean
    description?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type BallTransactionInclude = {
    user?: boolean | UserArgs
  }

  export type BallTransactionGetPayload<
    S extends boolean | null | undefined | BallTransactionArgs,
    U = keyof S
      > = S extends true
        ? BallTransaction
    : S extends undefined
    ? never
    : S extends BallTransactionArgs | BallTransactionFindManyArgs
    ?'include' extends U
    ? BallTransaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof BallTransaction ? BallTransaction[P] : never
  } 
    : BallTransaction
  : BallTransaction


  type BallTransactionCountArgs = Merge<
    Omit<BallTransactionFindManyArgs, 'select' | 'include'> & {
      select?: BallTransactionCountAggregateInputType | true
    }
  >

  export interface BallTransactionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BallTransaction that matches the filter.
     * @param {BallTransactionFindUniqueArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BallTransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BallTransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BallTransaction'> extends True ? CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>> : CheckSelect<T, Prisma__BallTransactionClient<BallTransaction | null >, Prisma__BallTransactionClient<BallTransactionGetPayload<T> | null >>

    /**
     * Find the first BallTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionFindFirstArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BallTransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BallTransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BallTransaction'> extends True ? CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>> : CheckSelect<T, Prisma__BallTransactionClient<BallTransaction | null >, Prisma__BallTransactionClient<BallTransactionGetPayload<T> | null >>

    /**
     * Find zero or more BallTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BallTransactions
     * const ballTransactions = await prisma.ballTransaction.findMany()
     * 
     * // Get first 10 BallTransactions
     * const ballTransactions = await prisma.ballTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ballTransactionWithIdOnly = await prisma.ballTransaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BallTransactionFindManyArgs>(
      args?: SelectSubset<T, BallTransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BallTransaction>>, PrismaPromise<Array<BallTransactionGetPayload<T>>>>

    /**
     * Create a BallTransaction.
     * @param {BallTransactionCreateArgs} args - Arguments to create a BallTransaction.
     * @example
     * // Create one BallTransaction
     * const BallTransaction = await prisma.ballTransaction.create({
     *   data: {
     *     // ... data to create a BallTransaction
     *   }
     * })
     * 
    **/
    create<T extends BallTransactionCreateArgs>(
      args: SelectSubset<T, BallTransactionCreateArgs>
    ): CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>>

    /**
     * Create many BallTransactions.
     *     @param {BallTransactionCreateManyArgs} args - Arguments to create many BallTransactions.
     *     @example
     *     // Create many BallTransactions
     *     const ballTransaction = await prisma.ballTransaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BallTransactionCreateManyArgs>(
      args?: SelectSubset<T, BallTransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BallTransaction.
     * @param {BallTransactionDeleteArgs} args - Arguments to delete one BallTransaction.
     * @example
     * // Delete one BallTransaction
     * const BallTransaction = await prisma.ballTransaction.delete({
     *   where: {
     *     // ... filter to delete one BallTransaction
     *   }
     * })
     * 
    **/
    delete<T extends BallTransactionDeleteArgs>(
      args: SelectSubset<T, BallTransactionDeleteArgs>
    ): CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>>

    /**
     * Update one BallTransaction.
     * @param {BallTransactionUpdateArgs} args - Arguments to update one BallTransaction.
     * @example
     * // Update one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BallTransactionUpdateArgs>(
      args: SelectSubset<T, BallTransactionUpdateArgs>
    ): CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>>

    /**
     * Delete zero or more BallTransactions.
     * @param {BallTransactionDeleteManyArgs} args - Arguments to filter BallTransactions to delete.
     * @example
     * // Delete a few BallTransactions
     * const { count } = await prisma.ballTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BallTransactionDeleteManyArgs>(
      args?: SelectSubset<T, BallTransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BallTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BallTransactions
     * const ballTransaction = await prisma.ballTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BallTransactionUpdateManyArgs>(
      args: SelectSubset<T, BallTransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BallTransaction.
     * @param {BallTransactionUpsertArgs} args - Arguments to update or create a BallTransaction.
     * @example
     * // Update or create a BallTransaction
     * const ballTransaction = await prisma.ballTransaction.upsert({
     *   create: {
     *     // ... data to create a BallTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BallTransaction we want to update
     *   }
     * })
    **/
    upsert<T extends BallTransactionUpsertArgs>(
      args: SelectSubset<T, BallTransactionUpsertArgs>
    ): CheckSelect<T, Prisma__BallTransactionClient<BallTransaction>, Prisma__BallTransactionClient<BallTransactionGetPayload<T>>>

    /**
     * Count the number of BallTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionCountArgs} args - Arguments to filter BallTransactions to count.
     * @example
     * // Count the number of BallTransactions
     * const count = await prisma.ballTransaction.count({
     *   where: {
     *     // ... the filter for the BallTransactions we want to count
     *   }
     * })
    **/
    count<T extends BallTransactionCountArgs>(
      args?: Subset<T, BallTransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BallTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BallTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BallTransactionAggregateArgs>(args: Subset<T, BallTransactionAggregateArgs>): PrismaPromise<GetBallTransactionAggregateType<T>>

    /**
     * Group by BallTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BallTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BallTransactionGroupByArgs['orderBy'] }
        : { orderBy?: BallTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BallTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBallTransactionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BallTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BallTransactionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BallTransaction findUnique
   */
  export type BallTransactionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * Throw an Error if a BallTransaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BallTransaction to fetch.
     * 
    **/
    where: BallTransactionWhereUniqueInput
  }


  /**
   * BallTransaction findFirst
   */
  export type BallTransactionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * Throw an Error if a BallTransaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BallTransaction to fetch.
     * 
    **/
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<BallTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BallTransactions.
     * 
    **/
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BallTransactions.
     * 
    **/
    distinct?: Enumerable<BallTransactionScalarFieldEnum>
  }


  /**
   * BallTransaction findMany
   */
  export type BallTransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * Filter, which BallTransactions to fetch.
     * 
    **/
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<BallTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BallTransactions.
     * 
    **/
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BallTransactionScalarFieldEnum>
  }


  /**
   * BallTransaction create
   */
  export type BallTransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * The data needed to create a BallTransaction.
     * 
    **/
    data: XOR<BallTransactionCreateInput, BallTransactionUncheckedCreateInput>
  }


  /**
   * BallTransaction createMany
   */
  export type BallTransactionCreateManyArgs = {
    /**
     * The data used to create many BallTransactions.
     * 
    **/
    data: Enumerable<BallTransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BallTransaction update
   */
  export type BallTransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * The data needed to update a BallTransaction.
     * 
    **/
    data: XOR<BallTransactionUpdateInput, BallTransactionUncheckedUpdateInput>
    /**
     * Choose, which BallTransaction to update.
     * 
    **/
    where: BallTransactionWhereUniqueInput
  }


  /**
   * BallTransaction updateMany
   */
  export type BallTransactionUpdateManyArgs = {
    /**
     * The data used to update BallTransactions.
     * 
    **/
    data: XOR<BallTransactionUpdateManyMutationInput, BallTransactionUncheckedUpdateManyInput>
    /**
     * Filter which BallTransactions to update
     * 
    **/
    where?: BallTransactionWhereInput
  }


  /**
   * BallTransaction upsert
   */
  export type BallTransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * The filter to search for the BallTransaction to update in case it exists.
     * 
    **/
    where: BallTransactionWhereUniqueInput
    /**
     * In case the BallTransaction found by the `where` argument doesn't exist, create a new BallTransaction with this data.
     * 
    **/
    create: XOR<BallTransactionCreateInput, BallTransactionUncheckedCreateInput>
    /**
     * In case the BallTransaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BallTransactionUpdateInput, BallTransactionUncheckedUpdateInput>
  }


  /**
   * BallTransaction delete
   */
  export type BallTransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
    /**
     * Filter which BallTransaction to delete.
     * 
    **/
    where: BallTransactionWhereUniqueInput
  }


  /**
   * BallTransaction deleteMany
   */
  export type BallTransactionDeleteManyArgs = {
    /**
     * Filter which BallTransactions to delete
     * 
    **/
    where?: BallTransactionWhereInput
  }


  /**
   * BallTransaction without action
   */
  export type BallTransactionArgs = {
    /**
     * Select specific fields to fetch from the BallTransaction
     * 
    **/
    select?: BallTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BallTransactionInclude | null
  }



  /**
   * Model Case
   */


  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CaseSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CaseMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    image: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    image: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    image: number
    rewards: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type CaseSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type CaseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
    rewards?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseAggregateArgs = {
    /**
     * Filter which Case to aggregate.
     * 
    **/
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs = {
    where?: CaseWhereInput
    orderBy?: Enumerable<CaseOrderByWithAggregationInput>
    by: Array<CaseScalarFieldEnum>
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _avg?: CaseAvgAggregateInputType
    _sum?: CaseSumAggregateInputType
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }


  export type CaseGroupByOutputType = {
    id: number
    name: string
    description: string
    price: number
    image: string | null
    rewards: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    image?: boolean
    rewards?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    openings?: boolean | CaseOpeningFindManyArgs
    _count?: boolean | CaseCountOutputTypeArgs
  }

  export type CaseInclude = {
    openings?: boolean | CaseOpeningFindManyArgs
    _count?: boolean | CaseCountOutputTypeArgs
  }

  export type CaseGetPayload<
    S extends boolean | null | undefined | CaseArgs,
    U = keyof S
      > = S extends true
        ? Case
    : S extends undefined
    ? never
    : S extends CaseArgs | CaseFindManyArgs
    ?'include' extends U
    ? Case  & {
    [P in TrueKeys<S['include']>]:
        P extends 'openings' ? Array < CaseOpeningGetPayload<S['include'][P]>>  :
        P extends '_count' ? CaseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'openings' ? Array < CaseOpeningGetPayload<S['select'][P]>>  :
        P extends '_count' ? CaseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Case ? Case[P] : never
  } 
    : Case
  : Case


  type CaseCountArgs = Merge<
    Omit<CaseFindManyArgs, 'select' | 'include'> & {
      select?: CaseCountAggregateInputType | true
    }
  >

  export interface CaseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Case'> extends True ? CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>> : CheckSelect<T, Prisma__CaseClient<Case | null >, Prisma__CaseClient<CaseGetPayload<T> | null >>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Case'> extends True ? CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>> : CheckSelect<T, Prisma__CaseClient<Case | null >, Prisma__CaseClient<CaseGetPayload<T> | null >>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CaseFindManyArgs>(
      args?: SelectSubset<T, CaseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Case>>, PrismaPromise<Array<CaseGetPayload<T>>>>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
    **/
    create<T extends CaseCreateArgs>(
      args: SelectSubset<T, CaseCreateArgs>
    ): CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>>

    /**
     * Create many Cases.
     *     @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     *     @example
     *     // Create many Cases
     *     const case = await prisma.case.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CaseCreateManyArgs>(
      args?: SelectSubset<T, CaseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
    **/
    delete<T extends CaseDeleteArgs>(
      args: SelectSubset<T, CaseDeleteArgs>
    ): CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CaseUpdateArgs>(
      args: SelectSubset<T, CaseUpdateArgs>
    ): CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CaseDeleteManyArgs>(
      args?: SelectSubset<T, CaseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CaseUpdateManyArgs>(
      args: SelectSubset<T, CaseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
    **/
    upsert<T extends CaseUpsertArgs>(
      args: SelectSubset<T, CaseUpsertArgs>
    ): CheckSelect<T, Prisma__CaseClient<Case>, Prisma__CaseClient<CaseGetPayload<T>>>

    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CaseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    openings<T extends CaseOpeningFindManyArgs = {}>(args?: Subset<T, CaseOpeningFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CaseOpening>>, PrismaPromise<Array<CaseOpeningGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * Throw an Error if a Case can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Case to fetch.
     * 
    **/
    where: CaseWhereUniqueInput
  }


  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * Throw an Error if a Case can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Case to fetch.
     * 
    **/
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     * 
    **/
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     * 
    **/
    distinct?: Enumerable<CaseScalarFieldEnum>
  }


  /**
   * Case findMany
   */
  export type CaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * Filter, which Cases to fetch.
     * 
    **/
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     * 
    **/
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CaseScalarFieldEnum>
  }


  /**
   * Case create
   */
  export type CaseCreateArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * The data needed to create a Case.
     * 
    **/
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }


  /**
   * Case createMany
   */
  export type CaseCreateManyArgs = {
    /**
     * The data used to create many Cases.
     * 
    **/
    data: Enumerable<CaseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Case update
   */
  export type CaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * The data needed to update a Case.
     * 
    **/
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     * 
    **/
    where: CaseWhereUniqueInput
  }


  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs = {
    /**
     * The data used to update Cases.
     * 
    **/
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     * 
    **/
    where?: CaseWhereInput
  }


  /**
   * Case upsert
   */
  export type CaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * The filter to search for the Case to update in case it exists.
     * 
    **/
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     * 
    **/
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }


  /**
   * Case delete
   */
  export type CaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
    /**
     * Filter which Case to delete.
     * 
    **/
    where: CaseWhereUniqueInput
  }


  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs = {
    /**
     * Filter which Cases to delete
     * 
    **/
    where?: CaseWhereInput
  }


  /**
   * Case without action
   */
  export type CaseArgs = {
    /**
     * Select specific fields to fetch from the Case
     * 
    **/
    select?: CaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseInclude | null
  }



  /**
   * Model CaseOpening
   */


  export type AggregateCaseOpening = {
    _count: CaseOpeningCountAggregateOutputType | null
    _avg: CaseOpeningAvgAggregateOutputType | null
    _sum: CaseOpeningSumAggregateOutputType | null
    _min: CaseOpeningMinAggregateOutputType | null
    _max: CaseOpeningMaxAggregateOutputType | null
  }

  export type CaseOpeningAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
  }

  export type CaseOpeningSumAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
  }

  export type CaseOpeningMinAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    createdAt: Date | null
  }

  export type CaseOpeningMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    createdAt: Date | null
  }

  export type CaseOpeningCountAggregateOutputType = {
    id: number
    userId: number
    caseId: number
    reward: number
    createdAt: number
    _all: number
  }


  export type CaseOpeningAvgAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
  }

  export type CaseOpeningSumAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
  }

  export type CaseOpeningMinAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    createdAt?: true
  }

  export type CaseOpeningMaxAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    createdAt?: true
  }

  export type CaseOpeningCountAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    reward?: true
    createdAt?: true
    _all?: true
  }

  export type CaseOpeningAggregateArgs = {
    /**
     * Filter which CaseOpening to aggregate.
     * 
    **/
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOpeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseOpenings
    **/
    _count?: true | CaseOpeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseOpeningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseOpeningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseOpeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseOpeningMaxAggregateInputType
  }

  export type GetCaseOpeningAggregateType<T extends CaseOpeningAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseOpening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseOpening[P]>
      : GetScalarType<T[P], AggregateCaseOpening[P]>
  }




  export type CaseOpeningGroupByArgs = {
    where?: CaseOpeningWhereInput
    orderBy?: Enumerable<CaseOpeningOrderByWithAggregationInput>
    by: Array<CaseOpeningScalarFieldEnum>
    having?: CaseOpeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseOpeningCountAggregateInputType | true
    _avg?: CaseOpeningAvgAggregateInputType
    _sum?: CaseOpeningSumAggregateInputType
    _min?: CaseOpeningMinAggregateInputType
    _max?: CaseOpeningMaxAggregateInputType
  }


  export type CaseOpeningGroupByOutputType = {
    id: number
    userId: number
    caseId: number
    reward: JsonValue
    createdAt: Date
    _count: CaseOpeningCountAggregateOutputType | null
    _avg: CaseOpeningAvgAggregateOutputType | null
    _sum: CaseOpeningSumAggregateOutputType | null
    _min: CaseOpeningMinAggregateOutputType | null
    _max: CaseOpeningMaxAggregateOutputType | null
  }

  type GetCaseOpeningGroupByPayload<T extends CaseOpeningGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CaseOpeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseOpeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseOpeningGroupByOutputType[P]>
            : GetScalarType<T[P], CaseOpeningGroupByOutputType[P]>
        }
      >
    >


  export type CaseOpeningSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    caseId?: boolean
    case?: boolean | CaseArgs
    reward?: boolean
    createdAt?: boolean
  }

  export type CaseOpeningInclude = {
    user?: boolean | UserArgs
    case?: boolean | CaseArgs
  }

  export type CaseOpeningGetPayload<
    S extends boolean | null | undefined | CaseOpeningArgs,
    U = keyof S
      > = S extends true
        ? CaseOpening
    : S extends undefined
    ? never
    : S extends CaseOpeningArgs | CaseOpeningFindManyArgs
    ?'include' extends U
    ? CaseOpening  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'case' ? CaseGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'case' ? CaseGetPayload<S['select'][P]> :  P extends keyof CaseOpening ? CaseOpening[P] : never
  } 
    : CaseOpening
  : CaseOpening


  type CaseOpeningCountArgs = Merge<
    Omit<CaseOpeningFindManyArgs, 'select' | 'include'> & {
      select?: CaseOpeningCountAggregateInputType | true
    }
  >

  export interface CaseOpeningDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CaseOpening that matches the filter.
     * @param {CaseOpeningFindUniqueArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CaseOpeningFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CaseOpeningFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CaseOpening'> extends True ? CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>> : CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening | null >, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T> | null >>

    /**
     * Find the first CaseOpening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningFindFirstArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CaseOpeningFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CaseOpeningFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CaseOpening'> extends True ? CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>> : CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening | null >, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T> | null >>

    /**
     * Find zero or more CaseOpenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseOpenings
     * const caseOpenings = await prisma.caseOpening.findMany()
     * 
     * // Get first 10 CaseOpenings
     * const caseOpenings = await prisma.caseOpening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseOpeningWithIdOnly = await prisma.caseOpening.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CaseOpeningFindManyArgs>(
      args?: SelectSubset<T, CaseOpeningFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CaseOpening>>, PrismaPromise<Array<CaseOpeningGetPayload<T>>>>

    /**
     * Create a CaseOpening.
     * @param {CaseOpeningCreateArgs} args - Arguments to create a CaseOpening.
     * @example
     * // Create one CaseOpening
     * const CaseOpening = await prisma.caseOpening.create({
     *   data: {
     *     // ... data to create a CaseOpening
     *   }
     * })
     * 
    **/
    create<T extends CaseOpeningCreateArgs>(
      args: SelectSubset<T, CaseOpeningCreateArgs>
    ): CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>>

    /**
     * Create many CaseOpenings.
     *     @param {CaseOpeningCreateManyArgs} args - Arguments to create many CaseOpenings.
     *     @example
     *     // Create many CaseOpenings
     *     const caseOpening = await prisma.caseOpening.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CaseOpeningCreateManyArgs>(
      args?: SelectSubset<T, CaseOpeningCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CaseOpening.
     * @param {CaseOpeningDeleteArgs} args - Arguments to delete one CaseOpening.
     * @example
     * // Delete one CaseOpening
     * const CaseOpening = await prisma.caseOpening.delete({
     *   where: {
     *     // ... filter to delete one CaseOpening
     *   }
     * })
     * 
    **/
    delete<T extends CaseOpeningDeleteArgs>(
      args: SelectSubset<T, CaseOpeningDeleteArgs>
    ): CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>>

    /**
     * Update one CaseOpening.
     * @param {CaseOpeningUpdateArgs} args - Arguments to update one CaseOpening.
     * @example
     * // Update one CaseOpening
     * const caseOpening = await prisma.caseOpening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CaseOpeningUpdateArgs>(
      args: SelectSubset<T, CaseOpeningUpdateArgs>
    ): CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>>

    /**
     * Delete zero or more CaseOpenings.
     * @param {CaseOpeningDeleteManyArgs} args - Arguments to filter CaseOpenings to delete.
     * @example
     * // Delete a few CaseOpenings
     * const { count } = await prisma.caseOpening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CaseOpeningDeleteManyArgs>(
      args?: SelectSubset<T, CaseOpeningDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseOpenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseOpenings
     * const caseOpening = await prisma.caseOpening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CaseOpeningUpdateManyArgs>(
      args: SelectSubset<T, CaseOpeningUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseOpening.
     * @param {CaseOpeningUpsertArgs} args - Arguments to update or create a CaseOpening.
     * @example
     * // Update or create a CaseOpening
     * const caseOpening = await prisma.caseOpening.upsert({
     *   create: {
     *     // ... data to create a CaseOpening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseOpening we want to update
     *   }
     * })
    **/
    upsert<T extends CaseOpeningUpsertArgs>(
      args: SelectSubset<T, CaseOpeningUpsertArgs>
    ): CheckSelect<T, Prisma__CaseOpeningClient<CaseOpening>, Prisma__CaseOpeningClient<CaseOpeningGetPayload<T>>>

    /**
     * Count the number of CaseOpenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningCountArgs} args - Arguments to filter CaseOpenings to count.
     * @example
     * // Count the number of CaseOpenings
     * const count = await prisma.caseOpening.count({
     *   where: {
     *     // ... the filter for the CaseOpenings we want to count
     *   }
     * })
    **/
    count<T extends CaseOpeningCountArgs>(
      args?: Subset<T, CaseOpeningCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseOpeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseOpening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseOpeningAggregateArgs>(args: Subset<T, CaseOpeningAggregateArgs>): PrismaPromise<GetCaseOpeningAggregateType<T>>

    /**
     * Group by CaseOpening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseOpeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseOpeningGroupByArgs['orderBy'] }
        : { orderBy?: CaseOpeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseOpeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseOpeningGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseOpening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CaseOpeningClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    case<T extends CaseArgs = {}>(args?: Subset<T, CaseArgs>): CheckSelect<T, Prisma__CaseClient<Case | null >, Prisma__CaseClient<CaseGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CaseOpening findUnique
   */
  export type CaseOpeningFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * Throw an Error if a CaseOpening can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CaseOpening to fetch.
     * 
    **/
    where: CaseOpeningWhereUniqueInput
  }


  /**
   * CaseOpening findFirst
   */
  export type CaseOpeningFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * Throw an Error if a CaseOpening can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CaseOpening to fetch.
     * 
    **/
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOpeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseOpenings.
     * 
    **/
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseOpenings.
     * 
    **/
    distinct?: Enumerable<CaseOpeningScalarFieldEnum>
  }


  /**
   * CaseOpening findMany
   */
  export type CaseOpeningFindManyArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * Filter, which CaseOpenings to fetch.
     * 
    **/
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     * 
    **/
    orderBy?: Enumerable<CaseOpeningOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseOpenings.
     * 
    **/
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CaseOpeningScalarFieldEnum>
  }


  /**
   * CaseOpening create
   */
  export type CaseOpeningCreateArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * The data needed to create a CaseOpening.
     * 
    **/
    data: XOR<CaseOpeningCreateInput, CaseOpeningUncheckedCreateInput>
  }


  /**
   * CaseOpening createMany
   */
  export type CaseOpeningCreateManyArgs = {
    /**
     * The data used to create many CaseOpenings.
     * 
    **/
    data: Enumerable<CaseOpeningCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CaseOpening update
   */
  export type CaseOpeningUpdateArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * The data needed to update a CaseOpening.
     * 
    **/
    data: XOR<CaseOpeningUpdateInput, CaseOpeningUncheckedUpdateInput>
    /**
     * Choose, which CaseOpening to update.
     * 
    **/
    where: CaseOpeningWhereUniqueInput
  }


  /**
   * CaseOpening updateMany
   */
  export type CaseOpeningUpdateManyArgs = {
    /**
     * The data used to update CaseOpenings.
     * 
    **/
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyInput>
    /**
     * Filter which CaseOpenings to update
     * 
    **/
    where?: CaseOpeningWhereInput
  }


  /**
   * CaseOpening upsert
   */
  export type CaseOpeningUpsertArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * The filter to search for the CaseOpening to update in case it exists.
     * 
    **/
    where: CaseOpeningWhereUniqueInput
    /**
     * In case the CaseOpening found by the `where` argument doesn't exist, create a new CaseOpening with this data.
     * 
    **/
    create: XOR<CaseOpeningCreateInput, CaseOpeningUncheckedCreateInput>
    /**
     * In case the CaseOpening was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CaseOpeningUpdateInput, CaseOpeningUncheckedUpdateInput>
  }


  /**
   * CaseOpening delete
   */
  export type CaseOpeningDeleteArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
    /**
     * Filter which CaseOpening to delete.
     * 
    **/
    where: CaseOpeningWhereUniqueInput
  }


  /**
   * CaseOpening deleteMany
   */
  export type CaseOpeningDeleteManyArgs = {
    /**
     * Filter which CaseOpenings to delete
     * 
    **/
    where?: CaseOpeningWhereInput
  }


  /**
   * CaseOpening without action
   */
  export type CaseOpeningArgs = {
    /**
     * Select specific fields to fetch from the CaseOpening
     * 
    **/
    select?: CaseOpeningSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CaseOpeningInclude | null
  }



  /**
   * Model Match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType | null
    state: MatchState | null
    score: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType | null
    state: MatchState | null
    score: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    creatorId: number
    player1Id: number
    player2Id: number
    optionalId: number
    type: number
    state: number
    score: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchAggregateArgs = {
    /**
     * Filter which Match to aggregate.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs = {
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithAggregationInput>
    by: Array<MatchScalarFieldEnum>
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: number
    creatorId: number
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType
    state: MatchState
    score: string | null
    createdAt: Date
    updatedAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect = {
    id?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    player1?: boolean | UserArgs
    player1Id?: boolean
    player2Id?: boolean
    optionalId?: boolean
    type?: boolean
    state?: boolean
    score?: boolean
    invites?: boolean | InviteFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | MatchCountOutputTypeArgs
  }

  export type MatchInclude = {
    creator?: boolean | UserArgs
    player1?: boolean | UserArgs
    invites?: boolean | InviteFindManyArgs
    _count?: boolean | MatchCountOutputTypeArgs
  }

  export type MatchGetPayload<
    S extends boolean | null | undefined | MatchArgs,
    U = keyof S
      > = S extends true
        ? Match
    : S extends undefined
    ? never
    : S extends MatchArgs | MatchFindManyArgs
    ?'include' extends U
    ? Match  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'player1' ? UserGetPayload<S['include'][P]> | null :
        P extends 'invites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'player1' ? UserGetPayload<S['select'][P]> | null :
        P extends 'invites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Match ? Match[P] : never
  } 
    : Match
  : Match


  type MatchCountArgs = Merge<
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }
  >

  export interface MatchDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Match'> extends True ? CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>> : CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Match'> extends True ? CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>> : CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs>(
      args?: SelectSubset<T, MatchFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs>(
      args: SelectSubset<T, MatchCreateArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs>(
      args?: SelectSubset<T, MatchCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs>(
      args: SelectSubset<T, MatchDeleteArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs>(
      args: SelectSubset<T, MatchUpdateArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs>(
      args?: SelectSubset<T, MatchDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs>(
      args: SelectSubset<T, MatchUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs>(
      args: SelectSubset<T, MatchUpsertArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    player1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    invites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Throw an Error if a Match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Match to fetch.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Throw an Error if a Match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Match to fetch.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     * 
    **/
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Filter, which Matches to fetch.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match create
   */
  export type MatchCreateArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The data needed to create a Match.
     * 
    **/
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs = {
    /**
     * The data used to create many Matches.
     * 
    **/
    data: Enumerable<MatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The data needed to update a Match.
     * 
    **/
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs = {
    /**
     * The data used to update Matches.
     * 
    **/
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     * 
    **/
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The filter to search for the Match to update in case it exists.
     * 
    **/
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     * 
    **/
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Filter which Match to delete.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs = {
    /**
     * Filter which Matches to delete
     * 
    **/
    where?: MatchWhereInput
  }


  /**
   * Match without action
   */
  export type MatchArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
  }



  /**
   * Model Training
   */


  export type AggregateTraining = {
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  export type TrainingAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingCountAggregateOutputType = {
    id: number
    creatorId: number
    location: number
    time: number
    participantLimit: number
    description: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingAvgAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingSumAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingMinAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingMaxAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingCountAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingAggregateArgs = {
    /**
     * Filter which Training to aggregate.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trainings
    **/
    _count?: true | TrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingMaxAggregateInputType
  }

  export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraining[P]>
      : GetScalarType<T[P], AggregateTraining[P]>
  }




  export type TrainingGroupByArgs = {
    where?: TrainingWhereInput
    orderBy?: Enumerable<TrainingOrderByWithAggregationInput>
    by: Array<TrainingScalarFieldEnum>
    having?: TrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCountAggregateInputType | true
    _avg?: TrainingAvgAggregateInputType
    _sum?: TrainingSumAggregateInputType
    _min?: TrainingMinAggregateInputType
    _max?: TrainingMaxAggregateInputType
  }


  export type TrainingGroupByOutputType = {
    id: number
    creatorId: number
    location: string
    time: Date
    participantLimit: number
    description: string | null
    state: TrainingState
    createdAt: Date
    updatedAt: Date
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSelect = {
    id?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    location?: boolean
    time?: boolean
    participantLimit?: boolean
    description?: boolean
    state?: boolean
    invites?: boolean | InviteFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TrainingCountOutputTypeArgs
  }

  export type TrainingInclude = {
    creator?: boolean | UserArgs
    invites?: boolean | InviteFindManyArgs
    _count?: boolean | TrainingCountOutputTypeArgs
  }

  export type TrainingGetPayload<
    S extends boolean | null | undefined | TrainingArgs,
    U = keyof S
      > = S extends true
        ? Training
    : S extends undefined
    ? never
    : S extends TrainingArgs | TrainingFindManyArgs
    ?'include' extends U
    ? Training  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'invites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainingCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'invites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainingCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Training ? Training[P] : never
  } 
    : Training
  : Training


  type TrainingCountArgs = Merge<
    Omit<TrainingFindManyArgs, 'select' | 'include'> & {
      select?: TrainingCountAggregateInputType | true
    }
  >

  export interface TrainingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Training that matches the filter.
     * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Training'> extends True ? CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>> : CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>

    /**
     * Find the first Training that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Training'> extends True ? CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>> : CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>

    /**
     * Find zero or more Trainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trainings
     * const trainings = await prisma.training.findMany()
     * 
     * // Get first 10 Trainings
     * const trainings = await prisma.training.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingFindManyArgs>(
      args?: SelectSubset<T, TrainingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Training>>, PrismaPromise<Array<TrainingGetPayload<T>>>>

    /**
     * Create a Training.
     * @param {TrainingCreateArgs} args - Arguments to create a Training.
     * @example
     * // Create one Training
     * const Training = await prisma.training.create({
     *   data: {
     *     // ... data to create a Training
     *   }
     * })
     * 
    **/
    create<T extends TrainingCreateArgs>(
      args: SelectSubset<T, TrainingCreateArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Create many Trainings.
     *     @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
     *     @example
     *     // Create many Trainings
     *     const training = await prisma.training.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainingCreateManyArgs>(
      args?: SelectSubset<T, TrainingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Training.
     * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
     * @example
     * // Delete one Training
     * const Training = await prisma.training.delete({
     *   where: {
     *     // ... filter to delete one Training
     *   }
     * })
     * 
    **/
    delete<T extends TrainingDeleteArgs>(
      args: SelectSubset<T, TrainingDeleteArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Update one Training.
     * @param {TrainingUpdateArgs} args - Arguments to update one Training.
     * @example
     * // Update one Training
     * const training = await prisma.training.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingUpdateArgs>(
      args: SelectSubset<T, TrainingUpdateArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Delete zero or more Trainings.
     * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
     * @example
     * // Delete a few Trainings
     * const { count } = await prisma.training.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingDeleteManyArgs>(
      args?: SelectSubset<T, TrainingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingUpdateManyArgs>(
      args: SelectSubset<T, TrainingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Training.
     * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
     * @example
     * // Update or create a Training
     * const training = await prisma.training.upsert({
     *   create: {
     *     // ... data to create a Training
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Training we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingUpsertArgs>(
      args: SelectSubset<T, TrainingUpsertArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Count the number of Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
     * @example
     * // Count the number of Trainings
     * const count = await prisma.training.count({
     *   where: {
     *     // ... the filter for the Trainings we want to count
     *   }
     * })
    **/
    count<T extends TrainingCountArgs>(
      args?: Subset<T, TrainingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingAggregateArgs>(args: Subset<T, TrainingAggregateArgs>): PrismaPromise<GetTrainingAggregateType<T>>

    /**
     * Group by Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingGroupByArgs['orderBy'] }
        : { orderBy?: TrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Training.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    invites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Training findUnique
   */
  export type TrainingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Throw an Error if a Training can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Training to fetch.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training findFirst
   */
  export type TrainingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Throw an Error if a Training can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Training to fetch.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     * 
    **/
    distinct?: Enumerable<TrainingScalarFieldEnum>
  }


  /**
   * Training findMany
   */
  export type TrainingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Filter, which Trainings to fetch.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trainings.
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TrainingScalarFieldEnum>
  }


  /**
   * Training create
   */
  export type TrainingCreateArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The data needed to create a Training.
     * 
    **/
    data: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
  }


  /**
   * Training createMany
   */
  export type TrainingCreateManyArgs = {
    /**
     * The data used to create many Trainings.
     * 
    **/
    data: Enumerable<TrainingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Training update
   */
  export type TrainingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The data needed to update a Training.
     * 
    **/
    data: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
    /**
     * Choose, which Training to update.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training updateMany
   */
  export type TrainingUpdateManyArgs = {
    /**
     * The data used to update Trainings.
     * 
    **/
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     * 
    **/
    where?: TrainingWhereInput
  }


  /**
   * Training upsert
   */
  export type TrainingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The filter to search for the Training to update in case it exists.
     * 
    **/
    where: TrainingWhereUniqueInput
    /**
     * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
     * 
    **/
    create: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
    /**
     * In case the Training was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
  }


  /**
   * Training delete
   */
  export type TrainingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Filter which Training to delete.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training deleteMany
   */
  export type TrainingDeleteManyArgs = {
    /**
     * Filter which Trainings to delete
     * 
    **/
    where?: TrainingWhereInput
  }


  /**
   * Training without action
   */
  export type TrainingArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
  }



  /**
   * Model Tournament
   */


  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    status: number
    creatorId: number
    startDate: number
    endDate: number
    formatDetails: number
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: number
    locationId: number
    locationName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentSumAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    formatDetails?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs = {
    /**
     * Filter which Tournament to aggregate.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs = {
    where?: TournamentWhereInput
    orderBy?: Enumerable<TournamentOrderByWithAggregationInput>
    by: Array<TournamentScalarFieldEnum>
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }


  export type TournamentGroupByOutputType = {
    id: number
    title: string
    description: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date
    endDate: Date
    formatDetails: JsonValue | null
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId: number | null
    locationName: string | null
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    startDate?: boolean
    endDate?: boolean
    formatDetails?: boolean
    minPlayers?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    isRanked?: boolean
    locationId?: boolean
    locationName?: boolean
    players?: boolean | UserFindManyArgs
    matches?: boolean | TournamentMatchFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TournamentCountOutputTypeArgs
  }

  export type TournamentInclude = {
    creator?: boolean | UserArgs
    players?: boolean | UserFindManyArgs
    matches?: boolean | TournamentMatchFindManyArgs
    _count?: boolean | TournamentCountOutputTypeArgs
  }

  export type TournamentGetPayload<
    S extends boolean | null | undefined | TournamentArgs,
    U = keyof S
      > = S extends true
        ? Tournament
    : S extends undefined
    ? never
    : S extends TournamentArgs | TournamentFindManyArgs
    ?'include' extends U
    ? Tournament  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'players' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'matches' ? Array < TournamentMatchGetPayload<S['include'][P]>>  :
        P extends '_count' ? TournamentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'players' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'matches' ? Array < TournamentMatchGetPayload<S['select'][P]>>  :
        P extends '_count' ? TournamentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tournament ? Tournament[P] : never
  } 
    : Tournament
  : Tournament


  type TournamentCountArgs = Merge<
    Omit<TournamentFindManyArgs, 'select' | 'include'> & {
      select?: TournamentCountAggregateInputType | true
    }
  >

  export interface TournamentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TournamentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TournamentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tournament'> extends True ? CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>> : CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TournamentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TournamentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tournament'> extends True ? CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>> : CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TournamentFindManyArgs>(
      args?: SelectSubset<T, TournamentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
    **/
    create<T extends TournamentCreateArgs>(
      args: SelectSubset<T, TournamentCreateArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Create many Tournaments.
     *     @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     *     @example
     *     // Create many Tournaments
     *     const tournament = await prisma.tournament.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TournamentCreateManyArgs>(
      args?: SelectSubset<T, TournamentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
    **/
    delete<T extends TournamentDeleteArgs>(
      args: SelectSubset<T, TournamentDeleteArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TournamentUpdateArgs>(
      args: SelectSubset<T, TournamentUpdateArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TournamentDeleteManyArgs>(
      args?: SelectSubset<T, TournamentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TournamentUpdateManyArgs>(
      args: SelectSubset<T, TournamentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
    **/
    upsert<T extends TournamentUpsertArgs>(
      args: SelectSubset<T, TournamentUpsertArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TournamentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    players<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    matches<T extends TournamentMatchFindManyArgs = {}>(args?: Subset<T, TournamentMatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TournamentMatch>>, PrismaPromise<Array<TournamentMatchGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Throw an Error if a Tournament can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tournament to fetch.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Throw an Error if a Tournament can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tournament to fetch.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     * 
    **/
    distinct?: Enumerable<TournamentScalarFieldEnum>
  }


  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Filter, which Tournaments to fetch.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TournamentScalarFieldEnum>
  }


  /**
   * Tournament create
   */
  export type TournamentCreateArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The data needed to create a Tournament.
     * 
    **/
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }


  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs = {
    /**
     * The data used to create many Tournaments.
     * 
    **/
    data: Enumerable<TournamentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tournament update
   */
  export type TournamentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The data needed to update a Tournament.
     * 
    **/
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs = {
    /**
     * The data used to update Tournaments.
     * 
    **/
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     * 
    **/
    where?: TournamentWhereInput
  }


  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     * 
    **/
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     * 
    **/
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }


  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Filter which Tournament to delete.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs = {
    /**
     * Filter which Tournaments to delete
     * 
    **/
    where?: TournamentWhereInput
  }


  /**
   * Tournament without action
   */
  export type TournamentArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
  }



  /**
   * Model TournamentMatch
   */


  export type AggregateTournamentMatch = {
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  export type TournamentMatchAvgAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number | null
  }

  export type TournamentMatchSumAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number[] | null
  }

  export type TournamentMatchMinAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchMaxAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchCountAggregateOutputType = {
    id: number
    tournamentId: number
    round: number
    group: number
    playerAId: number
    playerBId: number
    score: number
    winnerId: number
    status: number
    court: number
    scheduledAt: number
    confirmedBy: number
    isThirdPlaceMatch: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentMatchAvgAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchSumAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchMinAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchCountAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    confirmedBy?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentMatchAggregateArgs = {
    /**
     * Filter which TournamentMatch to aggregate.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentMatches
    **/
    _count?: true | TournamentMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type GetTournamentMatchAggregateType<T extends TournamentMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentMatch[P]>
      : GetScalarType<T[P], AggregateTournamentMatch[P]>
  }




  export type TournamentMatchGroupByArgs = {
    where?: TournamentMatchWhereInput
    orderBy?: Enumerable<TournamentMatchOrderByWithAggregationInput>
    by: Array<TournamentMatchScalarFieldEnum>
    having?: TournamentMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentMatchCountAggregateInputType | true
    _avg?: TournamentMatchAvgAggregateInputType
    _sum?: TournamentMatchSumAggregateInputType
    _min?: TournamentMatchMinAggregateInputType
    _max?: TournamentMatchMaxAggregateInputType
  }


  export type TournamentMatchGroupByOutputType = {
    id: number
    tournamentId: number
    round: number | null
    group: string | null
    playerAId: number
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string
    court: string | null
    scheduledAt: Date | null
    confirmedBy: number[]
    isThirdPlaceMatch: boolean
    createdAt: Date
    updatedAt: Date
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  type GetTournamentMatchGroupByPayload<T extends TournamentMatchGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TournamentMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
        }
      >
    >


  export type TournamentMatchSelect = {
    id?: boolean
    tournament?: boolean | TournamentArgs
    tournamentId?: boolean
    round?: boolean
    group?: boolean
    playerAId?: boolean
    playerBId?: boolean
    score?: boolean
    winnerId?: boolean
    status?: boolean
    court?: boolean
    scheduledAt?: boolean
    confirmedBy?: boolean
    isThirdPlaceMatch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentMatchInclude = {
    tournament?: boolean | TournamentArgs
  }

  export type TournamentMatchGetPayload<
    S extends boolean | null | undefined | TournamentMatchArgs,
    U = keyof S
      > = S extends true
        ? TournamentMatch
    : S extends undefined
    ? never
    : S extends TournamentMatchArgs | TournamentMatchFindManyArgs
    ?'include' extends U
    ? TournamentMatch  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tournament' ? TournamentGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tournament' ? TournamentGetPayload<S['select'][P]> :  P extends keyof TournamentMatch ? TournamentMatch[P] : never
  } 
    : TournamentMatch
  : TournamentMatch


  type TournamentMatchCountArgs = Merge<
    Omit<TournamentMatchFindManyArgs, 'select' | 'include'> & {
      select?: TournamentMatchCountAggregateInputType | true
    }
  >

  export interface TournamentMatchDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TournamentMatch that matches the filter.
     * @param {TournamentMatchFindUniqueArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TournamentMatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TournamentMatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TournamentMatch'> extends True ? CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>> : CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch | null >, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T> | null >>

    /**
     * Find the first TournamentMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TournamentMatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TournamentMatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TournamentMatch'> extends True ? CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>> : CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch | null >, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T> | null >>

    /**
     * Find zero or more TournamentMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany()
     * 
     * // Get first 10 TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TournamentMatchFindManyArgs>(
      args?: SelectSubset<T, TournamentMatchFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TournamentMatch>>, PrismaPromise<Array<TournamentMatchGetPayload<T>>>>

    /**
     * Create a TournamentMatch.
     * @param {TournamentMatchCreateArgs} args - Arguments to create a TournamentMatch.
     * @example
     * // Create one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.create({
     *   data: {
     *     // ... data to create a TournamentMatch
     *   }
     * })
     * 
    **/
    create<T extends TournamentMatchCreateArgs>(
      args: SelectSubset<T, TournamentMatchCreateArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Create many TournamentMatches.
     *     @param {TournamentMatchCreateManyArgs} args - Arguments to create many TournamentMatches.
     *     @example
     *     // Create many TournamentMatches
     *     const tournamentMatch = await prisma.tournamentMatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TournamentMatchCreateManyArgs>(
      args?: SelectSubset<T, TournamentMatchCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TournamentMatch.
     * @param {TournamentMatchDeleteArgs} args - Arguments to delete one TournamentMatch.
     * @example
     * // Delete one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.delete({
     *   where: {
     *     // ... filter to delete one TournamentMatch
     *   }
     * })
     * 
    **/
    delete<T extends TournamentMatchDeleteArgs>(
      args: SelectSubset<T, TournamentMatchDeleteArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Update one TournamentMatch.
     * @param {TournamentMatchUpdateArgs} args - Arguments to update one TournamentMatch.
     * @example
     * // Update one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TournamentMatchUpdateArgs>(
      args: SelectSubset<T, TournamentMatchUpdateArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Delete zero or more TournamentMatches.
     * @param {TournamentMatchDeleteManyArgs} args - Arguments to filter TournamentMatches to delete.
     * @example
     * // Delete a few TournamentMatches
     * const { count } = await prisma.tournamentMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TournamentMatchDeleteManyArgs>(
      args?: SelectSubset<T, TournamentMatchDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TournamentMatchUpdateManyArgs>(
      args: SelectSubset<T, TournamentMatchUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentMatch.
     * @param {TournamentMatchUpsertArgs} args - Arguments to update or create a TournamentMatch.
     * @example
     * // Update or create a TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.upsert({
     *   create: {
     *     // ... data to create a TournamentMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentMatch we want to update
     *   }
     * })
    **/
    upsert<T extends TournamentMatchUpsertArgs>(
      args: SelectSubset<T, TournamentMatchUpsertArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Count the number of TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchCountArgs} args - Arguments to filter TournamentMatches to count.
     * @example
     * // Count the number of TournamentMatches
     * const count = await prisma.tournamentMatch.count({
     *   where: {
     *     // ... the filter for the TournamentMatches we want to count
     *   }
     * })
    **/
    count<T extends TournamentMatchCountArgs>(
      args?: Subset<T, TournamentMatchCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentMatchAggregateArgs>(args: Subset<T, TournamentMatchAggregateArgs>): PrismaPromise<GetTournamentMatchAggregateType<T>>

    /**
     * Group by TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentMatchGroupByArgs['orderBy'] }
        : { orderBy?: TournamentMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentMatchGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TournamentMatchClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tournament<T extends TournamentArgs = {}>(args?: Subset<T, TournamentArgs>): CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TournamentMatch findUnique
   */
  export type TournamentMatchFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Throw an Error if a TournamentMatch can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TournamentMatch to fetch.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch findFirst
   */
  export type TournamentMatchFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Throw an Error if a TournamentMatch can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TournamentMatch to fetch.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     * 
    **/
    distinct?: Enumerable<TournamentMatchScalarFieldEnum>
  }


  /**
   * TournamentMatch findMany
   */
  export type TournamentMatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Filter, which TournamentMatches to fetch.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentMatches.
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TournamentMatchScalarFieldEnum>
  }


  /**
   * TournamentMatch create
   */
  export type TournamentMatchCreateArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The data needed to create a TournamentMatch.
     * 
    **/
    data: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
  }


  /**
   * TournamentMatch createMany
   */
  export type TournamentMatchCreateManyArgs = {
    /**
     * The data used to create many TournamentMatches.
     * 
    **/
    data: Enumerable<TournamentMatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TournamentMatch update
   */
  export type TournamentMatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The data needed to update a TournamentMatch.
     * 
    **/
    data: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
    /**
     * Choose, which TournamentMatch to update.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch updateMany
   */
  export type TournamentMatchUpdateManyArgs = {
    /**
     * The data used to update TournamentMatches.
     * 
    **/
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyInput>
    /**
     * Filter which TournamentMatches to update
     * 
    **/
    where?: TournamentMatchWhereInput
  }


  /**
   * TournamentMatch upsert
   */
  export type TournamentMatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The filter to search for the TournamentMatch to update in case it exists.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
    /**
     * In case the TournamentMatch found by the `where` argument doesn't exist, create a new TournamentMatch with this data.
     * 
    **/
    create: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
    /**
     * In case the TournamentMatch was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
  }


  /**
   * TournamentMatch delete
   */
  export type TournamentMatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Filter which TournamentMatch to delete.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch deleteMany
   */
  export type TournamentMatchDeleteManyArgs = {
    /**
     * Filter which TournamentMatches to delete
     * 
    **/
    where?: TournamentMatchWhereInput
  }


  /**
   * TournamentMatch without action
   */
  export type TournamentMatchArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
  }



  /**
   * Model Invite
   */


  export type AggregateInvite = {
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  export type InviteAvgAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteSumAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteMinAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type InviteMaxAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type InviteCountAggregateOutputType = {
    id: number
    matchId: number
    trainingId: number
    senderId: number
    receiverId: number
    status: number
    createdAt: number
    _all: number
  }


  export type InviteAvgAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteSumAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteMinAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteMaxAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteCountAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type InviteAggregateArgs = {
    /**
     * Filter which Invite to aggregate.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invites
    **/
    _count?: true | InviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteMaxAggregateInputType
  }

  export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
        [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvite[P]>
      : GetScalarType<T[P], AggregateInvite[P]>
  }




  export type InviteGroupByArgs = {
    where?: InviteWhereInput
    orderBy?: Enumerable<InviteOrderByWithAggregationInput>
    by: Array<InviteScalarFieldEnum>
    having?: InviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCountAggregateInputType | true
    _avg?: InviteAvgAggregateInputType
    _sum?: InviteSumAggregateInputType
    _min?: InviteMinAggregateInputType
    _max?: InviteMaxAggregateInputType
  }


  export type InviteGroupByOutputType = {
    id: number
    matchId: number | null
    trainingId: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt: Date
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  type GetInviteGroupByPayload<T extends InviteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteGroupByOutputType[P]>
            : GetScalarType<T[P], InviteGroupByOutputType[P]>
        }
      >
    >


  export type InviteSelect = {
    id?: boolean
    match?: boolean | MatchArgs
    matchId?: boolean
    training?: boolean | TrainingArgs
    trainingId?: boolean
    sender?: boolean | UserArgs
    senderId?: boolean
    receiver?: boolean | UserArgs
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type InviteInclude = {
    match?: boolean | MatchArgs
    training?: boolean | TrainingArgs
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
  }

  export type InviteGetPayload<
    S extends boolean | null | undefined | InviteArgs,
    U = keyof S
      > = S extends true
        ? Invite
    : S extends undefined
    ? never
    : S extends InviteArgs | InviteFindManyArgs
    ?'include' extends U
    ? Invite  & {
    [P in TrueKeys<S['include']>]:
        P extends 'match' ? MatchGetPayload<S['include'][P]> | null :
        P extends 'training' ? TrainingGetPayload<S['include'][P]> | null :
        P extends 'sender' ? UserGetPayload<S['include'][P]> :
        P extends 'receiver' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'match' ? MatchGetPayload<S['select'][P]> | null :
        P extends 'training' ? TrainingGetPayload<S['select'][P]> | null :
        P extends 'sender' ? UserGetPayload<S['select'][P]> :
        P extends 'receiver' ? UserGetPayload<S['select'][P]> :  P extends keyof Invite ? Invite[P] : never
  } 
    : Invite
  : Invite


  type InviteCountArgs = Merge<
    Omit<InviteFindManyArgs, 'select' | 'include'> & {
      select?: InviteCountAggregateInputType | true
    }
  >

  export interface InviteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invite that matches the filter.
     * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InviteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InviteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invite'> extends True ? CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>> : CheckSelect<T, Prisma__InviteClient<Invite | null >, Prisma__InviteClient<InviteGetPayload<T> | null >>

    /**
     * Find the first Invite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InviteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InviteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invite'> extends True ? CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>> : CheckSelect<T, Prisma__InviteClient<Invite | null >, Prisma__InviteClient<InviteGetPayload<T> | null >>

    /**
     * Find zero or more Invites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invites
     * const invites = await prisma.invite.findMany()
     * 
     * // Get first 10 Invites
     * const invites = await prisma.invite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InviteFindManyArgs>(
      args?: SelectSubset<T, InviteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>

    /**
     * Create a Invite.
     * @param {InviteCreateArgs} args - Arguments to create a Invite.
     * @example
     * // Create one Invite
     * const Invite = await prisma.invite.create({
     *   data: {
     *     // ... data to create a Invite
     *   }
     * })
     * 
    **/
    create<T extends InviteCreateArgs>(
      args: SelectSubset<T, InviteCreateArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Create many Invites.
     *     @param {InviteCreateManyArgs} args - Arguments to create many Invites.
     *     @example
     *     // Create many Invites
     *     const invite = await prisma.invite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InviteCreateManyArgs>(
      args?: SelectSubset<T, InviteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invite.
     * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
     * @example
     * // Delete one Invite
     * const Invite = await prisma.invite.delete({
     *   where: {
     *     // ... filter to delete one Invite
     *   }
     * })
     * 
    **/
    delete<T extends InviteDeleteArgs>(
      args: SelectSubset<T, InviteDeleteArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Update one Invite.
     * @param {InviteUpdateArgs} args - Arguments to update one Invite.
     * @example
     * // Update one Invite
     * const invite = await prisma.invite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InviteUpdateArgs>(
      args: SelectSubset<T, InviteUpdateArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Delete zero or more Invites.
     * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
     * @example
     * // Delete a few Invites
     * const { count } = await prisma.invite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InviteDeleteManyArgs>(
      args?: SelectSubset<T, InviteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invites
     * const invite = await prisma.invite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InviteUpdateManyArgs>(
      args: SelectSubset<T, InviteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invite.
     * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
     * @example
     * // Update or create a Invite
     * const invite = await prisma.invite.upsert({
     *   create: {
     *     // ... data to create a Invite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invite we want to update
     *   }
     * })
    **/
    upsert<T extends InviteUpsertArgs>(
      args: SelectSubset<T, InviteUpsertArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Count the number of Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCountArgs} args - Arguments to filter Invites to count.
     * @example
     * // Count the number of Invites
     * const count = await prisma.invite.count({
     *   where: {
     *     // ... the filter for the Invites we want to count
     *   }
     * })
    **/
    count<T extends InviteCountArgs>(
      args?: Subset<T, InviteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteAggregateArgs>(args: Subset<T, InviteAggregateArgs>): PrismaPromise<GetInviteAggregateType<T>>

    /**
     * Group by Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteGroupByArgs['orderBy'] }
        : { orderBy?: InviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InviteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    match<T extends MatchArgs = {}>(args?: Subset<T, MatchArgs>): CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>;

    training<T extends TrainingArgs = {}>(args?: Subset<T, TrainingArgs>): CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>;

    sender<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    receiver<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invite findUnique
   */
  export type InviteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Throw an Error if a Invite can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invite to fetch.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite findFirst
   */
  export type InviteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Throw an Error if a Invite can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invite to fetch.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     * 
    **/
    distinct?: Enumerable<InviteScalarFieldEnum>
  }


  /**
   * Invite findMany
   */
  export type InviteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Filter, which Invites to fetch.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invites.
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InviteScalarFieldEnum>
  }


  /**
   * Invite create
   */
  export type InviteCreateArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The data needed to create a Invite.
     * 
    **/
    data: XOR<InviteCreateInput, InviteUncheckedCreateInput>
  }


  /**
   * Invite createMany
   */
  export type InviteCreateManyArgs = {
    /**
     * The data used to create many Invites.
     * 
    **/
    data: Enumerable<InviteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invite update
   */
  export type InviteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The data needed to update a Invite.
     * 
    **/
    data: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
    /**
     * Choose, which Invite to update.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite updateMany
   */
  export type InviteUpdateManyArgs = {
    /**
     * The data used to update Invites.
     * 
    **/
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyInput>
    /**
     * Filter which Invites to update
     * 
    **/
    where?: InviteWhereInput
  }


  /**
   * Invite upsert
   */
  export type InviteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The filter to search for the Invite to update in case it exists.
     * 
    **/
    where: InviteWhereUniqueInput
    /**
     * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
     * 
    **/
    create: XOR<InviteCreateInput, InviteUncheckedCreateInput>
    /**
     * In case the Invite was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
  }


  /**
   * Invite delete
   */
  export type InviteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Filter which Invite to delete.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite deleteMany
   */
  export type InviteDeleteManyArgs = {
    /**
     * Filter which Invites to delete
     * 
    **/
    where?: InviteWhereInput
  }


  /**
   * Invite without action
   */
  export type InviteArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    message: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: Array<NotificationScalarFieldEnum>
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    message: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude = {
    user?: boolean | UserArgs
  }

  export type NotificationGetPayload<
    S extends boolean | null | undefined | NotificationArgs,
    U = keyof S
      > = S extends true
        ? Notification
    : S extends undefined
    ? never
    : S extends NotificationArgs | NotificationFindManyArgs
    ?'include' extends U
    ? Notification  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Notification ? Notification[P] : never
  } 
    : Notification
  : Notification


  type NotificationCountArgs = Merge<
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }
  >

  export interface NotificationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     * 
    **/
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     * 
    **/
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     * 
    **/
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     * 
    **/
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     * 
    **/
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     * 
    **/
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     * 
    **/
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
  }



  /**
   * Model UserProfile
   */


  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    initialRatingPoints: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    initialRatingPoints: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    preferredCourt: string | null
    dominantHand: string | null
    playsInTournaments: boolean | null
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean | null
    profileStepTwoCompleted: boolean | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    preferredCourt: string | null
    dominantHand: string | null
    playsInTournaments: boolean | null
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean | null
    profileStepTwoCompleted: boolean | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    avatarUrl: number
    city: number
    countryCode: number
    ntrpRating: number
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: number
    achievements: number
    isPublicProfile: number
    createdAt: number
    updatedAt: number
    preferredCourt: number
    dominantHand: number
    preferredPlayTime: number
    playsInTournaments: number
    weeklyPlayFrequency: number
    backhandType: number
    preferredSurface: number
    playingStyle: number
    favoriteShot: number
    racket: number
    opponentPreference: number
    initialRatingPoints: number
    selfAssessedLevel: number
    profileStepOneCompleted: number
    profileStepTwoCompleted: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    initialRatingPoints?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    initialRatingPoints?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    achievements?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    preferredPlayTime?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
    _all?: true
  }

  export type UserProfileAggregateArgs = {
    /**
     * Filter which UserProfile to aggregate.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs = {
    where?: UserProfileWhereInput
    orderBy?: Enumerable<UserProfileOrderByWithAggregationInput>
    by: Array<UserProfileScalarFieldEnum>
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }


  export type UserProfileGroupByOutputType = {
    id: number
    userId: number
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: Date | null
    achievements: JsonValue | null
    isPublicProfile: boolean
    createdAt: Date
    updatedAt: Date
    preferredCourt: string | null
    dominantHand: string | null
    preferredPlayTime: string[]
    playsInTournaments: boolean
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean
    profileStepTwoCompleted: boolean
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    avatarUrl?: boolean
    city?: boolean
    countryCode?: boolean
    ntrpRating?: boolean
    ratingPoints?: boolean
    matchesPlayed?: boolean
    matchWins?: boolean
    matchLosses?: boolean
    tournamentsPlayed?: boolean
    tournamentsWon?: boolean
    lastActivity?: boolean
    achievements?: boolean
    isPublicProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    preferredCourt?: boolean
    dominantHand?: boolean
    preferredPlayTime?: boolean
    playsInTournaments?: boolean
    weeklyPlayFrequency?: boolean
    backhandType?: boolean
    preferredSurface?: boolean
    playingStyle?: boolean
    favoriteShot?: boolean
    racket?: boolean
    opponentPreference?: boolean
    initialRatingPoints?: boolean
    selfAssessedLevel?: boolean
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileInclude = {
    user?: boolean | UserArgs
  }

  export type UserProfileGetPayload<
    S extends boolean | null | undefined | UserProfileArgs,
    U = keyof S
      > = S extends true
        ? UserProfile
    : S extends undefined
    ? never
    : S extends UserProfileArgs | UserProfileFindManyArgs
    ?'include' extends U
    ? UserProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof UserProfile ? UserProfile[P] : never
  } 
    : UserProfile
  : UserProfile


  type UserProfileCountArgs = Merge<
    Omit<UserProfileFindManyArgs, 'select' | 'include'> & {
      select?: UserProfileCountAggregateInputType | true
    }
  >

  export interface UserProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserProfileFindManyArgs>(
      args?: SelectSubset<T, UserProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserProfile>>, PrismaPromise<Array<UserProfileGetPayload<T>>>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
    **/
    create<T extends UserProfileCreateArgs>(
      args: SelectSubset<T, UserProfileCreateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Create many UserProfiles.
     *     @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     *     @example
     *     // Create many UserProfiles
     *     const userProfile = await prisma.userProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserProfileCreateManyArgs>(
      args?: SelectSubset<T, UserProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
    **/
    delete<T extends UserProfileDeleteArgs>(
      args: SelectSubset<T, UserProfileDeleteArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserProfileUpdateArgs>(
      args: SelectSubset<T, UserProfileUpdateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserProfileDeleteManyArgs>(
      args?: SelectSubset<T, UserProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserProfileUpdateManyArgs>(
      args: SelectSubset<T, UserProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
    **/
    upsert<T extends UserProfileUpsertArgs>(
      args: SelectSubset<T, UserProfileUpsertArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Throw an Error if a UserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Throw an Error if a UserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     * 
    **/
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfiles to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to create a UserProfile.
     * 
    **/
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }


  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs = {
    /**
     * The data used to create many UserProfiles.
     * 
    **/
    data: Enumerable<UserProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to update a UserProfile.
     * 
    **/
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs = {
    /**
     * The data used to update UserProfiles.
     * 
    **/
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     * 
    **/
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     * 
    **/
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }


  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter which UserProfile to delete.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs = {
    /**
     * Filter which UserProfiles to delete
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile without action
   */
  export type UserProfileArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
  }



  /**
   * Model GameRequest
   */


  export type AggregateGameRequest = {
    _count: GameRequestCountAggregateOutputType | null
    _avg: GameRequestAvgAggregateOutputType | null
    _sum: GameRequestSumAggregateOutputType | null
    _min: GameRequestMinAggregateOutputType | null
    _max: GameRequestMaxAggregateOutputType | null
  }

  export type GameRequestAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameRequestSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameRequestMinAggregateOutputType = {
    id: number | null
    type: string | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    gameMode: string | null
    dateTime: Date | null
    paymentType: string | null
    ratingType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameRequestMaxAggregateOutputType = {
    id: number | null
    type: string | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    gameMode: string | null
    dateTime: Date | null
    paymentType: string | null
    ratingType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameRequestCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    creatorId: number
    locationName: number
    maxPlayers: number
    currentPlayers: number
    gameMode: number
    dateTime: number
    paymentType: number
    ratingType: number
    formatInfo: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameRequestAvgAggregateInputType = {
    id?: true
    creatorId?: true
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameRequestSumAggregateInputType = {
    id?: true
    creatorId?: true
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameRequestMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameRequestMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameRequestCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    formatInfo?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameRequestAggregateArgs = {
    /**
     * Filter which GameRequest to aggregate.
     * 
    **/
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<GameRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameRequests
    **/
    _count?: true | GameRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameRequestMaxAggregateInputType
  }

  export type GetGameRequestAggregateType<T extends GameRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateGameRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameRequest[P]>
      : GetScalarType<T[P], AggregateGameRequest[P]>
  }




  export type GameRequestGroupByArgs = {
    where?: GameRequestWhereInput
    orderBy?: Enumerable<GameRequestOrderByWithAggregationInput>
    by: Array<GameRequestScalarFieldEnum>
    having?: GameRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameRequestCountAggregateInputType | true
    _avg?: GameRequestAvgAggregateInputType
    _sum?: GameRequestSumAggregateInputType
    _min?: GameRequestMinAggregateInputType
    _max?: GameRequestMaxAggregateInputType
  }


  export type GameRequestGroupByOutputType = {
    id: number
    type: string
    title: string
    description: string | null
    creatorId: number
    locationName: string | null
    maxPlayers: number
    currentPlayers: number
    gameMode: string
    dateTime: Date
    paymentType: string
    ratingType: string
    formatInfo: JsonValue | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: GameRequestCountAggregateOutputType | null
    _avg: GameRequestAvgAggregateOutputType | null
    _sum: GameRequestSumAggregateOutputType | null
    _min: GameRequestMinAggregateOutputType | null
    _max: GameRequestMaxAggregateOutputType | null
  }

  type GetGameRequestGroupByPayload<T extends GameRequestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GameRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameRequestGroupByOutputType[P]>
            : GetScalarType<T[P], GameRequestGroupByOutputType[P]>
        }
      >
    >


  export type GameRequestSelect = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    creator?: boolean | UserArgs
    locationName?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    gameMode?: boolean
    dateTime?: boolean
    paymentType?: boolean
    ratingType?: boolean
    formatInfo?: boolean
    status?: boolean
    participants?: boolean | UserFindManyArgs
    responses?: boolean | RequestResponseFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | GameRequestCountOutputTypeArgs
  }

  export type GameRequestInclude = {
    creator?: boolean | UserArgs
    participants?: boolean | UserFindManyArgs
    responses?: boolean | RequestResponseFindManyArgs
    _count?: boolean | GameRequestCountOutputTypeArgs
  }

  export type GameRequestGetPayload<
    S extends boolean | null | undefined | GameRequestArgs,
    U = keyof S
      > = S extends true
        ? GameRequest
    : S extends undefined
    ? never
    : S extends GameRequestArgs | GameRequestFindManyArgs
    ?'include' extends U
    ? GameRequest  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'participants' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'responses' ? Array < RequestResponseGetPayload<S['include'][P]>>  :
        P extends '_count' ? GameRequestCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'participants' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'responses' ? Array < RequestResponseGetPayload<S['select'][P]>>  :
        P extends '_count' ? GameRequestCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof GameRequest ? GameRequest[P] : never
  } 
    : GameRequest
  : GameRequest


  type GameRequestCountArgs = Merge<
    Omit<GameRequestFindManyArgs, 'select' | 'include'> & {
      select?: GameRequestCountAggregateInputType | true
    }
  >

  export interface GameRequestDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GameRequest that matches the filter.
     * @param {GameRequestFindUniqueArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameRequestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameRequestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GameRequest'> extends True ? CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>> : CheckSelect<T, Prisma__GameRequestClient<GameRequest | null >, Prisma__GameRequestClient<GameRequestGetPayload<T> | null >>

    /**
     * Find the first GameRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestFindFirstArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameRequestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameRequestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GameRequest'> extends True ? CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>> : CheckSelect<T, Prisma__GameRequestClient<GameRequest | null >, Prisma__GameRequestClient<GameRequestGetPayload<T> | null >>

    /**
     * Find zero or more GameRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameRequests
     * const gameRequests = await prisma.gameRequest.findMany()
     * 
     * // Get first 10 GameRequests
     * const gameRequests = await prisma.gameRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameRequestWithIdOnly = await prisma.gameRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameRequestFindManyArgs>(
      args?: SelectSubset<T, GameRequestFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GameRequest>>, PrismaPromise<Array<GameRequestGetPayload<T>>>>

    /**
     * Create a GameRequest.
     * @param {GameRequestCreateArgs} args - Arguments to create a GameRequest.
     * @example
     * // Create one GameRequest
     * const GameRequest = await prisma.gameRequest.create({
     *   data: {
     *     // ... data to create a GameRequest
     *   }
     * })
     * 
    **/
    create<T extends GameRequestCreateArgs>(
      args: SelectSubset<T, GameRequestCreateArgs>
    ): CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>>

    /**
     * Create many GameRequests.
     *     @param {GameRequestCreateManyArgs} args - Arguments to create many GameRequests.
     *     @example
     *     // Create many GameRequests
     *     const gameRequest = await prisma.gameRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameRequestCreateManyArgs>(
      args?: SelectSubset<T, GameRequestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GameRequest.
     * @param {GameRequestDeleteArgs} args - Arguments to delete one GameRequest.
     * @example
     * // Delete one GameRequest
     * const GameRequest = await prisma.gameRequest.delete({
     *   where: {
     *     // ... filter to delete one GameRequest
     *   }
     * })
     * 
    **/
    delete<T extends GameRequestDeleteArgs>(
      args: SelectSubset<T, GameRequestDeleteArgs>
    ): CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>>

    /**
     * Update one GameRequest.
     * @param {GameRequestUpdateArgs} args - Arguments to update one GameRequest.
     * @example
     * // Update one GameRequest
     * const gameRequest = await prisma.gameRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameRequestUpdateArgs>(
      args: SelectSubset<T, GameRequestUpdateArgs>
    ): CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>>

    /**
     * Delete zero or more GameRequests.
     * @param {GameRequestDeleteManyArgs} args - Arguments to filter GameRequests to delete.
     * @example
     * // Delete a few GameRequests
     * const { count } = await prisma.gameRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameRequestDeleteManyArgs>(
      args?: SelectSubset<T, GameRequestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameRequests
     * const gameRequest = await prisma.gameRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameRequestUpdateManyArgs>(
      args: SelectSubset<T, GameRequestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GameRequest.
     * @param {GameRequestUpsertArgs} args - Arguments to update or create a GameRequest.
     * @example
     * // Update or create a GameRequest
     * const gameRequest = await prisma.gameRequest.upsert({
     *   create: {
     *     // ... data to create a GameRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameRequest we want to update
     *   }
     * })
    **/
    upsert<T extends GameRequestUpsertArgs>(
      args: SelectSubset<T, GameRequestUpsertArgs>
    ): CheckSelect<T, Prisma__GameRequestClient<GameRequest>, Prisma__GameRequestClient<GameRequestGetPayload<T>>>

    /**
     * Count the number of GameRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestCountArgs} args - Arguments to filter GameRequests to count.
     * @example
     * // Count the number of GameRequests
     * const count = await prisma.gameRequest.count({
     *   where: {
     *     // ... the filter for the GameRequests we want to count
     *   }
     * })
    **/
    count<T extends GameRequestCountArgs>(
      args?: Subset<T, GameRequestCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameRequestAggregateArgs>(args: Subset<T, GameRequestAggregateArgs>): PrismaPromise<GetGameRequestAggregateType<T>>

    /**
     * Group by GameRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameRequestGroupByArgs['orderBy'] }
        : { orderBy?: GameRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameRequestGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameRequestClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    participants<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    responses<T extends RequestResponseFindManyArgs = {}>(args?: Subset<T, RequestResponseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequestResponse>>, PrismaPromise<Array<RequestResponseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GameRequest findUnique
   */
  export type GameRequestFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * Throw an Error if a GameRequest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GameRequest to fetch.
     * 
    **/
    where: GameRequestWhereUniqueInput
  }


  /**
   * GameRequest findFirst
   */
  export type GameRequestFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * Throw an Error if a GameRequest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GameRequest to fetch.
     * 
    **/
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<GameRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameRequests.
     * 
    **/
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameRequests.
     * 
    **/
    distinct?: Enumerable<GameRequestScalarFieldEnum>
  }


  /**
   * GameRequest findMany
   */
  export type GameRequestFindManyArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * Filter, which GameRequests to fetch.
     * 
    **/
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<GameRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameRequests.
     * 
    **/
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GameRequestScalarFieldEnum>
  }


  /**
   * GameRequest create
   */
  export type GameRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * The data needed to create a GameRequest.
     * 
    **/
    data: XOR<GameRequestCreateInput, GameRequestUncheckedCreateInput>
  }


  /**
   * GameRequest createMany
   */
  export type GameRequestCreateManyArgs = {
    /**
     * The data used to create many GameRequests.
     * 
    **/
    data: Enumerable<GameRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GameRequest update
   */
  export type GameRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * The data needed to update a GameRequest.
     * 
    **/
    data: XOR<GameRequestUpdateInput, GameRequestUncheckedUpdateInput>
    /**
     * Choose, which GameRequest to update.
     * 
    **/
    where: GameRequestWhereUniqueInput
  }


  /**
   * GameRequest updateMany
   */
  export type GameRequestUpdateManyArgs = {
    /**
     * The data used to update GameRequests.
     * 
    **/
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyInput>
    /**
     * Filter which GameRequests to update
     * 
    **/
    where?: GameRequestWhereInput
  }


  /**
   * GameRequest upsert
   */
  export type GameRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * The filter to search for the GameRequest to update in case it exists.
     * 
    **/
    where: GameRequestWhereUniqueInput
    /**
     * In case the GameRequest found by the `where` argument doesn't exist, create a new GameRequest with this data.
     * 
    **/
    create: XOR<GameRequestCreateInput, GameRequestUncheckedCreateInput>
    /**
     * In case the GameRequest was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GameRequestUpdateInput, GameRequestUncheckedUpdateInput>
  }


  /**
   * GameRequest delete
   */
  export type GameRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
    /**
     * Filter which GameRequest to delete.
     * 
    **/
    where: GameRequestWhereUniqueInput
  }


  /**
   * GameRequest deleteMany
   */
  export type GameRequestDeleteManyArgs = {
    /**
     * Filter which GameRequests to delete
     * 
    **/
    where?: GameRequestWhereInput
  }


  /**
   * GameRequest without action
   */
  export type GameRequestArgs = {
    /**
     * Select specific fields to fetch from the GameRequest
     * 
    **/
    select?: GameRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameRequestInclude | null
  }



  /**
   * Model RequestResponse
   */


  export type AggregateRequestResponse = {
    _count: RequestResponseCountAggregateOutputType | null
    _avg: RequestResponseAvgAggregateOutputType | null
    _sum: RequestResponseSumAggregateOutputType | null
    _min: RequestResponseMinAggregateOutputType | null
    _max: RequestResponseMaxAggregateOutputType | null
  }

  export type RequestResponseAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestResponseSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestResponseMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestResponseMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestResponseCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    status: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestResponseAvgAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestResponseSumAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestResponseMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestResponseMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestResponseCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestResponseAggregateArgs = {
    /**
     * Filter which RequestResponse to aggregate.
     * 
    **/
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<RequestResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestResponses
    **/
    _count?: true | RequestResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestResponseMaxAggregateInputType
  }

  export type GetRequestResponseAggregateType<T extends RequestResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestResponse[P]>
      : GetScalarType<T[P], AggregateRequestResponse[P]>
  }




  export type RequestResponseGroupByArgs = {
    where?: RequestResponseWhereInput
    orderBy?: Enumerable<RequestResponseOrderByWithAggregationInput>
    by: Array<RequestResponseScalarFieldEnum>
    having?: RequestResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestResponseCountAggregateInputType | true
    _avg?: RequestResponseAvgAggregateInputType
    _sum?: RequestResponseSumAggregateInputType
    _min?: RequestResponseMinAggregateInputType
    _max?: RequestResponseMaxAggregateInputType
  }


  export type RequestResponseGroupByOutputType = {
    id: number
    requestId: number
    userId: number
    status: string
    message: string | null
    createdAt: Date
    updatedAt: Date
    _count: RequestResponseCountAggregateOutputType | null
    _avg: RequestResponseAvgAggregateOutputType | null
    _sum: RequestResponseSumAggregateOutputType | null
    _min: RequestResponseMinAggregateOutputType | null
    _max: RequestResponseMaxAggregateOutputType | null
  }

  type GetRequestResponseGroupByPayload<T extends RequestResponseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RequestResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestResponseGroupByOutputType[P]>
            : GetScalarType<T[P], RequestResponseGroupByOutputType[P]>
        }
      >
    >


  export type RequestResponseSelect = {
    id?: boolean
    requestId?: boolean
    request?: boolean | GameRequestArgs
    userId?: boolean
    user?: boolean | UserArgs
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestResponseInclude = {
    request?: boolean | GameRequestArgs
    user?: boolean | UserArgs
  }

  export type RequestResponseGetPayload<
    S extends boolean | null | undefined | RequestResponseArgs,
    U = keyof S
      > = S extends true
        ? RequestResponse
    : S extends undefined
    ? never
    : S extends RequestResponseArgs | RequestResponseFindManyArgs
    ?'include' extends U
    ? RequestResponse  & {
    [P in TrueKeys<S['include']>]:
        P extends 'request' ? GameRequestGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'request' ? GameRequestGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof RequestResponse ? RequestResponse[P] : never
  } 
    : RequestResponse
  : RequestResponse


  type RequestResponseCountArgs = Merge<
    Omit<RequestResponseFindManyArgs, 'select' | 'include'> & {
      select?: RequestResponseCountAggregateInputType | true
    }
  >

  export interface RequestResponseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RequestResponse that matches the filter.
     * @param {RequestResponseFindUniqueArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RequestResponseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RequestResponseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RequestResponse'> extends True ? CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>> : CheckSelect<T, Prisma__RequestResponseClient<RequestResponse | null >, Prisma__RequestResponseClient<RequestResponseGetPayload<T> | null >>

    /**
     * Find the first RequestResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseFindFirstArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RequestResponseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RequestResponseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RequestResponse'> extends True ? CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>> : CheckSelect<T, Prisma__RequestResponseClient<RequestResponse | null >, Prisma__RequestResponseClient<RequestResponseGetPayload<T> | null >>

    /**
     * Find zero or more RequestResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestResponses
     * const requestResponses = await prisma.requestResponse.findMany()
     * 
     * // Get first 10 RequestResponses
     * const requestResponses = await prisma.requestResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestResponseWithIdOnly = await prisma.requestResponse.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RequestResponseFindManyArgs>(
      args?: SelectSubset<T, RequestResponseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RequestResponse>>, PrismaPromise<Array<RequestResponseGetPayload<T>>>>

    /**
     * Create a RequestResponse.
     * @param {RequestResponseCreateArgs} args - Arguments to create a RequestResponse.
     * @example
     * // Create one RequestResponse
     * const RequestResponse = await prisma.requestResponse.create({
     *   data: {
     *     // ... data to create a RequestResponse
     *   }
     * })
     * 
    **/
    create<T extends RequestResponseCreateArgs>(
      args: SelectSubset<T, RequestResponseCreateArgs>
    ): CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>>

    /**
     * Create many RequestResponses.
     *     @param {RequestResponseCreateManyArgs} args - Arguments to create many RequestResponses.
     *     @example
     *     // Create many RequestResponses
     *     const requestResponse = await prisma.requestResponse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RequestResponseCreateManyArgs>(
      args?: SelectSubset<T, RequestResponseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RequestResponse.
     * @param {RequestResponseDeleteArgs} args - Arguments to delete one RequestResponse.
     * @example
     * // Delete one RequestResponse
     * const RequestResponse = await prisma.requestResponse.delete({
     *   where: {
     *     // ... filter to delete one RequestResponse
     *   }
     * })
     * 
    **/
    delete<T extends RequestResponseDeleteArgs>(
      args: SelectSubset<T, RequestResponseDeleteArgs>
    ): CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>>

    /**
     * Update one RequestResponse.
     * @param {RequestResponseUpdateArgs} args - Arguments to update one RequestResponse.
     * @example
     * // Update one RequestResponse
     * const requestResponse = await prisma.requestResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RequestResponseUpdateArgs>(
      args: SelectSubset<T, RequestResponseUpdateArgs>
    ): CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>>

    /**
     * Delete zero or more RequestResponses.
     * @param {RequestResponseDeleteManyArgs} args - Arguments to filter RequestResponses to delete.
     * @example
     * // Delete a few RequestResponses
     * const { count } = await prisma.requestResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RequestResponseDeleteManyArgs>(
      args?: SelectSubset<T, RequestResponseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestResponses
     * const requestResponse = await prisma.requestResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RequestResponseUpdateManyArgs>(
      args: SelectSubset<T, RequestResponseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestResponse.
     * @param {RequestResponseUpsertArgs} args - Arguments to update or create a RequestResponse.
     * @example
     * // Update or create a RequestResponse
     * const requestResponse = await prisma.requestResponse.upsert({
     *   create: {
     *     // ... data to create a RequestResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestResponse we want to update
     *   }
     * })
    **/
    upsert<T extends RequestResponseUpsertArgs>(
      args: SelectSubset<T, RequestResponseUpsertArgs>
    ): CheckSelect<T, Prisma__RequestResponseClient<RequestResponse>, Prisma__RequestResponseClient<RequestResponseGetPayload<T>>>

    /**
     * Count the number of RequestResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseCountArgs} args - Arguments to filter RequestResponses to count.
     * @example
     * // Count the number of RequestResponses
     * const count = await prisma.requestResponse.count({
     *   where: {
     *     // ... the filter for the RequestResponses we want to count
     *   }
     * })
    **/
    count<T extends RequestResponseCountArgs>(
      args?: Subset<T, RequestResponseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestResponseAggregateArgs>(args: Subset<T, RequestResponseAggregateArgs>): PrismaPromise<GetRequestResponseAggregateType<T>>

    /**
     * Group by RequestResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestResponseGroupByArgs['orderBy'] }
        : { orderBy?: RequestResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestResponseGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RequestResponseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    request<T extends GameRequestArgs = {}>(args?: Subset<T, GameRequestArgs>): CheckSelect<T, Prisma__GameRequestClient<GameRequest | null >, Prisma__GameRequestClient<GameRequestGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * RequestResponse findUnique
   */
  export type RequestResponseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * Throw an Error if a RequestResponse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequestResponse to fetch.
     * 
    **/
    where: RequestResponseWhereUniqueInput
  }


  /**
   * RequestResponse findFirst
   */
  export type RequestResponseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * Throw an Error if a RequestResponse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequestResponse to fetch.
     * 
    **/
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<RequestResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestResponses.
     * 
    **/
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestResponses.
     * 
    **/
    distinct?: Enumerable<RequestResponseScalarFieldEnum>
  }


  /**
   * RequestResponse findMany
   */
  export type RequestResponseFindManyArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * Filter, which RequestResponses to fetch.
     * 
    **/
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<RequestResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestResponses.
     * 
    **/
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RequestResponseScalarFieldEnum>
  }


  /**
   * RequestResponse create
   */
  export type RequestResponseCreateArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * The data needed to create a RequestResponse.
     * 
    **/
    data: XOR<RequestResponseCreateInput, RequestResponseUncheckedCreateInput>
  }


  /**
   * RequestResponse createMany
   */
  export type RequestResponseCreateManyArgs = {
    /**
     * The data used to create many RequestResponses.
     * 
    **/
    data: Enumerable<RequestResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RequestResponse update
   */
  export type RequestResponseUpdateArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * The data needed to update a RequestResponse.
     * 
    **/
    data: XOR<RequestResponseUpdateInput, RequestResponseUncheckedUpdateInput>
    /**
     * Choose, which RequestResponse to update.
     * 
    **/
    where: RequestResponseWhereUniqueInput
  }


  /**
   * RequestResponse updateMany
   */
  export type RequestResponseUpdateManyArgs = {
    /**
     * The data used to update RequestResponses.
     * 
    **/
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyInput>
    /**
     * Filter which RequestResponses to update
     * 
    **/
    where?: RequestResponseWhereInput
  }


  /**
   * RequestResponse upsert
   */
  export type RequestResponseUpsertArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * The filter to search for the RequestResponse to update in case it exists.
     * 
    **/
    where: RequestResponseWhereUniqueInput
    /**
     * In case the RequestResponse found by the `where` argument doesn't exist, create a new RequestResponse with this data.
     * 
    **/
    create: XOR<RequestResponseCreateInput, RequestResponseUncheckedCreateInput>
    /**
     * In case the RequestResponse was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RequestResponseUpdateInput, RequestResponseUncheckedUpdateInput>
  }


  /**
   * RequestResponse delete
   */
  export type RequestResponseDeleteArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
    /**
     * Filter which RequestResponse to delete.
     * 
    **/
    where: RequestResponseWhereUniqueInput
  }


  /**
   * RequestResponse deleteMany
   */
  export type RequestResponseDeleteManyArgs = {
    /**
     * Filter which RequestResponses to delete
     * 
    **/
    where?: RequestResponseWhereInput
  }


  /**
   * RequestResponse without action
   */
  export type RequestResponseArgs = {
    /**
     * Select specific fields to fetch from the RequestResponse
     * 
    **/
    select?: RequestResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequestResponseInclude | null
  }



  /**
   * Model TrainingSession
   */


  export type AggregateTrainingSession = {
    _count: TrainingSessionCountAggregateOutputType | null
    _avg: TrainingSessionAvgAggregateOutputType | null
    _sum: TrainingSessionSumAggregateOutputType | null
    _min: TrainingSessionMinAggregateOutputType | null
    _max: TrainingSessionMaxAggregateOutputType | null
  }

  export type TrainingSessionAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    pricePerPerson: number | null
  }

  export type TrainingSessionSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    pricePerPerson: number | null
  }

  export type TrainingSessionMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    courtSurface: CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    paymentType: PaymentType | null
    pricePerPerson: number | null
    dateTime: Date | null
    endTime: Date | null
    status: TrainingState | null
    trainingType: TrainingType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingSessionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    courtSurface: CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    paymentType: PaymentType | null
    pricePerPerson: number | null
    dateTime: Date | null
    endTime: Date | null
    status: TrainingState | null
    trainingType: TrainingType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingSessionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    creatorId: number
    locationName: number
    courtSurface: number
    minLevel: number
    maxLevel: number
    maxSlots: number
    currentSlots: number
    paymentType: number
    pricePerPerson: number
    dateTime: number
    endTime: number
    status: number
    trainingType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingSessionAvgAggregateInputType = {
    id?: true
    creatorId?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    pricePerPerson?: true
  }

  export type TrainingSessionSumAggregateInputType = {
    id?: true
    creatorId?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    pricePerPerson?: true
  }

  export type TrainingSessionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingSessionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingSessionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingSessionAggregateArgs = {
    /**
     * Filter which TrainingSession to aggregate.
     * 
    **/
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingSessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingSessions
    **/
    _count?: true | TrainingSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingSessionMaxAggregateInputType
  }

  export type GetTrainingSessionAggregateType<T extends TrainingSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingSession[P]>
      : GetScalarType<T[P], AggregateTrainingSession[P]>
  }




  export type TrainingSessionGroupByArgs = {
    where?: TrainingSessionWhereInput
    orderBy?: Enumerable<TrainingSessionOrderByWithAggregationInput>
    by: Array<TrainingSessionScalarFieldEnum>
    having?: TrainingSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingSessionCountAggregateInputType | true
    _avg?: TrainingSessionAvgAggregateInputType
    _sum?: TrainingSessionSumAggregateInputType
    _min?: TrainingSessionMinAggregateInputType
    _max?: TrainingSessionMaxAggregateInputType
  }


  export type TrainingSessionGroupByOutputType = {
    id: number
    title: string
    description: string | null
    creatorId: number
    locationName: string | null
    courtSurface: CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number
    currentSlots: number
    paymentType: PaymentType
    pricePerPerson: number | null
    dateTime: Date
    endTime: Date
    status: TrainingState
    trainingType: TrainingType
    createdAt: Date
    updatedAt: Date
    _count: TrainingSessionCountAggregateOutputType | null
    _avg: TrainingSessionAvgAggregateOutputType | null
    _sum: TrainingSessionSumAggregateOutputType | null
    _min: TrainingSessionMinAggregateOutputType | null
    _max: TrainingSessionMaxAggregateOutputType | null
  }

  type GetTrainingSessionGroupByPayload<T extends TrainingSessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TrainingSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingSessionGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingSessionGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSessionSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    creator?: boolean | UserArgs
    locationName?: boolean
    courtSurface?: boolean
    minLevel?: boolean
    maxLevel?: boolean
    maxSlots?: boolean
    currentSlots?: boolean
    paymentType?: boolean
    pricePerPerson?: boolean
    dateTime?: boolean
    endTime?: boolean
    status?: boolean
    trainingType?: boolean
    participants?: boolean | UserFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TrainingSessionCountOutputTypeArgs
  }

  export type TrainingSessionInclude = {
    creator?: boolean | UserArgs
    participants?: boolean | UserFindManyArgs
    _count?: boolean | TrainingSessionCountOutputTypeArgs
  }

  export type TrainingSessionGetPayload<
    S extends boolean | null | undefined | TrainingSessionArgs,
    U = keyof S
      > = S extends true
        ? TrainingSession
    : S extends undefined
    ? never
    : S extends TrainingSessionArgs | TrainingSessionFindManyArgs
    ?'include' extends U
    ? TrainingSession  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'participants' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainingSessionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'participants' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainingSessionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TrainingSession ? TrainingSession[P] : never
  } 
    : TrainingSession
  : TrainingSession


  type TrainingSessionCountArgs = Merge<
    Omit<TrainingSessionFindManyArgs, 'select' | 'include'> & {
      select?: TrainingSessionCountAggregateInputType | true
    }
  >

  export interface TrainingSessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TrainingSession that matches the filter.
     * @param {TrainingSessionFindUniqueArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingSessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainingSessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TrainingSession'> extends True ? CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>> : CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession | null >, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T> | null >>

    /**
     * Find the first TrainingSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionFindFirstArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingSessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainingSessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TrainingSession'> extends True ? CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>> : CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession | null >, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T> | null >>

    /**
     * Find zero or more TrainingSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingSessions
     * const trainingSessions = await prisma.trainingSession.findMany()
     * 
     * // Get first 10 TrainingSessions
     * const trainingSessions = await prisma.trainingSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingSessionWithIdOnly = await prisma.trainingSession.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingSessionFindManyArgs>(
      args?: SelectSubset<T, TrainingSessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TrainingSession>>, PrismaPromise<Array<TrainingSessionGetPayload<T>>>>

    /**
     * Create a TrainingSession.
     * @param {TrainingSessionCreateArgs} args - Arguments to create a TrainingSession.
     * @example
     * // Create one TrainingSession
     * const TrainingSession = await prisma.trainingSession.create({
     *   data: {
     *     // ... data to create a TrainingSession
     *   }
     * })
     * 
    **/
    create<T extends TrainingSessionCreateArgs>(
      args: SelectSubset<T, TrainingSessionCreateArgs>
    ): CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>>

    /**
     * Create many TrainingSessions.
     *     @param {TrainingSessionCreateManyArgs} args - Arguments to create many TrainingSessions.
     *     @example
     *     // Create many TrainingSessions
     *     const trainingSession = await prisma.trainingSession.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainingSessionCreateManyArgs>(
      args?: SelectSubset<T, TrainingSessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TrainingSession.
     * @param {TrainingSessionDeleteArgs} args - Arguments to delete one TrainingSession.
     * @example
     * // Delete one TrainingSession
     * const TrainingSession = await prisma.trainingSession.delete({
     *   where: {
     *     // ... filter to delete one TrainingSession
     *   }
     * })
     * 
    **/
    delete<T extends TrainingSessionDeleteArgs>(
      args: SelectSubset<T, TrainingSessionDeleteArgs>
    ): CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>>

    /**
     * Update one TrainingSession.
     * @param {TrainingSessionUpdateArgs} args - Arguments to update one TrainingSession.
     * @example
     * // Update one TrainingSession
     * const trainingSession = await prisma.trainingSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingSessionUpdateArgs>(
      args: SelectSubset<T, TrainingSessionUpdateArgs>
    ): CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>>

    /**
     * Delete zero or more TrainingSessions.
     * @param {TrainingSessionDeleteManyArgs} args - Arguments to filter TrainingSessions to delete.
     * @example
     * // Delete a few TrainingSessions
     * const { count } = await prisma.trainingSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingSessionDeleteManyArgs>(
      args?: SelectSubset<T, TrainingSessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingSessions
     * const trainingSession = await prisma.trainingSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingSessionUpdateManyArgs>(
      args: SelectSubset<T, TrainingSessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainingSession.
     * @param {TrainingSessionUpsertArgs} args - Arguments to update or create a TrainingSession.
     * @example
     * // Update or create a TrainingSession
     * const trainingSession = await prisma.trainingSession.upsert({
     *   create: {
     *     // ... data to create a TrainingSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingSession we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingSessionUpsertArgs>(
      args: SelectSubset<T, TrainingSessionUpsertArgs>
    ): CheckSelect<T, Prisma__TrainingSessionClient<TrainingSession>, Prisma__TrainingSessionClient<TrainingSessionGetPayload<T>>>

    /**
     * Count the number of TrainingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionCountArgs} args - Arguments to filter TrainingSessions to count.
     * @example
     * // Count the number of TrainingSessions
     * const count = await prisma.trainingSession.count({
     *   where: {
     *     // ... the filter for the TrainingSessions we want to count
     *   }
     * })
    **/
    count<T extends TrainingSessionCountArgs>(
      args?: Subset<T, TrainingSessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingSessionAggregateArgs>(args: Subset<T, TrainingSessionAggregateArgs>): PrismaPromise<GetTrainingSessionAggregateType<T>>

    /**
     * Group by TrainingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingSessionGroupByArgs['orderBy'] }
        : { orderBy?: TrainingSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainingSessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    participants<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TrainingSession findUnique
   */
  export type TrainingSessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * Throw an Error if a TrainingSession can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TrainingSession to fetch.
     * 
    **/
    where: TrainingSessionWhereUniqueInput
  }


  /**
   * TrainingSession findFirst
   */
  export type TrainingSessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * Throw an Error if a TrainingSession can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TrainingSession to fetch.
     * 
    **/
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingSessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingSessions.
     * 
    **/
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingSessions.
     * 
    **/
    distinct?: Enumerable<TrainingSessionScalarFieldEnum>
  }


  /**
   * TrainingSession findMany
   */
  export type TrainingSessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * Filter, which TrainingSessions to fetch.
     * 
    **/
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingSessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingSessions.
     * 
    **/
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TrainingSessionScalarFieldEnum>
  }


  /**
   * TrainingSession create
   */
  export type TrainingSessionCreateArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * The data needed to create a TrainingSession.
     * 
    **/
    data: XOR<TrainingSessionCreateInput, TrainingSessionUncheckedCreateInput>
  }


  /**
   * TrainingSession createMany
   */
  export type TrainingSessionCreateManyArgs = {
    /**
     * The data used to create many TrainingSessions.
     * 
    **/
    data: Enumerable<TrainingSessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TrainingSession update
   */
  export type TrainingSessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * The data needed to update a TrainingSession.
     * 
    **/
    data: XOR<TrainingSessionUpdateInput, TrainingSessionUncheckedUpdateInput>
    /**
     * Choose, which TrainingSession to update.
     * 
    **/
    where: TrainingSessionWhereUniqueInput
  }


  /**
   * TrainingSession updateMany
   */
  export type TrainingSessionUpdateManyArgs = {
    /**
     * The data used to update TrainingSessions.
     * 
    **/
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyInput>
    /**
     * Filter which TrainingSessions to update
     * 
    **/
    where?: TrainingSessionWhereInput
  }


  /**
   * TrainingSession upsert
   */
  export type TrainingSessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * The filter to search for the TrainingSession to update in case it exists.
     * 
    **/
    where: TrainingSessionWhereUniqueInput
    /**
     * In case the TrainingSession found by the `where` argument doesn't exist, create a new TrainingSession with this data.
     * 
    **/
    create: XOR<TrainingSessionCreateInput, TrainingSessionUncheckedCreateInput>
    /**
     * In case the TrainingSession was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TrainingSessionUpdateInput, TrainingSessionUncheckedUpdateInput>
  }


  /**
   * TrainingSession delete
   */
  export type TrainingSessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
    /**
     * Filter which TrainingSession to delete.
     * 
    **/
    where: TrainingSessionWhereUniqueInput
  }


  /**
   * TrainingSession deleteMany
   */
  export type TrainingSessionDeleteManyArgs = {
    /**
     * Filter which TrainingSessions to delete
     * 
    **/
    where?: TrainingSessionWhereInput
  }


  /**
   * TrainingSession without action
   */
  export type TrainingSessionArgs = {
    /**
     * Select specific fields to fetch from the TrainingSession
     * 
    **/
    select?: TrainingSessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingSessionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const StoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    telegramFileId: 'telegramFileId',
    telegramFilePath: 'telegramFilePath',
    type: 'type',
    status: 'status',
    createdAt: 'createdAt',
    publishedAt: 'publishedAt',
    updatedAt: 'updatedAt'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    flagUrl: 'flagUrl',
    createdAt: 'createdAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    countryCode: 'countryCode',
    population: 'population',
    lat: 'lat',
    lng: 'lng',
    timezone: 'timezone',
    createdAt: 'createdAt'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const SportScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    emoji: 'emoji',
    createdAt: 'createdAt'
  };

  export type SportScalarFieldEnum = (typeof SportScalarFieldEnum)[keyof typeof SportScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    telegramId: 'telegramId',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    isVerified: 'isVerified',
    role: 'role',
    countryCode: 'countryCode',
    cityId: 'cityId',
    sportId: 'sportId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    authSource: 'authSource',
    lastLogin: 'lastLogin',
    ballsBalance: 'ballsBalance',
    casesOpened: 'casesOpened',
    telegramChatId: 'telegramChatId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BallTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    description: 'description',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type BallTransactionScalarFieldEnum = (typeof BallTransactionScalarFieldEnum)[keyof typeof BallTransactionScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    image: 'image',
    rewards: 'rewards',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const CaseOpeningScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    caseId: 'caseId',
    reward: 'reward',
    createdAt: 'createdAt'
  };

  export type CaseOpeningScalarFieldEnum = (typeof CaseOpeningScalarFieldEnum)[keyof typeof CaseOpeningScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    player1Id: 'player1Id',
    player2Id: 'player2Id',
    optionalId: 'optionalId',
    type: 'type',
    state: 'state',
    score: 'score',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const TrainingScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    location: 'location',
    time: 'time',
    participantLimit: 'participantLimit',
    description: 'description',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingScalarFieldEnum = (typeof TrainingScalarFieldEnum)[keyof typeof TrainingScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    creatorId: 'creatorId',
    startDate: 'startDate',
    endDate: 'endDate',
    formatDetails: 'formatDetails',
    minPlayers: 'minPlayers',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    isRanked: 'isRanked',
    locationId: 'locationId',
    locationName: 'locationName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const TournamentMatchScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    round: 'round',
    group: 'group',
    playerAId: 'playerAId',
    playerBId: 'playerBId',
    score: 'score',
    winnerId: 'winnerId',
    status: 'status',
    court: 'court',
    scheduledAt: 'scheduledAt',
    confirmedBy: 'confirmedBy',
    isThirdPlaceMatch: 'isThirdPlaceMatch',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentMatchScalarFieldEnum = (typeof TournamentMatchScalarFieldEnum)[keyof typeof TournamentMatchScalarFieldEnum]


  export const InviteScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    trainingId: 'trainingId',
    senderId: 'senderId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type InviteScalarFieldEnum = (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    avatarUrl: 'avatarUrl',
    city: 'city',
    countryCode: 'countryCode',
    ntrpRating: 'ntrpRating',
    ratingPoints: 'ratingPoints',
    matchesPlayed: 'matchesPlayed',
    matchWins: 'matchWins',
    matchLosses: 'matchLosses',
    tournamentsPlayed: 'tournamentsPlayed',
    tournamentsWon: 'tournamentsWon',
    lastActivity: 'lastActivity',
    achievements: 'achievements',
    isPublicProfile: 'isPublicProfile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    preferredCourt: 'preferredCourt',
    dominantHand: 'dominantHand',
    preferredPlayTime: 'preferredPlayTime',
    playsInTournaments: 'playsInTournaments',
    weeklyPlayFrequency: 'weeklyPlayFrequency',
    backhandType: 'backhandType',
    preferredSurface: 'preferredSurface',
    playingStyle: 'playingStyle',
    favoriteShot: 'favoriteShot',
    racket: 'racket',
    opponentPreference: 'opponentPreference',
    initialRatingPoints: 'initialRatingPoints',
    selfAssessedLevel: 'selfAssessedLevel',
    profileStepOneCompleted: 'profileStepOneCompleted',
    profileStepTwoCompleted: 'profileStepTwoCompleted'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const GameRequestScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    creatorId: 'creatorId',
    locationName: 'locationName',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    gameMode: 'gameMode',
    dateTime: 'dateTime',
    paymentType: 'paymentType',
    ratingType: 'ratingType',
    formatInfo: 'formatInfo',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameRequestScalarFieldEnum = (typeof GameRequestScalarFieldEnum)[keyof typeof GameRequestScalarFieldEnum]


  export const RequestResponseScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId',
    status: 'status',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestResponseScalarFieldEnum = (typeof RequestResponseScalarFieldEnum)[keyof typeof RequestResponseScalarFieldEnum]


  export const TrainingSessionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    creatorId: 'creatorId',
    locationName: 'locationName',
    courtSurface: 'courtSurface',
    minLevel: 'minLevel',
    maxLevel: 'maxLevel',
    maxSlots: 'maxSlots',
    currentSlots: 'currentSlots',
    paymentType: 'paymentType',
    pricePerPerson: 'pricePerPerson',
    dateTime: 'dateTime',
    endTime: 'endTime',
    status: 'status',
    trainingType: 'trainingType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingSessionScalarFieldEnum = (typeof TrainingSessionScalarFieldEnum)[keyof typeof TrainingSessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type StoryWhereInput = {
    AND?: Enumerable<StoryWhereInput>
    OR?: Enumerable<StoryWhereInput>
    NOT?: Enumerable<StoryWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    telegramFileId?: StringFilter | string
    telegramFilePath?: StringNullableFilter | string | null
    type?: EnumMediaTypeFilter | MediaType
    status?: EnumStoryStatusFilter | StoryStatus
    createdAt?: DateTimeFilter | Date | string
    publishedAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StoryWhereUniqueInput = {
    id?: number
  }

  export type StoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<StoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    telegramFileId?: StringWithAggregatesFilter | string
    telegramFilePath?: StringNullableWithAggregatesFilter | string | null
    type?: EnumMediaTypeWithAggregatesFilter | MediaType
    status?: EnumStoryStatusWithAggregatesFilter | StoryStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    publishedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CountryWhereInput = {
    AND?: Enumerable<CountryWhereInput>
    OR?: Enumerable<CountryWhereInput>
    NOT?: Enumerable<CountryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    code?: StringFilter | string
    flagUrl?: StringNullableFilter | string | null
    cities?: CityListRelationFilter
    users?: UserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    cities?: CityOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    createdAt?: SortOrder
  }

  export type CountryWhereUniqueInput = {
    id?: number
    code?: string
  }

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CountryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CountryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CountryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    flagUrl?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CityWhereInput = {
    AND?: Enumerable<CityWhereInput>
    OR?: Enumerable<CityWhereInput>
    NOT?: Enumerable<CityWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    countryCode?: StringFilter | string
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    population?: IntFilter | number
    lat?: FloatFilter | number
    lng?: FloatFilter | number
    timezone?: StringNullableFilter | string | null
    users?: UserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    country?: CountryOrderByWithRelationInput
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    users?: UserOrderByRelationAggregateInput
    createdAt?: SortOrder
  }

  export type CityWhereUniqueInput = {
    id?: number
    name_countryCode?: CityNameCountryCodeCompoundUniqueInput
  }

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    _count?: CityCountOrderByAggregateInput
    _avg?: CityAvgOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
    _sum?: CitySumOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CityScalarWhereWithAggregatesInput>
    OR?: Enumerable<CityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    countryCode?: StringWithAggregatesFilter | string
    population?: IntWithAggregatesFilter | number
    lat?: FloatWithAggregatesFilter | number
    lng?: FloatWithAggregatesFilter | number
    timezone?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SportWhereInput = {
    AND?: Enumerable<SportWhereInput>
    OR?: Enumerable<SportWhereInput>
    NOT?: Enumerable<SportWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    slug?: StringFilter | string
    emoji?: StringNullableFilter | string | null
    users?: UserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type SportOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    users?: UserOrderByRelationAggregateInput
    createdAt?: SortOrder
  }

  export type SportWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type SportOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    _count?: SportCountOrderByAggregateInput
    _avg?: SportAvgOrderByAggregateInput
    _max?: SportMaxOrderByAggregateInput
    _min?: SportMinOrderByAggregateInput
    _sum?: SportSumOrderByAggregateInput
  }

  export type SportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SportScalarWhereWithAggregatesInput>
    OR?: Enumerable<SportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SportScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    emoji?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    telegramId?: StringFilter | string
    username?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    isVerified?: BoolFilter | boolean
    role?: EnumRoleFilter | Role
    countryCode?: StringNullableFilter | string | null
    country?: XOR<CountryRelationFilter, CountryWhereInput> | null
    cityId?: IntNullableFilter | number | null
    city?: XOR<CityRelationFilter, CityWhereInput> | null
    sportId?: IntNullableFilter | number | null
    sport?: XOR<SportRelationFilter, SportWhereInput> | null
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput> | null
    matches?: MatchListRelationFilter
    createdMatches?: MatchListRelationFilter
    createdTrainings?: TrainingListRelationFilter
    createdTrainingSessions?: TrainingSessionListRelationFilter
    createdTournaments?: TournamentListRelationFilter
    sentInvites?: InviteListRelationFilter
    receivedInvites?: InviteListRelationFilter
    notifications?: NotificationListRelationFilter
    tournaments?: TournamentListRelationFilter
    createdRequests?: GameRequestListRelationFilter
    requestParticipations?: GameRequestListRelationFilter
    requestResponses?: RequestResponseListRelationFilter
    trainingSessionParticipations?: TrainingSessionListRelationFilter
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    authSource?: EnumAuthSourceFilter | AuthSource
    lastLogin?: DateTimeNullableFilter | Date | string | null
    ballsBalance?: IntFilter | number
    casesOpened?: IntFilter | number
    telegramChatId?: BigIntNullableFilter | bigint | number | null
    ballTransactions?: BallTransactionListRelationFilter
    caseOpenings?: CaseOpeningListRelationFilter
    stories?: StoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    country?: CountryOrderByWithRelationInput
    cityId?: SortOrder
    city?: CityOrderByWithRelationInput
    sportId?: SortOrder
    sport?: SportOrderByWithRelationInput
    profile?: UserProfileOrderByWithRelationInput
    matches?: MatchOrderByRelationAggregateInput
    createdMatches?: MatchOrderByRelationAggregateInput
    createdTrainings?: TrainingOrderByRelationAggregateInput
    createdTrainingSessions?: TrainingSessionOrderByRelationAggregateInput
    createdTournaments?: TournamentOrderByRelationAggregateInput
    sentInvites?: InviteOrderByRelationAggregateInput
    receivedInvites?: InviteOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
    createdRequests?: GameRequestOrderByRelationAggregateInput
    requestParticipations?: GameRequestOrderByRelationAggregateInput
    requestResponses?: RequestResponseOrderByRelationAggregateInput
    trainingSessionParticipations?: TrainingSessionOrderByRelationAggregateInput
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    ballTransactions?: BallTransactionOrderByRelationAggregateInput
    caseOpenings?: CaseOpeningOrderByRelationAggregateInput
    stories?: StoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    telegramId?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    telegramId?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringNullableWithAggregatesFilter | string | null
    isVerified?: BoolWithAggregatesFilter | boolean
    role?: EnumRoleWithAggregatesFilter | Role
    countryCode?: StringNullableWithAggregatesFilter | string | null
    cityId?: IntNullableWithAggregatesFilter | number | null
    sportId?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    authSource?: EnumAuthSourceWithAggregatesFilter | AuthSource
    lastLogin?: DateTimeNullableWithAggregatesFilter | Date | string | null
    ballsBalance?: IntWithAggregatesFilter | number
    casesOpened?: IntWithAggregatesFilter | number
    telegramChatId?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type BallTransactionWhereInput = {
    AND?: Enumerable<BallTransactionWhereInput>
    OR?: Enumerable<BallTransactionWhereInput>
    NOT?: Enumerable<BallTransactionWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    amount?: IntFilter | number
    description?: StringFilter | string
    type?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type BallTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    amount?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionWhereUniqueInput = {
    id?: number
  }

  export type BallTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: BallTransactionCountOrderByAggregateInput
    _avg?: BallTransactionAvgOrderByAggregateInput
    _max?: BallTransactionMaxOrderByAggregateInput
    _min?: BallTransactionMinOrderByAggregateInput
    _sum?: BallTransactionSumOrderByAggregateInput
  }

  export type BallTransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BallTransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<BallTransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BallTransactionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CaseWhereInput = {
    AND?: Enumerable<CaseWhereInput>
    OR?: Enumerable<CaseWhereInput>
    NOT?: Enumerable<CaseWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    price?: IntFilter | number
    image?: StringNullableFilter | string | null
    rewards?: JsonFilter
    isActive?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    openings?: CaseOpeningListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rewards?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openings?: CaseOpeningOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = {
    id?: number
  }

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rewards?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseCountOrderByAggregateInput
    _avg?: CaseAvgOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
    _sum?: CaseSumOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CaseScalarWhereWithAggregatesInput>
    OR?: Enumerable<CaseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CaseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    image?: StringNullableWithAggregatesFilter | string | null
    rewards?: JsonWithAggregatesFilter
    isActive?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CaseOpeningWhereInput = {
    AND?: Enumerable<CaseOpeningWhereInput>
    OR?: Enumerable<CaseOpeningWhereInput>
    NOT?: Enumerable<CaseOpeningWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    caseId?: IntFilter | number
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    reward?: JsonFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type CaseOpeningOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    caseId?: SortOrder
    case?: CaseOrderByWithRelationInput
    reward?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningWhereUniqueInput = {
    id?: number
  }

  export type CaseOpeningOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    reward?: SortOrder
    createdAt?: SortOrder
    _count?: CaseOpeningCountOrderByAggregateInput
    _avg?: CaseOpeningAvgOrderByAggregateInput
    _max?: CaseOpeningMaxOrderByAggregateInput
    _min?: CaseOpeningMinOrderByAggregateInput
    _sum?: CaseOpeningSumOrderByAggregateInput
  }

  export type CaseOpeningScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CaseOpeningScalarWhereWithAggregatesInput>
    OR?: Enumerable<CaseOpeningScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CaseOpeningScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    caseId?: IntWithAggregatesFilter | number
    reward?: JsonWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MatchWhereInput = {
    AND?: Enumerable<MatchWhereInput>
    OR?: Enumerable<MatchWhereInput>
    NOT?: Enumerable<MatchWhereInput>
    id?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    player1?: XOR<UserRelationFilter, UserWhereInput> | null
    player1Id?: IntNullableFilter | number | null
    player2Id?: IntNullableFilter | number | null
    optionalId?: IntNullableFilter | number | null
    type?: EnumMatchTypeFilter | MatchType
    state?: EnumMatchStateFilter | MatchState
    score?: StringNullableFilter | string | null
    invites?: InviteListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    player1?: UserOrderByWithRelationInput
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    invites?: InviteOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchWhereUniqueInput = {
    id?: number
  }

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creatorId?: IntWithAggregatesFilter | number
    player1Id?: IntNullableWithAggregatesFilter | number | null
    player2Id?: IntNullableWithAggregatesFilter | number | null
    optionalId?: IntNullableWithAggregatesFilter | number | null
    type?: EnumMatchTypeWithAggregatesFilter | MatchType
    state?: EnumMatchStateWithAggregatesFilter | MatchState
    score?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TrainingWhereInput = {
    AND?: Enumerable<TrainingWhereInput>
    OR?: Enumerable<TrainingWhereInput>
    NOT?: Enumerable<TrainingWhereInput>
    id?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    location?: StringFilter | string
    time?: DateTimeFilter | Date | string
    participantLimit?: IntFilter | number
    description?: StringNullableFilter | string | null
    state?: EnumTrainingStateFilter | TrainingState
    invites?: InviteListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TrainingOrderByWithRelationInput = {
    id?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    invites?: InviteOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingWhereUniqueInput = {
    id?: number
  }

  export type TrainingOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingCountOrderByAggregateInput
    _avg?: TrainingAvgOrderByAggregateInput
    _max?: TrainingMaxOrderByAggregateInput
    _min?: TrainingMinOrderByAggregateInput
    _sum?: TrainingSumOrderByAggregateInput
  }

  export type TrainingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creatorId?: IntWithAggregatesFilter | number
    location?: StringWithAggregatesFilter | string
    time?: DateTimeWithAggregatesFilter | Date | string
    participantLimit?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    state?: EnumTrainingStateWithAggregatesFilter | TrainingState
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TournamentWhereInput = {
    AND?: Enumerable<TournamentWhereInput>
    OR?: Enumerable<TournamentWhereInput>
    NOT?: Enumerable<TournamentWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    type?: EnumTournamentTypeFilter | TournamentType
    status?: StringFilter | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    formatDetails?: JsonNullableFilter
    minPlayers?: IntFilter | number
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    isRanked?: BoolFilter | boolean
    locationId?: IntNullableFilter | number | null
    locationName?: StringNullableFilter | string | null
    players?: UserListRelationFilter
    matches?: TournamentMatchListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    players?: UserOrderByRelationAggregateInput
    matches?: TournamentMatchOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentWhereUniqueInput = {
    id?: number
  }

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    OR?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    type?: EnumTournamentTypeWithAggregatesFilter | TournamentType
    status?: StringWithAggregatesFilter | string
    creatorId?: IntWithAggregatesFilter | number
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    formatDetails?: JsonNullableWithAggregatesFilter
    minPlayers?: IntWithAggregatesFilter | number
    maxPlayers?: IntWithAggregatesFilter | number
    currentPlayers?: IntWithAggregatesFilter | number
    isRanked?: BoolWithAggregatesFilter | boolean
    locationId?: IntNullableWithAggregatesFilter | number | null
    locationName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TournamentMatchWhereInput = {
    AND?: Enumerable<TournamentMatchWhereInput>
    OR?: Enumerable<TournamentMatchWhereInput>
    NOT?: Enumerable<TournamentMatchWhereInput>
    id?: IntFilter | number
    tournament?: XOR<TournamentRelationFilter, TournamentWhereInput>
    tournamentId?: IntFilter | number
    round?: IntNullableFilter | number | null
    group?: StringNullableFilter | string | null
    playerAId?: IntFilter | number
    playerBId?: IntNullableFilter | number | null
    score?: StringNullableFilter | string | null
    winnerId?: IntNullableFilter | number | null
    status?: StringFilter | string
    court?: StringNullableFilter | string | null
    scheduledAt?: DateTimeNullableFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentMatchOrderByWithRelationInput = {
    id?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchWhereUniqueInput = {
    id?: number
  }

  export type TournamentMatchOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentMatchCountOrderByAggregateInput
    _avg?: TournamentMatchAvgOrderByAggregateInput
    _max?: TournamentMatchMaxOrderByAggregateInput
    _min?: TournamentMatchMinOrderByAggregateInput
    _sum?: TournamentMatchSumOrderByAggregateInput
  }

  export type TournamentMatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tournamentId?: IntWithAggregatesFilter | number
    round?: IntNullableWithAggregatesFilter | number | null
    group?: StringNullableWithAggregatesFilter | string | null
    playerAId?: IntWithAggregatesFilter | number
    playerBId?: IntNullableWithAggregatesFilter | number | null
    score?: StringNullableWithAggregatesFilter | string | null
    winnerId?: IntNullableWithAggregatesFilter | number | null
    status?: StringWithAggregatesFilter | string
    court?: StringNullableWithAggregatesFilter | string | null
    scheduledAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type InviteWhereInput = {
    AND?: Enumerable<InviteWhereInput>
    OR?: Enumerable<InviteWhereInput>
    NOT?: Enumerable<InviteWhereInput>
    id?: IntFilter | number
    match?: XOR<MatchRelationFilter, MatchWhereInput> | null
    matchId?: IntNullableFilter | number | null
    training?: XOR<TrainingRelationFilter, TrainingWhereInput> | null
    trainingId?: IntNullableFilter | number | null
    sender?: XOR<UserRelationFilter, UserWhereInput>
    senderId?: IntFilter | number
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    receiverId?: IntFilter | number
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
  }

  export type InviteOrderByWithRelationInput = {
    id?: SortOrder
    match?: MatchOrderByWithRelationInput
    matchId?: SortOrder
    training?: TrainingOrderByWithRelationInput
    trainingId?: SortOrder
    sender?: UserOrderByWithRelationInput
    senderId?: SortOrder
    receiver?: UserOrderByWithRelationInput
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteWhereUniqueInput = {
    id?: number
  }

  export type InviteOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: InviteCountOrderByAggregateInput
    _avg?: InviteAvgOrderByAggregateInput
    _max?: InviteMaxOrderByAggregateInput
    _min?: InviteMinOrderByAggregateInput
    _sum?: InviteSumOrderByAggregateInput
  }

  export type InviteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InviteScalarWhereWithAggregatesInput>
    OR?: Enumerable<InviteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InviteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    matchId?: IntNullableWithAggregatesFilter | number | null
    trainingId?: IntNullableWithAggregatesFilter | number | null
    senderId?: IntWithAggregatesFilter | number
    receiverId?: IntWithAggregatesFilter | number
    status?: EnumInviteStatusWithAggregatesFilter | InviteStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    message?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationWhereUniqueInput = {
    id?: number
  }

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: Enumerable<UserProfileWhereInput>
    OR?: Enumerable<UserProfileWhereInput>
    NOT?: Enumerable<UserProfileWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    avatarUrl?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    countryCode?: StringNullableFilter | string | null
    ntrpRating?: FloatNullableFilter | number | null
    ratingPoints?: IntFilter | number
    matchesPlayed?: IntFilter | number
    matchWins?: IntFilter | number
    matchLosses?: IntFilter | number
    tournamentsPlayed?: IntFilter | number
    tournamentsWon?: IntFilter | number
    lastActivity?: DateTimeNullableFilter | Date | string | null
    achievements?: JsonNullableFilter
    isPublicProfile?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    preferredCourt?: StringNullableFilter | string | null
    dominantHand?: StringNullableFilter | string | null
    preferredPlayTime?: StringNullableListFilter
    playsInTournaments?: BoolFilter | boolean
    weeklyPlayFrequency?: StringNullableFilter | string | null
    backhandType?: StringNullableFilter | string | null
    preferredSurface?: StringNullableFilter | string | null
    playingStyle?: StringNullableFilter | string | null
    favoriteShot?: StringNullableFilter | string | null
    racket?: StringNullableFilter | string | null
    opponentPreference?: StringNullableFilter | string | null
    initialRatingPoints?: IntNullableFilter | number | null
    selfAssessedLevel?: StringNullableFilter | string | null
    profileStepOneCompleted?: BoolFilter | boolean
    profileStepTwoCompleted?: BoolFilter | boolean
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    avatarUrl?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    countryCode?: StringNullableWithAggregatesFilter | string | null
    ntrpRating?: FloatNullableWithAggregatesFilter | number | null
    ratingPoints?: IntWithAggregatesFilter | number
    matchesPlayed?: IntWithAggregatesFilter | number
    matchWins?: IntWithAggregatesFilter | number
    matchLosses?: IntWithAggregatesFilter | number
    tournamentsPlayed?: IntWithAggregatesFilter | number
    tournamentsWon?: IntWithAggregatesFilter | number
    lastActivity?: DateTimeNullableWithAggregatesFilter | Date | string | null
    achievements?: JsonNullableWithAggregatesFilter
    isPublicProfile?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    preferredCourt?: StringNullableWithAggregatesFilter | string | null
    dominantHand?: StringNullableWithAggregatesFilter | string | null
    preferredPlayTime?: StringNullableListFilter
    playsInTournaments?: BoolWithAggregatesFilter | boolean
    weeklyPlayFrequency?: StringNullableWithAggregatesFilter | string | null
    backhandType?: StringNullableWithAggregatesFilter | string | null
    preferredSurface?: StringNullableWithAggregatesFilter | string | null
    playingStyle?: StringNullableWithAggregatesFilter | string | null
    favoriteShot?: StringNullableWithAggregatesFilter | string | null
    racket?: StringNullableWithAggregatesFilter | string | null
    opponentPreference?: StringNullableWithAggregatesFilter | string | null
    initialRatingPoints?: IntNullableWithAggregatesFilter | number | null
    selfAssessedLevel?: StringNullableWithAggregatesFilter | string | null
    profileStepOneCompleted?: BoolWithAggregatesFilter | boolean
    profileStepTwoCompleted?: BoolWithAggregatesFilter | boolean
  }

  export type GameRequestWhereInput = {
    AND?: Enumerable<GameRequestWhereInput>
    OR?: Enumerable<GameRequestWhereInput>
    NOT?: Enumerable<GameRequestWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    creatorId?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    locationName?: StringNullableFilter | string | null
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    gameMode?: StringFilter | string
    dateTime?: DateTimeFilter | Date | string
    paymentType?: StringFilter | string
    ratingType?: StringFilter | string
    formatInfo?: JsonNullableFilter
    status?: StringFilter | string
    participants?: UserListRelationFilter
    responses?: RequestResponseListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameRequestOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    creator?: UserOrderByWithRelationInput
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrder
    status?: SortOrder
    participants?: UserOrderByRelationAggregateInput
    responses?: RequestResponseOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestWhereUniqueInput = {
    id?: number
  }

  export type GameRequestOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameRequestCountOrderByAggregateInput
    _avg?: GameRequestAvgOrderByAggregateInput
    _max?: GameRequestMaxOrderByAggregateInput
    _min?: GameRequestMinOrderByAggregateInput
    _sum?: GameRequestSumOrderByAggregateInput
  }

  export type GameRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameRequestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    creatorId?: IntWithAggregatesFilter | number
    locationName?: StringNullableWithAggregatesFilter | string | null
    maxPlayers?: IntWithAggregatesFilter | number
    currentPlayers?: IntWithAggregatesFilter | number
    gameMode?: StringWithAggregatesFilter | string
    dateTime?: DateTimeWithAggregatesFilter | Date | string
    paymentType?: StringWithAggregatesFilter | string
    ratingType?: StringWithAggregatesFilter | string
    formatInfo?: JsonNullableWithAggregatesFilter
    status?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RequestResponseWhereInput = {
    AND?: Enumerable<RequestResponseWhereInput>
    OR?: Enumerable<RequestResponseWhereInput>
    NOT?: Enumerable<RequestResponseWhereInput>
    id?: IntFilter | number
    requestId?: IntFilter | number
    request?: XOR<GameRequestRelationFilter, GameRequestWhereInput>
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    status?: StringFilter | string
    message?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type RequestResponseOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    request?: GameRequestOrderByWithRelationInput
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseWhereUniqueInput = {
    id?: number
    requestId_userId?: RequestResponseRequestIdUserIdCompoundUniqueInput
  }

  export type RequestResponseOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestResponseCountOrderByAggregateInput
    _avg?: RequestResponseAvgOrderByAggregateInput
    _max?: RequestResponseMaxOrderByAggregateInput
    _min?: RequestResponseMinOrderByAggregateInput
    _sum?: RequestResponseSumOrderByAggregateInput
  }

  export type RequestResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RequestResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<RequestResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RequestResponseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    requestId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    message?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TrainingSessionWhereInput = {
    AND?: Enumerable<TrainingSessionWhereInput>
    OR?: Enumerable<TrainingSessionWhereInput>
    NOT?: Enumerable<TrainingSessionWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    creatorId?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    locationName?: StringNullableFilter | string | null
    courtSurface?: EnumCourtSurfaceNullableFilter | CourtSurface | null
    minLevel?: FloatNullableFilter | number | null
    maxLevel?: FloatNullableFilter | number | null
    maxSlots?: IntFilter | number
    currentSlots?: IntFilter | number
    paymentType?: EnumPaymentTypeFilter | PaymentType
    pricePerPerson?: FloatNullableFilter | number | null
    dateTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    status?: EnumTrainingStateFilter | TrainingState
    trainingType?: EnumTrainingTypeFilter | TrainingType
    participants?: UserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TrainingSessionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    creator?: UserOrderByWithRelationInput
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    participants?: UserOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionWhereUniqueInput = {
    id?: number
  }

  export type TrainingSessionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingSessionCountOrderByAggregateInput
    _avg?: TrainingSessionAvgOrderByAggregateInput
    _max?: TrainingSessionMaxOrderByAggregateInput
    _min?: TrainingSessionMinOrderByAggregateInput
    _sum?: TrainingSessionSumOrderByAggregateInput
  }

  export type TrainingSessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainingSessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainingSessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainingSessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    creatorId?: IntWithAggregatesFilter | number
    locationName?: StringNullableWithAggregatesFilter | string | null
    courtSurface?: EnumCourtSurfaceNullableWithAggregatesFilter | CourtSurface | null
    minLevel?: FloatNullableWithAggregatesFilter | number | null
    maxLevel?: FloatNullableWithAggregatesFilter | number | null
    maxSlots?: IntWithAggregatesFilter | number
    currentSlots?: IntWithAggregatesFilter | number
    paymentType?: EnumPaymentTypeWithAggregatesFilter | PaymentType
    pricePerPerson?: FloatNullableWithAggregatesFilter | number | null
    dateTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    status?: EnumTrainingStateWithAggregatesFilter | TrainingState
    trainingType?: EnumTrainingTypeWithAggregatesFilter | TrainingType
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StoryCreateInput = {
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStoriesInput
  }

  export type StoryUncheckedCreateInput = {
    id?: number
    userId: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUpdateInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStoriesInput
  }

  export type StoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateManyInput = {
    id?: number
    userId: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUpdateManyMutationInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateInput = {
    name: string
    code: string
    flagUrl?: string | null
    cities?: CityCreateNestedManyWithoutCountryInput
    users?: UserCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    cities?: CityUncheckedCreateNestedManyWithoutCountryInput
    users?: UserUncheckedCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cities?: CityUpdateManyWithoutCountryInput
    users?: UserUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cities?: CityUncheckedUpdateManyWithoutCountryInput
    users?: UserUncheckedUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityCreateInput = {
    name: string
    country: CountryCreateNestedOneWithoutCitiesInput
    population: number
    lat: number
    lng: number
    timezone?: string | null
    users?: UserCreateNestedManyWithoutCityInput
    createdAt?: Date | string
  }

  export type CityUncheckedCreateInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCityInput
    createdAt?: Date | string
  }

  export type CityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutCitiesInput
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCityInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCityInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityCreateManyInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type CityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportCreateInput = {
    title: string
    slug: string
    emoji?: string | null
    users?: UserCreateNestedManyWithoutSportInput
    createdAt?: Date | string
  }

  export type SportUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    users?: UserUncheckedCreateNestedManyWithoutSportInput
    createdAt?: Date | string
  }

  export type SportUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutSportInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutSportInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportCreateManyInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    createdAt?: Date | string
  }

  export type SportUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
  }

  export type UserUpdateManyMutationInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type BallTransactionCreateInput = {
    user: UserCreateNestedOneWithoutBallTransactionsInput
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type BallTransactionUncheckedCreateInput = {
    id?: number
    userId: number
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type BallTransactionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutBallTransactionsInput
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionCreateManyInput = {
    id?: number
    userId: number
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type BallTransactionUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateInput = {
    name: string
    description: string
    price: number
    image?: string | null
    rewards: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    openings?: CaseOpeningCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    price: number
    image?: string | null
    rewards: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    openings?: CaseOpeningUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openings?: CaseOpeningUpdateManyWithoutCaseInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openings?: CaseOpeningUncheckedUpdateManyWithoutCaseInput
  }

  export type CaseCreateManyInput = {
    id?: number
    name: string
    description: string
    price: number
    image?: string | null
    rewards: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningCreateInput = {
    user: UserCreateNestedOneWithoutCaseOpeningsInput
    case: CaseCreateNestedOneWithoutOpeningsInput
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUncheckedCreateInput = {
    id?: number
    userId: number
    caseId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUpdateInput = {
    user?: UserUpdateOneRequiredWithoutCaseOpeningsInput
    case?: CaseUpdateOneRequiredWithoutOpeningsInput
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningCreateManyInput = {
    id?: number
    userId: number
    caseId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUpdateManyMutationInput = {
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingCreateInput = {
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsInput
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUncheckedUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingCreateManyInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateInput = {
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUncheckedCreateInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateInput = {
    tournament?: TournamentUpdateOneRequiredWithoutMatchesInput
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateManyMutationInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateManyMutationInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    user: UserCreateNestedOneWithoutNotificationsInput
    message: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    user?: UserUpdateOneRequiredWithoutNotificationsInput
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    user: UserCreateNestedOneWithoutProfileInput
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUncheckedCreateInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProfileInput
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileCreateManyInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUpdateManyMutationInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameRequestCreateInput = {
    type: string
    title: string
    description?: string | null
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUncheckedCreateInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsInput
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUpdateManyWithoutRequestParticipationsInput
    responses?: RequestResponseUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestCreateManyInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateInput = {
    request: GameRequestCreateNestedOneWithoutResponsesInput
    user: UserCreateNestedOneWithoutRequestResponsesInput
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUncheckedCreateInput = {
    id?: number
    requestId: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUpdateInput = {
    request?: GameRequestUpdateOneRequiredWithoutResponsesInput
    user?: UserUpdateOneRequiredWithoutRequestResponsesInput
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateManyInput = {
    id?: number
    requestId: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionCreateInput = {
    title: string
    description?: string | null
    creator: UserCreateNestedOneWithoutCreatedTrainingSessionsInput
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    participants?: UserCreateNestedManyWithoutTrainingSessionParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    participants?: UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingSessionsInput
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    participants?: UserUpdateManyWithoutTrainingSessionParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    participants?: UserUncheckedUpdateManyWithoutTrainingSessionParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumMediaTypeFilter = {
    equals?: MediaType
    in?: Enumerable<MediaType>
    notIn?: Enumerable<MediaType>
    not?: NestedEnumMediaTypeFilter | MediaType
  }

  export type EnumStoryStatusFilter = {
    equals?: StoryStatus
    in?: Enumerable<StoryStatus>
    notIn?: Enumerable<StoryStatus>
    not?: NestedEnumStoryStatusFilter | StoryStatus
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumMediaTypeWithAggregatesFilter = {
    equals?: MediaType
    in?: Enumerable<MediaType>
    notIn?: Enumerable<MediaType>
    not?: NestedEnumMediaTypeWithAggregatesFilter | MediaType
    _count?: NestedIntFilter
    _min?: NestedEnumMediaTypeFilter
    _max?: NestedEnumMediaTypeFilter
  }

  export type EnumStoryStatusWithAggregatesFilter = {
    equals?: StoryStatus
    in?: Enumerable<StoryStatus>
    notIn?: Enumerable<StoryStatus>
    not?: NestedEnumStoryStatusWithAggregatesFilter | StoryStatus
    _count?: NestedIntFilter
    _min?: NestedEnumStoryStatusFilter
    _max?: NestedEnumStoryStatusFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type CityListRelationFilter = {
    every?: CityWhereInput
    some?: CityWhereInput
    none?: CityWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryRelationFilter = {
    is?: CountryWhereInput | null
    isNot?: CountryWhereInput | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CityNameCountryCodeCompoundUniqueInput = {
    name: string
    countryCode: string
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CityAvgOrderByAggregateInput = {
    id?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CitySumOrderByAggregateInput = {
    id?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type SportCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type SportAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SportMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type SportMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type SportSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CityRelationFilter = {
    is?: CityWhereInput | null
    isNot?: CityWhereInput | null
  }

  export type SportRelationFilter = {
    is?: SportWhereInput | null
    isNot?: SportWhereInput | null
  }

  export type UserProfileRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type TrainingListRelationFilter = {
    every?: TrainingWhereInput
    some?: TrainingWhereInput
    none?: TrainingWhereInput
  }

  export type TrainingSessionListRelationFilter = {
    every?: TrainingSessionWhereInput
    some?: TrainingSessionWhereInput
    none?: TrainingSessionWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type InviteListRelationFilter = {
    every?: InviteWhereInput
    some?: InviteWhereInput
    none?: InviteWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type GameRequestListRelationFilter = {
    every?: GameRequestWhereInput
    some?: GameRequestWhereInput
    none?: GameRequestWhereInput
  }

  export type RequestResponseListRelationFilter = {
    every?: RequestResponseWhereInput
    some?: RequestResponseWhereInput
    none?: RequestResponseWhereInput
  }

  export type EnumAuthSourceFilter = {
    equals?: AuthSource
    in?: Enumerable<AuthSource>
    notIn?: Enumerable<AuthSource>
    not?: NestedEnumAuthSourceFilter | AuthSource
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type BallTransactionListRelationFilter = {
    every?: BallTransactionWhereInput
    some?: BallTransactionWhereInput
    none?: BallTransactionWhereInput
  }

  export type CaseOpeningListRelationFilter = {
    every?: CaseOpeningWhereInput
    some?: CaseOpeningWhereInput
    none?: CaseOpeningWhereInput
  }

  export type StoryListRelationFilter = {
    every?: StoryWhereInput
    some?: StoryWhereInput
    none?: StoryWhereInput
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BallTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseOpeningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumAuthSourceWithAggregatesFilter = {
    equals?: AuthSource
    in?: Enumerable<AuthSource>
    notIn?: Enumerable<AuthSource>
    not?: NestedEnumAuthSourceWithAggregatesFilter | AuthSource
    _count?: NestedIntFilter
    _min?: NestedEnumAuthSourceFilter
    _max?: NestedEnumAuthSourceFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type BallTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type BallTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rewards?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type CaseRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type CaseOpeningCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    reward?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
  }

  export type CaseOpeningMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
  }

  export type EnumMatchTypeFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeFilter | MatchType
  }

  export type EnumMatchStateFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateFilter | MatchState
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
  }

  export type EnumMatchTypeWithAggregatesFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeWithAggregatesFilter | MatchType
    _count?: NestedIntFilter
    _min?: NestedEnumMatchTypeFilter
    _max?: NestedEnumMatchTypeFilter
  }

  export type EnumMatchStateWithAggregatesFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateWithAggregatesFilter | MatchState
    _count?: NestedIntFilter
    _min?: NestedEnumMatchStateFilter
    _max?: NestedEnumMatchStateFilter
  }

  export type EnumTrainingStateFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateFilter | TrainingState
  }

  export type TrainingCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type TrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type EnumTrainingStateWithAggregatesFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateWithAggregatesFilter | TrainingState
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingStateFilter
    _max?: NestedEnumTrainingStateFilter
  }

  export type EnumTournamentTypeFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeFilter | TournamentType
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type TournamentMatchListRelationFilter = {
    every?: TournamentMatchWhereInput
    some?: TournamentMatchWhereInput
    none?: TournamentMatchWhereInput
  }

  export type TournamentMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type EnumTournamentTypeWithAggregatesFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeWithAggregatesFilter | TournamentType
    _count?: NestedIntFilter
    _min?: NestedEnumTournamentTypeFilter
    _max?: NestedEnumTournamentTypeFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type TournamentRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null
    has?: number | null
    hasEvery?: Enumerable<number>
    hasSome?: Enumerable<number>
    isEmpty?: boolean
  }

  export type TournamentMatchCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchAvgOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type TournamentMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchSumOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput | null
    isNot?: MatchWhereInput | null
  }

  export type TrainingRelationFilter = {
    is?: TrainingWhereInput | null
    isNot?: TrainingWhereInput | null
  }

  export type EnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type InviteCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteAvgOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type InviteMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteSumOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    initialRatingPoints?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    initialRatingPoints?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type GameRequestCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type GameRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type GameRequestRelationFilter = {
    is?: GameRequestWhereInput
    isNot?: GameRequestWhereInput
  }

  export type RequestResponseRequestIdUserIdCompoundUniqueInput = {
    requestId: number
    userId: number
  }

  export type RequestResponseCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type EnumCourtSurfaceNullableFilter = {
    equals?: CourtSurface | null
    in?: Enumerable<CourtSurface> | null
    notIn?: Enumerable<CourtSurface> | null
    not?: NestedEnumCourtSurfaceNullableFilter | CourtSurface | null
  }

  export type EnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type EnumTrainingTypeFilter = {
    equals?: TrainingType
    in?: Enumerable<TrainingType>
    notIn?: Enumerable<TrainingType>
    not?: NestedEnumTrainingTypeFilter | TrainingType
  }

  export type TrainingSessionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    pricePerPerson?: SortOrder
  }

  export type TrainingSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    pricePerPerson?: SortOrder
  }

  export type EnumCourtSurfaceNullableWithAggregatesFilter = {
    equals?: CourtSurface | null
    in?: Enumerable<CourtSurface> | null
    notIn?: Enumerable<CourtSurface> | null
    not?: NestedEnumCourtSurfaceNullableWithAggregatesFilter | CourtSurface | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCourtSurfaceNullableFilter
    _max?: NestedEnumCourtSurfaceNullableFilter
  }

  export type EnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type EnumTrainingTypeWithAggregatesFilter = {
    equals?: TrainingType
    in?: Enumerable<TrainingType>
    notIn?: Enumerable<TrainingType>
    not?: NestedEnumTrainingTypeWithAggregatesFilter | TrainingType
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingTypeFilter
    _max?: NestedEnumTrainingTypeFilter
  }

  export type UserCreateNestedOneWithoutStoriesInput = {
    create?: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumMediaTypeFieldUpdateOperationsInput = {
    set?: MediaType
  }

  export type EnumStoryStatusFieldUpdateOperationsInput = {
    set?: StoryStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutStoriesInput = {
    create?: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoriesInput
    upsert?: UserUpsertWithoutStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStoriesInput, UserUncheckedUpdateWithoutStoriesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CityCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<CityCreateWithoutCountryInput>, Enumerable<CityUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutCountryInput>
    createMany?: CityCreateManyCountryInputEnvelope
    connect?: Enumerable<CityWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<UserCreateWithoutCountryInput>, Enumerable<UserUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCountryInput>
    createMany?: UserCreateManyCountryInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type CityUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<CityCreateWithoutCountryInput>, Enumerable<CityUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutCountryInput>
    createMany?: CityCreateManyCountryInputEnvelope
    connect?: Enumerable<CityWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<UserCreateWithoutCountryInput>, Enumerable<UserUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCountryInput>
    createMany?: UserCreateManyCountryInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type CityUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<CityCreateWithoutCountryInput>, Enumerable<CityUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<CityUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: CityCreateManyCountryInputEnvelope
    set?: Enumerable<CityWhereUniqueInput>
    disconnect?: Enumerable<CityWhereUniqueInput>
    delete?: Enumerable<CityWhereUniqueInput>
    connect?: Enumerable<CityWhereUniqueInput>
    update?: Enumerable<CityUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<CityUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<CityScalarWhereInput>
  }

  export type UserUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<UserCreateWithoutCountryInput>, Enumerable<UserUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: UserCreateManyCountryInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type CityUncheckedUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<CityCreateWithoutCountryInput>, Enumerable<CityUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<CityUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: CityCreateManyCountryInputEnvelope
    set?: Enumerable<CityWhereUniqueInput>
    disconnect?: Enumerable<CityWhereUniqueInput>
    delete?: Enumerable<CityWhereUniqueInput>
    connect?: Enumerable<CityWhereUniqueInput>
    update?: Enumerable<CityUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<CityUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<CityScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<UserCreateWithoutCountryInput>, Enumerable<UserUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: UserCreateManyCountryInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type CountryCreateNestedOneWithoutCitiesInput = {
    create?: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutCitiesInput
    connect?: CountryWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCityInput = {
    create?: XOR<Enumerable<UserCreateWithoutCityInput>, Enumerable<UserUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCityInput>
    createMany?: UserCreateManyCityInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<Enumerable<UserCreateWithoutCityInput>, Enumerable<UserUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCityInput>
    createMany?: UserCreateManyCityInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type CountryUpdateOneRequiredWithoutCitiesInput = {
    create?: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutCitiesInput
    upsert?: CountryUpsertWithoutCitiesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<CountryUpdateWithoutCitiesInput, CountryUncheckedUpdateWithoutCitiesInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutCityInput = {
    create?: XOR<Enumerable<UserCreateWithoutCityInput>, Enumerable<UserUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCityInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCityInput>
    createMany?: UserCreateManyCityInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCityInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCityInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutCityInput = {
    create?: XOR<Enumerable<UserCreateWithoutCityInput>, Enumerable<UserUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCityInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCityInput>
    createMany?: UserCreateManyCityInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCityInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCityInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutSportInput = {
    create?: XOR<Enumerable<UserCreateWithoutSportInput>, Enumerable<UserUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSportInput>
    createMany?: UserCreateManySportInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<Enumerable<UserCreateWithoutSportInput>, Enumerable<UserUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSportInput>
    createMany?: UserCreateManySportInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutSportInput = {
    create?: XOR<Enumerable<UserCreateWithoutSportInput>, Enumerable<UserUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSportInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSportInput>
    createMany?: UserCreateManySportInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSportInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSportInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutSportInput = {
    create?: XOR<Enumerable<UserCreateWithoutSportInput>, Enumerable<UserUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSportInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSportInput>
    createMany?: UserCreateManySportInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSportInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSportInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type CountryCreateNestedOneWithoutUsersInput = {
    create?: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUsersInput
    connect?: CountryWhereUniqueInput
  }

  export type CityCreateNestedOneWithoutUsersInput = {
    create?: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CityCreateOrConnectWithoutUsersInput
    connect?: CityWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutUsersInput = {
    create?: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SportCreateOrConnectWithoutUsersInput
    connect?: SportWhereUniqueInput
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type TrainingCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingWhereUniqueInput>
  }

  export type TrainingSessionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutCreatorInput>, Enumerable<TrainingSessionUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
  }

  export type TournamentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type InviteCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type TournamentCreateNestedManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type GameRequestCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutCreatorInput>, Enumerable<GameRequestUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutCreatorInput>
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    connect?: Enumerable<GameRequestWhereUniqueInput>
  }

  export type GameRequestCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutParticipantsInput>, Enumerable<GameRequestUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutParticipantsInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
  }

  export type RequestResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutUserInput>, Enumerable<RequestResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutUserInput>
    createMany?: RequestResponseCreateManyUserInputEnvelope
    connect?: Enumerable<RequestResponseWhereUniqueInput>
  }

  export type TrainingSessionCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutParticipantsInput>, Enumerable<TrainingSessionUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutParticipantsInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
  }

  export type BallTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BallTransactionCreateWithoutUserInput>, Enumerable<BallTransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BallTransactionCreateOrConnectWithoutUserInput>
    createMany?: BallTransactionCreateManyUserInputEnvelope
    connect?: Enumerable<BallTransactionWhereUniqueInput>
  }

  export type CaseOpeningCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutUserInput>, Enumerable<CaseOpeningUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutUserInput>
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
  }

  export type StoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StoryCreateWithoutUserInput>, Enumerable<StoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StoryCreateOrConnectWithoutUserInput>
    createMany?: StoryCreateManyUserInputEnvelope
    connect?: Enumerable<StoryWhereUniqueInput>
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type TrainingUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingWhereUniqueInput>
  }

  export type TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutCreatorInput>, Enumerable<TrainingSessionUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
  }

  export type TournamentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type TournamentUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type GameRequestUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutCreatorInput>, Enumerable<GameRequestUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutCreatorInput>
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    connect?: Enumerable<GameRequestWhereUniqueInput>
  }

  export type GameRequestUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutParticipantsInput>, Enumerable<GameRequestUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutParticipantsInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
  }

  export type RequestResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutUserInput>, Enumerable<RequestResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutUserInput>
    createMany?: RequestResponseCreateManyUserInputEnvelope
    connect?: Enumerable<RequestResponseWhereUniqueInput>
  }

  export type TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutParticipantsInput>, Enumerable<TrainingSessionUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutParticipantsInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
  }

  export type BallTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BallTransactionCreateWithoutUserInput>, Enumerable<BallTransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BallTransactionCreateOrConnectWithoutUserInput>
    createMany?: BallTransactionCreateManyUserInputEnvelope
    connect?: Enumerable<BallTransactionWhereUniqueInput>
  }

  export type CaseOpeningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutUserInput>, Enumerable<CaseOpeningUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutUserInput>
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
  }

  export type StoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StoryCreateWithoutUserInput>, Enumerable<StoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StoryCreateOrConnectWithoutUserInput>
    createMany?: StoryCreateManyUserInputEnvelope
    connect?: Enumerable<StoryWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type CountryUpdateOneWithoutUsersInput = {
    create?: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUsersInput
    upsert?: CountryUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: CountryWhereUniqueInput
    update?: XOR<CountryUpdateWithoutUsersInput, CountryUncheckedUpdateWithoutUsersInput>
  }

  export type CityUpdateOneWithoutUsersInput = {
    create?: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CityCreateOrConnectWithoutUsersInput
    upsert?: CityUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: CityWhereUniqueInput
    update?: XOR<CityUpdateWithoutUsersInput, CityUncheckedUpdateWithoutUsersInput>
  }

  export type SportUpdateOneWithoutUsersInput = {
    create?: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SportCreateOrConnectWithoutUsersInput
    upsert?: SportUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: SportWhereUniqueInput
    update?: XOR<SportUpdateWithoutUsersInput, SportUncheckedUpdateWithoutUsersInput>
  }

  export type UserProfileUpdateOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUpdateManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type TrainingUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingWhereUniqueInput>
    disconnect?: Enumerable<TrainingWhereUniqueInput>
    delete?: Enumerable<TrainingWhereUniqueInput>
    connect?: Enumerable<TrainingWhereUniqueInput>
    update?: Enumerable<TrainingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingScalarWhereInput>
  }

  export type TrainingSessionUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutCreatorInput>, Enumerable<TrainingSessionUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingSessionWhereUniqueInput>
    disconnect?: Enumerable<TrainingSessionWhereUniqueInput>
    delete?: Enumerable<TrainingSessionWhereUniqueInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
    update?: Enumerable<TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingSessionUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingSessionScalarWhereInput>
  }

  export type TournamentUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type InviteUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type TournamentUpdateManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutPlayersInput>
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutPlayersInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutPlayersInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type GameRequestUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutCreatorInput>, Enumerable<GameRequestUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<GameRequestUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    set?: Enumerable<GameRequestWhereUniqueInput>
    disconnect?: Enumerable<GameRequestWhereUniqueInput>
    delete?: Enumerable<GameRequestWhereUniqueInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
    update?: Enumerable<GameRequestUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<GameRequestUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<GameRequestScalarWhereInput>
  }

  export type GameRequestUpdateManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutParticipantsInput>, Enumerable<GameRequestUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutParticipantsInput>
    upsert?: Enumerable<GameRequestUpsertWithWhereUniqueWithoutParticipantsInput>
    set?: Enumerable<GameRequestWhereUniqueInput>
    disconnect?: Enumerable<GameRequestWhereUniqueInput>
    delete?: Enumerable<GameRequestWhereUniqueInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
    update?: Enumerable<GameRequestUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<GameRequestUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<GameRequestScalarWhereInput>
  }

  export type RequestResponseUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutUserInput>, Enumerable<RequestResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequestResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequestResponseCreateManyUserInputEnvelope
    set?: Enumerable<RequestResponseWhereUniqueInput>
    disconnect?: Enumerable<RequestResponseWhereUniqueInput>
    delete?: Enumerable<RequestResponseWhereUniqueInput>
    connect?: Enumerable<RequestResponseWhereUniqueInput>
    update?: Enumerable<RequestResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequestResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequestResponseScalarWhereInput>
  }

  export type TrainingSessionUpdateManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutParticipantsInput>, Enumerable<TrainingSessionUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutParticipantsInput>
    upsert?: Enumerable<TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput>
    set?: Enumerable<TrainingSessionWhereUniqueInput>
    disconnect?: Enumerable<TrainingSessionWhereUniqueInput>
    delete?: Enumerable<TrainingSessionWhereUniqueInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
    update?: Enumerable<TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<TrainingSessionUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<TrainingSessionScalarWhereInput>
  }

  export type EnumAuthSourceFieldUpdateOperationsInput = {
    set?: AuthSource
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type BallTransactionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BallTransactionCreateWithoutUserInput>, Enumerable<BallTransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BallTransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BallTransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BallTransactionCreateManyUserInputEnvelope
    set?: Enumerable<BallTransactionWhereUniqueInput>
    disconnect?: Enumerable<BallTransactionWhereUniqueInput>
    delete?: Enumerable<BallTransactionWhereUniqueInput>
    connect?: Enumerable<BallTransactionWhereUniqueInput>
    update?: Enumerable<BallTransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BallTransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BallTransactionScalarWhereInput>
  }

  export type CaseOpeningUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutUserInput>, Enumerable<CaseOpeningUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CaseOpeningUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    set?: Enumerable<CaseOpeningWhereUniqueInput>
    disconnect?: Enumerable<CaseOpeningWhereUniqueInput>
    delete?: Enumerable<CaseOpeningWhereUniqueInput>
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
    update?: Enumerable<CaseOpeningUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CaseOpeningUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CaseOpeningScalarWhereInput>
  }

  export type StoryUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StoryCreateWithoutUserInput>, Enumerable<StoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StoryCreateManyUserInputEnvelope
    set?: Enumerable<StoryWhereUniqueInput>
    disconnect?: Enumerable<StoryWhereUniqueInput>
    delete?: Enumerable<StoryWhereUniqueInput>
    connect?: Enumerable<StoryWhereUniqueInput>
    update?: Enumerable<StoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StoryScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUncheckedUpdateManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type TrainingUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingWhereUniqueInput>
    disconnect?: Enumerable<TrainingWhereUniqueInput>
    delete?: Enumerable<TrainingWhereUniqueInput>
    connect?: Enumerable<TrainingWhereUniqueInput>
    update?: Enumerable<TrainingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingScalarWhereInput>
  }

  export type TrainingSessionUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutCreatorInput>, Enumerable<TrainingSessionUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingSessionWhereUniqueInput>
    disconnect?: Enumerable<TrainingSessionWhereUniqueInput>
    delete?: Enumerable<TrainingSessionWhereUniqueInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
    update?: Enumerable<TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingSessionUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingSessionScalarWhereInput>
  }

  export type TournamentUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type TournamentUncheckedUpdateManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutPlayersInput>
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutPlayersInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutPlayersInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type GameRequestUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutCreatorInput>, Enumerable<GameRequestUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<GameRequestUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    set?: Enumerable<GameRequestWhereUniqueInput>
    disconnect?: Enumerable<GameRequestWhereUniqueInput>
    delete?: Enumerable<GameRequestWhereUniqueInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
    update?: Enumerable<GameRequestUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<GameRequestUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<GameRequestScalarWhereInput>
  }

  export type GameRequestUncheckedUpdateManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<GameRequestCreateWithoutParticipantsInput>, Enumerable<GameRequestUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<GameRequestCreateOrConnectWithoutParticipantsInput>
    upsert?: Enumerable<GameRequestUpsertWithWhereUniqueWithoutParticipantsInput>
    set?: Enumerable<GameRequestWhereUniqueInput>
    disconnect?: Enumerable<GameRequestWhereUniqueInput>
    delete?: Enumerable<GameRequestWhereUniqueInput>
    connect?: Enumerable<GameRequestWhereUniqueInput>
    update?: Enumerable<GameRequestUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<GameRequestUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<GameRequestScalarWhereInput>
  }

  export type RequestResponseUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutUserInput>, Enumerable<RequestResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequestResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequestResponseCreateManyUserInputEnvelope
    set?: Enumerable<RequestResponseWhereUniqueInput>
    disconnect?: Enumerable<RequestResponseWhereUniqueInput>
    delete?: Enumerable<RequestResponseWhereUniqueInput>
    connect?: Enumerable<RequestResponseWhereUniqueInput>
    update?: Enumerable<RequestResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequestResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequestResponseScalarWhereInput>
  }

  export type TrainingSessionUncheckedUpdateManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<TrainingSessionCreateWithoutParticipantsInput>, Enumerable<TrainingSessionUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<TrainingSessionCreateOrConnectWithoutParticipantsInput>
    upsert?: Enumerable<TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput>
    set?: Enumerable<TrainingSessionWhereUniqueInput>
    disconnect?: Enumerable<TrainingSessionWhereUniqueInput>
    delete?: Enumerable<TrainingSessionWhereUniqueInput>
    connect?: Enumerable<TrainingSessionWhereUniqueInput>
    update?: Enumerable<TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<TrainingSessionUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<TrainingSessionScalarWhereInput>
  }

  export type BallTransactionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BallTransactionCreateWithoutUserInput>, Enumerable<BallTransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BallTransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BallTransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BallTransactionCreateManyUserInputEnvelope
    set?: Enumerable<BallTransactionWhereUniqueInput>
    disconnect?: Enumerable<BallTransactionWhereUniqueInput>
    delete?: Enumerable<BallTransactionWhereUniqueInput>
    connect?: Enumerable<BallTransactionWhereUniqueInput>
    update?: Enumerable<BallTransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BallTransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BallTransactionScalarWhereInput>
  }

  export type CaseOpeningUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutUserInput>, Enumerable<CaseOpeningUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CaseOpeningUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    set?: Enumerable<CaseOpeningWhereUniqueInput>
    disconnect?: Enumerable<CaseOpeningWhereUniqueInput>
    delete?: Enumerable<CaseOpeningWhereUniqueInput>
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
    update?: Enumerable<CaseOpeningUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CaseOpeningUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CaseOpeningScalarWhereInput>
  }

  export type StoryUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StoryCreateWithoutUserInput>, Enumerable<StoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StoryCreateManyUserInputEnvelope
    set?: Enumerable<StoryWhereUniqueInput>
    disconnect?: Enumerable<StoryWhereUniqueInput>
    delete?: Enumerable<StoryWhereUniqueInput>
    connect?: Enumerable<StoryWhereUniqueInput>
    update?: Enumerable<StoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StoryScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutBallTransactionsInput = {
    create?: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBallTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBallTransactionsInput = {
    create?: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBallTransactionsInput
    upsert?: UserUpsertWithoutBallTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBallTransactionsInput, UserUncheckedUpdateWithoutBallTransactionsInput>
  }

  export type CaseOpeningCreateNestedManyWithoutCaseInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutCaseInput>, Enumerable<CaseOpeningUncheckedCreateWithoutCaseInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutCaseInput>
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
  }

  export type CaseOpeningUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutCaseInput>, Enumerable<CaseOpeningUncheckedCreateWithoutCaseInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutCaseInput>
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
  }

  export type CaseOpeningUpdateManyWithoutCaseInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutCaseInput>, Enumerable<CaseOpeningUncheckedCreateWithoutCaseInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutCaseInput>
    upsert?: Enumerable<CaseOpeningUpsertWithWhereUniqueWithoutCaseInput>
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    set?: Enumerable<CaseOpeningWhereUniqueInput>
    disconnect?: Enumerable<CaseOpeningWhereUniqueInput>
    delete?: Enumerable<CaseOpeningWhereUniqueInput>
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
    update?: Enumerable<CaseOpeningUpdateWithWhereUniqueWithoutCaseInput>
    updateMany?: Enumerable<CaseOpeningUpdateManyWithWhereWithoutCaseInput>
    deleteMany?: Enumerable<CaseOpeningScalarWhereInput>
  }

  export type CaseOpeningUncheckedUpdateManyWithoutCaseInput = {
    create?: XOR<Enumerable<CaseOpeningCreateWithoutCaseInput>, Enumerable<CaseOpeningUncheckedCreateWithoutCaseInput>>
    connectOrCreate?: Enumerable<CaseOpeningCreateOrConnectWithoutCaseInput>
    upsert?: Enumerable<CaseOpeningUpsertWithWhereUniqueWithoutCaseInput>
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    set?: Enumerable<CaseOpeningWhereUniqueInput>
    disconnect?: Enumerable<CaseOpeningWhereUniqueInput>
    delete?: Enumerable<CaseOpeningWhereUniqueInput>
    connect?: Enumerable<CaseOpeningWhereUniqueInput>
    update?: Enumerable<CaseOpeningUpdateWithWhereUniqueWithoutCaseInput>
    updateMany?: Enumerable<CaseOpeningUpdateManyWithWhereWithoutCaseInput>
    deleteMany?: Enumerable<CaseOpeningScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCaseOpeningsInput = {
    create?: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseOpeningsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutOpeningsInput = {
    create?: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpeningsInput
    connect?: CaseWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCaseOpeningsInput = {
    create?: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseOpeningsInput
    upsert?: UserUpsertWithoutCaseOpeningsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCaseOpeningsInput, UserUncheckedUpdateWithoutCaseOpeningsInput>
  }

  export type CaseUpdateOneRequiredWithoutOpeningsInput = {
    create?: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpeningsInput
    upsert?: CaseUpsertWithoutOpeningsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<CaseUpdateWithoutOpeningsInput, CaseUncheckedUpdateWithoutOpeningsInput>
  }

  export type UserCreateNestedOneWithoutCreatedMatchesInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchesInput = {
    create?: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type InviteCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedMatchesInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    upsert?: UserUpsertWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
  }

  export type UserUpdateOneWithoutMatchesInput = {
    create?: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesInput
    upsert?: UserUpsertWithoutMatchesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMatchesInput, UserUncheckedUpdateWithoutMatchesInput>
  }

  export type EnumMatchTypeFieldUpdateOperationsInput = {
    set?: MatchType
  }

  export type EnumMatchStateFieldUpdateOperationsInput = {
    set?: MatchState
  }

  export type InviteUpdateManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCreatedTrainingsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
  }

  export type InviteCreateNestedManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTrainingsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    upsert?: UserUpsertWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
  }

  export type EnumTrainingStateFieldUpdateOperationsInput = {
    set?: TrainingState
  }

  export type InviteUpdateManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutTrainingInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutTrainingInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutTrainingInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutTrainingInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCreatedTournamentsInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TournamentMatchCreateNestedManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
  }

  export type EnumTournamentTypeFieldUpdateOperationsInput = {
    set?: TournamentType
  }

  export type UserUpdateOneRequiredWithoutCreatedTournamentsInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    upsert?: UserUpsertWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTournamentsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTournamentsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTournamentsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TournamentMatchUpdateManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    upsert?: Enumerable<TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: Enumerable<TournamentMatchWhereUniqueInput>
    disconnect?: Enumerable<TournamentMatchWhereUniqueInput>
    delete?: Enumerable<TournamentMatchWhereUniqueInput>
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
    update?: Enumerable<TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput>
    updateMany?: Enumerable<TournamentMatchUpdateManyWithWhereWithoutTournamentInput>
    deleteMany?: Enumerable<TournamentMatchScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTournamentsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTournamentsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTournamentsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    upsert?: Enumerable<TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: Enumerable<TournamentMatchWhereUniqueInput>
    disconnect?: Enumerable<TournamentMatchWhereUniqueInput>
    delete?: Enumerable<TournamentMatchWhereUniqueInput>
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
    update?: Enumerable<TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput>
    updateMany?: Enumerable<TournamentMatchUpdateManyWithWhereWithoutTournamentInput>
    deleteMany?: Enumerable<TournamentMatchScalarWhereInput>
  }

  export type TournamentCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
  }

  export type TournamentMatchCreateconfirmedByInput = {
    set: Enumerable<number>
  }

  export type TournamentUpdateOneRequiredWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    upsert?: TournamentUpsertWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentMatchUpdateconfirmedByInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type MatchCreateNestedOneWithoutInvitesInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    connect?: MatchWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutInvitesInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    connect?: TrainingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentInvitesInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedInvitesInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type MatchUpdateOneWithoutInvitesInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    upsert?: MatchUpsertWithoutInvitesInput
    disconnect?: boolean
    delete?: boolean
    connect?: MatchWhereUniqueInput
    update?: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
  }

  export type TrainingUpdateOneWithoutInvitesInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    upsert?: TrainingUpsertWithoutInvitesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainingWhereUniqueInput
    update?: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutSentInvitesInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    upsert?: UserUpsertWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedInvitesInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    upsert?: UserUpsertWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
  }

  export type EnumInviteStatusFieldUpdateOperationsInput = {
    set?: InviteStatus
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserProfileCreatepreferredPlayTimeInput = {
    set: Enumerable<string>
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProfileUpdatepreferredPlayTimeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserCreateNestedOneWithoutCreatedRequestsInput = {
    create?: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutRequestParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRequestParticipationsInput>, Enumerable<UserUncheckedCreateWithoutRequestParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRequestParticipationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type RequestResponseCreateNestedManyWithoutRequestInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutRequestInput>, Enumerable<RequestResponseUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutRequestInput>
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    connect?: Enumerable<RequestResponseWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRequestParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRequestParticipationsInput>, Enumerable<UserUncheckedCreateWithoutRequestParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRequestParticipationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type RequestResponseUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutRequestInput>, Enumerable<RequestResponseUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutRequestInput>
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    connect?: Enumerable<RequestResponseWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedRequestsInput = {
    create?: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRequestsInput
    upsert?: UserUpsertWithoutCreatedRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedRequestsInput, UserUncheckedUpdateWithoutCreatedRequestsInput>
  }

  export type UserUpdateManyWithoutRequestParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRequestParticipationsInput>, Enumerable<UserUncheckedCreateWithoutRequestParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRequestParticipationsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRequestParticipationsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRequestParticipationsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRequestParticipationsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type RequestResponseUpdateManyWithoutRequestInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutRequestInput>, Enumerable<RequestResponseUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutRequestInput>
    upsert?: Enumerable<RequestResponseUpsertWithWhereUniqueWithoutRequestInput>
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    set?: Enumerable<RequestResponseWhereUniqueInput>
    disconnect?: Enumerable<RequestResponseWhereUniqueInput>
    delete?: Enumerable<RequestResponseWhereUniqueInput>
    connect?: Enumerable<RequestResponseWhereUniqueInput>
    update?: Enumerable<RequestResponseUpdateWithWhereUniqueWithoutRequestInput>
    updateMany?: Enumerable<RequestResponseUpdateManyWithWhereWithoutRequestInput>
    deleteMany?: Enumerable<RequestResponseScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRequestParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRequestParticipationsInput>, Enumerable<UserUncheckedCreateWithoutRequestParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRequestParticipationsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRequestParticipationsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRequestParticipationsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRequestParticipationsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type RequestResponseUncheckedUpdateManyWithoutRequestInput = {
    create?: XOR<Enumerable<RequestResponseCreateWithoutRequestInput>, Enumerable<RequestResponseUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<RequestResponseCreateOrConnectWithoutRequestInput>
    upsert?: Enumerable<RequestResponseUpsertWithWhereUniqueWithoutRequestInput>
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    set?: Enumerable<RequestResponseWhereUniqueInput>
    disconnect?: Enumerable<RequestResponseWhereUniqueInput>
    delete?: Enumerable<RequestResponseWhereUniqueInput>
    connect?: Enumerable<RequestResponseWhereUniqueInput>
    update?: Enumerable<RequestResponseUpdateWithWhereUniqueWithoutRequestInput>
    updateMany?: Enumerable<RequestResponseUpdateManyWithWhereWithoutRequestInput>
    deleteMany?: Enumerable<RequestResponseScalarWhereInput>
  }

  export type GameRequestCreateNestedOneWithoutResponsesInput = {
    create?: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: GameRequestCreateOrConnectWithoutResponsesInput
    connect?: GameRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestResponsesInput = {
    create?: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type GameRequestUpdateOneRequiredWithoutResponsesInput = {
    create?: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: GameRequestCreateOrConnectWithoutResponsesInput
    upsert?: GameRequestUpsertWithoutResponsesInput
    connect?: GameRequestWhereUniqueInput
    update?: XOR<GameRequestUpdateWithoutResponsesInput, GameRequestUncheckedUpdateWithoutResponsesInput>
  }

  export type UserUpdateOneRequiredWithoutRequestResponsesInput = {
    create?: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestResponsesInput
    upsert?: UserUpsertWithoutRequestResponsesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequestResponsesInput, UserUncheckedUpdateWithoutRequestResponsesInput>
  }

  export type UserCreateNestedOneWithoutCreatedTrainingSessionsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTrainingSessionParticipationsInput>, Enumerable<UserUncheckedCreateWithoutTrainingSessionParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTrainingSessionParticipationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTrainingSessionParticipationsInput>, Enumerable<UserUncheckedCreateWithoutTrainingSessionParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTrainingSessionParticipationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTrainingSessionsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingSessionsInput
    upsert?: UserUpsertWithoutCreatedTrainingSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTrainingSessionsInput, UserUncheckedUpdateWithoutCreatedTrainingSessionsInput>
  }

  export type NullableEnumCourtSurfaceFieldUpdateOperationsInput = {
    set?: CourtSurface | null
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: PaymentType
  }

  export type EnumTrainingTypeFieldUpdateOperationsInput = {
    set?: TrainingType
  }

  export type UserUpdateManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTrainingSessionParticipationsInput>, Enumerable<UserUncheckedCreateWithoutTrainingSessionParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTrainingSessionParticipationsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTrainingSessionParticipationsInput>, Enumerable<UserUncheckedCreateWithoutTrainingSessionParticipationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTrainingSessionParticipationsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumMediaTypeFilter = {
    equals?: MediaType
    in?: Enumerable<MediaType>
    notIn?: Enumerable<MediaType>
    not?: NestedEnumMediaTypeFilter | MediaType
  }

  export type NestedEnumStoryStatusFilter = {
    equals?: StoryStatus
    in?: Enumerable<StoryStatus>
    notIn?: Enumerable<StoryStatus>
    not?: NestedEnumStoryStatusFilter | StoryStatus
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumMediaTypeWithAggregatesFilter = {
    equals?: MediaType
    in?: Enumerable<MediaType>
    notIn?: Enumerable<MediaType>
    not?: NestedEnumMediaTypeWithAggregatesFilter | MediaType
    _count?: NestedIntFilter
    _min?: NestedEnumMediaTypeFilter
    _max?: NestedEnumMediaTypeFilter
  }

  export type NestedEnumStoryStatusWithAggregatesFilter = {
    equals?: StoryStatus
    in?: Enumerable<StoryStatus>
    notIn?: Enumerable<StoryStatus>
    not?: NestedEnumStoryStatusWithAggregatesFilter | StoryStatus
    _count?: NestedIntFilter
    _min?: NestedEnumStoryStatusFilter
    _max?: NestedEnumStoryStatusFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumAuthSourceFilter = {
    equals?: AuthSource
    in?: Enumerable<AuthSource>
    notIn?: Enumerable<AuthSource>
    not?: NestedEnumAuthSourceFilter | AuthSource
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumAuthSourceWithAggregatesFilter = {
    equals?: AuthSource
    in?: Enumerable<AuthSource>
    notIn?: Enumerable<AuthSource>
    not?: NestedEnumAuthSourceWithAggregatesFilter | AuthSource
    _count?: NestedIntFilter
    _min?: NestedEnumAuthSourceFilter
    _max?: NestedEnumAuthSourceFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedEnumMatchTypeFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeFilter | MatchType
  }

  export type NestedEnumMatchStateFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateFilter | MatchState
  }

  export type NestedEnumMatchTypeWithAggregatesFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeWithAggregatesFilter | MatchType
    _count?: NestedIntFilter
    _min?: NestedEnumMatchTypeFilter
    _max?: NestedEnumMatchTypeFilter
  }

  export type NestedEnumMatchStateWithAggregatesFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateWithAggregatesFilter | MatchState
    _count?: NestedIntFilter
    _min?: NestedEnumMatchStateFilter
    _max?: NestedEnumMatchStateFilter
  }

  export type NestedEnumTrainingStateFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateFilter | TrainingState
  }

  export type NestedEnumTrainingStateWithAggregatesFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateWithAggregatesFilter | TrainingState
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingStateFilter
    _max?: NestedEnumTrainingStateFilter
  }

  export type NestedEnumTournamentTypeFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeFilter | TournamentType
  }

  export type NestedEnumTournamentTypeWithAggregatesFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeWithAggregatesFilter | TournamentType
    _count?: NestedIntFilter
    _min?: NestedEnumTournamentTypeFilter
    _max?: NestedEnumTournamentTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedEnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type NestedEnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedEnumCourtSurfaceNullableFilter = {
    equals?: CourtSurface | null
    in?: Enumerable<CourtSurface> | null
    notIn?: Enumerable<CourtSurface> | null
    not?: NestedEnumCourtSurfaceNullableFilter | CourtSurface | null
  }

  export type NestedEnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type NestedEnumTrainingTypeFilter = {
    equals?: TrainingType
    in?: Enumerable<TrainingType>
    notIn?: Enumerable<TrainingType>
    not?: NestedEnumTrainingTypeFilter | TrainingType
  }

  export type NestedEnumCourtSurfaceNullableWithAggregatesFilter = {
    equals?: CourtSurface | null
    in?: Enumerable<CourtSurface> | null
    notIn?: Enumerable<CourtSurface> | null
    not?: NestedEnumCourtSurfaceNullableWithAggregatesFilter | CourtSurface | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCourtSurfaceNullableFilter
    _max?: NestedEnumCourtSurfaceNullableFilter
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type NestedEnumTrainingTypeWithAggregatesFilter = {
    equals?: TrainingType
    in?: Enumerable<TrainingType>
    notIn?: Enumerable<TrainingType>
    not?: NestedEnumTrainingTypeWithAggregatesFilter | TrainingType
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingTypeFilter
    _max?: NestedEnumTrainingTypeFilter
  }

  export type UserCreateWithoutStoriesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStoriesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
  }

  export type UserUpsertWithoutStoriesInput = {
    update: XOR<UserUpdateWithoutStoriesInput, UserUncheckedUpdateWithoutStoriesInput>
    create: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
  }

  export type UserUpdateWithoutStoriesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
  }

  export type CityCreateWithoutCountryInput = {
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    users?: UserCreateNestedManyWithoutCityInput
    createdAt?: Date | string
  }

  export type CityUncheckedCreateWithoutCountryInput = {
    id?: number
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCityInput
    createdAt?: Date | string
  }

  export type CityCreateOrConnectWithoutCountryInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput>
  }

  export type CityCreateManyCountryInputEnvelope = {
    data: Enumerable<CityCreateManyCountryInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCountryInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCountryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCountryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput>
  }

  export type UserCreateManyCountryInputEnvelope = {
    data: Enumerable<UserCreateManyCountryInput>
    skipDuplicates?: boolean
  }

  export type CityUpsertWithWhereUniqueWithoutCountryInput = {
    where: CityWhereUniqueInput
    update: XOR<CityUpdateWithoutCountryInput, CityUncheckedUpdateWithoutCountryInput>
    create: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput>
  }

  export type CityUpdateWithWhereUniqueWithoutCountryInput = {
    where: CityWhereUniqueInput
    data: XOR<CityUpdateWithoutCountryInput, CityUncheckedUpdateWithoutCountryInput>
  }

  export type CityUpdateManyWithWhereWithoutCountryInput = {
    where: CityScalarWhereInput
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyWithoutCitiesInput>
  }

  export type CityScalarWhereInput = {
    AND?: Enumerable<CityScalarWhereInput>
    OR?: Enumerable<CityScalarWhereInput>
    NOT?: Enumerable<CityScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    countryCode?: StringFilter | string
    population?: IntFilter | number
    lat?: FloatFilter | number
    lng?: FloatFilter | number
    timezone?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutCountryInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCountryInput, UserUncheckedUpdateWithoutCountryInput>
    create: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCountryInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCountryInput, UserUncheckedUpdateWithoutCountryInput>
  }

  export type UserUpdateManyWithWhereWithoutCountryInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    telegramId?: StringFilter | string
    username?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    isVerified?: BoolFilter | boolean
    role?: EnumRoleFilter | Role
    countryCode?: StringNullableFilter | string | null
    cityId?: IntNullableFilter | number | null
    sportId?: IntNullableFilter | number | null
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    authSource?: EnumAuthSourceFilter | AuthSource
    lastLogin?: DateTimeNullableFilter | Date | string | null
    ballsBalance?: IntFilter | number
    casesOpened?: IntFilter | number
    telegramChatId?: BigIntNullableFilter | bigint | number | null
  }

  export type CountryCreateWithoutCitiesInput = {
    name: string
    code: string
    flagUrl?: string | null
    users?: UserCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryUncheckedCreateWithoutCitiesInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryCreateOrConnectWithoutCitiesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
  }

  export type UserCreateWithoutCityInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCityInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput>
  }

  export type UserCreateManyCityInputEnvelope = {
    data: Enumerable<UserCreateManyCityInput>
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutCitiesInput = {
    update: XOR<CountryUpdateWithoutCitiesInput, CountryUncheckedUpdateWithoutCitiesInput>
    create: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
  }

  export type CountryUpdateWithoutCitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateWithoutCitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutCityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCityInput, UserUncheckedUpdateWithoutCityInput>
    create: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCityInput, UserUncheckedUpdateWithoutCityInput>
  }

  export type UserUpdateManyWithWhereWithoutCityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserCreateWithoutSportInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSportInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput>
  }

  export type UserCreateManySportInputEnvelope = {
    data: Enumerable<UserCreateManySportInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutSportInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSportInput, UserUncheckedUpdateWithoutSportInput>
    create: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSportInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSportInput, UserUncheckedUpdateWithoutSportInput>
  }

  export type UserUpdateManyWithWhereWithoutSportInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type CountryCreateWithoutUsersInput = {
    name: string
    code: string
    flagUrl?: string | null
    cities?: CityCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    cities?: CityUncheckedCreateNestedManyWithoutCountryInput
    createdAt?: Date | string
  }

  export type CountryCreateOrConnectWithoutUsersInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
  }

  export type CityCreateWithoutUsersInput = {
    name: string
    country: CountryCreateNestedOneWithoutCitiesInput
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type CityUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type CityCreateOrConnectWithoutUsersInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
  }

  export type SportCreateWithoutUsersInput = {
    title: string
    slug: string
    emoji?: string | null
    createdAt?: Date | string
  }

  export type SportUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    createdAt?: Date | string
  }

  export type SportCreateOrConnectWithoutUsersInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
  }

  export type UserProfileCreateWithoutUserInput = {
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type MatchCreateWithoutPlayer1Input = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchCreateManyPlayer1InputEnvelope = {
    data: Enumerable<MatchCreateManyPlayer1Input>
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutCreatorInput = {
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchCreateManyCreatorInputEnvelope = {
    data: Enumerable<MatchCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutCreatorInput = {
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateWithoutCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingCreateManyCreatorInputEnvelope = {
    data: Enumerable<TrainingCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type TrainingSessionCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    participants?: UserCreateNestedManyWithoutTrainingSessionParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    participants?: UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionCreateOrConnectWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    create: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingSessionCreateManyCreatorInputEnvelope = {
    data: Enumerable<TrainingSessionCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentCreateManyCreatorInputEnvelope = {
    data: Enumerable<TournamentCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutSenderInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutSenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutSenderInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteCreateManySenderInputEnvelope = {
    data: Enumerable<InviteCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutReceiverInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteCreateManyReceiverInputEnvelope = {
    data: Enumerable<InviteCreateManyReceiverInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    message: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: Enumerable<NotificationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutPlayersInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutPlayersInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type GameRequestCreateWithoutCreatorInput = {
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUncheckedCreateWithoutCreatorInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestCreateOrConnectWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput>
  }

  export type GameRequestCreateManyCreatorInputEnvelope = {
    data: Enumerable<GameRequestCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type GameRequestCreateWithoutParticipantsInput = {
    type: string
    title: string
    description?: string | null
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUncheckedCreateWithoutParticipantsInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestCreateOrConnectWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput>
  }

  export type RequestResponseCreateWithoutUserInput = {
    request: GameRequestCreateNestedOneWithoutResponsesInput
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUncheckedCreateWithoutUserInput = {
    id?: number
    requestId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateOrConnectWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    create: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput>
  }

  export type RequestResponseCreateManyUserInputEnvelope = {
    data: Enumerable<RequestResponseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TrainingSessionCreateWithoutParticipantsInput = {
    title: string
    description?: string | null
    creator: UserCreateNestedOneWithoutCreatedTrainingSessionsInput
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUncheckedCreateWithoutParticipantsInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionCreateOrConnectWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    create: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type BallTransactionCreateWithoutUserInput = {
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type BallTransactionUncheckedCreateWithoutUserInput = {
    id?: number
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type BallTransactionCreateOrConnectWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    create: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput>
  }

  export type BallTransactionCreateManyUserInputEnvelope = {
    data: Enumerable<BallTransactionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CaseOpeningCreateWithoutUserInput = {
    case: CaseCreateNestedOneWithoutOpeningsInput
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUncheckedCreateWithoutUserInput = {
    id?: number
    caseId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningCreateOrConnectWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    create: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput>
  }

  export type CaseOpeningCreateManyUserInputEnvelope = {
    data: Enumerable<CaseOpeningCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StoryCreateWithoutUserInput = {
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUncheckedCreateWithoutUserInput = {
    id?: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryCreateOrConnectWithoutUserInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput>
  }

  export type StoryCreateManyUserInputEnvelope = {
    data: Enumerable<StoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutUsersInput = {
    update: XOR<CountryUpdateWithoutUsersInput, CountryUncheckedUpdateWithoutUsersInput>
    create: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
  }

  export type CountryUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cities?: CityUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cities?: CityUncheckedUpdateManyWithoutCountryInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUpsertWithoutUsersInput = {
    update: XOR<CityUpdateWithoutUsersInput, CityUncheckedUpdateWithoutUsersInput>
    create: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
  }

  export type CityUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutCitiesInput
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUpsertWithoutUsersInput = {
    update: XOR<SportUpdateWithoutUsersInput, SportUncheckedUpdateWithoutUsersInput>
    create: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
  }

  export type SportUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | Enumerable<string>
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer1Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutMatchesInput>
  }

  export type MatchScalarWhereInput = {
    AND?: Enumerable<MatchScalarWhereInput>
    OR?: Enumerable<MatchScalarWhereInput>
    NOT?: Enumerable<MatchScalarWhereInput>
    id?: IntFilter | number
    creatorId?: IntFilter | number
    player1Id?: IntNullableFilter | number | null
    player2Id?: IntNullableFilter | number | null
    optionalId?: IntNullableFilter | number | null
    type?: EnumMatchTypeFilter | MatchType
    state?: EnumMatchStateFilter | MatchState
    score?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
  }

  export type MatchUpdateManyWithWhereWithoutCreatorInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutCreatedMatchesInput>
  }

  export type TrainingUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
  }

  export type TrainingUpdateManyWithWhereWithoutCreatorInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutCreatedTrainingsInput>
  }

  export type TrainingScalarWhereInput = {
    AND?: Enumerable<TrainingScalarWhereInput>
    OR?: Enumerable<TrainingScalarWhereInput>
    NOT?: Enumerable<TrainingScalarWhereInput>
    id?: IntFilter | number
    creatorId?: IntFilter | number
    location?: StringFilter | string
    time?: DateTimeFilter | Date | string
    participantLimit?: IntFilter | number
    description?: StringNullableFilter | string | null
    state?: EnumTrainingStateFilter | TrainingState
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    update: XOR<TrainingSessionUpdateWithoutCreatorInput, TrainingSessionUncheckedUpdateWithoutCreatorInput>
    create: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    data: XOR<TrainingSessionUpdateWithoutCreatorInput, TrainingSessionUncheckedUpdateWithoutCreatorInput>
  }

  export type TrainingSessionUpdateManyWithWhereWithoutCreatorInput = {
    where: TrainingSessionScalarWhereInput
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyWithoutCreatedTrainingSessionsInput>
  }

  export type TrainingSessionScalarWhereInput = {
    AND?: Enumerable<TrainingSessionScalarWhereInput>
    OR?: Enumerable<TrainingSessionScalarWhereInput>
    NOT?: Enumerable<TrainingSessionScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    creatorId?: IntFilter | number
    locationName?: StringNullableFilter | string | null
    courtSurface?: EnumCourtSurfaceNullableFilter | CourtSurface | null
    minLevel?: FloatNullableFilter | number | null
    maxLevel?: FloatNullableFilter | number | null
    maxSlots?: IntFilter | number
    currentSlots?: IntFilter | number
    paymentType?: EnumPaymentTypeFilter | PaymentType
    pricePerPerson?: FloatNullableFilter | number | null
    dateTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    status?: EnumTrainingStateFilter | TrainingState
    trainingType?: EnumTrainingTypeFilter | TrainingType
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
  }

  export type TournamentUpdateManyWithWhereWithoutCreatorInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutCreatedTournamentsInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: Enumerable<TournamentScalarWhereInput>
    OR?: Enumerable<TournamentScalarWhereInput>
    NOT?: Enumerable<TournamentScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    type?: EnumTournamentTypeFilter | TournamentType
    status?: StringFilter | string
    creatorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    formatDetails?: JsonNullableFilter
    minPlayers?: IntFilter | number
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    isRanked?: BoolFilter | boolean
    locationId?: IntNullableFilter | number | null
    locationName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
  }

  export type InviteUpdateManyWithWhereWithoutSenderInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutSentInvitesInput>
  }

  export type InviteScalarWhereInput = {
    AND?: Enumerable<InviteScalarWhereInput>
    OR?: Enumerable<InviteScalarWhereInput>
    NOT?: Enumerable<InviteScalarWhereInput>
    id?: IntFilter | number
    matchId?: IntNullableFilter | number | null
    trainingId?: IntNullableFilter | number | null
    senderId?: IntFilter | number
    receiverId?: IntFilter | number
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
  }

  export type InviteUpdateManyWithWhereWithoutReceiverInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutReceivedInvitesInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationsInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    message?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
  }

  export type TournamentUpdateManyWithWhereWithoutPlayersInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutTournamentsInput>
  }

  export type GameRequestUpsertWithWhereUniqueWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    update: XOR<GameRequestUpdateWithoutCreatorInput, GameRequestUncheckedUpdateWithoutCreatorInput>
    create: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput>
  }

  export type GameRequestUpdateWithWhereUniqueWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    data: XOR<GameRequestUpdateWithoutCreatorInput, GameRequestUncheckedUpdateWithoutCreatorInput>
  }

  export type GameRequestUpdateManyWithWhereWithoutCreatorInput = {
    where: GameRequestScalarWhereInput
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyWithoutCreatedRequestsInput>
  }

  export type GameRequestScalarWhereInput = {
    AND?: Enumerable<GameRequestScalarWhereInput>
    OR?: Enumerable<GameRequestScalarWhereInput>
    NOT?: Enumerable<GameRequestScalarWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    creatorId?: IntFilter | number
    locationName?: StringNullableFilter | string | null
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    gameMode?: StringFilter | string
    dateTime?: DateTimeFilter | Date | string
    paymentType?: StringFilter | string
    ratingType?: StringFilter | string
    formatInfo?: JsonNullableFilter
    status?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameRequestUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    update: XOR<GameRequestUpdateWithoutParticipantsInput, GameRequestUncheckedUpdateWithoutParticipantsInput>
    create: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput>
  }

  export type GameRequestUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    data: XOR<GameRequestUpdateWithoutParticipantsInput, GameRequestUncheckedUpdateWithoutParticipantsInput>
  }

  export type GameRequestUpdateManyWithWhereWithoutParticipantsInput = {
    where: GameRequestScalarWhereInput
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyWithoutRequestParticipationsInput>
  }

  export type RequestResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    update: XOR<RequestResponseUpdateWithoutUserInput, RequestResponseUncheckedUpdateWithoutUserInput>
    create: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput>
  }

  export type RequestResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    data: XOR<RequestResponseUpdateWithoutUserInput, RequestResponseUncheckedUpdateWithoutUserInput>
  }

  export type RequestResponseUpdateManyWithWhereWithoutUserInput = {
    where: RequestResponseScalarWhereInput
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyWithoutRequestResponsesInput>
  }

  export type RequestResponseScalarWhereInput = {
    AND?: Enumerable<RequestResponseScalarWhereInput>
    OR?: Enumerable<RequestResponseScalarWhereInput>
    NOT?: Enumerable<RequestResponseScalarWhereInput>
    id?: IntFilter | number
    requestId?: IntFilter | number
    userId?: IntFilter | number
    status?: StringFilter | string
    message?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    update: XOR<TrainingSessionUpdateWithoutParticipantsInput, TrainingSessionUncheckedUpdateWithoutParticipantsInput>
    create: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    data: XOR<TrainingSessionUpdateWithoutParticipantsInput, TrainingSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type TrainingSessionUpdateManyWithWhereWithoutParticipantsInput = {
    where: TrainingSessionScalarWhereInput
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyWithoutTrainingSessionParticipationsInput>
  }

  export type BallTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    update: XOR<BallTransactionUpdateWithoutUserInput, BallTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput>
  }

  export type BallTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    data: XOR<BallTransactionUpdateWithoutUserInput, BallTransactionUncheckedUpdateWithoutUserInput>
  }

  export type BallTransactionUpdateManyWithWhereWithoutUserInput = {
    where: BallTransactionScalarWhereInput
    data: XOR<BallTransactionUpdateManyMutationInput, BallTransactionUncheckedUpdateManyWithoutBallTransactionsInput>
  }

  export type BallTransactionScalarWhereInput = {
    AND?: Enumerable<BallTransactionScalarWhereInput>
    OR?: Enumerable<BallTransactionScalarWhereInput>
    NOT?: Enumerable<BallTransactionScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    amount?: IntFilter | number
    description?: StringFilter | string
    type?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type CaseOpeningUpsertWithWhereUniqueWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    update: XOR<CaseOpeningUpdateWithoutUserInput, CaseOpeningUncheckedUpdateWithoutUserInput>
    create: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput>
  }

  export type CaseOpeningUpdateWithWhereUniqueWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    data: XOR<CaseOpeningUpdateWithoutUserInput, CaseOpeningUncheckedUpdateWithoutUserInput>
  }

  export type CaseOpeningUpdateManyWithWhereWithoutUserInput = {
    where: CaseOpeningScalarWhereInput
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyWithoutCaseOpeningsInput>
  }

  export type CaseOpeningScalarWhereInput = {
    AND?: Enumerable<CaseOpeningScalarWhereInput>
    OR?: Enumerable<CaseOpeningScalarWhereInput>
    NOT?: Enumerable<CaseOpeningScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    caseId?: IntFilter | number
    reward?: JsonFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type StoryUpsertWithWhereUniqueWithoutUserInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutUserInput, StoryUncheckedUpdateWithoutUserInput>
    create: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutUserInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutUserInput, StoryUncheckedUpdateWithoutUserInput>
  }

  export type StoryUpdateManyWithWhereWithoutUserInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutStoriesInput>
  }

  export type StoryScalarWhereInput = {
    AND?: Enumerable<StoryScalarWhereInput>
    OR?: Enumerable<StoryScalarWhereInput>
    NOT?: Enumerable<StoryScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    telegramFileId?: StringFilter | string
    telegramFilePath?: StringNullableFilter | string | null
    type?: EnumMediaTypeFilter | MediaType
    status?: EnumStoryStatusFilter | StoryStatus
    createdAt?: DateTimeFilter | Date | string
    publishedAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutBallTransactionsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBallTransactionsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBallTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
  }

  export type UserUpsertWithoutBallTransactionsInput = {
    update: XOR<UserUpdateWithoutBallTransactionsInput, UserUncheckedUpdateWithoutBallTransactionsInput>
    create: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
  }

  export type UserUpdateWithoutBallTransactionsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutBallTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type CaseOpeningCreateWithoutCaseInput = {
    user: UserCreateNestedOneWithoutCaseOpeningsInput
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUncheckedCreateWithoutCaseInput = {
    id?: number
    userId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningCreateOrConnectWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    create: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput>
  }

  export type CaseOpeningCreateManyCaseInputEnvelope = {
    data: Enumerable<CaseOpeningCreateManyCaseInput>
    skipDuplicates?: boolean
  }

  export type CaseOpeningUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    update: XOR<CaseOpeningUpdateWithoutCaseInput, CaseOpeningUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput>
  }

  export type CaseOpeningUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    data: XOR<CaseOpeningUpdateWithoutCaseInput, CaseOpeningUncheckedUpdateWithoutCaseInput>
  }

  export type CaseOpeningUpdateManyWithWhereWithoutCaseInput = {
    where: CaseOpeningScalarWhereInput
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyWithoutOpeningsInput>
  }

  export type UserCreateWithoutCaseOpeningsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCaseOpeningsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCaseOpeningsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
  }

  export type CaseCreateWithoutOpeningsInput = {
    name: string
    description: string
    price: number
    image?: string | null
    rewards: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUncheckedCreateWithoutOpeningsInput = {
    id?: number
    name: string
    description: string
    price: number
    image?: string | null
    rewards: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseCreateOrConnectWithoutOpeningsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
  }

  export type UserUpsertWithoutCaseOpeningsInput = {
    update: XOR<UserUpdateWithoutCaseOpeningsInput, UserUncheckedUpdateWithoutCaseOpeningsInput>
    create: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
  }

  export type UserUpdateWithoutCaseOpeningsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCaseOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type CaseUpsertWithoutOpeningsInput = {
    update: XOR<CaseUpdateWithoutOpeningsInput, CaseUncheckedUpdateWithoutOpeningsInput>
    create: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
  }

  export type CaseUpdateWithoutOpeningsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateWithoutOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rewards?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCreatedMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
  }

  export type UserCreateWithoutMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
  }

  export type InviteCreateWithoutMatchInput = {
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutMatchInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteCreateManyMatchInputEnvelope = {
    data: Enumerable<InviteCreateManyMatchInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedMatchesInput = {
    update: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
  }

  export type UserUpdateWithoutCreatedMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutMatchesInput = {
    update: XOR<UserUpdateWithoutMatchesInput, UserUncheckedUpdateWithoutMatchesInput>
    create: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
  }

  export type UserUpdateWithoutMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type InviteUpsertWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
  }

  export type InviteUpdateManyWithWhereWithoutMatchInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutInvitesInput>
  }

  export type UserCreateWithoutCreatedTrainingsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTrainingsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTrainingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
  }

  export type InviteCreateWithoutTrainingInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteCreateManyTrainingInputEnvelope = {
    data: Enumerable<InviteCreateManyTrainingInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTrainingsInput = {
    update: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
  }

  export type UserUpdateWithoutCreatedTrainingsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTrainingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type InviteUpsertWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
  }

  export type InviteUpdateManyWithWhereWithoutTrainingInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutInvitesInput>
  }

  export type UserCreateWithoutCreatedTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
  }

  export type UserCreateWithoutTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type TournamentMatchCreateWithoutTournamentInput = {
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUncheckedCreateWithoutTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchCreateManyTournamentInputEnvelope = {
    data: Enumerable<TournamentMatchCreateManyTournamentInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTournamentsInput = {
    update: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateWithoutCreatedTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
  }

  export type UserUpdateManyWithWhereWithoutTournamentsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPlayersInput>
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutMatchesInput>
  }

  export type TournamentMatchScalarWhereInput = {
    AND?: Enumerable<TournamentMatchScalarWhereInput>
    OR?: Enumerable<TournamentMatchScalarWhereInput>
    NOT?: Enumerable<TournamentMatchScalarWhereInput>
    id?: IntFilter | number
    tournamentId?: IntFilter | number
    round?: IntNullableFilter | number | null
    group?: StringNullableFilter | string | null
    playerAId?: IntFilter | number
    playerBId?: IntNullableFilter | number | null
    score?: StringNullableFilter | string | null
    winnerId?: IntNullableFilter | number | null
    status?: StringFilter | string
    court?: StringNullableFilter | string | null
    scheduledAt?: DateTimeNullableFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentCreateWithoutMatchesInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutMatchesInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutMatchesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type TournamentUpsertWithoutMatchesInput = {
    update: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type TournamentUpdateWithoutMatchesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateWithoutInvitesInput = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutInvitesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
  }

  export type TrainingCreateWithoutInvitesInput = {
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutInvitesInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
  }

  export type UserCreateWithoutSentInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
  }

  export type UserCreateWithoutReceivedInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
  }

  export type MatchUpsertWithoutInvitesInput = {
    update: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
  }

  export type MatchUpdateWithoutInvitesInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpsertWithoutInvitesInput = {
    update: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
  }

  export type TrainingUpdateWithoutInvitesInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsInput
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSentInvitesInput = {
    update: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
  }

  export type UserUpdateWithoutSentInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSentInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutReceivedInvitesInput = {
    update: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
  }

  export type UserUpdateWithoutReceivedInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutReceivedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutNotificationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutProfileInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutCreatedRequestsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedRequestsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
  }

  export type UserCreateWithoutRequestParticipationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestParticipationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput>
  }

  export type RequestResponseCreateWithoutRequestInput = {
    user: UserCreateNestedOneWithoutRequestResponsesInput
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUncheckedCreateWithoutRequestInput = {
    id?: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateOrConnectWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    create: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput>
  }

  export type RequestResponseCreateManyRequestInputEnvelope = {
    data: Enumerable<RequestResponseCreateManyRequestInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedRequestsInput = {
    update: XOR<UserUpdateWithoutCreatedRequestsInput, UserUncheckedUpdateWithoutCreatedRequestsInput>
    create: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
  }

  export type UserUpdateWithoutCreatedRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithWhereUniqueWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRequestParticipationsInput, UserUncheckedUpdateWithoutRequestParticipationsInput>
    create: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRequestParticipationsInput, UserUncheckedUpdateWithoutRequestParticipationsInput>
  }

  export type UserUpdateManyWithWhereWithoutRequestParticipationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type RequestResponseUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    update: XOR<RequestResponseUpdateWithoutRequestInput, RequestResponseUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput>
  }

  export type RequestResponseUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    data: XOR<RequestResponseUpdateWithoutRequestInput, RequestResponseUncheckedUpdateWithoutRequestInput>
  }

  export type RequestResponseUpdateManyWithWhereWithoutRequestInput = {
    where: RequestResponseScalarWhereInput
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyWithoutResponsesInput>
  }

  export type GameRequestCreateWithoutResponsesInput = {
    type: string
    title: string
    description?: string | null
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUncheckedCreateWithoutResponsesInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestCreateOrConnectWithoutResponsesInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
  }

  export type UserCreateWithoutRequestResponsesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestResponsesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
  }

  export type GameRequestUpsertWithoutResponsesInput = {
    update: XOR<GameRequestUpdateWithoutResponsesInput, GameRequestUncheckedUpdateWithoutResponsesInput>
    create: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
  }

  export type GameRequestUpdateWithoutResponsesInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsInput
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUpdateManyWithoutRequestParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutRequestResponsesInput = {
    update: XOR<UserUpdateWithoutRequestResponsesInput, UserUncheckedUpdateWithoutRequestResponsesInput>
    create: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
  }

  export type UserUpdateWithoutRequestResponsesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRequestResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutCreatedTrainingSessionsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTrainingSessionsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTrainingSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
  }

  export type UserCreateWithoutTrainingSessionParticipationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTrainingSessionParticipationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpsertWithoutCreatedTrainingSessionsInput = {
    update: XOR<UserUpdateWithoutCreatedTrainingSessionsInput, UserUncheckedUpdateWithoutCreatedTrainingSessionsInput>
    create: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
  }

  export type UserUpdateWithoutCreatedTrainingSessionsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTrainingSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTrainingSessionParticipationsInput, UserUncheckedUpdateWithoutTrainingSessionParticipationsInput>
    create: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTrainingSessionParticipationsInput, UserUncheckedUpdateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type CityCreateManyCountryInput = {
    id?: number
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyCountryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    cityId?: number | null
    sportId?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
  }

  export type CityUpdateWithoutCountryInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCityInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCityInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateManyWithoutCitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutCountryInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UserCreateManyCityInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    sportId?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
  }

  export type UserUpdateWithoutCityInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManySportInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    countryCode?: string | null
    cityId?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
  }

  export type UserUpdateWithoutSportInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type MatchCreateManyPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateManyCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: TrainingState
    trainingType?: TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateManySenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateManyReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type GameRequestCreateManyCreatorInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateManyUserInput = {
    id?: number
    requestId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BallTransactionCreateManyUserInput = {
    id?: number
    amount: number
    description: string
    type: string
    createdAt?: Date | string
  }

  export type CaseOpeningCreateManyUserInput = {
    id?: number
    caseId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type StoryCreateManyUserInput = {
    id?: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: MediaType
    status?: StoryStatus
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutPlayer1Input = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutCreatorInput = {
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutCreatedMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutCreatorInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUncheckedUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyWithoutCreatedTrainingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    participants?: UserUpdateManyWithoutTrainingSessionParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    participants?: UserUncheckedUpdateManyWithoutTrainingSessionParticipationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateManyWithoutCreatedTrainingSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyWithoutCreatedTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutSenderInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutSentInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutReceiverInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutReceivedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutPlayersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUpdateWithoutCreatorInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUpdateManyWithoutRequestParticipationsInput
    responses?: RequestResponseUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateManyWithoutCreatedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUpdateWithoutParticipantsInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsInput
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    responses?: RequestResponseUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateManyWithoutRequestParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUpdateWithoutUserInput = {
    request?: GameRequestUpdateOneRequiredWithoutResponsesInput
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyWithoutRequestResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingSessionsInput
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateManyWithoutTrainingSessionParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateManyWithoutBallTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUpdateWithoutUserInput = {
    case?: CaseUpdateOneRequiredWithoutOpeningsInput
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateManyWithoutCaseOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUpdateWithoutUserInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateManyWithoutStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | MediaType
    status?: EnumStoryStatusFieldUpdateOperationsInput | StoryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningCreateManyCaseInput = {
    id?: number
    userId: number
    reward: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseOpeningUpdateWithoutCaseInput = {
    user?: UserUpdateOneRequiredWithoutCaseOpeningsInput
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateManyWithoutOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    reward?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutMatchInput = {
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutTrainingInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutTrainingInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type TournamentMatchUpdateWithoutTournamentInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateWithoutTournamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateManyRequestInput = {
    id?: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRequestParticipationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRequestParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type RequestResponseUpdateWithoutRequestInput = {
    user?: UserUpdateOneRequiredWithoutRequestResponsesInput
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTrainingSessionParticipationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    country?: CountryUpdateOneWithoutUsersInput
    city?: CityUpdateOneWithoutUsersInput
    sport?: SportUpdateOneWithoutUsersInput
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUpdateManyWithoutUserInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserInput
    stories?: StoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTrainingSessionParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserInput
    stories?: StoryUncheckedUpdateManyWithoutUserInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}