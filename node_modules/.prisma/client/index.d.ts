
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model MatchFeedback
 * 
 */
export type MatchFeedback = $Result.DefaultSelection<Prisma.$MatchFeedbackPayload>
/**
 * Model DirectMessage
 * 
 */
export type DirectMessage = $Result.DefaultSelection<Prisma.$DirectMessagePayload>
/**
 * Model Story
 * 
 */
export type Story = $Result.DefaultSelection<Prisma.$StoryPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model City
 * 
 */
export type City = $Result.DefaultSelection<Prisma.$CityPayload>
/**
 * Model Sport
 * 
 */
export type Sport = $Result.DefaultSelection<Prisma.$SportPayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PlayerRating
 * 
 */
export type PlayerRating = $Result.DefaultSelection<Prisma.$PlayerRatingPayload>
/**
 * Model RatingHistory
 * 
 */
export type RatingHistory = $Result.DefaultSelection<Prisma.$RatingHistoryPayload>
/**
 * Model RatingSeason
 * 
 */
export type RatingSeason = $Result.DefaultSelection<Prisma.$RatingSeasonPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>
/**
 * Model ReferralStats
 * 
 */
export type ReferralStats = $Result.DefaultSelection<Prisma.$ReferralStatsPayload>
/**
 * Model ReferralActivity
 * 
 */
export type ReferralActivity = $Result.DefaultSelection<Prisma.$ReferralActivityPayload>
/**
 * Model BallTransaction
 * 
 */
export type BallTransaction = $Result.DefaultSelection<Prisma.$BallTransactionPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model CaseItem
 * 
 */
export type CaseItem = $Result.DefaultSelection<Prisma.$CaseItemPayload>
/**
 * Model CaseOpening
 * 
 */
export type CaseOpening = $Result.DefaultSelection<Prisma.$CaseOpeningPayload>
/**
 * Model CaseWinning
 * 
 */
export type CaseWinning = $Result.DefaultSelection<Prisma.$CaseWinningPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model Training
 * 
 */
export type Training = $Result.DefaultSelection<Prisma.$TrainingPayload>
/**
 * Model Tournament
 * 
 */
export type Tournament = $Result.DefaultSelection<Prisma.$TournamentPayload>
/**
 * Model TournamentMatch
 * 
 */
export type TournamentMatch = $Result.DefaultSelection<Prisma.$TournamentMatchPayload>
/**
 * Model Invite
 * 
 */
export type Invite = $Result.DefaultSelection<Prisma.$InvitePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model UserState
 * 
 */
export type UserState = $Result.DefaultSelection<Prisma.$UserStatePayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model GameRequest
 * 
 */
export type GameRequest = $Result.DefaultSelection<Prisma.$GameRequestPayload>
/**
 * Model RequestResponse
 * 
 */
export type RequestResponse = $Result.DefaultSelection<Prisma.$RequestResponsePayload>
/**
 * Model TrainingSession
 * 
 */
export type TrainingSession = $Result.DefaultSelection<Prisma.$TrainingSessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MediaType: {
  image: 'image',
  video: 'video'
};

export type MediaType = (typeof MediaType)[keyof typeof MediaType]


export const StoryStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type StoryStatus = (typeof StoryStatus)[keyof typeof StoryStatus]


export const Role: {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const AuthSource: {
  WEB: 'WEB',
  TELEGRAM_BOT: 'TELEGRAM_BOT',
  MOBILE_APP: 'MOBILE_APP'
};

export type AuthSource = (typeof AuthSource)[keyof typeof AuthSource]


export const BallTransactionType: {
  EARNED: 'EARNED',
  SPENT: 'SPENT',
  BONUS: 'BONUS',
  REFUND: 'REFUND'
};

export type BallTransactionType = (typeof BallTransactionType)[keyof typeof BallTransactionType]


export const CaseItemType: {
  VIRTUAL: 'VIRTUAL',
  PHYSICAL: 'PHYSICAL',
  ACTION: 'ACTION'
};

export type CaseItemType = (typeof CaseItemType)[keyof typeof CaseItemType]


export const MatchType: {
  ONE_ON_ONE: 'ONE_ON_ONE',
  DOUBLES: 'DOUBLES'
};

export type MatchType = (typeof MatchType)[keyof typeof MatchType]


export const MatchState: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
};

export type MatchState = (typeof MatchState)[keyof typeof MatchState]


export const TrainingState: {
  OPEN: 'OPEN',
  FULL: 'FULL',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE'
};

export type TrainingState = (typeof TrainingState)[keyof typeof TrainingState]


export const TournamentType: {
  SINGLE_ELIMINATION: 'SINGLE_ELIMINATION',
  GROUPS_PLAYOFF: 'GROUPS_PLAYOFF',
  LEAGUE: 'LEAGUE',
  BLITZ: 'BLITZ'
};

export type TournamentType = (typeof TournamentType)[keyof typeof TournamentType]


export const InviteStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type InviteStatus = (typeof InviteStatus)[keyof typeof InviteStatus]


export const NotificationType: {
  MATCH_SCHEDULED: 'MATCH_SCHEDULED',
  MATCH_REMINDER: 'MATCH_REMINDER',
  MATCH_CANCELLED: 'MATCH_CANCELLED',
  TOURNAMENT_RESULT: 'TOURNAMENT_RESULT',
  NEW_INVITE: 'NEW_INVITE',
  INVITE_ACCEPTED: 'INVITE_ACCEPTED',
  INVITE_DECLINED: 'INVITE_DECLINED',
  TRAINING_REMINDER: 'TRAINING_REMINDER',
  SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',
  REFERRAL_BONUS: 'REFERRAL_BONUS',
  CASE_OPENED: 'CASE_OPENED'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ProfileStep: {
  AWAITING_CITY: 'AWAITING_CITY',
  AWAITING_COURT: 'AWAITING_COURT',
  AWAITING_HAND: 'AWAITING_HAND',
  AWAITING_FREQUENCY: 'AWAITING_FREQUENCY',
  AWAITING_TOURNAMENTS: 'AWAITING_TOURNAMENTS',
  AWAITING_LEVEL: 'AWAITING_LEVEL',
  COMPLETE: 'COMPLETE'
};

export type ProfileStep = (typeof ProfileStep)[keyof typeof ProfileStep]


export const CourtSurface: {
  HARD: 'HARD',
  CLAY: 'CLAY',
  GRASS: 'GRASS',
  CARPET: 'CARPET'
};

export type CourtSurface = (typeof CourtSurface)[keyof typeof CourtSurface]


export const PaymentType: {
  FREE: 'FREE',
  HOST_PAYS: 'HOST_PAYS',
  LOSER_PAYS: 'LOSER_PAYS',
  DIVIDED: 'DIVIDED',
  FIXED_PRICE: 'FIXED_PRICE'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const TrainingType: {
  WITH_COACH: 'WITH_COACH',
  WITHOUT_COACH: 'WITHOUT_COACH',
  TIEBREAK: 'TIEBREAK',
  SPARRING: 'SPARRING',
  TECHNIQUE: 'TECHNIQUE'
};

export type TrainingType = (typeof TrainingType)[keyof typeof TrainingType]

}

export type MediaType = $Enums.MediaType

export const MediaType: typeof $Enums.MediaType

export type StoryStatus = $Enums.StoryStatus

export const StoryStatus: typeof $Enums.StoryStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type AuthSource = $Enums.AuthSource

export const AuthSource: typeof $Enums.AuthSource

export type BallTransactionType = $Enums.BallTransactionType

export const BallTransactionType: typeof $Enums.BallTransactionType

export type CaseItemType = $Enums.CaseItemType

export const CaseItemType: typeof $Enums.CaseItemType

export type MatchType = $Enums.MatchType

export const MatchType: typeof $Enums.MatchType

export type MatchState = $Enums.MatchState

export const MatchState: typeof $Enums.MatchState

export type TrainingState = $Enums.TrainingState

export const TrainingState: typeof $Enums.TrainingState

export type TournamentType = $Enums.TournamentType

export const TournamentType: typeof $Enums.TournamentType

export type InviteStatus = $Enums.InviteStatus

export const InviteStatus: typeof $Enums.InviteStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ProfileStep = $Enums.ProfileStep

export const ProfileStep: typeof $Enums.ProfileStep

export type CourtSurface = $Enums.CourtSurface

export const CourtSurface: typeof $Enums.CourtSurface

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type TrainingType = $Enums.TrainingType

export const TrainingType: typeof $Enums.TrainingType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MatchFeedbacks
 * const matchFeedbacks = await prisma.matchFeedback.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MatchFeedbacks
   * const matchFeedbacks = await prisma.matchFeedback.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.matchFeedback`: Exposes CRUD operations for the **MatchFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchFeedbacks
    * const matchFeedbacks = await prisma.matchFeedback.findMany()
    * ```
    */
  get matchFeedback(): Prisma.MatchFeedbackDelegate<ExtArgs>;

  /**
   * `prisma.directMessage`: Exposes CRUD operations for the **DirectMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DirectMessages
    * const directMessages = await prisma.directMessage.findMany()
    * ```
    */
  get directMessage(): Prisma.DirectMessageDelegate<ExtArgs>;

  /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<ExtArgs>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<ExtArgs>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sports
    * const sports = await prisma.sport.findMany()
    * ```
    */
  get sport(): Prisma.SportDelegate<ExtArgs>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.playerRating`: Exposes CRUD operations for the **PlayerRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerRatings
    * const playerRatings = await prisma.playerRating.findMany()
    * ```
    */
  get playerRating(): Prisma.PlayerRatingDelegate<ExtArgs>;

  /**
   * `prisma.ratingHistory`: Exposes CRUD operations for the **RatingHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RatingHistories
    * const ratingHistories = await prisma.ratingHistory.findMany()
    * ```
    */
  get ratingHistory(): Prisma.RatingHistoryDelegate<ExtArgs>;

  /**
   * `prisma.ratingSeason`: Exposes CRUD operations for the **RatingSeason** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RatingSeasons
    * const ratingSeasons = await prisma.ratingSeason.findMany()
    * ```
    */
  get ratingSeason(): Prisma.RatingSeasonDelegate<ExtArgs>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs>;

  /**
   * `prisma.referralStats`: Exposes CRUD operations for the **ReferralStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralStats
    * const referralStats = await prisma.referralStats.findMany()
    * ```
    */
  get referralStats(): Prisma.ReferralStatsDelegate<ExtArgs>;

  /**
   * `prisma.referralActivity`: Exposes CRUD operations for the **ReferralActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralActivities
    * const referralActivities = await prisma.referralActivity.findMany()
    * ```
    */
  get referralActivity(): Prisma.ReferralActivityDelegate<ExtArgs>;

  /**
   * `prisma.ballTransaction`: Exposes CRUD operations for the **BallTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BallTransactions
    * const ballTransactions = await prisma.ballTransaction.findMany()
    * ```
    */
  get ballTransaction(): Prisma.BallTransactionDelegate<ExtArgs>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs>;

  /**
   * `prisma.caseItem`: Exposes CRUD operations for the **CaseItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseItems
    * const caseItems = await prisma.caseItem.findMany()
    * ```
    */
  get caseItem(): Prisma.CaseItemDelegate<ExtArgs>;

  /**
   * `prisma.caseOpening`: Exposes CRUD operations for the **CaseOpening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseOpenings
    * const caseOpenings = await prisma.caseOpening.findMany()
    * ```
    */
  get caseOpening(): Prisma.CaseOpeningDelegate<ExtArgs>;

  /**
   * `prisma.caseWinning`: Exposes CRUD operations for the **CaseWinning** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseWinnings
    * const caseWinnings = await prisma.caseWinning.findMany()
    * ```
    */
  get caseWinning(): Prisma.CaseWinningDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.training`: Exposes CRUD operations for the **Training** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trainings
    * const trainings = await prisma.training.findMany()
    * ```
    */
  get training(): Prisma.TrainingDelegate<ExtArgs>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<ExtArgs>;

  /**
   * `prisma.tournamentMatch`: Exposes CRUD operations for the **TournamentMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentMatches
    * const tournamentMatches = await prisma.tournamentMatch.findMany()
    * ```
    */
  get tournamentMatch(): Prisma.TournamentMatchDelegate<ExtArgs>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invites
    * const invites = await prisma.invite.findMany()
    * ```
    */
  get invite(): Prisma.InviteDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.userState`: Exposes CRUD operations for the **UserState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStates
    * const userStates = await prisma.userState.findMany()
    * ```
    */
  get userState(): Prisma.UserStateDelegate<ExtArgs>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;

  /**
   * `prisma.gameRequest`: Exposes CRUD operations for the **GameRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameRequests
    * const gameRequests = await prisma.gameRequest.findMany()
    * ```
    */
  get gameRequest(): Prisma.GameRequestDelegate<ExtArgs>;

  /**
   * `prisma.requestResponse`: Exposes CRUD operations for the **RequestResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestResponses
    * const requestResponses = await prisma.requestResponse.findMany()
    * ```
    */
  get requestResponse(): Prisma.RequestResponseDelegate<ExtArgs>;

  /**
   * `prisma.trainingSession`: Exposes CRUD operations for the **TrainingSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingSessions
    * const trainingSessions = await prisma.trainingSession.findMany()
    * ```
    */
  get trainingSession(): Prisma.TrainingSessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    MatchFeedback: 'MatchFeedback',
    DirectMessage: 'DirectMessage',
    Story: 'Story',
    Country: 'Country',
    City: 'City',
    Sport: 'Sport',
    UserSettings: 'UserSettings',
    User: 'User',
    PlayerRating: 'PlayerRating',
    RatingHistory: 'RatingHistory',
    RatingSeason: 'RatingSeason',
    UserAchievement: 'UserAchievement',
    ReferralStats: 'ReferralStats',
    ReferralActivity: 'ReferralActivity',
    BallTransaction: 'BallTransaction',
    Case: 'Case',
    CaseItem: 'CaseItem',
    CaseOpening: 'CaseOpening',
    CaseWinning: 'CaseWinning',
    Match: 'Match',
    Training: 'Training',
    Tournament: 'Tournament',
    TournamentMatch: 'TournamentMatch',
    Invite: 'Invite',
    Notification: 'Notification',
    UserState: 'UserState',
    UserProfile: 'UserProfile',
    GameRequest: 'GameRequest',
    RequestResponse: 'RequestResponse',
    TrainingSession: 'TrainingSession'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "matchFeedback" | "directMessage" | "story" | "country" | "city" | "sport" | "userSettings" | "user" | "playerRating" | "ratingHistory" | "ratingSeason" | "userAchievement" | "referralStats" | "referralActivity" | "ballTransaction" | "case" | "caseItem" | "caseOpening" | "caseWinning" | "match" | "training" | "tournament" | "tournamentMatch" | "invite" | "notification" | "userState" | "userProfile" | "gameRequest" | "requestResponse" | "trainingSession"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      MatchFeedback: {
        payload: Prisma.$MatchFeedbackPayload<ExtArgs>
        fields: Prisma.MatchFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          findFirst: {
            args: Prisma.MatchFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          findMany: {
            args: Prisma.MatchFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>[]
          }
          create: {
            args: Prisma.MatchFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          createMany: {
            args: Prisma.MatchFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>[]
          }
          delete: {
            args: Prisma.MatchFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          update: {
            args: Prisma.MatchFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.MatchFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchFeedbackPayload>
          }
          aggregate: {
            args: Prisma.MatchFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchFeedback>
          }
          groupBy: {
            args: Prisma.MatchFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<MatchFeedbackCountAggregateOutputType> | number
          }
        }
      }
      DirectMessage: {
        payload: Prisma.$DirectMessagePayload<ExtArgs>
        fields: Prisma.DirectMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DirectMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DirectMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          findFirst: {
            args: Prisma.DirectMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DirectMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          findMany: {
            args: Prisma.DirectMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>[]
          }
          create: {
            args: Prisma.DirectMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          createMany: {
            args: Prisma.DirectMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DirectMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>[]
          }
          delete: {
            args: Prisma.DirectMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          update: {
            args: Prisma.DirectMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          deleteMany: {
            args: Prisma.DirectMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DirectMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DirectMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectMessagePayload>
          }
          aggregate: {
            args: Prisma.DirectMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDirectMessage>
          }
          groupBy: {
            args: Prisma.DirectMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DirectMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DirectMessageCountArgs<ExtArgs>
            result: $Utils.Optional<DirectMessageCountAggregateOutputType> | number
          }
        }
      }
      Story: {
        payload: Prisma.$StoryPayload<ExtArgs>
        fields: Prisma.StoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findFirst: {
            args: Prisma.StoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findMany: {
            args: Prisma.StoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          create: {
            args: Prisma.StoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          createMany: {
            args: Prisma.StoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          delete: {
            args: Prisma.StoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          update: {
            args: Prisma.StoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          deleteMany: {
            args: Prisma.StoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          aggregate: {
            args: Prisma.StoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStory>
          }
          groupBy: {
            args: Prisma.StoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryCountArgs<ExtArgs>
            result: $Utils.Optional<StoryCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      City: {
        payload: Prisma.$CityPayload<ExtArgs>
        fields: Prisma.CityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findFirst: {
            args: Prisma.CityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findMany: {
            args: Prisma.CityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          create: {
            args: Prisma.CityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          createMany: {
            args: Prisma.CityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          delete: {
            args: Prisma.CityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          update: {
            args: Prisma.CityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          deleteMany: {
            args: Prisma.CityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          aggregate: {
            args: Prisma.CityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCity>
          }
          groupBy: {
            args: Prisma.CityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CityCountArgs<ExtArgs>
            result: $Utils.Optional<CityCountAggregateOutputType> | number
          }
        }
      }
      Sport: {
        payload: Prisma.$SportPayload<ExtArgs>
        fields: Prisma.SportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findFirst: {
            args: Prisma.SportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          findMany: {
            args: Prisma.SportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          create: {
            args: Prisma.SportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          createMany: {
            args: Prisma.SportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>[]
          }
          delete: {
            args: Prisma.SportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          update: {
            args: Prisma.SportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          deleteMany: {
            args: Prisma.SportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SportPayload>
          }
          aggregate: {
            args: Prisma.SportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSport>
          }
          groupBy: {
            args: Prisma.SportGroupByArgs<ExtArgs>
            result: $Utils.Optional<SportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SportCountArgs<ExtArgs>
            result: $Utils.Optional<SportCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PlayerRating: {
        payload: Prisma.$PlayerRatingPayload<ExtArgs>
        fields: Prisma.PlayerRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          findFirst: {
            args: Prisma.PlayerRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          findMany: {
            args: Prisma.PlayerRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>[]
          }
          create: {
            args: Prisma.PlayerRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          createMany: {
            args: Prisma.PlayerRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>[]
          }
          delete: {
            args: Prisma.PlayerRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          update: {
            args: Prisma.PlayerRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          deleteMany: {
            args: Prisma.PlayerRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerRatingPayload>
          }
          aggregate: {
            args: Prisma.PlayerRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerRating>
          }
          groupBy: {
            args: Prisma.PlayerRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerRatingCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerRatingCountAggregateOutputType> | number
          }
        }
      }
      RatingHistory: {
        payload: Prisma.$RatingHistoryPayload<ExtArgs>
        fields: Prisma.RatingHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          findFirst: {
            args: Prisma.RatingHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          findMany: {
            args: Prisma.RatingHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>[]
          }
          create: {
            args: Prisma.RatingHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          createMany: {
            args: Prisma.RatingHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>[]
          }
          delete: {
            args: Prisma.RatingHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          update: {
            args: Prisma.RatingHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          deleteMany: {
            args: Prisma.RatingHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RatingHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingHistoryPayload>
          }
          aggregate: {
            args: Prisma.RatingHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRatingHistory>
          }
          groupBy: {
            args: Prisma.RatingHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<RatingHistoryCountAggregateOutputType> | number
          }
        }
      }
      RatingSeason: {
        payload: Prisma.$RatingSeasonPayload<ExtArgs>
        fields: Prisma.RatingSeasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingSeasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingSeasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          findFirst: {
            args: Prisma.RatingSeasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingSeasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          findMany: {
            args: Prisma.RatingSeasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>[]
          }
          create: {
            args: Prisma.RatingSeasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          createMany: {
            args: Prisma.RatingSeasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingSeasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>[]
          }
          delete: {
            args: Prisma.RatingSeasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          update: {
            args: Prisma.RatingSeasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          deleteMany: {
            args: Prisma.RatingSeasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingSeasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RatingSeasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingSeasonPayload>
          }
          aggregate: {
            args: Prisma.RatingSeasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRatingSeason>
          }
          groupBy: {
            args: Prisma.RatingSeasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingSeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingSeasonCountArgs<ExtArgs>
            result: $Utils.Optional<RatingSeasonCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
      ReferralStats: {
        payload: Prisma.$ReferralStatsPayload<ExtArgs>
        fields: Prisma.ReferralStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          findFirst: {
            args: Prisma.ReferralStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          findMany: {
            args: Prisma.ReferralStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>[]
          }
          create: {
            args: Prisma.ReferralStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          createMany: {
            args: Prisma.ReferralStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>[]
          }
          delete: {
            args: Prisma.ReferralStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          update: {
            args: Prisma.ReferralStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          deleteMany: {
            args: Prisma.ReferralStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferralStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralStatsPayload>
          }
          aggregate: {
            args: Prisma.ReferralStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferralStats>
          }
          groupBy: {
            args: Prisma.ReferralStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralStatsCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralStatsCountAggregateOutputType> | number
          }
        }
      }
      ReferralActivity: {
        payload: Prisma.$ReferralActivityPayload<ExtArgs>
        fields: Prisma.ReferralActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          findFirst: {
            args: Prisma.ReferralActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          findMany: {
            args: Prisma.ReferralActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>[]
          }
          create: {
            args: Prisma.ReferralActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          createMany: {
            args: Prisma.ReferralActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>[]
          }
          delete: {
            args: Prisma.ReferralActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          update: {
            args: Prisma.ReferralActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          deleteMany: {
            args: Prisma.ReferralActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferralActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralActivityPayload>
          }
          aggregate: {
            args: Prisma.ReferralActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferralActivity>
          }
          groupBy: {
            args: Prisma.ReferralActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralActivityCountAggregateOutputType> | number
          }
        }
      }
      BallTransaction: {
        payload: Prisma.$BallTransactionPayload<ExtArgs>
        fields: Prisma.BallTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BallTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BallTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          findFirst: {
            args: Prisma.BallTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BallTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          findMany: {
            args: Prisma.BallTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>[]
          }
          create: {
            args: Prisma.BallTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          createMany: {
            args: Prisma.BallTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BallTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>[]
          }
          delete: {
            args: Prisma.BallTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          update: {
            args: Prisma.BallTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          deleteMany: {
            args: Prisma.BallTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BallTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BallTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BallTransactionPayload>
          }
          aggregate: {
            args: Prisma.BallTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBallTransaction>
          }
          groupBy: {
            args: Prisma.BallTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BallTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BallTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<BallTransactionCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      CaseItem: {
        payload: Prisma.$CaseItemPayload<ExtArgs>
        fields: Prisma.CaseItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          findFirst: {
            args: Prisma.CaseItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          findMany: {
            args: Prisma.CaseItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>[]
          }
          create: {
            args: Prisma.CaseItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          createMany: {
            args: Prisma.CaseItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>[]
          }
          delete: {
            args: Prisma.CaseItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          update: {
            args: Prisma.CaseItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          deleteMany: {
            args: Prisma.CaseItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseItemPayload>
          }
          aggregate: {
            args: Prisma.CaseItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseItem>
          }
          groupBy: {
            args: Prisma.CaseItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseItemCountArgs<ExtArgs>
            result: $Utils.Optional<CaseItemCountAggregateOutputType> | number
          }
        }
      }
      CaseOpening: {
        payload: Prisma.$CaseOpeningPayload<ExtArgs>
        fields: Prisma.CaseOpeningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseOpeningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseOpeningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          findFirst: {
            args: Prisma.CaseOpeningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseOpeningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          findMany: {
            args: Prisma.CaseOpeningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>[]
          }
          create: {
            args: Prisma.CaseOpeningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          createMany: {
            args: Prisma.CaseOpeningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseOpeningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>[]
          }
          delete: {
            args: Prisma.CaseOpeningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          update: {
            args: Prisma.CaseOpeningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          deleteMany: {
            args: Prisma.CaseOpeningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseOpeningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseOpeningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseOpeningPayload>
          }
          aggregate: {
            args: Prisma.CaseOpeningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseOpening>
          }
          groupBy: {
            args: Prisma.CaseOpeningGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseOpeningGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseOpeningCountArgs<ExtArgs>
            result: $Utils.Optional<CaseOpeningCountAggregateOutputType> | number
          }
        }
      }
      CaseWinning: {
        payload: Prisma.$CaseWinningPayload<ExtArgs>
        fields: Prisma.CaseWinningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseWinningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseWinningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          findFirst: {
            args: Prisma.CaseWinningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseWinningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          findMany: {
            args: Prisma.CaseWinningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>[]
          }
          create: {
            args: Prisma.CaseWinningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          createMany: {
            args: Prisma.CaseWinningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseWinningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>[]
          }
          delete: {
            args: Prisma.CaseWinningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          update: {
            args: Prisma.CaseWinningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          deleteMany: {
            args: Prisma.CaseWinningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseWinningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseWinningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseWinningPayload>
          }
          aggregate: {
            args: Prisma.CaseWinningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseWinning>
          }
          groupBy: {
            args: Prisma.CaseWinningGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseWinningGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseWinningCountArgs<ExtArgs>
            result: $Utils.Optional<CaseWinningCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Training: {
        payload: Prisma.$TrainingPayload<ExtArgs>
        fields: Prisma.TrainingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findFirst: {
            args: Prisma.TrainingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findMany: {
            args: Prisma.TrainingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          create: {
            args: Prisma.TrainingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          createMany: {
            args: Prisma.TrainingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          delete: {
            args: Prisma.TrainingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          update: {
            args: Prisma.TrainingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          deleteMany: {
            args: Prisma.TrainingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrainingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          aggregate: {
            args: Prisma.TrainingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTraining>
          }
          groupBy: {
            args: Prisma.TrainingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingCountAggregateOutputType> | number
          }
        }
      }
      Tournament: {
        payload: Prisma.$TournamentPayload<ExtArgs>
        fields: Prisma.TournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findFirst: {
            args: Prisma.TournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findMany: {
            args: Prisma.TournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          create: {
            args: Prisma.TournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          createMany: {
            args: Prisma.TournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          delete: {
            args: Prisma.TournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          update: {
            args: Prisma.TournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          deleteMany: {
            args: Prisma.TournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.TournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
      TournamentMatch: {
        payload: Prisma.$TournamentMatchPayload<ExtArgs>
        fields: Prisma.TournamentMatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentMatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentMatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          findFirst: {
            args: Prisma.TournamentMatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentMatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          findMany: {
            args: Prisma.TournamentMatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>[]
          }
          create: {
            args: Prisma.TournamentMatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          createMany: {
            args: Prisma.TournamentMatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentMatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>[]
          }
          delete: {
            args: Prisma.TournamentMatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          update: {
            args: Prisma.TournamentMatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          deleteMany: {
            args: Prisma.TournamentMatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentMatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentMatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          aggregate: {
            args: Prisma.TournamentMatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentMatch>
          }
          groupBy: {
            args: Prisma.TournamentMatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentMatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentMatchCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentMatchCountAggregateOutputType> | number
          }
        }
      }
      Invite: {
        payload: Prisma.$InvitePayload<ExtArgs>
        fields: Prisma.InviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InviteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InviteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findFirst: {
            args: Prisma.InviteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InviteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findMany: {
            args: Prisma.InviteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>[]
          }
          create: {
            args: Prisma.InviteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          createMany: {
            args: Prisma.InviteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InviteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>[]
          }
          delete: {
            args: Prisma.InviteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          update: {
            args: Prisma.InviteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          deleteMany: {
            args: Prisma.InviteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InviteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InviteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          aggregate: {
            args: Prisma.InviteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvite>
          }
          groupBy: {
            args: Prisma.InviteGroupByArgs<ExtArgs>
            result: $Utils.Optional<InviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.InviteCountArgs<ExtArgs>
            result: $Utils.Optional<InviteCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      UserState: {
        payload: Prisma.$UserStatePayload<ExtArgs>
        fields: Prisma.UserStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          findFirst: {
            args: Prisma.UserStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          findMany: {
            args: Prisma.UserStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>[]
          }
          create: {
            args: Prisma.UserStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          createMany: {
            args: Prisma.UserStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>[]
          }
          delete: {
            args: Prisma.UserStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          update: {
            args: Prisma.UserStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          deleteMany: {
            args: Prisma.UserStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatePayload>
          }
          aggregate: {
            args: Prisma.UserStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserState>
          }
          groupBy: {
            args: Prisma.UserStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStateCountArgs<ExtArgs>
            result: $Utils.Optional<UserStateCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      GameRequest: {
        payload: Prisma.$GameRequestPayload<ExtArgs>
        fields: Prisma.GameRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          findFirst: {
            args: Prisma.GameRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          findMany: {
            args: Prisma.GameRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>[]
          }
          create: {
            args: Prisma.GameRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          createMany: {
            args: Prisma.GameRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>[]
          }
          delete: {
            args: Prisma.GameRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          update: {
            args: Prisma.GameRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          deleteMany: {
            args: Prisma.GameRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameRequestPayload>
          }
          aggregate: {
            args: Prisma.GameRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameRequest>
          }
          groupBy: {
            args: Prisma.GameRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameRequestCountArgs<ExtArgs>
            result: $Utils.Optional<GameRequestCountAggregateOutputType> | number
          }
        }
      }
      RequestResponse: {
        payload: Prisma.$RequestResponsePayload<ExtArgs>
        fields: Prisma.RequestResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          findFirst: {
            args: Prisma.RequestResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          findMany: {
            args: Prisma.RequestResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>[]
          }
          create: {
            args: Prisma.RequestResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          createMany: {
            args: Prisma.RequestResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>[]
          }
          delete: {
            args: Prisma.RequestResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          update: {
            args: Prisma.RequestResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          deleteMany: {
            args: Prisma.RequestResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestResponsePayload>
          }
          aggregate: {
            args: Prisma.RequestResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestResponse>
          }
          groupBy: {
            args: Prisma.RequestResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestResponseCountArgs<ExtArgs>
            result: $Utils.Optional<RequestResponseCountAggregateOutputType> | number
          }
        }
      }
      TrainingSession: {
        payload: Prisma.$TrainingSessionPayload<ExtArgs>
        fields: Prisma.TrainingSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          findFirst: {
            args: Prisma.TrainingSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          findMany: {
            args: Prisma.TrainingSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>[]
          }
          create: {
            args: Prisma.TrainingSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          createMany: {
            args: Prisma.TrainingSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>[]
          }
          delete: {
            args: Prisma.TrainingSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          update: {
            args: Prisma.TrainingSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          deleteMany: {
            args: Prisma.TrainingSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrainingSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingSessionPayload>
          }
          aggregate: {
            args: Prisma.TrainingSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrainingSession>
          }
          groupBy: {
            args: Prisma.TrainingSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingSessionCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingSessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    cities: number
    users: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | CountryCountOutputTypeCountCitiesArgs
    users?: boolean | CountryCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountCitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CityCountOutputType
   */

  export type CityCountOutputType = {
    users: number
    userSettings: number
  }

  export type CityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CityCountOutputTypeCountUsersArgs
    userSettings?: boolean | CityCountOutputTypeCountUserSettingsArgs
  }

  // Custom InputTypes
  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountUserSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
  }


  /**
   * Count Type SportCountOutputType
   */

  export type SportCountOutputType = {
    users: number
    userSettings: number
  }

  export type SportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SportCountOutputTypeCountUsersArgs
    userSettings?: boolean | SportCountOutputTypeCountUserSettingsArgs
  }

  // Custom InputTypes
  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SportCountOutputType
     */
    select?: SportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * SportCountOutputType without action
   */
  export type SportCountOutputTypeCountUserSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdMatches: number
    player1Matches: number
    player2Matches: number
    wonMatches: number
    tournamentMatchesA: number
    tournamentMatchesB: number
    tournamentMatchesWon: number
    createdTrainings: number
    createdTrainingSessions: number
    createdTournaments: number
    sentInvites: number
    receivedInvites: number
    tournaments: number
    createdRequests: number
    requestParticipations: number
    requestResponses: number
    trainingSessionParticipations: number
    caseOpenings: number
    caseWinnings: number
    ballTransactions: number
    stories: number
    referrals: number
    referrerActivities: number
    invitedActivities: number
    notifications: number
    achievements: number
    ratingHistory: number
    opponentHistory: number
    sentMessages: number
    receivedMessages: number
    givenFeedbacks: number
    receivedFeedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdMatches?: boolean | UserCountOutputTypeCountCreatedMatchesArgs
    player1Matches?: boolean | UserCountOutputTypeCountPlayer1MatchesArgs
    player2Matches?: boolean | UserCountOutputTypeCountPlayer2MatchesArgs
    wonMatches?: boolean | UserCountOutputTypeCountWonMatchesArgs
    tournamentMatchesA?: boolean | UserCountOutputTypeCountTournamentMatchesAArgs
    tournamentMatchesB?: boolean | UserCountOutputTypeCountTournamentMatchesBArgs
    tournamentMatchesWon?: boolean | UserCountOutputTypeCountTournamentMatchesWonArgs
    createdTrainings?: boolean | UserCountOutputTypeCountCreatedTrainingsArgs
    createdTrainingSessions?: boolean | UserCountOutputTypeCountCreatedTrainingSessionsArgs
    createdTournaments?: boolean | UserCountOutputTypeCountCreatedTournamentsArgs
    sentInvites?: boolean | UserCountOutputTypeCountSentInvitesArgs
    receivedInvites?: boolean | UserCountOutputTypeCountReceivedInvitesArgs
    tournaments?: boolean | UserCountOutputTypeCountTournamentsArgs
    createdRequests?: boolean | UserCountOutputTypeCountCreatedRequestsArgs
    requestParticipations?: boolean | UserCountOutputTypeCountRequestParticipationsArgs
    requestResponses?: boolean | UserCountOutputTypeCountRequestResponsesArgs
    trainingSessionParticipations?: boolean | UserCountOutputTypeCountTrainingSessionParticipationsArgs
    caseOpenings?: boolean | UserCountOutputTypeCountCaseOpeningsArgs
    caseWinnings?: boolean | UserCountOutputTypeCountCaseWinningsArgs
    ballTransactions?: boolean | UserCountOutputTypeCountBallTransactionsArgs
    stories?: boolean | UserCountOutputTypeCountStoriesArgs
    referrals?: boolean | UserCountOutputTypeCountReferralsArgs
    referrerActivities?: boolean | UserCountOutputTypeCountReferrerActivitiesArgs
    invitedActivities?: boolean | UserCountOutputTypeCountInvitedActivitiesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    achievements?: boolean | UserCountOutputTypeCountAchievementsArgs
    ratingHistory?: boolean | UserCountOutputTypeCountRatingHistoryArgs
    opponentHistory?: boolean | UserCountOutputTypeCountOpponentHistoryArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    givenFeedbacks?: boolean | UserCountOutputTypeCountGivenFeedbacksArgs
    receivedFeedbacks?: boolean | UserCountOutputTypeCountReceivedFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlayer1MatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlayer2MatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWonMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchesAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchesBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchesWonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTrainingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestResponseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrainingSessionParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCaseOpeningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseOpeningWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCaseWinningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWinningWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBallTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BallTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferrerActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitedActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOpponentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DirectMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DirectMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGivenFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchFeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchFeedbackWhereInput
  }


  /**
   * Count Type RatingSeasonCountOutputType
   */

  export type RatingSeasonCountOutputType = {
    history: number
  }

  export type RatingSeasonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | RatingSeasonCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * RatingSeasonCountOutputType without action
   */
  export type RatingSeasonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeasonCountOutputType
     */
    select?: RatingSeasonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RatingSeasonCountOutputType without action
   */
  export type RatingSeasonCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingHistoryWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    items: number
    openings: number
    winnings: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | CaseCountOutputTypeCountItemsArgs
    openings?: boolean | CaseCountOutputTypeCountOpeningsArgs
    winnings?: boolean | CaseCountOutputTypeCountWinningsArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseItemWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountOpeningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseOpeningWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountWinningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWinningWhereInput
  }


  /**
   * Count Type CaseItemCountOutputType
   */

  export type CaseItemCountOutputType = {
    winnings: number
  }

  export type CaseItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    winnings?: boolean | CaseItemCountOutputTypeCountWinningsArgs
  }

  // Custom InputTypes
  /**
   * CaseItemCountOutputType without action
   */
  export type CaseItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItemCountOutputType
     */
    select?: CaseItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseItemCountOutputType without action
   */
  export type CaseItemCountOutputTypeCountWinningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWinningWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    invites: number
    feedbacks: number
    ratingHistory: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invites?: boolean | MatchCountOutputTypeCountInvitesArgs
    feedbacks?: boolean | MatchCountOutputTypeCountFeedbacksArgs
    ratingHistory?: boolean | MatchCountOutputTypeCountRatingHistoryArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchFeedbackWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountRatingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingHistoryWhereInput
  }


  /**
   * Count Type TrainingCountOutputType
   */

  export type TrainingCountOutputType = {
    invites: number
  }

  export type TrainingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invites?: boolean | TrainingCountOutputTypeCountInvitesArgs
  }

  // Custom InputTypes
  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCountOutputType
     */
    select?: TrainingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    players: number
    matches: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | TournamentCountOutputTypeCountPlayersArgs
    matches?: boolean | TournamentCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }


  /**
   * Count Type GameRequestCountOutputType
   */

  export type GameRequestCountOutputType = {
    participants: number
    responses: number
  }

  export type GameRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | GameRequestCountOutputTypeCountParticipantsArgs
    responses?: boolean | GameRequestCountOutputTypeCountResponsesArgs
  }

  // Custom InputTypes
  /**
   * GameRequestCountOutputType without action
   */
  export type GameRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequestCountOutputType
     */
    select?: GameRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameRequestCountOutputType without action
   */
  export type GameRequestCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * GameRequestCountOutputType without action
   */
  export type GameRequestCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestResponseWhereInput
  }


  /**
   * Count Type TrainingSessionCountOutputType
   */

  export type TrainingSessionCountOutputType = {
    participants: number
  }

  export type TrainingSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | TrainingSessionCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * TrainingSessionCountOutputType without action
   */
  export type TrainingSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSessionCountOutputType
     */
    select?: TrainingSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrainingSessionCountOutputType without action
   */
  export type TrainingSessionCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model MatchFeedback
   */

  export type AggregateMatchFeedback = {
    _count: MatchFeedbackCountAggregateOutputType | null
    _avg: MatchFeedbackAvgAggregateOutputType | null
    _sum: MatchFeedbackSumAggregateOutputType | null
    _min: MatchFeedbackMinAggregateOutputType | null
    _max: MatchFeedbackMaxAggregateOutputType | null
  }

  export type MatchFeedbackAvgAggregateOutputType = {
    id: number | null
    matchId: number | null
    reviewerId: number | null
    revieweeId: number | null
    rating: number | null
  }

  export type MatchFeedbackSumAggregateOutputType = {
    id: number | null
    matchId: number | null
    reviewerId: number | null
    revieweeId: number | null
    rating: number | null
  }

  export type MatchFeedbackMinAggregateOutputType = {
    id: number | null
    matchId: number | null
    reviewerId: number | null
    revieweeId: number | null
    rating: number | null
    comment: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchFeedbackMaxAggregateOutputType = {
    id: number | null
    matchId: number | null
    reviewerId: number | null
    revieweeId: number | null
    rating: number | null
    comment: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchFeedbackCountAggregateOutputType = {
    id: number
    matchId: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchFeedbackAvgAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    revieweeId?: true
    rating?: true
  }

  export type MatchFeedbackSumAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    revieweeId?: true
    rating?: true
  }

  export type MatchFeedbackMinAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    revieweeId?: true
    rating?: true
    comment?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchFeedbackMaxAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    revieweeId?: true
    rating?: true
    comment?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchFeedbackCountAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    revieweeId?: true
    rating?: true
    comment?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchFeedback to aggregate.
     */
    where?: MatchFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchFeedbacks to fetch.
     */
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchFeedbacks
    **/
    _count?: true | MatchFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchFeedbackMaxAggregateInputType
  }

  export type GetMatchFeedbackAggregateType<T extends MatchFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchFeedback[P]>
      : GetScalarType<T[P], AggregateMatchFeedback[P]>
  }




  export type MatchFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchFeedbackWhereInput
    orderBy?: MatchFeedbackOrderByWithAggregationInput | MatchFeedbackOrderByWithAggregationInput[]
    by: MatchFeedbackScalarFieldEnum[] | MatchFeedbackScalarFieldEnum
    having?: MatchFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchFeedbackCountAggregateInputType | true
    _avg?: MatchFeedbackAvgAggregateInputType
    _sum?: MatchFeedbackSumAggregateInputType
    _min?: MatchFeedbackMinAggregateInputType
    _max?: MatchFeedbackMaxAggregateInputType
  }

  export type MatchFeedbackGroupByOutputType = {
    id: number
    matchId: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: MatchFeedbackCountAggregateOutputType | null
    _avg: MatchFeedbackAvgAggregateOutputType | null
    _sum: MatchFeedbackSumAggregateOutputType | null
    _min: MatchFeedbackMinAggregateOutputType | null
    _max: MatchFeedbackMaxAggregateOutputType | null
  }

  type GetMatchFeedbackGroupByPayload<T extends MatchFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], MatchFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type MatchFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    revieweeId?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewee?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchFeedback"]>

  export type MatchFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    revieweeId?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewee?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchFeedback"]>

  export type MatchFeedbackSelectScalar = {
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    revieweeId?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewee?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewee?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchFeedback"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
      reviewee: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      matchId: number
      reviewerId: number
      revieweeId: number
      rating: number
      comment: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["matchFeedback"]>
    composites: {}
  }

  type MatchFeedbackGetPayload<S extends boolean | null | undefined | MatchFeedbackDefaultArgs> = $Result.GetResult<Prisma.$MatchFeedbackPayload, S>

  type MatchFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchFeedbackCountAggregateInputType | true
    }

  export interface MatchFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchFeedback'], meta: { name: 'MatchFeedback' } }
    /**
     * Find zero or one MatchFeedback that matches the filter.
     * @param {MatchFeedbackFindUniqueArgs} args - Arguments to find a MatchFeedback
     * @example
     * // Get one MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFeedbackFindUniqueArgs>(args: SelectSubset<T, MatchFeedbackFindUniqueArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchFeedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFeedbackFindUniqueOrThrowArgs} args - Arguments to find a MatchFeedback
     * @example
     * // Get one MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackFindFirstArgs} args - Arguments to find a MatchFeedback
     * @example
     * // Get one MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFeedbackFindFirstArgs>(args?: SelectSubset<T, MatchFeedbackFindFirstArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackFindFirstOrThrowArgs} args - Arguments to find a MatchFeedback
     * @example
     * // Get one MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchFeedbacks
     * const matchFeedbacks = await prisma.matchFeedback.findMany()
     * 
     * // Get first 10 MatchFeedbacks
     * const matchFeedbacks = await prisma.matchFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchFeedbackWithIdOnly = await prisma.matchFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFeedbackFindManyArgs>(args?: SelectSubset<T, MatchFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchFeedback.
     * @param {MatchFeedbackCreateArgs} args - Arguments to create a MatchFeedback.
     * @example
     * // Create one MatchFeedback
     * const MatchFeedback = await prisma.matchFeedback.create({
     *   data: {
     *     // ... data to create a MatchFeedback
     *   }
     * })
     * 
     */
    create<T extends MatchFeedbackCreateArgs>(args: SelectSubset<T, MatchFeedbackCreateArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchFeedbacks.
     * @param {MatchFeedbackCreateManyArgs} args - Arguments to create many MatchFeedbacks.
     * @example
     * // Create many MatchFeedbacks
     * const matchFeedback = await prisma.matchFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchFeedbackCreateManyArgs>(args?: SelectSubset<T, MatchFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchFeedbacks and returns the data saved in the database.
     * @param {MatchFeedbackCreateManyAndReturnArgs} args - Arguments to create many MatchFeedbacks.
     * @example
     * // Create many MatchFeedbacks
     * const matchFeedback = await prisma.matchFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchFeedbacks and only return the `id`
     * const matchFeedbackWithIdOnly = await prisma.matchFeedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MatchFeedback.
     * @param {MatchFeedbackDeleteArgs} args - Arguments to delete one MatchFeedback.
     * @example
     * // Delete one MatchFeedback
     * const MatchFeedback = await prisma.matchFeedback.delete({
     *   where: {
     *     // ... filter to delete one MatchFeedback
     *   }
     * })
     * 
     */
    delete<T extends MatchFeedbackDeleteArgs>(args: SelectSubset<T, MatchFeedbackDeleteArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchFeedback.
     * @param {MatchFeedbackUpdateArgs} args - Arguments to update one MatchFeedback.
     * @example
     * // Update one MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchFeedbackUpdateArgs>(args: SelectSubset<T, MatchFeedbackUpdateArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchFeedbacks.
     * @param {MatchFeedbackDeleteManyArgs} args - Arguments to filter MatchFeedbacks to delete.
     * @example
     * // Delete a few MatchFeedbacks
     * const { count } = await prisma.matchFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchFeedbackDeleteManyArgs>(args?: SelectSubset<T, MatchFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchFeedbacks
     * const matchFeedback = await prisma.matchFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchFeedbackUpdateManyArgs>(args: SelectSubset<T, MatchFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchFeedback.
     * @param {MatchFeedbackUpsertArgs} args - Arguments to update or create a MatchFeedback.
     * @example
     * // Update or create a MatchFeedback
     * const matchFeedback = await prisma.matchFeedback.upsert({
     *   create: {
     *     // ... data to create a MatchFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchFeedback we want to update
     *   }
     * })
     */
    upsert<T extends MatchFeedbackUpsertArgs>(args: SelectSubset<T, MatchFeedbackUpsertArgs<ExtArgs>>): Prisma__MatchFeedbackClient<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackCountArgs} args - Arguments to filter MatchFeedbacks to count.
     * @example
     * // Count the number of MatchFeedbacks
     * const count = await prisma.matchFeedback.count({
     *   where: {
     *     // ... the filter for the MatchFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends MatchFeedbackCountArgs>(
      args?: Subset<T, MatchFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchFeedbackAggregateArgs>(args: Subset<T, MatchFeedbackAggregateArgs>): Prisma.PrismaPromise<GetMatchFeedbackAggregateType<T>>

    /**
     * Group by MatchFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: MatchFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchFeedback model
   */
  readonly fields: MatchFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewee<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchFeedback model
   */ 
  interface MatchFeedbackFieldRefs {
    readonly id: FieldRef<"MatchFeedback", 'Int'>
    readonly matchId: FieldRef<"MatchFeedback", 'Int'>
    readonly reviewerId: FieldRef<"MatchFeedback", 'Int'>
    readonly revieweeId: FieldRef<"MatchFeedback", 'Int'>
    readonly rating: FieldRef<"MatchFeedback", 'Int'>
    readonly comment: FieldRef<"MatchFeedback", 'String'>
    readonly isPublic: FieldRef<"MatchFeedback", 'Boolean'>
    readonly createdAt: FieldRef<"MatchFeedback", 'DateTime'>
    readonly updatedAt: FieldRef<"MatchFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchFeedback findUnique
   */
  export type MatchFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which MatchFeedback to fetch.
     */
    where: MatchFeedbackWhereUniqueInput
  }

  /**
   * MatchFeedback findUniqueOrThrow
   */
  export type MatchFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which MatchFeedback to fetch.
     */
    where: MatchFeedbackWhereUniqueInput
  }

  /**
   * MatchFeedback findFirst
   */
  export type MatchFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which MatchFeedback to fetch.
     */
    where?: MatchFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchFeedbacks to fetch.
     */
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchFeedbacks.
     */
    cursor?: MatchFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchFeedbacks.
     */
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * MatchFeedback findFirstOrThrow
   */
  export type MatchFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which MatchFeedback to fetch.
     */
    where?: MatchFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchFeedbacks to fetch.
     */
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchFeedbacks.
     */
    cursor?: MatchFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchFeedbacks.
     */
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * MatchFeedback findMany
   */
  export type MatchFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which MatchFeedbacks to fetch.
     */
    where?: MatchFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchFeedbacks to fetch.
     */
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchFeedbacks.
     */
    cursor?: MatchFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchFeedbacks.
     */
    skip?: number
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * MatchFeedback create
   */
  export type MatchFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchFeedback.
     */
    data: XOR<MatchFeedbackCreateInput, MatchFeedbackUncheckedCreateInput>
  }

  /**
   * MatchFeedback createMany
   */
  export type MatchFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchFeedbacks.
     */
    data: MatchFeedbackCreateManyInput | MatchFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchFeedback createManyAndReturn
   */
  export type MatchFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MatchFeedbacks.
     */
    data: MatchFeedbackCreateManyInput | MatchFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchFeedback update
   */
  export type MatchFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchFeedback.
     */
    data: XOR<MatchFeedbackUpdateInput, MatchFeedbackUncheckedUpdateInput>
    /**
     * Choose, which MatchFeedback to update.
     */
    where: MatchFeedbackWhereUniqueInput
  }

  /**
   * MatchFeedback updateMany
   */
  export type MatchFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchFeedbacks.
     */
    data: XOR<MatchFeedbackUpdateManyMutationInput, MatchFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which MatchFeedbacks to update
     */
    where?: MatchFeedbackWhereInput
  }

  /**
   * MatchFeedback upsert
   */
  export type MatchFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchFeedback to update in case it exists.
     */
    where: MatchFeedbackWhereUniqueInput
    /**
     * In case the MatchFeedback found by the `where` argument doesn't exist, create a new MatchFeedback with this data.
     */
    create: XOR<MatchFeedbackCreateInput, MatchFeedbackUncheckedCreateInput>
    /**
     * In case the MatchFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchFeedbackUpdateInput, MatchFeedbackUncheckedUpdateInput>
  }

  /**
   * MatchFeedback delete
   */
  export type MatchFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    /**
     * Filter which MatchFeedback to delete.
     */
    where: MatchFeedbackWhereUniqueInput
  }

  /**
   * MatchFeedback deleteMany
   */
  export type MatchFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchFeedbacks to delete
     */
    where?: MatchFeedbackWhereInput
  }

  /**
   * MatchFeedback without action
   */
  export type MatchFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
  }


  /**
   * Model DirectMessage
   */

  export type AggregateDirectMessage = {
    _count: DirectMessageCountAggregateOutputType | null
    _avg: DirectMessageAvgAggregateOutputType | null
    _sum: DirectMessageSumAggregateOutputType | null
    _min: DirectMessageMinAggregateOutputType | null
    _max: DirectMessageMaxAggregateOutputType | null
  }

  export type DirectMessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    recipientId: number | null
  }

  export type DirectMessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    recipientId: number | null
  }

  export type DirectMessageMinAggregateOutputType = {
    id: number | null
    senderId: number | null
    recipientId: number | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type DirectMessageMaxAggregateOutputType = {
    id: number | null
    senderId: number | null
    recipientId: number | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type DirectMessageCountAggregateOutputType = {
    id: number
    senderId: number
    recipientId: number
    message: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type DirectMessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    recipientId?: true
  }

  export type DirectMessageSumAggregateInputType = {
    id?: true
    senderId?: true
    recipientId?: true
  }

  export type DirectMessageMinAggregateInputType = {
    id?: true
    senderId?: true
    recipientId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type DirectMessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    recipientId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type DirectMessageCountAggregateInputType = {
    id?: true
    senderId?: true
    recipientId?: true
    message?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type DirectMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DirectMessage to aggregate.
     */
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     */
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DirectMessages
    **/
    _count?: true | DirectMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DirectMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DirectMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectMessageMaxAggregateInputType
  }

  export type GetDirectMessageAggregateType<T extends DirectMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateDirectMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirectMessage[P]>
      : GetScalarType<T[P], AggregateDirectMessage[P]>
  }




  export type DirectMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DirectMessageWhereInput
    orderBy?: DirectMessageOrderByWithAggregationInput | DirectMessageOrderByWithAggregationInput[]
    by: DirectMessageScalarFieldEnum[] | DirectMessageScalarFieldEnum
    having?: DirectMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectMessageCountAggregateInputType | true
    _avg?: DirectMessageAvgAggregateInputType
    _sum?: DirectMessageSumAggregateInputType
    _min?: DirectMessageMinAggregateInputType
    _max?: DirectMessageMaxAggregateInputType
  }

  export type DirectMessageGroupByOutputType = {
    id: number
    senderId: number
    recipientId: number
    message: string
    isRead: boolean
    createdAt: Date
    _count: DirectMessageCountAggregateOutputType | null
    _avg: DirectMessageAvgAggregateOutputType | null
    _sum: DirectMessageSumAggregateOutputType | null
    _min: DirectMessageMinAggregateOutputType | null
    _max: DirectMessageMaxAggregateOutputType | null
  }

  type GetDirectMessageGroupByPayload<T extends DirectMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DirectMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectMessageGroupByOutputType[P]>
            : GetScalarType<T[P], DirectMessageGroupByOutputType[P]>
        }
      >
    >


  export type DirectMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    recipientId?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["directMessage"]>

  export type DirectMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    recipientId?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["directMessage"]>

  export type DirectMessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    recipientId?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type DirectMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DirectMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DirectMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DirectMessage"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      recipient: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      senderId: number
      recipientId: number
      message: string
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["directMessage"]>
    composites: {}
  }

  type DirectMessageGetPayload<S extends boolean | null | undefined | DirectMessageDefaultArgs> = $Result.GetResult<Prisma.$DirectMessagePayload, S>

  type DirectMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DirectMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DirectMessageCountAggregateInputType | true
    }

  export interface DirectMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DirectMessage'], meta: { name: 'DirectMessage' } }
    /**
     * Find zero or one DirectMessage that matches the filter.
     * @param {DirectMessageFindUniqueArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DirectMessageFindUniqueArgs>(args: SelectSubset<T, DirectMessageFindUniqueArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DirectMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DirectMessageFindUniqueOrThrowArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DirectMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, DirectMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DirectMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindFirstArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DirectMessageFindFirstArgs>(args?: SelectSubset<T, DirectMessageFindFirstArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DirectMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindFirstOrThrowArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DirectMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, DirectMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DirectMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DirectMessages
     * const directMessages = await prisma.directMessage.findMany()
     * 
     * // Get first 10 DirectMessages
     * const directMessages = await prisma.directMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directMessageWithIdOnly = await prisma.directMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DirectMessageFindManyArgs>(args?: SelectSubset<T, DirectMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DirectMessage.
     * @param {DirectMessageCreateArgs} args - Arguments to create a DirectMessage.
     * @example
     * // Create one DirectMessage
     * const DirectMessage = await prisma.directMessage.create({
     *   data: {
     *     // ... data to create a DirectMessage
     *   }
     * })
     * 
     */
    create<T extends DirectMessageCreateArgs>(args: SelectSubset<T, DirectMessageCreateArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DirectMessages.
     * @param {DirectMessageCreateManyArgs} args - Arguments to create many DirectMessages.
     * @example
     * // Create many DirectMessages
     * const directMessage = await prisma.directMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DirectMessageCreateManyArgs>(args?: SelectSubset<T, DirectMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DirectMessages and returns the data saved in the database.
     * @param {DirectMessageCreateManyAndReturnArgs} args - Arguments to create many DirectMessages.
     * @example
     * // Create many DirectMessages
     * const directMessage = await prisma.directMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DirectMessages and only return the `id`
     * const directMessageWithIdOnly = await prisma.directMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DirectMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, DirectMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DirectMessage.
     * @param {DirectMessageDeleteArgs} args - Arguments to delete one DirectMessage.
     * @example
     * // Delete one DirectMessage
     * const DirectMessage = await prisma.directMessage.delete({
     *   where: {
     *     // ... filter to delete one DirectMessage
     *   }
     * })
     * 
     */
    delete<T extends DirectMessageDeleteArgs>(args: SelectSubset<T, DirectMessageDeleteArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DirectMessage.
     * @param {DirectMessageUpdateArgs} args - Arguments to update one DirectMessage.
     * @example
     * // Update one DirectMessage
     * const directMessage = await prisma.directMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DirectMessageUpdateArgs>(args: SelectSubset<T, DirectMessageUpdateArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DirectMessages.
     * @param {DirectMessageDeleteManyArgs} args - Arguments to filter DirectMessages to delete.
     * @example
     * // Delete a few DirectMessages
     * const { count } = await prisma.directMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DirectMessageDeleteManyArgs>(args?: SelectSubset<T, DirectMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DirectMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DirectMessages
     * const directMessage = await prisma.directMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DirectMessageUpdateManyArgs>(args: SelectSubset<T, DirectMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DirectMessage.
     * @param {DirectMessageUpsertArgs} args - Arguments to update or create a DirectMessage.
     * @example
     * // Update or create a DirectMessage
     * const directMessage = await prisma.directMessage.upsert({
     *   create: {
     *     // ... data to create a DirectMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DirectMessage we want to update
     *   }
     * })
     */
    upsert<T extends DirectMessageUpsertArgs>(args: SelectSubset<T, DirectMessageUpsertArgs<ExtArgs>>): Prisma__DirectMessageClient<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DirectMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageCountArgs} args - Arguments to filter DirectMessages to count.
     * @example
     * // Count the number of DirectMessages
     * const count = await prisma.directMessage.count({
     *   where: {
     *     // ... the filter for the DirectMessages we want to count
     *   }
     * })
    **/
    count<T extends DirectMessageCountArgs>(
      args?: Subset<T, DirectMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DirectMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectMessageAggregateArgs>(args: Subset<T, DirectMessageAggregateArgs>): Prisma.PrismaPromise<GetDirectMessageAggregateType<T>>

    /**
     * Group by DirectMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectMessageGroupByArgs['orderBy'] }
        : { orderBy?: DirectMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DirectMessage model
   */
  readonly fields: DirectMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DirectMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DirectMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    recipient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DirectMessage model
   */ 
  interface DirectMessageFieldRefs {
    readonly id: FieldRef<"DirectMessage", 'Int'>
    readonly senderId: FieldRef<"DirectMessage", 'Int'>
    readonly recipientId: FieldRef<"DirectMessage", 'Int'>
    readonly message: FieldRef<"DirectMessage", 'String'>
    readonly isRead: FieldRef<"DirectMessage", 'Boolean'>
    readonly createdAt: FieldRef<"DirectMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DirectMessage findUnique
   */
  export type DirectMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessage to fetch.
     */
    where: DirectMessageWhereUniqueInput
  }

  /**
   * DirectMessage findUniqueOrThrow
   */
  export type DirectMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessage to fetch.
     */
    where: DirectMessageWhereUniqueInput
  }

  /**
   * DirectMessage findFirst
   */
  export type DirectMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessage to fetch.
     */
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     */
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMessages.
     */
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMessages.
     */
    distinct?: DirectMessageScalarFieldEnum | DirectMessageScalarFieldEnum[]
  }

  /**
   * DirectMessage findFirstOrThrow
   */
  export type DirectMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessage to fetch.
     */
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     */
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMessages.
     */
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMessages.
     */
    distinct?: DirectMessageScalarFieldEnum | DirectMessageScalarFieldEnum[]
  }

  /**
   * DirectMessage findMany
   */
  export type DirectMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessages to fetch.
     */
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     */
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DirectMessages.
     */
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     */
    skip?: number
    distinct?: DirectMessageScalarFieldEnum | DirectMessageScalarFieldEnum[]
  }

  /**
   * DirectMessage create
   */
  export type DirectMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a DirectMessage.
     */
    data: XOR<DirectMessageCreateInput, DirectMessageUncheckedCreateInput>
  }

  /**
   * DirectMessage createMany
   */
  export type DirectMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DirectMessages.
     */
    data: DirectMessageCreateManyInput | DirectMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DirectMessage createManyAndReturn
   */
  export type DirectMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DirectMessages.
     */
    data: DirectMessageCreateManyInput | DirectMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DirectMessage update
   */
  export type DirectMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a DirectMessage.
     */
    data: XOR<DirectMessageUpdateInput, DirectMessageUncheckedUpdateInput>
    /**
     * Choose, which DirectMessage to update.
     */
    where: DirectMessageWhereUniqueInput
  }

  /**
   * DirectMessage updateMany
   */
  export type DirectMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DirectMessages.
     */
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyInput>
    /**
     * Filter which DirectMessages to update
     */
    where?: DirectMessageWhereInput
  }

  /**
   * DirectMessage upsert
   */
  export type DirectMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the DirectMessage to update in case it exists.
     */
    where: DirectMessageWhereUniqueInput
    /**
     * In case the DirectMessage found by the `where` argument doesn't exist, create a new DirectMessage with this data.
     */
    create: XOR<DirectMessageCreateInput, DirectMessageUncheckedCreateInput>
    /**
     * In case the DirectMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DirectMessageUpdateInput, DirectMessageUncheckedUpdateInput>
  }

  /**
   * DirectMessage delete
   */
  export type DirectMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    /**
     * Filter which DirectMessage to delete.
     */
    where: DirectMessageWhereUniqueInput
  }

  /**
   * DirectMessage deleteMany
   */
  export type DirectMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DirectMessages to delete
     */
    where?: DirectMessageWhereInput
  }

  /**
   * DirectMessage without action
   */
  export type DirectMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
  }


  /**
   * Model Story
   */

  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    viewsCount: number | null
    likesCount: number | null
  }

  export type StorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    viewsCount: number | null
    likesCount: number | null
  }

  export type StoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    telegramFileId: string | null
    telegramFilePath: string | null
    type: $Enums.MediaType | null
    caption: string | null
    status: $Enums.StoryStatus | null
    viewsCount: number | null
    likesCount: number | null
    expiresAt: Date | null
    createdAt: Date | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type StoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    telegramFileId: string | null
    telegramFilePath: string | null
    type: $Enums.MediaType | null
    caption: string | null
    status: $Enums.StoryStatus | null
    viewsCount: number | null
    likesCount: number | null
    expiresAt: Date | null
    createdAt: Date | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type StoryCountAggregateOutputType = {
    id: number
    userId: number
    telegramFileId: number
    telegramFilePath: number
    type: number
    caption: number
    status: number
    viewsCount: number
    likesCount: number
    expiresAt: number
    createdAt: number
    publishedAt: number
    updatedAt: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    id?: true
    userId?: true
    viewsCount?: true
    likesCount?: true
  }

  export type StorySumAggregateInputType = {
    id?: true
    userId?: true
    viewsCount?: true
    likesCount?: true
  }

  export type StoryMinAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    caption?: true
    status?: true
    viewsCount?: true
    likesCount?: true
    expiresAt?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type StoryMaxAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    caption?: true
    status?: true
    viewsCount?: true
    likesCount?: true
    expiresAt?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type StoryCountAggregateInputType = {
    id?: true
    userId?: true
    telegramFileId?: true
    telegramFilePath?: true
    type?: true
    caption?: true
    status?: true
    viewsCount?: true
    likesCount?: true
    expiresAt?: true
    createdAt?: true
    publishedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Story to aggregate.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithAggregationInput | StoryOrderByWithAggregationInput[]
    by: StoryScalarFieldEnum[] | StoryScalarFieldEnum
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }

  export type StoryGroupByOutputType = {
    id: number
    userId: number
    telegramFileId: string
    telegramFilePath: string | null
    type: $Enums.MediaType
    caption: string | null
    status: $Enums.StoryStatus
    viewsCount: number
    likesCount: number
    expiresAt: Date | null
    createdAt: Date
    publishedAt: Date | null
    updatedAt: Date
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    telegramFileId?: boolean
    telegramFilePath?: boolean
    type?: boolean
    caption?: boolean
    status?: boolean
    viewsCount?: boolean
    likesCount?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["story"]>

  export type StorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    telegramFileId?: boolean
    telegramFilePath?: boolean
    type?: boolean
    caption?: boolean
    status?: boolean
    viewsCount?: boolean
    likesCount?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["story"]>

  export type StorySelectScalar = {
    id?: boolean
    userId?: boolean
    telegramFileId?: boolean
    telegramFilePath?: boolean
    type?: boolean
    caption?: boolean
    status?: boolean
    viewsCount?: boolean
    likesCount?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }

  export type StoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Story"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      telegramFileId: string
      telegramFilePath: string | null
      type: $Enums.MediaType
      caption: string | null
      status: $Enums.StoryStatus
      viewsCount: number
      likesCount: number
      expiresAt: Date | null
      createdAt: Date
      publishedAt: Date | null
      updatedAt: Date
    }, ExtArgs["result"]["story"]>
    composites: {}
  }

  type StoryGetPayload<S extends boolean | null | undefined | StoryDefaultArgs> = $Result.GetResult<Prisma.$StoryPayload, S>

  type StoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StoryCountAggregateInputType | true
    }

  export interface StoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Story'], meta: { name: 'Story' } }
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryFindUniqueArgs>(args: SelectSubset<T, StoryFindUniqueArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Story that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StoryFindUniqueOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryFindFirstArgs>(args?: SelectSubset<T, StoryFindFirstArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyWithIdOnly = await prisma.story.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryFindManyArgs>(args?: SelectSubset<T, StoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
     */
    create<T extends StoryCreateArgs>(args: SelectSubset<T, StoryCreateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stories.
     * @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     * @example
     * // Create many Stories
     * const story = await prisma.story.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryCreateManyArgs>(args?: SelectSubset<T, StoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stories and returns the data saved in the database.
     * @param {StoryCreateManyAndReturnArgs} args - Arguments to create many Stories.
     * @example
     * // Create many Stories
     * const story = await prisma.story.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stories and only return the `id`
     * const storyWithIdOnly = await prisma.story.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoryCreateManyAndReturnArgs>(args?: SelectSubset<T, StoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
     */
    delete<T extends StoryDeleteArgs>(args: SelectSubset<T, StoryDeleteArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryUpdateArgs>(args: SelectSubset<T, StoryUpdateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryDeleteManyArgs>(args?: SelectSubset<T, StoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryUpdateManyArgs>(args: SelectSubset<T, StoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
     */
    upsert<T extends StoryUpsertArgs>(args: SelectSubset<T, StoryUpsertArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): Prisma.PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Story model
   */
  readonly fields: StoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Story model
   */ 
  interface StoryFieldRefs {
    readonly id: FieldRef<"Story", 'Int'>
    readonly userId: FieldRef<"Story", 'Int'>
    readonly telegramFileId: FieldRef<"Story", 'String'>
    readonly telegramFilePath: FieldRef<"Story", 'String'>
    readonly type: FieldRef<"Story", 'MediaType'>
    readonly caption: FieldRef<"Story", 'String'>
    readonly status: FieldRef<"Story", 'StoryStatus'>
    readonly viewsCount: FieldRef<"Story", 'Int'>
    readonly likesCount: FieldRef<"Story", 'Int'>
    readonly expiresAt: FieldRef<"Story", 'DateTime'>
    readonly createdAt: FieldRef<"Story", 'DateTime'>
    readonly publishedAt: FieldRef<"Story", 'DateTime'>
    readonly updatedAt: FieldRef<"Story", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findUniqueOrThrow
   */
  export type StoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findFirstOrThrow
   */
  export type StoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findMany
   */
  export type StoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Stories to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story create
   */
  export type StoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Story.
     */
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }

  /**
   * Story createMany
   */
  export type StoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Story createManyAndReturn
   */
  export type StoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Story update
   */
  export type StoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Story.
     */
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stories.
     */
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     */
    where?: StoryWhereInput
  }

  /**
   * Story upsert
   */
  export type StoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Story to update in case it exists.
     */
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     */
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }

  /**
   * Story delete
   */
  export type StoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter which Story to delete.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stories to delete
     */
    where?: StoryWhereInput
  }

  /**
   * Story without action
   */
  export type StoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flagUrl: string | null
    createdAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flagUrl: string | null
    createdAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    flagUrl: number
    createdAt: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flagUrl?: true
    createdAt?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    name: string
    code: string
    flagUrl: string | null
    createdAt: Date
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    flagUrl?: boolean
    createdAt?: boolean
    cities?: boolean | Country$citiesArgs<ExtArgs>
    users?: boolean | Country$usersArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    flagUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    flagUrl?: boolean
    createdAt?: boolean
  }

  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | Country$citiesArgs<ExtArgs>
    users?: boolean | Country$usersArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      cities: Prisma.$CityPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      flagUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cities<T extends Country$citiesArgs<ExtArgs> = {}>(args?: Subset<T, Country$citiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Country$usersArgs<ExtArgs> = {}>(args?: Subset<T, Country$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly name: FieldRef<"Country", 'String'>
    readonly code: FieldRef<"Country", 'String'>
    readonly flagUrl: FieldRef<"Country", 'String'>
    readonly createdAt: FieldRef<"Country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }

  /**
   * Country.cities
   */
  export type Country$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    where?: CityWhereInput
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    cursor?: CityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * Country.users
   */
  export type Country$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model City
   */

  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityAvgAggregateOutputType = {
    id: number | null
    population: number | null
    lat: number | null
    lng: number | null
  }

  export type CitySumAggregateOutputType = {
    id: number | null
    population: number | null
    lat: number | null
    lng: number | null
  }

  export type CityMinAggregateOutputType = {
    id: number | null
    name: string | null
    countryCode: string | null
    population: number | null
    lat: number | null
    lng: number | null
    timezone: string | null
    createdAt: Date | null
  }

  export type CityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    countryCode: string | null
    population: number | null
    lat: number | null
    lng: number | null
    timezone: string | null
    createdAt: Date | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    name: number
    countryCode: number
    population: number
    lat: number
    lng: number
    timezone: number
    createdAt: number
    _all: number
  }


  export type CityAvgAggregateInputType = {
    id?: true
    population?: true
    lat?: true
    lng?: true
  }

  export type CitySumAggregateInputType = {
    id?: true
    population?: true
    lat?: true
    lng?: true
  }

  export type CityMinAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    name?: true
    countryCode?: true
    population?: true
    lat?: true
    lng?: true
    timezone?: true
    createdAt?: true
    _all?: true
  }

  export type CityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which City to aggregate.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
    orderBy?: CityOrderByWithAggregationInput | CityOrderByWithAggregationInput[]
    by: CityScalarFieldEnum[] | CityScalarFieldEnum
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _avg?: CityAvgAggregateInputType
    _sum?: CitySumAggregateInputType
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }

  export type CityGroupByOutputType = {
    id: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone: string | null
    createdAt: Date
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    countryCode?: boolean
    population?: boolean
    lat?: boolean
    lng?: boolean
    timezone?: boolean
    createdAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    users?: boolean | City$usersArgs<ExtArgs>
    userSettings?: boolean | City$userSettingsArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type CitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    countryCode?: boolean
    population?: boolean
    lat?: boolean
    lng?: boolean
    timezone?: boolean
    createdAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type CitySelectScalar = {
    id?: boolean
    name?: boolean
    countryCode?: boolean
    population?: boolean
    lat?: boolean
    lng?: boolean
    timezone?: boolean
    createdAt?: boolean
  }

  export type CityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    users?: boolean | City$usersArgs<ExtArgs>
    userSettings?: boolean | City$userSettingsArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $CityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "City"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      userSettings: Prisma.$UserSettingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      countryCode: string
      population: number
      lat: number
      lng: number
      timezone: string | null
      createdAt: Date
    }, ExtArgs["result"]["city"]>
    composites: {}
  }

  type CityGetPayload<S extends boolean | null | undefined | CityDefaultArgs> = $Result.GetResult<Prisma.$CityPayload, S>

  type CityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface CityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['City'], meta: { name: 'City' } }
    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CityFindUniqueArgs>(args: SelectSubset<T, CityFindUniqueArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one City that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(args: SelectSubset<T, CityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CityFindFirstArgs>(args?: SelectSubset<T, CityFindFirstArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first City that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(args?: SelectSubset<T, CityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CityFindManyArgs>(args?: SelectSubset<T, CityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
     */
    create<T extends CityCreateArgs>(args: SelectSubset<T, CityCreateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cities.
     * @param {CityCreateManyArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CityCreateManyArgs>(args?: SelectSubset<T, CityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cities and returns the data saved in the database.
     * @param {CityCreateManyAndReturnArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cities and only return the `id`
     * const cityWithIdOnly = await prisma.city.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CityCreateManyAndReturnArgs>(args?: SelectSubset<T, CityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
     */
    delete<T extends CityDeleteArgs>(args: SelectSubset<T, CityDeleteArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CityUpdateArgs>(args: SelectSubset<T, CityUpdateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CityDeleteManyArgs>(args?: SelectSubset<T, CityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CityUpdateManyArgs>(args: SelectSubset<T, CityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
     */
    upsert<T extends CityUpsertArgs>(args: SelectSubset<T, CityUpsertArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the City model
   */
  readonly fields: CityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends City$usersArgs<ExtArgs> = {}>(args?: Subset<T, City$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    userSettings<T extends City$userSettingsArgs<ExtArgs> = {}>(args?: Subset<T, City$userSettingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the City model
   */ 
  interface CityFieldRefs {
    readonly id: FieldRef<"City", 'Int'>
    readonly name: FieldRef<"City", 'String'>
    readonly countryCode: FieldRef<"City", 'String'>
    readonly population: FieldRef<"City", 'Int'>
    readonly lat: FieldRef<"City", 'Float'>
    readonly lng: FieldRef<"City", 'Float'>
    readonly timezone: FieldRef<"City", 'String'>
    readonly createdAt: FieldRef<"City", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * City findUnique
   */
  export type CityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findUniqueOrThrow
   */
  export type CityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findFirst
   */
  export type CityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findFirstOrThrow
   */
  export type CityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findMany
   */
  export type CityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which Cities to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City create
   */
  export type CityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to create a City.
     */
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }

  /**
   * City createMany
   */
  export type CityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * City createManyAndReturn
   */
  export type CityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * City update
   */
  export type CityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to update a City.
     */
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City updateMany
   */
  export type CityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
  }

  /**
   * City upsert
   */
  export type CityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The filter to search for the City to update in case it exists.
     */
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     */
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }

  /**
   * City delete
   */
  export type CityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter which City to delete.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cities to delete
     */
    where?: CityWhereInput
  }

  /**
   * City.users
   */
  export type City$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * City.userSettings
   */
  export type City$userSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    cursor?: UserSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * City without action
   */
  export type CityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
  }


  /**
   * Model Sport
   */

  export type AggregateSport = {
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  export type SportAvgAggregateOutputType = {
    id: number | null
  }

  export type SportSumAggregateOutputType = {
    id: number | null
  }

  export type SportMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    emoji: string | null
    icon: string | null
    createdAt: Date | null
  }

  export type SportMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    emoji: string | null
    icon: string | null
    createdAt: Date | null
  }

  export type SportCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    emoji: number
    icon: number
    createdAt: number
    _all: number
  }


  export type SportAvgAggregateInputType = {
    id?: true
  }

  export type SportSumAggregateInputType = {
    id?: true
  }

  export type SportMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    icon?: true
    createdAt?: true
  }

  export type SportMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    icon?: true
    createdAt?: true
  }

  export type SportCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    emoji?: true
    icon?: true
    createdAt?: true
    _all?: true
  }

  export type SportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sport to aggregate.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sports
    **/
    _count?: true | SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SportMaxAggregateInputType
  }

  export type GetSportAggregateType<T extends SportAggregateArgs> = {
        [P in keyof T & keyof AggregateSport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSport[P]>
      : GetScalarType<T[P], AggregateSport[P]>
  }




  export type SportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SportWhereInput
    orderBy?: SportOrderByWithAggregationInput | SportOrderByWithAggregationInput[]
    by: SportScalarFieldEnum[] | SportScalarFieldEnum
    having?: SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SportCountAggregateInputType | true
    _avg?: SportAvgAggregateInputType
    _sum?: SportSumAggregateInputType
    _min?: SportMinAggregateInputType
    _max?: SportMaxAggregateInputType
  }

  export type SportGroupByOutputType = {
    id: number
    title: string
    slug: string
    emoji: string | null
    icon: string | null
    createdAt: Date
    _count: SportCountAggregateOutputType | null
    _avg: SportAvgAggregateOutputType | null
    _sum: SportSumAggregateOutputType | null
    _min: SportMinAggregateOutputType | null
    _max: SportMaxAggregateOutputType | null
  }

  type GetSportGroupByPayload<T extends SportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SportGroupByOutputType[P]>
            : GetScalarType<T[P], SportGroupByOutputType[P]>
        }
      >
    >


  export type SportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    emoji?: boolean
    icon?: boolean
    createdAt?: boolean
    users?: boolean | Sport$usersArgs<ExtArgs>
    userSettings?: boolean | Sport$userSettingsArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sport"]>

  export type SportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    emoji?: boolean
    icon?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sport"]>

  export type SportSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    emoji?: boolean
    icon?: boolean
    createdAt?: boolean
  }

  export type SportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Sport$usersArgs<ExtArgs>
    userSettings?: boolean | Sport$userSettingsArgs<ExtArgs>
    _count?: boolean | SportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sport"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      userSettings: Prisma.$UserSettingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      emoji: string | null
      icon: string | null
      createdAt: Date
    }, ExtArgs["result"]["sport"]>
    composites: {}
  }

  type SportGetPayload<S extends boolean | null | undefined | SportDefaultArgs> = $Result.GetResult<Prisma.$SportPayload, S>

  type SportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SportCountAggregateInputType | true
    }

  export interface SportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sport'], meta: { name: 'Sport' } }
    /**
     * Find zero or one Sport that matches the filter.
     * @param {SportFindUniqueArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SportFindUniqueArgs>(args: SelectSubset<T, SportFindUniqueArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SportFindUniqueOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SportFindUniqueOrThrowArgs>(args: SelectSubset<T, SportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SportFindFirstArgs>(args?: SelectSubset<T, SportFindFirstArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstOrThrowArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SportFindFirstOrThrowArgs>(args?: SelectSubset<T, SportFindFirstOrThrowArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sports
     * const sports = await prisma.sport.findMany()
     * 
     * // Get first 10 Sports
     * const sports = await prisma.sport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sportWithIdOnly = await prisma.sport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SportFindManyArgs>(args?: SelectSubset<T, SportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sport.
     * @param {SportCreateArgs} args - Arguments to create a Sport.
     * @example
     * // Create one Sport
     * const Sport = await prisma.sport.create({
     *   data: {
     *     // ... data to create a Sport
     *   }
     * })
     * 
     */
    create<T extends SportCreateArgs>(args: SelectSubset<T, SportCreateArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sports.
     * @param {SportCreateManyArgs} args - Arguments to create many Sports.
     * @example
     * // Create many Sports
     * const sport = await prisma.sport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SportCreateManyArgs>(args?: SelectSubset<T, SportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sports and returns the data saved in the database.
     * @param {SportCreateManyAndReturnArgs} args - Arguments to create many Sports.
     * @example
     * // Create many Sports
     * const sport = await prisma.sport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sports and only return the `id`
     * const sportWithIdOnly = await prisma.sport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SportCreateManyAndReturnArgs>(args?: SelectSubset<T, SportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sport.
     * @param {SportDeleteArgs} args - Arguments to delete one Sport.
     * @example
     * // Delete one Sport
     * const Sport = await prisma.sport.delete({
     *   where: {
     *     // ... filter to delete one Sport
     *   }
     * })
     * 
     */
    delete<T extends SportDeleteArgs>(args: SelectSubset<T, SportDeleteArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sport.
     * @param {SportUpdateArgs} args - Arguments to update one Sport.
     * @example
     * // Update one Sport
     * const sport = await prisma.sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SportUpdateArgs>(args: SelectSubset<T, SportUpdateArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sports.
     * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
     * @example
     * // Delete a few Sports
     * const { count } = await prisma.sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SportDeleteManyArgs>(args?: SelectSubset<T, SportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SportUpdateManyArgs>(args: SelectSubset<T, SportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sport.
     * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
     * @example
     * // Update or create a Sport
     * const sport = await prisma.sport.upsert({
     *   create: {
     *     // ... data to create a Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sport we want to update
     *   }
     * })
     */
    upsert<T extends SportUpsertArgs>(args: SelectSubset<T, SportUpsertArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportCountArgs} args - Arguments to filter Sports to count.
     * @example
     * // Count the number of Sports
     * const count = await prisma.sport.count({
     *   where: {
     *     // ... the filter for the Sports we want to count
     *   }
     * })
    **/
    count<T extends SportCountArgs>(
      args?: Subset<T, SportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SportAggregateArgs>(args: Subset<T, SportAggregateArgs>): Prisma.PrismaPromise<GetSportAggregateType<T>>

    /**
     * Group by Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SportGroupByArgs['orderBy'] }
        : { orderBy?: SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sport model
   */
  readonly fields: SportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Sport$usersArgs<ExtArgs> = {}>(args?: Subset<T, Sport$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    userSettings<T extends Sport$userSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Sport$userSettingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sport model
   */ 
  interface SportFieldRefs {
    readonly id: FieldRef<"Sport", 'Int'>
    readonly title: FieldRef<"Sport", 'String'>
    readonly slug: FieldRef<"Sport", 'String'>
    readonly emoji: FieldRef<"Sport", 'String'>
    readonly icon: FieldRef<"Sport", 'String'>
    readonly createdAt: FieldRef<"Sport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sport findUnique
   */
  export type SportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport findUniqueOrThrow
   */
  export type SportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport findFirst
   */
  export type SportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport findFirstOrThrow
   */
  export type SportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sport to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
     */
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport findMany
   */
  export type SportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter, which Sports to fetch.
     */
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
     */
    orderBy?: SportOrderByWithRelationInput | SportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sports.
     */
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
     */
    skip?: number
    distinct?: SportScalarFieldEnum | SportScalarFieldEnum[]
  }

  /**
   * Sport create
   */
  export type SportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to create a Sport.
     */
    data: XOR<SportCreateInput, SportUncheckedCreateInput>
  }

  /**
   * Sport createMany
   */
  export type SportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sports.
     */
    data: SportCreateManyInput | SportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sport createManyAndReturn
   */
  export type SportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sports.
     */
    data: SportCreateManyInput | SportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sport update
   */
  export type SportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The data needed to update a Sport.
     */
    data: XOR<SportUpdateInput, SportUncheckedUpdateInput>
    /**
     * Choose, which Sport to update.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport updateMany
   */
  export type SportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sports.
     */
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    /**
     * Filter which Sports to update
     */
    where?: SportWhereInput
  }

  /**
   * Sport upsert
   */
  export type SportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * The filter to search for the Sport to update in case it exists.
     */
    where: SportWhereUniqueInput
    /**
     * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
     */
    create: XOR<SportCreateInput, SportUncheckedCreateInput>
    /**
     * In case the Sport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SportUpdateInput, SportUncheckedUpdateInput>
  }

  /**
   * Sport delete
   */
  export type SportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    /**
     * Filter which Sport to delete.
     */
    where: SportWhereUniqueInput
  }

  /**
   * Sport deleteMany
   */
  export type SportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sports to delete
     */
    where?: SportWhereInput
  }

  /**
   * Sport.users
   */
  export type Sport$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Sport.userSettings
   */
  export type Sport$userSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    cursor?: UserSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * Sport without action
   */
  export type SportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _avg: UserSettingsAvgAggregateOutputType | null
    _sum: UserSettingsSumAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    cityId: number | null
    sportId: number | null
    preferredAgeMin: number | null
    preferredAgeMax: number | null
    preferredLevelMin: number | null
    preferredLevelMax: number | null
  }

  export type UserSettingsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    cityId: number | null
    sportId: number | null
    preferredAgeMin: number | null
    preferredAgeMax: number | null
    preferredLevelMin: number | null
    preferredLevelMax: number | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    language: string | null
    cityId: number | null
    sportId: number | null
    notificationsEnabled: boolean | null
    notifyTelegram: boolean | null
    notifyEmail: boolean | null
    matchReminderTime: string | null
    notifyMatchResults: boolean | null
    notifyTournamentResults: boolean | null
    showProfilePublicly: boolean | null
    showRatingPublicly: boolean | null
    allowMatchInvites: boolean | null
    requireMatchConfirm: boolean | null
    preferredGender: string | null
    preferredAgeMin: number | null
    preferredAgeMax: number | null
    preferredLevelMin: number | null
    preferredLevelMax: number | null
    theme: string | null
    timezone: string | null
    telegramChatId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    allowDirectMessages: boolean | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    language: string | null
    cityId: number | null
    sportId: number | null
    notificationsEnabled: boolean | null
    notifyTelegram: boolean | null
    notifyEmail: boolean | null
    matchReminderTime: string | null
    notifyMatchResults: boolean | null
    notifyTournamentResults: boolean | null
    showProfilePublicly: boolean | null
    showRatingPublicly: boolean | null
    allowMatchInvites: boolean | null
    requireMatchConfirm: boolean | null
    preferredGender: string | null
    preferredAgeMin: number | null
    preferredAgeMax: number | null
    preferredLevelMin: number | null
    preferredLevelMax: number | null
    theme: string | null
    timezone: string | null
    telegramChatId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    allowDirectMessages: boolean | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    language: number
    cityId: number
    sportId: number
    notificationsEnabled: number
    notifyTelegram: number
    notifyEmail: number
    matchReminderTime: number
    notifyMatchResults: number
    notifyTournamentResults: number
    showProfilePublicly: number
    showRatingPublicly: number
    allowMatchInvites: number
    requireMatchConfirm: number
    preferredGender: number
    preferredAgeMin: number
    preferredAgeMax: number
    preferredLevelMin: number
    preferredLevelMax: number
    theme: number
    timezone: number
    telegramChatId: number
    createdAt: number
    updatedAt: number
    allowDirectMessages: number
    _all: number
  }


  export type UserSettingsAvgAggregateInputType = {
    id?: true
    userId?: true
    cityId?: true
    sportId?: true
    preferredAgeMin?: true
    preferredAgeMax?: true
    preferredLevelMin?: true
    preferredLevelMax?: true
  }

  export type UserSettingsSumAggregateInputType = {
    id?: true
    userId?: true
    cityId?: true
    sportId?: true
    preferredAgeMin?: true
    preferredAgeMax?: true
    preferredLevelMin?: true
    preferredLevelMax?: true
  }

  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    language?: true
    cityId?: true
    sportId?: true
    notificationsEnabled?: true
    notifyTelegram?: true
    notifyEmail?: true
    matchReminderTime?: true
    notifyMatchResults?: true
    notifyTournamentResults?: true
    showProfilePublicly?: true
    showRatingPublicly?: true
    allowMatchInvites?: true
    requireMatchConfirm?: true
    preferredGender?: true
    preferredAgeMin?: true
    preferredAgeMax?: true
    preferredLevelMin?: true
    preferredLevelMax?: true
    theme?: true
    timezone?: true
    telegramChatId?: true
    createdAt?: true
    updatedAt?: true
    allowDirectMessages?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    language?: true
    cityId?: true
    sportId?: true
    notificationsEnabled?: true
    notifyTelegram?: true
    notifyEmail?: true
    matchReminderTime?: true
    notifyMatchResults?: true
    notifyTournamentResults?: true
    showProfilePublicly?: true
    showRatingPublicly?: true
    allowMatchInvites?: true
    requireMatchConfirm?: true
    preferredGender?: true
    preferredAgeMin?: true
    preferredAgeMax?: true
    preferredLevelMin?: true
    preferredLevelMax?: true
    theme?: true
    timezone?: true
    telegramChatId?: true
    createdAt?: true
    updatedAt?: true
    allowDirectMessages?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    language?: true
    cityId?: true
    sportId?: true
    notificationsEnabled?: true
    notifyTelegram?: true
    notifyEmail?: true
    matchReminderTime?: true
    notifyMatchResults?: true
    notifyTournamentResults?: true
    showProfilePublicly?: true
    showRatingPublicly?: true
    allowMatchInvites?: true
    requireMatchConfirm?: true
    preferredGender?: true
    preferredAgeMin?: true
    preferredAgeMax?: true
    preferredLevelMin?: true
    preferredLevelMax?: true
    theme?: true
    timezone?: true
    telegramChatId?: true
    createdAt?: true
    updatedAt?: true
    allowDirectMessages?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _avg?: UserSettingsAvgAggregateInputType
    _sum?: UserSettingsSumAggregateInputType
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    id: number
    userId: number
    language: string
    cityId: number | null
    sportId: number | null
    notificationsEnabled: boolean
    notifyTelegram: boolean
    notifyEmail: boolean
    matchReminderTime: string
    notifyMatchResults: boolean
    notifyTournamentResults: boolean
    showProfilePublicly: boolean
    showRatingPublicly: boolean
    allowMatchInvites: boolean
    requireMatchConfirm: boolean
    preferredGender: string | null
    preferredAgeMin: number | null
    preferredAgeMax: number | null
    preferredLevelMin: number | null
    preferredLevelMax: number | null
    theme: string
    timezone: string
    telegramChatId: string | null
    createdAt: Date
    updatedAt: Date
    allowDirectMessages: boolean
    _count: UserSettingsCountAggregateOutputType | null
    _avg: UserSettingsAvgAggregateOutputType | null
    _sum: UserSettingsSumAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    language?: boolean
    cityId?: boolean
    sportId?: boolean
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: boolean
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: boolean
    preferredAgeMin?: boolean
    preferredAgeMax?: boolean
    preferredLevelMin?: boolean
    preferredLevelMax?: boolean
    theme?: boolean
    timezone?: boolean
    telegramChatId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowDirectMessages?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    city?: boolean | UserSettings$cityArgs<ExtArgs>
    sport?: boolean | UserSettings$sportArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    language?: boolean
    cityId?: boolean
    sportId?: boolean
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: boolean
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: boolean
    preferredAgeMin?: boolean
    preferredAgeMax?: boolean
    preferredLevelMin?: boolean
    preferredLevelMax?: boolean
    theme?: boolean
    timezone?: boolean
    telegramChatId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowDirectMessages?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    city?: boolean | UserSettings$cityArgs<ExtArgs>
    sport?: boolean | UserSettings$sportArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    language?: boolean
    cityId?: boolean
    sportId?: boolean
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: boolean
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: boolean
    preferredAgeMin?: boolean
    preferredAgeMax?: boolean
    preferredLevelMin?: boolean
    preferredLevelMax?: boolean
    theme?: boolean
    timezone?: boolean
    telegramChatId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowDirectMessages?: boolean
  }

  export type UserSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    city?: boolean | UserSettings$cityArgs<ExtArgs>
    sport?: boolean | UserSettings$sportArgs<ExtArgs>
  }
  export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    city?: boolean | UserSettings$cityArgs<ExtArgs>
    sport?: boolean | UserSettings$sportArgs<ExtArgs>
  }

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      city: Prisma.$CityPayload<ExtArgs> | null
      sport: Prisma.$SportPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      language: string
      cityId: number | null
      sportId: number | null
      notificationsEnabled: boolean
      notifyTelegram: boolean
      notifyEmail: boolean
      matchReminderTime: string
      notifyMatchResults: boolean
      notifyTournamentResults: boolean
      showProfilePublicly: boolean
      showRatingPublicly: boolean
      allowMatchInvites: boolean
      requireMatchConfirm: boolean
      preferredGender: string | null
      preferredAgeMin: number | null
      preferredAgeMax: number | null
      preferredLevelMin: number | null
      preferredLevelMax: number | null
      theme: string
      timezone: string
      telegramChatId: string | null
      createdAt: Date
      updatedAt: Date
      allowDirectMessages: boolean
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    city<T extends UserSettings$cityArgs<ExtArgs> = {}>(args?: Subset<T, UserSettings$cityArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sport<T extends UserSettings$sportArgs<ExtArgs> = {}>(args?: Subset<T, UserSettings$sportArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */ 
  interface UserSettingsFieldRefs {
    readonly id: FieldRef<"UserSettings", 'Int'>
    readonly userId: FieldRef<"UserSettings", 'Int'>
    readonly language: FieldRef<"UserSettings", 'String'>
    readonly cityId: FieldRef<"UserSettings", 'Int'>
    readonly sportId: FieldRef<"UserSettings", 'Int'>
    readonly notificationsEnabled: FieldRef<"UserSettings", 'Boolean'>
    readonly notifyTelegram: FieldRef<"UserSettings", 'Boolean'>
    readonly notifyEmail: FieldRef<"UserSettings", 'Boolean'>
    readonly matchReminderTime: FieldRef<"UserSettings", 'String'>
    readonly notifyMatchResults: FieldRef<"UserSettings", 'Boolean'>
    readonly notifyTournamentResults: FieldRef<"UserSettings", 'Boolean'>
    readonly showProfilePublicly: FieldRef<"UserSettings", 'Boolean'>
    readonly showRatingPublicly: FieldRef<"UserSettings", 'Boolean'>
    readonly allowMatchInvites: FieldRef<"UserSettings", 'Boolean'>
    readonly requireMatchConfirm: FieldRef<"UserSettings", 'Boolean'>
    readonly preferredGender: FieldRef<"UserSettings", 'String'>
    readonly preferredAgeMin: FieldRef<"UserSettings", 'Int'>
    readonly preferredAgeMax: FieldRef<"UserSettings", 'Int'>
    readonly preferredLevelMin: FieldRef<"UserSettings", 'Float'>
    readonly preferredLevelMax: FieldRef<"UserSettings", 'Float'>
    readonly theme: FieldRef<"UserSettings", 'String'>
    readonly timezone: FieldRef<"UserSettings", 'String'>
    readonly telegramChatId: FieldRef<"UserSettings", 'String'>
    readonly createdAt: FieldRef<"UserSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSettings", 'DateTime'>
    readonly allowDirectMessages: FieldRef<"UserSettings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
  }

  /**
   * UserSettings.city
   */
  export type UserSettings$cityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    where?: CityWhereInput
  }

  /**
   * UserSettings.sport
   */
  export type UserSettings$sportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    where?: SportWhereInput
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    cityId: number | null
    sportId: number | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: number | null
    referredBy: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    cityId: number | null
    sportId: number | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
    referredBy: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: $Enums.Role | null
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    sportType: string | null
    updatedAt: Date | null
    createdAt: Date | null
    authSource: $Enums.AuthSource | null
    lastLogin: Date | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
    referralCode: string | null
    referredBy: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: $Enums.Role | null
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    sportType: string | null
    updatedAt: Date | null
    createdAt: Date | null
    authSource: $Enums.AuthSource | null
    lastLogin: Date | null
    ballsBalance: number | null
    casesOpened: number | null
    telegramChatId: bigint | null
    referralCode: string | null
    referredBy: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    telegramId: number
    username: number
    firstName: number
    lastName: number
    isVerified: number
    role: number
    countryCode: number
    cityId: number
    sportId: number
    sportType: number
    updatedAt: number
    createdAt: number
    authSource: number
    lastLogin: number
    ballsBalance: number
    casesOpened: number
    telegramChatId: number
    referralCode: number
    referredBy: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    cityId?: true
    sportId?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    referredBy?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    cityId?: true
    sportId?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    referredBy?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    sportType?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    referralCode?: true
    referredBy?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    sportType?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    referralCode?: true
    referredBy?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    countryCode?: true
    cityId?: true
    sportId?: true
    sportType?: true
    updatedAt?: true
    createdAt?: true
    authSource?: true
    lastLogin?: true
    ballsBalance?: true
    casesOpened?: true
    telegramChatId?: true
    referralCode?: true
    referredBy?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    telegramId: string
    username: string
    firstName: string
    lastName: string | null
    isVerified: boolean
    role: $Enums.Role
    countryCode: string | null
    cityId: number | null
    sportId: number | null
    sportType: string | null
    updatedAt: Date
    createdAt: Date
    authSource: $Enums.AuthSource
    lastLogin: Date | null
    ballsBalance: number
    casesOpened: number
    telegramChatId: bigint | null
    referralCode: string | null
    referredBy: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telegramId?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    isVerified?: boolean
    role?: boolean
    countryCode?: boolean
    cityId?: boolean
    sportId?: boolean
    sportType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    authSource?: boolean
    lastLogin?: boolean
    ballsBalance?: boolean
    casesOpened?: boolean
    telegramChatId?: boolean
    referralCode?: boolean
    referredBy?: boolean
    country?: boolean | User$countryArgs<ExtArgs>
    city?: boolean | User$cityArgs<ExtArgs>
    sport?: boolean | User$sportArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    createdMatches?: boolean | User$createdMatchesArgs<ExtArgs>
    player1Matches?: boolean | User$player1MatchesArgs<ExtArgs>
    player2Matches?: boolean | User$player2MatchesArgs<ExtArgs>
    wonMatches?: boolean | User$wonMatchesArgs<ExtArgs>
    tournamentMatchesA?: boolean | User$tournamentMatchesAArgs<ExtArgs>
    tournamentMatchesB?: boolean | User$tournamentMatchesBArgs<ExtArgs>
    tournamentMatchesWon?: boolean | User$tournamentMatchesWonArgs<ExtArgs>
    createdTrainings?: boolean | User$createdTrainingsArgs<ExtArgs>
    createdTrainingSessions?: boolean | User$createdTrainingSessionsArgs<ExtArgs>
    createdTournaments?: boolean | User$createdTournamentsArgs<ExtArgs>
    sentInvites?: boolean | User$sentInvitesArgs<ExtArgs>
    receivedInvites?: boolean | User$receivedInvitesArgs<ExtArgs>
    tournaments?: boolean | User$tournamentsArgs<ExtArgs>
    createdRequests?: boolean | User$createdRequestsArgs<ExtArgs>
    requestParticipations?: boolean | User$requestParticipationsArgs<ExtArgs>
    requestResponses?: boolean | User$requestResponsesArgs<ExtArgs>
    trainingSessionParticipations?: boolean | User$trainingSessionParticipationsArgs<ExtArgs>
    caseOpenings?: boolean | User$caseOpeningsArgs<ExtArgs>
    caseWinnings?: boolean | User$caseWinningsArgs<ExtArgs>
    ballTransactions?: boolean | User$ballTransactionsArgs<ExtArgs>
    stories?: boolean | User$storiesArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    referralStats?: boolean | User$referralStatsArgs<ExtArgs>
    referrerActivities?: boolean | User$referrerActivitiesArgs<ExtArgs>
    invitedActivities?: boolean | User$invitedActivitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    rating?: boolean | User$ratingArgs<ExtArgs>
    ratingHistory?: boolean | User$ratingHistoryArgs<ExtArgs>
    opponentHistory?: boolean | User$opponentHistoryArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    givenFeedbacks?: boolean | User$givenFeedbacksArgs<ExtArgs>
    receivedFeedbacks?: boolean | User$receivedFeedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telegramId?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    isVerified?: boolean
    role?: boolean
    countryCode?: boolean
    cityId?: boolean
    sportId?: boolean
    sportType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    authSource?: boolean
    lastLogin?: boolean
    ballsBalance?: boolean
    casesOpened?: boolean
    telegramChatId?: boolean
    referralCode?: boolean
    referredBy?: boolean
    country?: boolean | User$countryArgs<ExtArgs>
    city?: boolean | User$cityArgs<ExtArgs>
    sport?: boolean | User$sportArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    telegramId?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    isVerified?: boolean
    role?: boolean
    countryCode?: boolean
    cityId?: boolean
    sportId?: boolean
    sportType?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    authSource?: boolean
    lastLogin?: boolean
    ballsBalance?: boolean
    casesOpened?: boolean
    telegramChatId?: boolean
    referralCode?: boolean
    referredBy?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | User$countryArgs<ExtArgs>
    city?: boolean | User$cityArgs<ExtArgs>
    sport?: boolean | User$sportArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    createdMatches?: boolean | User$createdMatchesArgs<ExtArgs>
    player1Matches?: boolean | User$player1MatchesArgs<ExtArgs>
    player2Matches?: boolean | User$player2MatchesArgs<ExtArgs>
    wonMatches?: boolean | User$wonMatchesArgs<ExtArgs>
    tournamentMatchesA?: boolean | User$tournamentMatchesAArgs<ExtArgs>
    tournamentMatchesB?: boolean | User$tournamentMatchesBArgs<ExtArgs>
    tournamentMatchesWon?: boolean | User$tournamentMatchesWonArgs<ExtArgs>
    createdTrainings?: boolean | User$createdTrainingsArgs<ExtArgs>
    createdTrainingSessions?: boolean | User$createdTrainingSessionsArgs<ExtArgs>
    createdTournaments?: boolean | User$createdTournamentsArgs<ExtArgs>
    sentInvites?: boolean | User$sentInvitesArgs<ExtArgs>
    receivedInvites?: boolean | User$receivedInvitesArgs<ExtArgs>
    tournaments?: boolean | User$tournamentsArgs<ExtArgs>
    createdRequests?: boolean | User$createdRequestsArgs<ExtArgs>
    requestParticipations?: boolean | User$requestParticipationsArgs<ExtArgs>
    requestResponses?: boolean | User$requestResponsesArgs<ExtArgs>
    trainingSessionParticipations?: boolean | User$trainingSessionParticipationsArgs<ExtArgs>
    caseOpenings?: boolean | User$caseOpeningsArgs<ExtArgs>
    caseWinnings?: boolean | User$caseWinningsArgs<ExtArgs>
    ballTransactions?: boolean | User$ballTransactionsArgs<ExtArgs>
    stories?: boolean | User$storiesArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    referralStats?: boolean | User$referralStatsArgs<ExtArgs>
    referrerActivities?: boolean | User$referrerActivitiesArgs<ExtArgs>
    invitedActivities?: boolean | User$invitedActivitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    rating?: boolean | User$ratingArgs<ExtArgs>
    ratingHistory?: boolean | User$ratingHistoryArgs<ExtArgs>
    opponentHistory?: boolean | User$opponentHistoryArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    givenFeedbacks?: boolean | User$givenFeedbacksArgs<ExtArgs>
    receivedFeedbacks?: boolean | User$receivedFeedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | User$countryArgs<ExtArgs>
    city?: boolean | User$cityArgs<ExtArgs>
    sport?: boolean | User$sportArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs> | null
      city: Prisma.$CityPayload<ExtArgs> | null
      sport: Prisma.$SportPayload<ExtArgs> | null
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      createdMatches: Prisma.$MatchPayload<ExtArgs>[]
      player1Matches: Prisma.$MatchPayload<ExtArgs>[]
      player2Matches: Prisma.$MatchPayload<ExtArgs>[]
      wonMatches: Prisma.$MatchPayload<ExtArgs>[]
      tournamentMatchesA: Prisma.$TournamentMatchPayload<ExtArgs>[]
      tournamentMatchesB: Prisma.$TournamentMatchPayload<ExtArgs>[]
      tournamentMatchesWon: Prisma.$TournamentMatchPayload<ExtArgs>[]
      createdTrainings: Prisma.$TrainingPayload<ExtArgs>[]
      createdTrainingSessions: Prisma.$TrainingSessionPayload<ExtArgs>[]
      createdTournaments: Prisma.$TournamentPayload<ExtArgs>[]
      sentInvites: Prisma.$InvitePayload<ExtArgs>[]
      receivedInvites: Prisma.$InvitePayload<ExtArgs>[]
      tournaments: Prisma.$TournamentPayload<ExtArgs>[]
      createdRequests: Prisma.$GameRequestPayload<ExtArgs>[]
      requestParticipations: Prisma.$GameRequestPayload<ExtArgs>[]
      requestResponses: Prisma.$RequestResponsePayload<ExtArgs>[]
      trainingSessionParticipations: Prisma.$TrainingSessionPayload<ExtArgs>[]
      caseOpenings: Prisma.$CaseOpeningPayload<ExtArgs>[]
      caseWinnings: Prisma.$CaseWinningPayload<ExtArgs>[]
      ballTransactions: Prisma.$BallTransactionPayload<ExtArgs>[]
      stories: Prisma.$StoryPayload<ExtArgs>[]
      referrer: Prisma.$UserPayload<ExtArgs> | null
      referrals: Prisma.$UserPayload<ExtArgs>[]
      referralStats: Prisma.$ReferralStatsPayload<ExtArgs> | null
      referrerActivities: Prisma.$ReferralActivityPayload<ExtArgs>[]
      invitedActivities: Prisma.$ReferralActivityPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      achievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      rating: Prisma.$PlayerRatingPayload<ExtArgs> | null
      ratingHistory: Prisma.$RatingHistoryPayload<ExtArgs>[]
      opponentHistory: Prisma.$RatingHistoryPayload<ExtArgs>[]
      settings: Prisma.$UserSettingsPayload<ExtArgs> | null
      sentMessages: Prisma.$DirectMessagePayload<ExtArgs>[]
      receivedMessages: Prisma.$DirectMessagePayload<ExtArgs>[]
      givenFeedbacks: Prisma.$MatchFeedbackPayload<ExtArgs>[]
      receivedFeedbacks: Prisma.$MatchFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      telegramId: string
      username: string
      firstName: string
      lastName: string | null
      isVerified: boolean
      role: $Enums.Role
      countryCode: string | null
      cityId: number | null
      sportId: number | null
      sportType: string | null
      updatedAt: Date
      createdAt: Date
      authSource: $Enums.AuthSource
      lastLogin: Date | null
      ballsBalance: number
      casesOpened: number
      telegramChatId: bigint | null
      referralCode: string | null
      referredBy: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends User$countryArgs<ExtArgs> = {}>(args?: Subset<T, User$countryArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    city<T extends User$cityArgs<ExtArgs> = {}>(args?: Subset<T, User$cityArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sport<T extends User$sportArgs<ExtArgs> = {}>(args?: Subset<T, User$sportArgs<ExtArgs>>): Prisma__SportClient<$Result.GetResult<Prisma.$SportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdMatches<T extends User$createdMatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    player1Matches<T extends User$player1MatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$player1MatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    player2Matches<T extends User$player2MatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$player2MatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    wonMatches<T extends User$wonMatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$wonMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    tournamentMatchesA<T extends User$tournamentMatchesAArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchesAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    tournamentMatchesB<T extends User$tournamentMatchesBArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchesBArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    tournamentMatchesWon<T extends User$tournamentMatchesWonArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchesWonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    createdTrainings<T extends User$createdTrainingsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTrainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany"> | Null>
    createdTrainingSessions<T extends User$createdTrainingSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTrainingSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findMany"> | Null>
    createdTournaments<T extends User$createdTournamentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany"> | Null>
    sentInvites<T extends User$sentInvitesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    receivedInvites<T extends User$receivedInvitesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    tournaments<T extends User$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany"> | Null>
    createdRequests<T extends User$createdRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findMany"> | Null>
    requestParticipations<T extends User$requestParticipationsArgs<ExtArgs> = {}>(args?: Subset<T, User$requestParticipationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findMany"> | Null>
    requestResponses<T extends User$requestResponsesArgs<ExtArgs> = {}>(args?: Subset<T, User$requestResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findMany"> | Null>
    trainingSessionParticipations<T extends User$trainingSessionParticipationsArgs<ExtArgs> = {}>(args?: Subset<T, User$trainingSessionParticipationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findMany"> | Null>
    caseOpenings<T extends User$caseOpeningsArgs<ExtArgs> = {}>(args?: Subset<T, User$caseOpeningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findMany"> | Null>
    caseWinnings<T extends User$caseWinningsArgs<ExtArgs> = {}>(args?: Subset<T, User$caseWinningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findMany"> | Null>
    ballTransactions<T extends User$ballTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$ballTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    stories<T extends User$storiesArgs<ExtArgs> = {}>(args?: Subset<T, User$storiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany"> | Null>
    referrer<T extends User$referrerArgs<ExtArgs> = {}>(args?: Subset<T, User$referrerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    referrals<T extends User$referralsArgs<ExtArgs> = {}>(args?: Subset<T, User$referralsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    referralStats<T extends User$referralStatsArgs<ExtArgs> = {}>(args?: Subset<T, User$referralStatsArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    referrerActivities<T extends User$referrerActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$referrerActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findMany"> | Null>
    invitedActivities<T extends User$invitedActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$invitedActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    achievements<T extends User$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany"> | Null>
    rating<T extends User$ratingArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ratingHistory<T extends User$ratingHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    opponentHistory<T extends User$opponentHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$opponentHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findMany"> | Null>
    receivedMessages<T extends User$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectMessagePayload<ExtArgs>, T, "findMany"> | Null>
    givenFeedbacks<T extends User$givenFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$givenFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    receivedFeedbacks<T extends User$receivedFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly telegramId: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly countryCode: FieldRef<"User", 'String'>
    readonly cityId: FieldRef<"User", 'Int'>
    readonly sportId: FieldRef<"User", 'Int'>
    readonly sportType: FieldRef<"User", 'String'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly authSource: FieldRef<"User", 'AuthSource'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly ballsBalance: FieldRef<"User", 'Int'>
    readonly casesOpened: FieldRef<"User", 'Int'>
    readonly telegramChatId: FieldRef<"User", 'BigInt'>
    readonly referralCode: FieldRef<"User", 'String'>
    readonly referredBy: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.country
   */
  export type User$countryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    where?: CountryWhereInput
  }

  /**
   * User.city
   */
  export type User$cityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    where?: CityWhereInput
  }

  /**
   * User.sport
   */
  export type User$sportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sport
     */
    select?: SportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SportInclude<ExtArgs> | null
    where?: SportWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.createdMatches
   */
  export type User$createdMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.player1Matches
   */
  export type User$player1MatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.player2Matches
   */
  export type User$player2MatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.wonMatches
   */
  export type User$wonMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchesA
   */
  export type User$tournamentMatchesAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchesB
   */
  export type User$tournamentMatchesBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchesWon
   */
  export type User$tournamentMatchesWonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.createdTrainings
   */
  export type User$createdTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * User.createdTrainingSessions
   */
  export type User$createdTrainingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    where?: TrainingSessionWhereInput
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    cursor?: TrainingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingSessionScalarFieldEnum | TrainingSessionScalarFieldEnum[]
  }

  /**
   * User.createdTournaments
   */
  export type User$createdTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * User.sentInvites
   */
  export type User$sentInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * User.receivedInvites
   */
  export type User$receivedInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * User.tournaments
   */
  export type User$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * User.createdRequests
   */
  export type User$createdRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    where?: GameRequestWhereInput
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    cursor?: GameRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameRequestScalarFieldEnum | GameRequestScalarFieldEnum[]
  }

  /**
   * User.requestParticipations
   */
  export type User$requestParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    where?: GameRequestWhereInput
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    cursor?: GameRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameRequestScalarFieldEnum | GameRequestScalarFieldEnum[]
  }

  /**
   * User.requestResponses
   */
  export type User$requestResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    where?: RequestResponseWhereInput
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    cursor?: RequestResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestResponseScalarFieldEnum | RequestResponseScalarFieldEnum[]
  }

  /**
   * User.trainingSessionParticipations
   */
  export type User$trainingSessionParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    where?: TrainingSessionWhereInput
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    cursor?: TrainingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingSessionScalarFieldEnum | TrainingSessionScalarFieldEnum[]
  }

  /**
   * User.caseOpenings
   */
  export type User$caseOpeningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    where?: CaseOpeningWhereInput
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    cursor?: CaseOpeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseOpeningScalarFieldEnum | CaseOpeningScalarFieldEnum[]
  }

  /**
   * User.caseWinnings
   */
  export type User$caseWinningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    where?: CaseWinningWhereInput
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    cursor?: CaseWinningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * User.ballTransactions
   */
  export type User$ballTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    where?: BallTransactionWhereInput
    orderBy?: BallTransactionOrderByWithRelationInput | BallTransactionOrderByWithRelationInput[]
    cursor?: BallTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BallTransactionScalarFieldEnum | BallTransactionScalarFieldEnum[]
  }

  /**
   * User.stories
   */
  export type User$storiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * User.referrer
   */
  export type User$referrerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.referrals
   */
  export type User$referralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.referralStats
   */
  export type User$referralStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    where?: ReferralStatsWhereInput
  }

  /**
   * User.referrerActivities
   */
  export type User$referrerActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    where?: ReferralActivityWhereInput
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    cursor?: ReferralActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralActivityScalarFieldEnum | ReferralActivityScalarFieldEnum[]
  }

  /**
   * User.invitedActivities
   */
  export type User$invitedActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    where?: ReferralActivityWhereInput
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    cursor?: ReferralActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralActivityScalarFieldEnum | ReferralActivityScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.achievements
   */
  export type User$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.rating
   */
  export type User$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    where?: PlayerRatingWhereInput
  }

  /**
   * User.ratingHistory
   */
  export type User$ratingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    where?: RatingHistoryWhereInput
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    cursor?: RatingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * User.opponentHistory
   */
  export type User$opponentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    where?: RatingHistoryWhereInput
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    cursor?: RatingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    where?: DirectMessageWhereInput
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    cursor?: DirectMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DirectMessageScalarFieldEnum | DirectMessageScalarFieldEnum[]
  }

  /**
   * User.receivedMessages
   */
  export type User$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessage
     */
    select?: DirectMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectMessageInclude<ExtArgs> | null
    where?: DirectMessageWhereInput
    orderBy?: DirectMessageOrderByWithRelationInput | DirectMessageOrderByWithRelationInput[]
    cursor?: DirectMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DirectMessageScalarFieldEnum | DirectMessageScalarFieldEnum[]
  }

  /**
   * User.givenFeedbacks
   */
  export type User$givenFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    where?: MatchFeedbackWhereInput
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    cursor?: MatchFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * User.receivedFeedbacks
   */
  export type User$receivedFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    where?: MatchFeedbackWhereInput
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    cursor?: MatchFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PlayerRating
   */

  export type AggregatePlayerRating = {
    _count: PlayerRatingCountAggregateOutputType | null
    _avg: PlayerRatingAvgAggregateOutputType | null
    _sum: PlayerRatingSumAggregateOutputType | null
    _min: PlayerRatingMinAggregateOutputType | null
    _max: PlayerRatingMaxAggregateOutputType | null
  }

  export type PlayerRatingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    skillRating: number | null
    skillPoints: number | null
    pointsRating: number | null
    wins: number | null
    losses: number | null
  }

  export type PlayerRatingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    skillRating: number | null
    skillPoints: number | null
    pointsRating: number | null
    wins: number | null
    losses: number | null
  }

  export type PlayerRatingMinAggregateOutputType = {
    id: number | null
    userId: number | null
    skillRating: number | null
    skillPoints: number | null
    pointsRating: number | null
    wins: number | null
    losses: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerRatingMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    skillRating: number | null
    skillPoints: number | null
    pointsRating: number | null
    wins: number | null
    losses: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerRatingCountAggregateOutputType = {
    id: number
    userId: number
    skillRating: number
    skillPoints: number
    pointsRating: number
    wins: number
    losses: number
    lastUpdated: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlayerRatingAvgAggregateInputType = {
    id?: true
    userId?: true
    skillRating?: true
    skillPoints?: true
    pointsRating?: true
    wins?: true
    losses?: true
  }

  export type PlayerRatingSumAggregateInputType = {
    id?: true
    userId?: true
    skillRating?: true
    skillPoints?: true
    pointsRating?: true
    wins?: true
    losses?: true
  }

  export type PlayerRatingMinAggregateInputType = {
    id?: true
    userId?: true
    skillRating?: true
    skillPoints?: true
    pointsRating?: true
    wins?: true
    losses?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    skillRating?: true
    skillPoints?: true
    pointsRating?: true
    wins?: true
    losses?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerRatingCountAggregateInputType = {
    id?: true
    userId?: true
    skillRating?: true
    skillPoints?: true
    pointsRating?: true
    wins?: true
    losses?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlayerRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerRating to aggregate.
     */
    where?: PlayerRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRatings to fetch.
     */
    orderBy?: PlayerRatingOrderByWithRelationInput | PlayerRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerRatings
    **/
    _count?: true | PlayerRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerRatingMaxAggregateInputType
  }

  export type GetPlayerRatingAggregateType<T extends PlayerRatingAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerRating[P]>
      : GetScalarType<T[P], AggregatePlayerRating[P]>
  }




  export type PlayerRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerRatingWhereInput
    orderBy?: PlayerRatingOrderByWithAggregationInput | PlayerRatingOrderByWithAggregationInput[]
    by: PlayerRatingScalarFieldEnum[] | PlayerRatingScalarFieldEnum
    having?: PlayerRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerRatingCountAggregateInputType | true
    _avg?: PlayerRatingAvgAggregateInputType
    _sum?: PlayerRatingSumAggregateInputType
    _min?: PlayerRatingMinAggregateInputType
    _max?: PlayerRatingMaxAggregateInputType
  }

  export type PlayerRatingGroupByOutputType = {
    id: number
    userId: number
    skillRating: number
    skillPoints: number
    pointsRating: number
    wins: number
    losses: number
    lastUpdated: Date
    createdAt: Date
    updatedAt: Date
    _count: PlayerRatingCountAggregateOutputType | null
    _avg: PlayerRatingAvgAggregateOutputType | null
    _sum: PlayerRatingSumAggregateOutputType | null
    _min: PlayerRatingMinAggregateOutputType | null
    _max: PlayerRatingMaxAggregateOutputType | null
  }

  type GetPlayerRatingGroupByPayload<T extends PlayerRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerRatingGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerRatingGroupByOutputType[P]>
        }
      >
    >


  export type PlayerRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillRating?: boolean
    skillPoints?: boolean
    pointsRating?: boolean
    wins?: boolean
    losses?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerRating"]>

  export type PlayerRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    skillRating?: boolean
    skillPoints?: boolean
    pointsRating?: boolean
    wins?: boolean
    losses?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerRating"]>

  export type PlayerRatingSelectScalar = {
    id?: boolean
    userId?: boolean
    skillRating?: boolean
    skillPoints?: boolean
    pointsRating?: boolean
    wins?: boolean
    losses?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlayerRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlayerRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlayerRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerRating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      skillRating: number
      skillPoints: number
      pointsRating: number
      wins: number
      losses: number
      lastUpdated: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playerRating"]>
    composites: {}
  }

  type PlayerRatingGetPayload<S extends boolean | null | undefined | PlayerRatingDefaultArgs> = $Result.GetResult<Prisma.$PlayerRatingPayload, S>

  type PlayerRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerRatingCountAggregateInputType | true
    }

  export interface PlayerRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerRating'], meta: { name: 'PlayerRating' } }
    /**
     * Find zero or one PlayerRating that matches the filter.
     * @param {PlayerRatingFindUniqueArgs} args - Arguments to find a PlayerRating
     * @example
     * // Get one PlayerRating
     * const playerRating = await prisma.playerRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerRatingFindUniqueArgs>(args: SelectSubset<T, PlayerRatingFindUniqueArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerRatingFindUniqueOrThrowArgs} args - Arguments to find a PlayerRating
     * @example
     * // Get one PlayerRating
     * const playerRating = await prisma.playerRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingFindFirstArgs} args - Arguments to find a PlayerRating
     * @example
     * // Get one PlayerRating
     * const playerRating = await prisma.playerRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerRatingFindFirstArgs>(args?: SelectSubset<T, PlayerRatingFindFirstArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingFindFirstOrThrowArgs} args - Arguments to find a PlayerRating
     * @example
     * // Get one PlayerRating
     * const playerRating = await prisma.playerRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerRatings
     * const playerRatings = await prisma.playerRating.findMany()
     * 
     * // Get first 10 PlayerRatings
     * const playerRatings = await prisma.playerRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerRatingWithIdOnly = await prisma.playerRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerRatingFindManyArgs>(args?: SelectSubset<T, PlayerRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerRating.
     * @param {PlayerRatingCreateArgs} args - Arguments to create a PlayerRating.
     * @example
     * // Create one PlayerRating
     * const PlayerRating = await prisma.playerRating.create({
     *   data: {
     *     // ... data to create a PlayerRating
     *   }
     * })
     * 
     */
    create<T extends PlayerRatingCreateArgs>(args: SelectSubset<T, PlayerRatingCreateArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerRatings.
     * @param {PlayerRatingCreateManyArgs} args - Arguments to create many PlayerRatings.
     * @example
     * // Create many PlayerRatings
     * const playerRating = await prisma.playerRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerRatingCreateManyArgs>(args?: SelectSubset<T, PlayerRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerRatings and returns the data saved in the database.
     * @param {PlayerRatingCreateManyAndReturnArgs} args - Arguments to create many PlayerRatings.
     * @example
     * // Create many PlayerRatings
     * const playerRating = await prisma.playerRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerRatings and only return the `id`
     * const playerRatingWithIdOnly = await prisma.playerRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlayerRating.
     * @param {PlayerRatingDeleteArgs} args - Arguments to delete one PlayerRating.
     * @example
     * // Delete one PlayerRating
     * const PlayerRating = await prisma.playerRating.delete({
     *   where: {
     *     // ... filter to delete one PlayerRating
     *   }
     * })
     * 
     */
    delete<T extends PlayerRatingDeleteArgs>(args: SelectSubset<T, PlayerRatingDeleteArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerRating.
     * @param {PlayerRatingUpdateArgs} args - Arguments to update one PlayerRating.
     * @example
     * // Update one PlayerRating
     * const playerRating = await prisma.playerRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerRatingUpdateArgs>(args: SelectSubset<T, PlayerRatingUpdateArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerRatings.
     * @param {PlayerRatingDeleteManyArgs} args - Arguments to filter PlayerRatings to delete.
     * @example
     * // Delete a few PlayerRatings
     * const { count } = await prisma.playerRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerRatingDeleteManyArgs>(args?: SelectSubset<T, PlayerRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerRatings
     * const playerRating = await prisma.playerRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerRatingUpdateManyArgs>(args: SelectSubset<T, PlayerRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerRating.
     * @param {PlayerRatingUpsertArgs} args - Arguments to update or create a PlayerRating.
     * @example
     * // Update or create a PlayerRating
     * const playerRating = await prisma.playerRating.upsert({
     *   create: {
     *     // ... data to create a PlayerRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerRating we want to update
     *   }
     * })
     */
    upsert<T extends PlayerRatingUpsertArgs>(args: SelectSubset<T, PlayerRatingUpsertArgs<ExtArgs>>): Prisma__PlayerRatingClient<$Result.GetResult<Prisma.$PlayerRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingCountArgs} args - Arguments to filter PlayerRatings to count.
     * @example
     * // Count the number of PlayerRatings
     * const count = await prisma.playerRating.count({
     *   where: {
     *     // ... the filter for the PlayerRatings we want to count
     *   }
     * })
    **/
    count<T extends PlayerRatingCountArgs>(
      args?: Subset<T, PlayerRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerRatingAggregateArgs>(args: Subset<T, PlayerRatingAggregateArgs>): Prisma.PrismaPromise<GetPlayerRatingAggregateType<T>>

    /**
     * Group by PlayerRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerRatingGroupByArgs['orderBy'] }
        : { orderBy?: PlayerRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerRating model
   */
  readonly fields: PlayerRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerRating model
   */ 
  interface PlayerRatingFieldRefs {
    readonly id: FieldRef<"PlayerRating", 'Int'>
    readonly userId: FieldRef<"PlayerRating", 'Int'>
    readonly skillRating: FieldRef<"PlayerRating", 'Float'>
    readonly skillPoints: FieldRef<"PlayerRating", 'Int'>
    readonly pointsRating: FieldRef<"PlayerRating", 'Int'>
    readonly wins: FieldRef<"PlayerRating", 'Int'>
    readonly losses: FieldRef<"PlayerRating", 'Int'>
    readonly lastUpdated: FieldRef<"PlayerRating", 'DateTime'>
    readonly createdAt: FieldRef<"PlayerRating", 'DateTime'>
    readonly updatedAt: FieldRef<"PlayerRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerRating findUnique
   */
  export type PlayerRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRating to fetch.
     */
    where: PlayerRatingWhereUniqueInput
  }

  /**
   * PlayerRating findUniqueOrThrow
   */
  export type PlayerRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRating to fetch.
     */
    where: PlayerRatingWhereUniqueInput
  }

  /**
   * PlayerRating findFirst
   */
  export type PlayerRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRating to fetch.
     */
    where?: PlayerRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRatings to fetch.
     */
    orderBy?: PlayerRatingOrderByWithRelationInput | PlayerRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerRatings.
     */
    cursor?: PlayerRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerRatings.
     */
    distinct?: PlayerRatingScalarFieldEnum | PlayerRatingScalarFieldEnum[]
  }

  /**
   * PlayerRating findFirstOrThrow
   */
  export type PlayerRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRating to fetch.
     */
    where?: PlayerRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRatings to fetch.
     */
    orderBy?: PlayerRatingOrderByWithRelationInput | PlayerRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerRatings.
     */
    cursor?: PlayerRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerRatings.
     */
    distinct?: PlayerRatingScalarFieldEnum | PlayerRatingScalarFieldEnum[]
  }

  /**
   * PlayerRating findMany
   */
  export type PlayerRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter, which PlayerRatings to fetch.
     */
    where?: PlayerRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerRatings to fetch.
     */
    orderBy?: PlayerRatingOrderByWithRelationInput | PlayerRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerRatings.
     */
    cursor?: PlayerRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerRatings.
     */
    skip?: number
    distinct?: PlayerRatingScalarFieldEnum | PlayerRatingScalarFieldEnum[]
  }

  /**
   * PlayerRating create
   */
  export type PlayerRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerRating.
     */
    data: XOR<PlayerRatingCreateInput, PlayerRatingUncheckedCreateInput>
  }

  /**
   * PlayerRating createMany
   */
  export type PlayerRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerRatings.
     */
    data: PlayerRatingCreateManyInput | PlayerRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerRating createManyAndReturn
   */
  export type PlayerRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlayerRatings.
     */
    data: PlayerRatingCreateManyInput | PlayerRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerRating update
   */
  export type PlayerRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerRating.
     */
    data: XOR<PlayerRatingUpdateInput, PlayerRatingUncheckedUpdateInput>
    /**
     * Choose, which PlayerRating to update.
     */
    where: PlayerRatingWhereUniqueInput
  }

  /**
   * PlayerRating updateMany
   */
  export type PlayerRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerRatings.
     */
    data: XOR<PlayerRatingUpdateManyMutationInput, PlayerRatingUncheckedUpdateManyInput>
    /**
     * Filter which PlayerRatings to update
     */
    where?: PlayerRatingWhereInput
  }

  /**
   * PlayerRating upsert
   */
  export type PlayerRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerRating to update in case it exists.
     */
    where: PlayerRatingWhereUniqueInput
    /**
     * In case the PlayerRating found by the `where` argument doesn't exist, create a new PlayerRating with this data.
     */
    create: XOR<PlayerRatingCreateInput, PlayerRatingUncheckedCreateInput>
    /**
     * In case the PlayerRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerRatingUpdateInput, PlayerRatingUncheckedUpdateInput>
  }

  /**
   * PlayerRating delete
   */
  export type PlayerRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
    /**
     * Filter which PlayerRating to delete.
     */
    where: PlayerRatingWhereUniqueInput
  }

  /**
   * PlayerRating deleteMany
   */
  export type PlayerRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerRatings to delete
     */
    where?: PlayerRatingWhereInput
  }

  /**
   * PlayerRating without action
   */
  export type PlayerRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerRating
     */
    select?: PlayerRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerRatingInclude<ExtArgs> | null
  }


  /**
   * Model RatingHistory
   */

  export type AggregateRatingHistory = {
    _count: RatingHistoryCountAggregateOutputType | null
    _avg: RatingHistoryAvgAggregateOutputType | null
    _sum: RatingHistorySumAggregateOutputType | null
    _min: RatingHistoryMinAggregateOutputType | null
    _max: RatingHistoryMaxAggregateOutputType | null
  }

  export type RatingHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    seasonId: number | null
    skillPointsBefore: number | null
    skillPointsAfter: number | null
    pointsRatingBefore: number | null
    pointsRatingAfter: number | null
    opponentId: number | null
    opponentSkillPoints: number | null
    pointsEarned: number | null
  }

  export type RatingHistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    seasonId: number | null
    skillPointsBefore: number | null
    skillPointsAfter: number | null
    pointsRatingBefore: number | null
    pointsRatingAfter: number | null
    opponentId: number | null
    opponentSkillPoints: number | null
    pointsEarned: number | null
  }

  export type RatingHistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    seasonId: number | null
    skillPointsBefore: number | null
    skillPointsAfter: number | null
    pointsRatingBefore: number | null
    pointsRatingAfter: number | null
    isWin: boolean | null
    opponentId: number | null
    opponentSkillPoints: number | null
    pointsEarned: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type RatingHistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    matchId: number | null
    seasonId: number | null
    skillPointsBefore: number | null
    skillPointsAfter: number | null
    pointsRatingBefore: number | null
    pointsRatingAfter: number | null
    isWin: boolean | null
    opponentId: number | null
    opponentSkillPoints: number | null
    pointsEarned: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type RatingHistoryCountAggregateOutputType = {
    id: number
    userId: number
    matchId: number
    seasonId: number
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: number
    opponentId: number
    opponentSkillPoints: number
    pointsEarned: number
    reason: number
    createdAt: number
    _all: number
  }


  export type RatingHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    seasonId?: true
    skillPointsBefore?: true
    skillPointsAfter?: true
    pointsRatingBefore?: true
    pointsRatingAfter?: true
    opponentId?: true
    opponentSkillPoints?: true
    pointsEarned?: true
  }

  export type RatingHistorySumAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    seasonId?: true
    skillPointsBefore?: true
    skillPointsAfter?: true
    pointsRatingBefore?: true
    pointsRatingAfter?: true
    opponentId?: true
    opponentSkillPoints?: true
    pointsEarned?: true
  }

  export type RatingHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    seasonId?: true
    skillPointsBefore?: true
    skillPointsAfter?: true
    pointsRatingBefore?: true
    pointsRatingAfter?: true
    isWin?: true
    opponentId?: true
    opponentSkillPoints?: true
    pointsEarned?: true
    reason?: true
    createdAt?: true
  }

  export type RatingHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    seasonId?: true
    skillPointsBefore?: true
    skillPointsAfter?: true
    pointsRatingBefore?: true
    pointsRatingAfter?: true
    isWin?: true
    opponentId?: true
    opponentSkillPoints?: true
    pointsEarned?: true
    reason?: true
    createdAt?: true
  }

  export type RatingHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    matchId?: true
    seasonId?: true
    skillPointsBefore?: true
    skillPointsAfter?: true
    pointsRatingBefore?: true
    pointsRatingAfter?: true
    isWin?: true
    opponentId?: true
    opponentSkillPoints?: true
    pointsEarned?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type RatingHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingHistory to aggregate.
     */
    where?: RatingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingHistories to fetch.
     */
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RatingHistories
    **/
    _count?: true | RatingHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingHistoryMaxAggregateInputType
  }

  export type GetRatingHistoryAggregateType<T extends RatingHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRatingHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRatingHistory[P]>
      : GetScalarType<T[P], AggregateRatingHistory[P]>
  }




  export type RatingHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingHistoryWhereInput
    orderBy?: RatingHistoryOrderByWithAggregationInput | RatingHistoryOrderByWithAggregationInput[]
    by: RatingHistoryScalarFieldEnum[] | RatingHistoryScalarFieldEnum
    having?: RatingHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingHistoryCountAggregateInputType | true
    _avg?: RatingHistoryAvgAggregateInputType
    _sum?: RatingHistorySumAggregateInputType
    _min?: RatingHistoryMinAggregateInputType
    _max?: RatingHistoryMaxAggregateInputType
  }

  export type RatingHistoryGroupByOutputType = {
    id: number
    userId: number
    matchId: number | null
    seasonId: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId: number | null
    opponentSkillPoints: number | null
    pointsEarned: number
    reason: string
    createdAt: Date
    _count: RatingHistoryCountAggregateOutputType | null
    _avg: RatingHistoryAvgAggregateOutputType | null
    _sum: RatingHistorySumAggregateOutputType | null
    _min: RatingHistoryMinAggregateOutputType | null
    _max: RatingHistoryMaxAggregateOutputType | null
  }

  type GetRatingHistoryGroupByPayload<T extends RatingHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], RatingHistoryGroupByOutputType[P]>
        }
      >
    >


  export type RatingHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    matchId?: boolean
    seasonId?: boolean
    skillPointsBefore?: boolean
    skillPointsAfter?: boolean
    pointsRatingBefore?: boolean
    pointsRatingAfter?: boolean
    isWin?: boolean
    opponentId?: boolean
    opponentSkillPoints?: boolean
    pointsEarned?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | RatingHistory$matchArgs<ExtArgs>
    season?: boolean | RatingHistory$seasonArgs<ExtArgs>
    opponent?: boolean | RatingHistory$opponentArgs<ExtArgs>
  }, ExtArgs["result"]["ratingHistory"]>

  export type RatingHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    matchId?: boolean
    seasonId?: boolean
    skillPointsBefore?: boolean
    skillPointsAfter?: boolean
    pointsRatingBefore?: boolean
    pointsRatingAfter?: boolean
    isWin?: boolean
    opponentId?: boolean
    opponentSkillPoints?: boolean
    pointsEarned?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | RatingHistory$matchArgs<ExtArgs>
    season?: boolean | RatingHistory$seasonArgs<ExtArgs>
    opponent?: boolean | RatingHistory$opponentArgs<ExtArgs>
  }, ExtArgs["result"]["ratingHistory"]>

  export type RatingHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    matchId?: boolean
    seasonId?: boolean
    skillPointsBefore?: boolean
    skillPointsAfter?: boolean
    pointsRatingBefore?: boolean
    pointsRatingAfter?: boolean
    isWin?: boolean
    opponentId?: boolean
    opponentSkillPoints?: boolean
    pointsEarned?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type RatingHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | RatingHistory$matchArgs<ExtArgs>
    season?: boolean | RatingHistory$seasonArgs<ExtArgs>
    opponent?: boolean | RatingHistory$opponentArgs<ExtArgs>
  }
  export type RatingHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    match?: boolean | RatingHistory$matchArgs<ExtArgs>
    season?: boolean | RatingHistory$seasonArgs<ExtArgs>
    opponent?: boolean | RatingHistory$opponentArgs<ExtArgs>
  }

  export type $RatingHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RatingHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      match: Prisma.$MatchPayload<ExtArgs> | null
      season: Prisma.$RatingSeasonPayload<ExtArgs> | null
      opponent: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      matchId: number | null
      seasonId: number | null
      skillPointsBefore: number
      skillPointsAfter: number
      pointsRatingBefore: number
      pointsRatingAfter: number
      isWin: boolean
      opponentId: number | null
      opponentSkillPoints: number | null
      pointsEarned: number
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["ratingHistory"]>
    composites: {}
  }

  type RatingHistoryGetPayload<S extends boolean | null | undefined | RatingHistoryDefaultArgs> = $Result.GetResult<Prisma.$RatingHistoryPayload, S>

  type RatingHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingHistoryCountAggregateInputType | true
    }

  export interface RatingHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RatingHistory'], meta: { name: 'RatingHistory' } }
    /**
     * Find zero or one RatingHistory that matches the filter.
     * @param {RatingHistoryFindUniqueArgs} args - Arguments to find a RatingHistory
     * @example
     * // Get one RatingHistory
     * const ratingHistory = await prisma.ratingHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingHistoryFindUniqueArgs>(args: SelectSubset<T, RatingHistoryFindUniqueArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RatingHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingHistoryFindUniqueOrThrowArgs} args - Arguments to find a RatingHistory
     * @example
     * // Get one RatingHistory
     * const ratingHistory = await prisma.ratingHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RatingHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryFindFirstArgs} args - Arguments to find a RatingHistory
     * @example
     * // Get one RatingHistory
     * const ratingHistory = await prisma.ratingHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingHistoryFindFirstArgs>(args?: SelectSubset<T, RatingHistoryFindFirstArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RatingHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryFindFirstOrThrowArgs} args - Arguments to find a RatingHistory
     * @example
     * // Get one RatingHistory
     * const ratingHistory = await prisma.ratingHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RatingHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RatingHistories
     * const ratingHistories = await prisma.ratingHistory.findMany()
     * 
     * // Get first 10 RatingHistories
     * const ratingHistories = await prisma.ratingHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingHistoryWithIdOnly = await prisma.ratingHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingHistoryFindManyArgs>(args?: SelectSubset<T, RatingHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RatingHistory.
     * @param {RatingHistoryCreateArgs} args - Arguments to create a RatingHistory.
     * @example
     * // Create one RatingHistory
     * const RatingHistory = await prisma.ratingHistory.create({
     *   data: {
     *     // ... data to create a RatingHistory
     *   }
     * })
     * 
     */
    create<T extends RatingHistoryCreateArgs>(args: SelectSubset<T, RatingHistoryCreateArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RatingHistories.
     * @param {RatingHistoryCreateManyArgs} args - Arguments to create many RatingHistories.
     * @example
     * // Create many RatingHistories
     * const ratingHistory = await prisma.ratingHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingHistoryCreateManyArgs>(args?: SelectSubset<T, RatingHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RatingHistories and returns the data saved in the database.
     * @param {RatingHistoryCreateManyAndReturnArgs} args - Arguments to create many RatingHistories.
     * @example
     * // Create many RatingHistories
     * const ratingHistory = await prisma.ratingHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RatingHistories and only return the `id`
     * const ratingHistoryWithIdOnly = await prisma.ratingHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RatingHistory.
     * @param {RatingHistoryDeleteArgs} args - Arguments to delete one RatingHistory.
     * @example
     * // Delete one RatingHistory
     * const RatingHistory = await prisma.ratingHistory.delete({
     *   where: {
     *     // ... filter to delete one RatingHistory
     *   }
     * })
     * 
     */
    delete<T extends RatingHistoryDeleteArgs>(args: SelectSubset<T, RatingHistoryDeleteArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RatingHistory.
     * @param {RatingHistoryUpdateArgs} args - Arguments to update one RatingHistory.
     * @example
     * // Update one RatingHistory
     * const ratingHistory = await prisma.ratingHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingHistoryUpdateArgs>(args: SelectSubset<T, RatingHistoryUpdateArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RatingHistories.
     * @param {RatingHistoryDeleteManyArgs} args - Arguments to filter RatingHistories to delete.
     * @example
     * // Delete a few RatingHistories
     * const { count } = await prisma.ratingHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingHistoryDeleteManyArgs>(args?: SelectSubset<T, RatingHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RatingHistories
     * const ratingHistory = await prisma.ratingHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingHistoryUpdateManyArgs>(args: SelectSubset<T, RatingHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RatingHistory.
     * @param {RatingHistoryUpsertArgs} args - Arguments to update or create a RatingHistory.
     * @example
     * // Update or create a RatingHistory
     * const ratingHistory = await prisma.ratingHistory.upsert({
     *   create: {
     *     // ... data to create a RatingHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RatingHistory we want to update
     *   }
     * })
     */
    upsert<T extends RatingHistoryUpsertArgs>(args: SelectSubset<T, RatingHistoryUpsertArgs<ExtArgs>>): Prisma__RatingHistoryClient<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RatingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryCountArgs} args - Arguments to filter RatingHistories to count.
     * @example
     * // Count the number of RatingHistories
     * const count = await prisma.ratingHistory.count({
     *   where: {
     *     // ... the filter for the RatingHistories we want to count
     *   }
     * })
    **/
    count<T extends RatingHistoryCountArgs>(
      args?: Subset<T, RatingHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RatingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingHistoryAggregateArgs>(args: Subset<T, RatingHistoryAggregateArgs>): Prisma.PrismaPromise<GetRatingHistoryAggregateType<T>>

    /**
     * Group by RatingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingHistoryGroupByArgs['orderBy'] }
        : { orderBy?: RatingHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RatingHistory model
   */
  readonly fields: RatingHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RatingHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    match<T extends RatingHistory$matchArgs<ExtArgs> = {}>(args?: Subset<T, RatingHistory$matchArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    season<T extends RatingHistory$seasonArgs<ExtArgs> = {}>(args?: Subset<T, RatingHistory$seasonArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    opponent<T extends RatingHistory$opponentArgs<ExtArgs> = {}>(args?: Subset<T, RatingHistory$opponentArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RatingHistory model
   */ 
  interface RatingHistoryFieldRefs {
    readonly id: FieldRef<"RatingHistory", 'Int'>
    readonly userId: FieldRef<"RatingHistory", 'Int'>
    readonly matchId: FieldRef<"RatingHistory", 'Int'>
    readonly seasonId: FieldRef<"RatingHistory", 'Int'>
    readonly skillPointsBefore: FieldRef<"RatingHistory", 'Int'>
    readonly skillPointsAfter: FieldRef<"RatingHistory", 'Int'>
    readonly pointsRatingBefore: FieldRef<"RatingHistory", 'Int'>
    readonly pointsRatingAfter: FieldRef<"RatingHistory", 'Int'>
    readonly isWin: FieldRef<"RatingHistory", 'Boolean'>
    readonly opponentId: FieldRef<"RatingHistory", 'Int'>
    readonly opponentSkillPoints: FieldRef<"RatingHistory", 'Int'>
    readonly pointsEarned: FieldRef<"RatingHistory", 'Int'>
    readonly reason: FieldRef<"RatingHistory", 'String'>
    readonly createdAt: FieldRef<"RatingHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RatingHistory findUnique
   */
  export type RatingHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingHistory to fetch.
     */
    where: RatingHistoryWhereUniqueInput
  }

  /**
   * RatingHistory findUniqueOrThrow
   */
  export type RatingHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingHistory to fetch.
     */
    where: RatingHistoryWhereUniqueInput
  }

  /**
   * RatingHistory findFirst
   */
  export type RatingHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingHistory to fetch.
     */
    where?: RatingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingHistories to fetch.
     */
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingHistories.
     */
    cursor?: RatingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingHistories.
     */
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * RatingHistory findFirstOrThrow
   */
  export type RatingHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingHistory to fetch.
     */
    where?: RatingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingHistories to fetch.
     */
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingHistories.
     */
    cursor?: RatingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingHistories.
     */
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * RatingHistory findMany
   */
  export type RatingHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingHistories to fetch.
     */
    where?: RatingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingHistories to fetch.
     */
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RatingHistories.
     */
    cursor?: RatingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingHistories.
     */
    skip?: number
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * RatingHistory create
   */
  export type RatingHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a RatingHistory.
     */
    data: XOR<RatingHistoryCreateInput, RatingHistoryUncheckedCreateInput>
  }

  /**
   * RatingHistory createMany
   */
  export type RatingHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RatingHistories.
     */
    data: RatingHistoryCreateManyInput | RatingHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RatingHistory createManyAndReturn
   */
  export type RatingHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RatingHistories.
     */
    data: RatingHistoryCreateManyInput | RatingHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RatingHistory update
   */
  export type RatingHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a RatingHistory.
     */
    data: XOR<RatingHistoryUpdateInput, RatingHistoryUncheckedUpdateInput>
    /**
     * Choose, which RatingHistory to update.
     */
    where: RatingHistoryWhereUniqueInput
  }

  /**
   * RatingHistory updateMany
   */
  export type RatingHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RatingHistories.
     */
    data: XOR<RatingHistoryUpdateManyMutationInput, RatingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which RatingHistories to update
     */
    where?: RatingHistoryWhereInput
  }

  /**
   * RatingHistory upsert
   */
  export type RatingHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the RatingHistory to update in case it exists.
     */
    where: RatingHistoryWhereUniqueInput
    /**
     * In case the RatingHistory found by the `where` argument doesn't exist, create a new RatingHistory with this data.
     */
    create: XOR<RatingHistoryCreateInput, RatingHistoryUncheckedCreateInput>
    /**
     * In case the RatingHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingHistoryUpdateInput, RatingHistoryUncheckedUpdateInput>
  }

  /**
   * RatingHistory delete
   */
  export type RatingHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    /**
     * Filter which RatingHistory to delete.
     */
    where: RatingHistoryWhereUniqueInput
  }

  /**
   * RatingHistory deleteMany
   */
  export type RatingHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingHistories to delete
     */
    where?: RatingHistoryWhereInput
  }

  /**
   * RatingHistory.match
   */
  export type RatingHistory$matchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
  }

  /**
   * RatingHistory.season
   */
  export type RatingHistory$seasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    where?: RatingSeasonWhereInput
  }

  /**
   * RatingHistory.opponent
   */
  export type RatingHistory$opponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RatingHistory without action
   */
  export type RatingHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
  }


  /**
   * Model RatingSeason
   */

  export type AggregateRatingSeason = {
    _count: RatingSeasonCountAggregateOutputType | null
    _avg: RatingSeasonAvgAggregateOutputType | null
    _sum: RatingSeasonSumAggregateOutputType | null
    _min: RatingSeasonMinAggregateOutputType | null
    _max: RatingSeasonMaxAggregateOutputType | null
  }

  export type RatingSeasonAvgAggregateOutputType = {
    id: number | null
  }

  export type RatingSeasonSumAggregateOutputType = {
    id: number | null
  }

  export type RatingSeasonMinAggregateOutputType = {
    id: number | null
    title: string | null
    startDate: Date | null
    endDate: Date | null
    isCurrent: boolean | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingSeasonMaxAggregateOutputType = {
    id: number | null
    title: string | null
    startDate: Date | null
    endDate: Date | null
    isCurrent: boolean | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingSeasonCountAggregateOutputType = {
    id: number
    title: number
    startDate: number
    endDate: number
    isCurrent: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingSeasonAvgAggregateInputType = {
    id?: true
  }

  export type RatingSeasonSumAggregateInputType = {
    id?: true
  }

  export type RatingSeasonMinAggregateInputType = {
    id?: true
    title?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingSeasonMaxAggregateInputType = {
    id?: true
    title?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingSeasonCountAggregateInputType = {
    id?: true
    title?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingSeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingSeason to aggregate.
     */
    where?: RatingSeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingSeasons to fetch.
     */
    orderBy?: RatingSeasonOrderByWithRelationInput | RatingSeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingSeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingSeasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingSeasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RatingSeasons
    **/
    _count?: true | RatingSeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingSeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingSeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingSeasonMaxAggregateInputType
  }

  export type GetRatingSeasonAggregateType<T extends RatingSeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateRatingSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRatingSeason[P]>
      : GetScalarType<T[P], AggregateRatingSeason[P]>
  }




  export type RatingSeasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingSeasonWhereInput
    orderBy?: RatingSeasonOrderByWithAggregationInput | RatingSeasonOrderByWithAggregationInput[]
    by: RatingSeasonScalarFieldEnum[] | RatingSeasonScalarFieldEnum
    having?: RatingSeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingSeasonCountAggregateInputType | true
    _avg?: RatingSeasonAvgAggregateInputType
    _sum?: RatingSeasonSumAggregateInputType
    _min?: RatingSeasonMinAggregateInputType
    _max?: RatingSeasonMaxAggregateInputType
  }

  export type RatingSeasonGroupByOutputType = {
    id: number
    title: string
    startDate: Date
    endDate: Date
    isCurrent: boolean
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: RatingSeasonCountAggregateOutputType | null
    _avg: RatingSeasonAvgAggregateOutputType | null
    _sum: RatingSeasonSumAggregateOutputType | null
    _min: RatingSeasonMinAggregateOutputType | null
    _max: RatingSeasonMaxAggregateOutputType | null
  }

  type GetRatingSeasonGroupByPayload<T extends RatingSeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingSeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingSeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingSeasonGroupByOutputType[P]>
            : GetScalarType<T[P], RatingSeasonGroupByOutputType[P]>
        }
      >
    >


  export type RatingSeasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    isCurrent?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    history?: boolean | RatingSeason$historyArgs<ExtArgs>
    _count?: boolean | RatingSeasonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingSeason"]>

  export type RatingSeasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    isCurrent?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ratingSeason"]>

  export type RatingSeasonSelectScalar = {
    id?: boolean
    title?: boolean
    startDate?: boolean
    endDate?: boolean
    isCurrent?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RatingSeasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | RatingSeason$historyArgs<ExtArgs>
    _count?: boolean | RatingSeasonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RatingSeasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RatingSeasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RatingSeason"
    objects: {
      history: Prisma.$RatingHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      startDate: Date
      endDate: Date
      isCurrent: boolean
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ratingSeason"]>
    composites: {}
  }

  type RatingSeasonGetPayload<S extends boolean | null | undefined | RatingSeasonDefaultArgs> = $Result.GetResult<Prisma.$RatingSeasonPayload, S>

  type RatingSeasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingSeasonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingSeasonCountAggregateInputType | true
    }

  export interface RatingSeasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RatingSeason'], meta: { name: 'RatingSeason' } }
    /**
     * Find zero or one RatingSeason that matches the filter.
     * @param {RatingSeasonFindUniqueArgs} args - Arguments to find a RatingSeason
     * @example
     * // Get one RatingSeason
     * const ratingSeason = await prisma.ratingSeason.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingSeasonFindUniqueArgs>(args: SelectSubset<T, RatingSeasonFindUniqueArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RatingSeason that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingSeasonFindUniqueOrThrowArgs} args - Arguments to find a RatingSeason
     * @example
     * // Get one RatingSeason
     * const ratingSeason = await prisma.ratingSeason.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingSeasonFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingSeasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RatingSeason that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonFindFirstArgs} args - Arguments to find a RatingSeason
     * @example
     * // Get one RatingSeason
     * const ratingSeason = await prisma.ratingSeason.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingSeasonFindFirstArgs>(args?: SelectSubset<T, RatingSeasonFindFirstArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RatingSeason that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonFindFirstOrThrowArgs} args - Arguments to find a RatingSeason
     * @example
     * // Get one RatingSeason
     * const ratingSeason = await prisma.ratingSeason.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingSeasonFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingSeasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RatingSeasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RatingSeasons
     * const ratingSeasons = await prisma.ratingSeason.findMany()
     * 
     * // Get first 10 RatingSeasons
     * const ratingSeasons = await prisma.ratingSeason.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingSeasonWithIdOnly = await prisma.ratingSeason.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingSeasonFindManyArgs>(args?: SelectSubset<T, RatingSeasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RatingSeason.
     * @param {RatingSeasonCreateArgs} args - Arguments to create a RatingSeason.
     * @example
     * // Create one RatingSeason
     * const RatingSeason = await prisma.ratingSeason.create({
     *   data: {
     *     // ... data to create a RatingSeason
     *   }
     * })
     * 
     */
    create<T extends RatingSeasonCreateArgs>(args: SelectSubset<T, RatingSeasonCreateArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RatingSeasons.
     * @param {RatingSeasonCreateManyArgs} args - Arguments to create many RatingSeasons.
     * @example
     * // Create many RatingSeasons
     * const ratingSeason = await prisma.ratingSeason.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingSeasonCreateManyArgs>(args?: SelectSubset<T, RatingSeasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RatingSeasons and returns the data saved in the database.
     * @param {RatingSeasonCreateManyAndReturnArgs} args - Arguments to create many RatingSeasons.
     * @example
     * // Create many RatingSeasons
     * const ratingSeason = await prisma.ratingSeason.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RatingSeasons and only return the `id`
     * const ratingSeasonWithIdOnly = await prisma.ratingSeason.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingSeasonCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingSeasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RatingSeason.
     * @param {RatingSeasonDeleteArgs} args - Arguments to delete one RatingSeason.
     * @example
     * // Delete one RatingSeason
     * const RatingSeason = await prisma.ratingSeason.delete({
     *   where: {
     *     // ... filter to delete one RatingSeason
     *   }
     * })
     * 
     */
    delete<T extends RatingSeasonDeleteArgs>(args: SelectSubset<T, RatingSeasonDeleteArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RatingSeason.
     * @param {RatingSeasonUpdateArgs} args - Arguments to update one RatingSeason.
     * @example
     * // Update one RatingSeason
     * const ratingSeason = await prisma.ratingSeason.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingSeasonUpdateArgs>(args: SelectSubset<T, RatingSeasonUpdateArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RatingSeasons.
     * @param {RatingSeasonDeleteManyArgs} args - Arguments to filter RatingSeasons to delete.
     * @example
     * // Delete a few RatingSeasons
     * const { count } = await prisma.ratingSeason.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingSeasonDeleteManyArgs>(args?: SelectSubset<T, RatingSeasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingSeasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RatingSeasons
     * const ratingSeason = await prisma.ratingSeason.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingSeasonUpdateManyArgs>(args: SelectSubset<T, RatingSeasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RatingSeason.
     * @param {RatingSeasonUpsertArgs} args - Arguments to update or create a RatingSeason.
     * @example
     * // Update or create a RatingSeason
     * const ratingSeason = await prisma.ratingSeason.upsert({
     *   create: {
     *     // ... data to create a RatingSeason
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RatingSeason we want to update
     *   }
     * })
     */
    upsert<T extends RatingSeasonUpsertArgs>(args: SelectSubset<T, RatingSeasonUpsertArgs<ExtArgs>>): Prisma__RatingSeasonClient<$Result.GetResult<Prisma.$RatingSeasonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RatingSeasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonCountArgs} args - Arguments to filter RatingSeasons to count.
     * @example
     * // Count the number of RatingSeasons
     * const count = await prisma.ratingSeason.count({
     *   where: {
     *     // ... the filter for the RatingSeasons we want to count
     *   }
     * })
    **/
    count<T extends RatingSeasonCountArgs>(
      args?: Subset<T, RatingSeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingSeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RatingSeason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingSeasonAggregateArgs>(args: Subset<T, RatingSeasonAggregateArgs>): Prisma.PrismaPromise<GetRatingSeasonAggregateType<T>>

    /**
     * Group by RatingSeason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingSeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingSeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingSeasonGroupByArgs['orderBy'] }
        : { orderBy?: RatingSeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingSeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RatingSeason model
   */
  readonly fields: RatingSeasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RatingSeason.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingSeasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    history<T extends RatingSeason$historyArgs<ExtArgs> = {}>(args?: Subset<T, RatingSeason$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RatingSeason model
   */ 
  interface RatingSeasonFieldRefs {
    readonly id: FieldRef<"RatingSeason", 'Int'>
    readonly title: FieldRef<"RatingSeason", 'String'>
    readonly startDate: FieldRef<"RatingSeason", 'DateTime'>
    readonly endDate: FieldRef<"RatingSeason", 'DateTime'>
    readonly isCurrent: FieldRef<"RatingSeason", 'Boolean'>
    readonly description: FieldRef<"RatingSeason", 'String'>
    readonly createdAt: FieldRef<"RatingSeason", 'DateTime'>
    readonly updatedAt: FieldRef<"RatingSeason", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RatingSeason findUnique
   */
  export type RatingSeasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter, which RatingSeason to fetch.
     */
    where: RatingSeasonWhereUniqueInput
  }

  /**
   * RatingSeason findUniqueOrThrow
   */
  export type RatingSeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter, which RatingSeason to fetch.
     */
    where: RatingSeasonWhereUniqueInput
  }

  /**
   * RatingSeason findFirst
   */
  export type RatingSeasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter, which RatingSeason to fetch.
     */
    where?: RatingSeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingSeasons to fetch.
     */
    orderBy?: RatingSeasonOrderByWithRelationInput | RatingSeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingSeasons.
     */
    cursor?: RatingSeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingSeasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingSeasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingSeasons.
     */
    distinct?: RatingSeasonScalarFieldEnum | RatingSeasonScalarFieldEnum[]
  }

  /**
   * RatingSeason findFirstOrThrow
   */
  export type RatingSeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter, which RatingSeason to fetch.
     */
    where?: RatingSeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingSeasons to fetch.
     */
    orderBy?: RatingSeasonOrderByWithRelationInput | RatingSeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingSeasons.
     */
    cursor?: RatingSeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingSeasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingSeasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingSeasons.
     */
    distinct?: RatingSeasonScalarFieldEnum | RatingSeasonScalarFieldEnum[]
  }

  /**
   * RatingSeason findMany
   */
  export type RatingSeasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter, which RatingSeasons to fetch.
     */
    where?: RatingSeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingSeasons to fetch.
     */
    orderBy?: RatingSeasonOrderByWithRelationInput | RatingSeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RatingSeasons.
     */
    cursor?: RatingSeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingSeasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingSeasons.
     */
    skip?: number
    distinct?: RatingSeasonScalarFieldEnum | RatingSeasonScalarFieldEnum[]
  }

  /**
   * RatingSeason create
   */
  export type RatingSeasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a RatingSeason.
     */
    data: XOR<RatingSeasonCreateInput, RatingSeasonUncheckedCreateInput>
  }

  /**
   * RatingSeason createMany
   */
  export type RatingSeasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RatingSeasons.
     */
    data: RatingSeasonCreateManyInput | RatingSeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RatingSeason createManyAndReturn
   */
  export type RatingSeasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RatingSeasons.
     */
    data: RatingSeasonCreateManyInput | RatingSeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RatingSeason update
   */
  export type RatingSeasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a RatingSeason.
     */
    data: XOR<RatingSeasonUpdateInput, RatingSeasonUncheckedUpdateInput>
    /**
     * Choose, which RatingSeason to update.
     */
    where: RatingSeasonWhereUniqueInput
  }

  /**
   * RatingSeason updateMany
   */
  export type RatingSeasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RatingSeasons.
     */
    data: XOR<RatingSeasonUpdateManyMutationInput, RatingSeasonUncheckedUpdateManyInput>
    /**
     * Filter which RatingSeasons to update
     */
    where?: RatingSeasonWhereInput
  }

  /**
   * RatingSeason upsert
   */
  export type RatingSeasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the RatingSeason to update in case it exists.
     */
    where: RatingSeasonWhereUniqueInput
    /**
     * In case the RatingSeason found by the `where` argument doesn't exist, create a new RatingSeason with this data.
     */
    create: XOR<RatingSeasonCreateInput, RatingSeasonUncheckedCreateInput>
    /**
     * In case the RatingSeason was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingSeasonUpdateInput, RatingSeasonUncheckedUpdateInput>
  }

  /**
   * RatingSeason delete
   */
  export type RatingSeasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
    /**
     * Filter which RatingSeason to delete.
     */
    where: RatingSeasonWhereUniqueInput
  }

  /**
   * RatingSeason deleteMany
   */
  export type RatingSeasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingSeasons to delete
     */
    where?: RatingSeasonWhereInput
  }

  /**
   * RatingSeason.history
   */
  export type RatingSeason$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    where?: RatingHistoryWhereInput
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    cursor?: RatingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * RatingSeason without action
   */
  export type RatingSeasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingSeason
     */
    select?: RatingSeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingSeasonInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserAchievementSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    awardedAt: Date | null
    createdAt: Date | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    awardedAt: Date | null
    createdAt: Date | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    awardedAt: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type UserAchievementAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserAchievementSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserAchievementMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    awardedAt?: true
    createdAt?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    awardedAt?: true
    createdAt?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    awardedAt?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _avg?: UserAchievementAvgAggregateInputType
    _sum?: UserAchievementSumAggregateInputType
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: number
    userId: number
    code: string
    awardedAt: Date
    metadata: JsonValue | null
    createdAt: Date
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    awardedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    awardedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    awardedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      code: string
      awardedAt: Date
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */ 
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'Int'>
    readonly userId: FieldRef<"UserAchievement", 'Int'>
    readonly code: FieldRef<"UserAchievement", 'String'>
    readonly awardedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly metadata: FieldRef<"UserAchievement", 'Json'>
    readonly createdAt: FieldRef<"UserAchievement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Model ReferralStats
   */

  export type AggregateReferralStats = {
    _count: ReferralStatsCountAggregateOutputType | null
    _avg: ReferralStatsAvgAggregateOutputType | null
    _sum: ReferralStatsSumAggregateOutputType | null
    _min: ReferralStatsMinAggregateOutputType | null
    _max: ReferralStatsMaxAggregateOutputType | null
  }

  export type ReferralStatsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalInvited: number | null
    activeInvited: number | null
    registeredToday: number | null
    registeredThisWeek: number | null
    registeredThisMonth: number | null
    bonusPointsEarned: number | null
  }

  export type ReferralStatsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalInvited: number | null
    activeInvited: number | null
    registeredToday: number | null
    registeredThisWeek: number | null
    registeredThisMonth: number | null
    bonusPointsEarned: number | null
  }

  export type ReferralStatsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    totalInvited: number | null
    activeInvited: number | null
    registeredToday: number | null
    registeredThisWeek: number | null
    registeredThisMonth: number | null
    bonusPointsEarned: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralStatsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    totalInvited: number | null
    activeInvited: number | null
    registeredToday: number | null
    registeredThisWeek: number | null
    registeredThisMonth: number | null
    bonusPointsEarned: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralStatsCountAggregateOutputType = {
    id: number
    userId: number
    totalInvited: number
    activeInvited: number
    registeredToday: number
    registeredThisWeek: number
    registeredThisMonth: number
    achievementsEarned: number
    bonusPointsEarned: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReferralStatsAvgAggregateInputType = {
    id?: true
    userId?: true
    totalInvited?: true
    activeInvited?: true
    registeredToday?: true
    registeredThisWeek?: true
    registeredThisMonth?: true
    bonusPointsEarned?: true
  }

  export type ReferralStatsSumAggregateInputType = {
    id?: true
    userId?: true
    totalInvited?: true
    activeInvited?: true
    registeredToday?: true
    registeredThisWeek?: true
    registeredThisMonth?: true
    bonusPointsEarned?: true
  }

  export type ReferralStatsMinAggregateInputType = {
    id?: true
    userId?: true
    totalInvited?: true
    activeInvited?: true
    registeredToday?: true
    registeredThisWeek?: true
    registeredThisMonth?: true
    bonusPointsEarned?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralStatsMaxAggregateInputType = {
    id?: true
    userId?: true
    totalInvited?: true
    activeInvited?: true
    registeredToday?: true
    registeredThisWeek?: true
    registeredThisMonth?: true
    bonusPointsEarned?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralStatsCountAggregateInputType = {
    id?: true
    userId?: true
    totalInvited?: true
    activeInvited?: true
    registeredToday?: true
    registeredThisWeek?: true
    registeredThisMonth?: true
    achievementsEarned?: true
    bonusPointsEarned?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReferralStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralStats to aggregate.
     */
    where?: ReferralStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralStats to fetch.
     */
    orderBy?: ReferralStatsOrderByWithRelationInput | ReferralStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralStats
    **/
    _count?: true | ReferralStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralStatsMaxAggregateInputType
  }

  export type GetReferralStatsAggregateType<T extends ReferralStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralStats[P]>
      : GetScalarType<T[P], AggregateReferralStats[P]>
  }




  export type ReferralStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralStatsWhereInput
    orderBy?: ReferralStatsOrderByWithAggregationInput | ReferralStatsOrderByWithAggregationInput[]
    by: ReferralStatsScalarFieldEnum[] | ReferralStatsScalarFieldEnum
    having?: ReferralStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralStatsCountAggregateInputType | true
    _avg?: ReferralStatsAvgAggregateInputType
    _sum?: ReferralStatsSumAggregateInputType
    _min?: ReferralStatsMinAggregateInputType
    _max?: ReferralStatsMaxAggregateInputType
  }

  export type ReferralStatsGroupByOutputType = {
    id: number
    userId: number
    totalInvited: number
    activeInvited: number
    registeredToday: number
    registeredThisWeek: number
    registeredThisMonth: number
    achievementsEarned: string[]
    bonusPointsEarned: number
    createdAt: Date
    updatedAt: Date
    _count: ReferralStatsCountAggregateOutputType | null
    _avg: ReferralStatsAvgAggregateOutputType | null
    _sum: ReferralStatsSumAggregateOutputType | null
    _min: ReferralStatsMinAggregateOutputType | null
    _max: ReferralStatsMaxAggregateOutputType | null
  }

  type GetReferralStatsGroupByPayload<T extends ReferralStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralStatsGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralStatsGroupByOutputType[P]>
        }
      >
    >


  export type ReferralStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalInvited?: boolean
    activeInvited?: boolean
    registeredToday?: boolean
    registeredThisWeek?: boolean
    registeredThisMonth?: boolean
    achievementsEarned?: boolean
    bonusPointsEarned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralStats"]>

  export type ReferralStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalInvited?: boolean
    activeInvited?: boolean
    registeredToday?: boolean
    registeredThisWeek?: boolean
    registeredThisMonth?: boolean
    achievementsEarned?: boolean
    bonusPointsEarned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralStats"]>

  export type ReferralStatsSelectScalar = {
    id?: boolean
    userId?: boolean
    totalInvited?: boolean
    activeInvited?: boolean
    registeredToday?: boolean
    registeredThisWeek?: boolean
    registeredThisMonth?: boolean
    achievementsEarned?: boolean
    bonusPointsEarned?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReferralStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReferralStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReferralStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralStats"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      totalInvited: number
      activeInvited: number
      registeredToday: number
      registeredThisWeek: number
      registeredThisMonth: number
      achievementsEarned: string[]
      bonusPointsEarned: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["referralStats"]>
    composites: {}
  }

  type ReferralStatsGetPayload<S extends boolean | null | undefined | ReferralStatsDefaultArgs> = $Result.GetResult<Prisma.$ReferralStatsPayload, S>

  type ReferralStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferralStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferralStatsCountAggregateInputType | true
    }

  export interface ReferralStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralStats'], meta: { name: 'ReferralStats' } }
    /**
     * Find zero or one ReferralStats that matches the filter.
     * @param {ReferralStatsFindUniqueArgs} args - Arguments to find a ReferralStats
     * @example
     * // Get one ReferralStats
     * const referralStats = await prisma.referralStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralStatsFindUniqueArgs>(args: SelectSubset<T, ReferralStatsFindUniqueArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReferralStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReferralStatsFindUniqueOrThrowArgs} args - Arguments to find a ReferralStats
     * @example
     * // Get one ReferralStats
     * const referralStats = await prisma.referralStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReferralStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsFindFirstArgs} args - Arguments to find a ReferralStats
     * @example
     * // Get one ReferralStats
     * const referralStats = await prisma.referralStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralStatsFindFirstArgs>(args?: SelectSubset<T, ReferralStatsFindFirstArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReferralStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsFindFirstOrThrowArgs} args - Arguments to find a ReferralStats
     * @example
     * // Get one ReferralStats
     * const referralStats = await prisma.referralStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReferralStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralStats
     * const referralStats = await prisma.referralStats.findMany()
     * 
     * // Get first 10 ReferralStats
     * const referralStats = await prisma.referralStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralStatsWithIdOnly = await prisma.referralStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralStatsFindManyArgs>(args?: SelectSubset<T, ReferralStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReferralStats.
     * @param {ReferralStatsCreateArgs} args - Arguments to create a ReferralStats.
     * @example
     * // Create one ReferralStats
     * const ReferralStats = await prisma.referralStats.create({
     *   data: {
     *     // ... data to create a ReferralStats
     *   }
     * })
     * 
     */
    create<T extends ReferralStatsCreateArgs>(args: SelectSubset<T, ReferralStatsCreateArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReferralStats.
     * @param {ReferralStatsCreateManyArgs} args - Arguments to create many ReferralStats.
     * @example
     * // Create many ReferralStats
     * const referralStats = await prisma.referralStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralStatsCreateManyArgs>(args?: SelectSubset<T, ReferralStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralStats and returns the data saved in the database.
     * @param {ReferralStatsCreateManyAndReturnArgs} args - Arguments to create many ReferralStats.
     * @example
     * // Create many ReferralStats
     * const referralStats = await prisma.referralStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralStats and only return the `id`
     * const referralStatsWithIdOnly = await prisma.referralStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReferralStats.
     * @param {ReferralStatsDeleteArgs} args - Arguments to delete one ReferralStats.
     * @example
     * // Delete one ReferralStats
     * const ReferralStats = await prisma.referralStats.delete({
     *   where: {
     *     // ... filter to delete one ReferralStats
     *   }
     * })
     * 
     */
    delete<T extends ReferralStatsDeleteArgs>(args: SelectSubset<T, ReferralStatsDeleteArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReferralStats.
     * @param {ReferralStatsUpdateArgs} args - Arguments to update one ReferralStats.
     * @example
     * // Update one ReferralStats
     * const referralStats = await prisma.referralStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralStatsUpdateArgs>(args: SelectSubset<T, ReferralStatsUpdateArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReferralStats.
     * @param {ReferralStatsDeleteManyArgs} args - Arguments to filter ReferralStats to delete.
     * @example
     * // Delete a few ReferralStats
     * const { count } = await prisma.referralStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralStatsDeleteManyArgs>(args?: SelectSubset<T, ReferralStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralStats
     * const referralStats = await prisma.referralStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralStatsUpdateManyArgs>(args: SelectSubset<T, ReferralStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferralStats.
     * @param {ReferralStatsUpsertArgs} args - Arguments to update or create a ReferralStats.
     * @example
     * // Update or create a ReferralStats
     * const referralStats = await prisma.referralStats.upsert({
     *   create: {
     *     // ... data to create a ReferralStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralStats we want to update
     *   }
     * })
     */
    upsert<T extends ReferralStatsUpsertArgs>(args: SelectSubset<T, ReferralStatsUpsertArgs<ExtArgs>>): Prisma__ReferralStatsClient<$Result.GetResult<Prisma.$ReferralStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReferralStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsCountArgs} args - Arguments to filter ReferralStats to count.
     * @example
     * // Count the number of ReferralStats
     * const count = await prisma.referralStats.count({
     *   where: {
     *     // ... the filter for the ReferralStats we want to count
     *   }
     * })
    **/
    count<T extends ReferralStatsCountArgs>(
      args?: Subset<T, ReferralStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralStatsAggregateArgs>(args: Subset<T, ReferralStatsAggregateArgs>): Prisma.PrismaPromise<GetReferralStatsAggregateType<T>>

    /**
     * Group by ReferralStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralStatsGroupByArgs['orderBy'] }
        : { orderBy?: ReferralStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralStats model
   */
  readonly fields: ReferralStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferralStats model
   */ 
  interface ReferralStatsFieldRefs {
    readonly id: FieldRef<"ReferralStats", 'Int'>
    readonly userId: FieldRef<"ReferralStats", 'Int'>
    readonly totalInvited: FieldRef<"ReferralStats", 'Int'>
    readonly activeInvited: FieldRef<"ReferralStats", 'Int'>
    readonly registeredToday: FieldRef<"ReferralStats", 'Int'>
    readonly registeredThisWeek: FieldRef<"ReferralStats", 'Int'>
    readonly registeredThisMonth: FieldRef<"ReferralStats", 'Int'>
    readonly achievementsEarned: FieldRef<"ReferralStats", 'String[]'>
    readonly bonusPointsEarned: FieldRef<"ReferralStats", 'Int'>
    readonly createdAt: FieldRef<"ReferralStats", 'DateTime'>
    readonly updatedAt: FieldRef<"ReferralStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReferralStats findUnique
   */
  export type ReferralStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter, which ReferralStats to fetch.
     */
    where: ReferralStatsWhereUniqueInput
  }

  /**
   * ReferralStats findUniqueOrThrow
   */
  export type ReferralStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter, which ReferralStats to fetch.
     */
    where: ReferralStatsWhereUniqueInput
  }

  /**
   * ReferralStats findFirst
   */
  export type ReferralStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter, which ReferralStats to fetch.
     */
    where?: ReferralStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralStats to fetch.
     */
    orderBy?: ReferralStatsOrderByWithRelationInput | ReferralStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralStats.
     */
    cursor?: ReferralStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralStats.
     */
    distinct?: ReferralStatsScalarFieldEnum | ReferralStatsScalarFieldEnum[]
  }

  /**
   * ReferralStats findFirstOrThrow
   */
  export type ReferralStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter, which ReferralStats to fetch.
     */
    where?: ReferralStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralStats to fetch.
     */
    orderBy?: ReferralStatsOrderByWithRelationInput | ReferralStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralStats.
     */
    cursor?: ReferralStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralStats.
     */
    distinct?: ReferralStatsScalarFieldEnum | ReferralStatsScalarFieldEnum[]
  }

  /**
   * ReferralStats findMany
   */
  export type ReferralStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter, which ReferralStats to fetch.
     */
    where?: ReferralStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralStats to fetch.
     */
    orderBy?: ReferralStatsOrderByWithRelationInput | ReferralStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralStats.
     */
    cursor?: ReferralStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralStats.
     */
    skip?: number
    distinct?: ReferralStatsScalarFieldEnum | ReferralStatsScalarFieldEnum[]
  }

  /**
   * ReferralStats create
   */
  export type ReferralStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralStats.
     */
    data: XOR<ReferralStatsCreateInput, ReferralStatsUncheckedCreateInput>
  }

  /**
   * ReferralStats createMany
   */
  export type ReferralStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralStats.
     */
    data: ReferralStatsCreateManyInput | ReferralStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralStats createManyAndReturn
   */
  export type ReferralStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReferralStats.
     */
    data: ReferralStatsCreateManyInput | ReferralStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralStats update
   */
  export type ReferralStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralStats.
     */
    data: XOR<ReferralStatsUpdateInput, ReferralStatsUncheckedUpdateInput>
    /**
     * Choose, which ReferralStats to update.
     */
    where: ReferralStatsWhereUniqueInput
  }

  /**
   * ReferralStats updateMany
   */
  export type ReferralStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralStats.
     */
    data: XOR<ReferralStatsUpdateManyMutationInput, ReferralStatsUncheckedUpdateManyInput>
    /**
     * Filter which ReferralStats to update
     */
    where?: ReferralStatsWhereInput
  }

  /**
   * ReferralStats upsert
   */
  export type ReferralStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralStats to update in case it exists.
     */
    where: ReferralStatsWhereUniqueInput
    /**
     * In case the ReferralStats found by the `where` argument doesn't exist, create a new ReferralStats with this data.
     */
    create: XOR<ReferralStatsCreateInput, ReferralStatsUncheckedCreateInput>
    /**
     * In case the ReferralStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralStatsUpdateInput, ReferralStatsUncheckedUpdateInput>
  }

  /**
   * ReferralStats delete
   */
  export type ReferralStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
    /**
     * Filter which ReferralStats to delete.
     */
    where: ReferralStatsWhereUniqueInput
  }

  /**
   * ReferralStats deleteMany
   */
  export type ReferralStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralStats to delete
     */
    where?: ReferralStatsWhereInput
  }

  /**
   * ReferralStats without action
   */
  export type ReferralStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralStats
     */
    select?: ReferralStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralStatsInclude<ExtArgs> | null
  }


  /**
   * Model ReferralActivity
   */

  export type AggregateReferralActivity = {
    _count: ReferralActivityCountAggregateOutputType | null
    _avg: ReferralActivityAvgAggregateOutputType | null
    _sum: ReferralActivitySumAggregateOutputType | null
    _min: ReferralActivityMinAggregateOutputType | null
    _max: ReferralActivityMaxAggregateOutputType | null
  }

  export type ReferralActivityAvgAggregateOutputType = {
    id: number | null
    referrerId: number | null
    invitedUserId: number | null
  }

  export type ReferralActivitySumAggregateOutputType = {
    id: number | null
    referrerId: number | null
    invitedUserId: number | null
  }

  export type ReferralActivityMinAggregateOutputType = {
    id: number | null
    referrerId: number | null
    invitedUserId: number | null
    registeredAt: Date | null
    firstMatchAt: Date | null
    isActive: boolean | null
    inviteSource: string | null
    ipAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralActivityMaxAggregateOutputType = {
    id: number | null
    referrerId: number | null
    invitedUserId: number | null
    registeredAt: Date | null
    firstMatchAt: Date | null
    isActive: boolean | null
    inviteSource: string | null
    ipAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralActivityCountAggregateOutputType = {
    id: number
    referrerId: number
    invitedUserId: number
    registeredAt: number
    firstMatchAt: number
    isActive: number
    inviteSource: number
    ipAddress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReferralActivityAvgAggregateInputType = {
    id?: true
    referrerId?: true
    invitedUserId?: true
  }

  export type ReferralActivitySumAggregateInputType = {
    id?: true
    referrerId?: true
    invitedUserId?: true
  }

  export type ReferralActivityMinAggregateInputType = {
    id?: true
    referrerId?: true
    invitedUserId?: true
    registeredAt?: true
    firstMatchAt?: true
    isActive?: true
    inviteSource?: true
    ipAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralActivityMaxAggregateInputType = {
    id?: true
    referrerId?: true
    invitedUserId?: true
    registeredAt?: true
    firstMatchAt?: true
    isActive?: true
    inviteSource?: true
    ipAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralActivityCountAggregateInputType = {
    id?: true
    referrerId?: true
    invitedUserId?: true
    registeredAt?: true
    firstMatchAt?: true
    isActive?: true
    inviteSource?: true
    ipAddress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReferralActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralActivity to aggregate.
     */
    where?: ReferralActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralActivities to fetch.
     */
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralActivities
    **/
    _count?: true | ReferralActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralActivityMaxAggregateInputType
  }

  export type GetReferralActivityAggregateType<T extends ReferralActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralActivity[P]>
      : GetScalarType<T[P], AggregateReferralActivity[P]>
  }




  export type ReferralActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralActivityWhereInput
    orderBy?: ReferralActivityOrderByWithAggregationInput | ReferralActivityOrderByWithAggregationInput[]
    by: ReferralActivityScalarFieldEnum[] | ReferralActivityScalarFieldEnum
    having?: ReferralActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralActivityCountAggregateInputType | true
    _avg?: ReferralActivityAvgAggregateInputType
    _sum?: ReferralActivitySumAggregateInputType
    _min?: ReferralActivityMinAggregateInputType
    _max?: ReferralActivityMaxAggregateInputType
  }

  export type ReferralActivityGroupByOutputType = {
    id: number
    referrerId: number
    invitedUserId: number
    registeredAt: Date
    firstMatchAt: Date | null
    isActive: boolean
    inviteSource: string | null
    ipAddress: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReferralActivityCountAggregateOutputType | null
    _avg: ReferralActivityAvgAggregateOutputType | null
    _sum: ReferralActivitySumAggregateOutputType | null
    _min: ReferralActivityMinAggregateOutputType | null
    _max: ReferralActivityMaxAggregateOutputType | null
  }

  type GetReferralActivityGroupByPayload<T extends ReferralActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralActivityGroupByOutputType[P]>
        }
      >
    >


  export type ReferralActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    invitedUserId?: boolean
    registeredAt?: boolean
    firstMatchAt?: boolean
    isActive?: boolean
    inviteSource?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    invitedUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralActivity"]>

  export type ReferralActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    invitedUserId?: boolean
    registeredAt?: boolean
    firstMatchAt?: boolean
    isActive?: boolean
    inviteSource?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    invitedUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralActivity"]>

  export type ReferralActivitySelectScalar = {
    id?: boolean
    referrerId?: boolean
    invitedUserId?: boolean
    registeredAt?: boolean
    firstMatchAt?: boolean
    isActive?: boolean
    inviteSource?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReferralActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    invitedUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReferralActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    invitedUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReferralActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralActivity"
    objects: {
      referrer: Prisma.$UserPayload<ExtArgs>
      invitedUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      referrerId: number
      invitedUserId: number
      registeredAt: Date
      firstMatchAt: Date | null
      isActive: boolean
      inviteSource: string | null
      ipAddress: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["referralActivity"]>
    composites: {}
  }

  type ReferralActivityGetPayload<S extends boolean | null | undefined | ReferralActivityDefaultArgs> = $Result.GetResult<Prisma.$ReferralActivityPayload, S>

  type ReferralActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferralActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferralActivityCountAggregateInputType | true
    }

  export interface ReferralActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralActivity'], meta: { name: 'ReferralActivity' } }
    /**
     * Find zero or one ReferralActivity that matches the filter.
     * @param {ReferralActivityFindUniqueArgs} args - Arguments to find a ReferralActivity
     * @example
     * // Get one ReferralActivity
     * const referralActivity = await prisma.referralActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralActivityFindUniqueArgs>(args: SelectSubset<T, ReferralActivityFindUniqueArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReferralActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReferralActivityFindUniqueOrThrowArgs} args - Arguments to find a ReferralActivity
     * @example
     * // Get one ReferralActivity
     * const referralActivity = await prisma.referralActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReferralActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityFindFirstArgs} args - Arguments to find a ReferralActivity
     * @example
     * // Get one ReferralActivity
     * const referralActivity = await prisma.referralActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralActivityFindFirstArgs>(args?: SelectSubset<T, ReferralActivityFindFirstArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReferralActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityFindFirstOrThrowArgs} args - Arguments to find a ReferralActivity
     * @example
     * // Get one ReferralActivity
     * const referralActivity = await prisma.referralActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReferralActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralActivities
     * const referralActivities = await prisma.referralActivity.findMany()
     * 
     * // Get first 10 ReferralActivities
     * const referralActivities = await prisma.referralActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralActivityWithIdOnly = await prisma.referralActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralActivityFindManyArgs>(args?: SelectSubset<T, ReferralActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReferralActivity.
     * @param {ReferralActivityCreateArgs} args - Arguments to create a ReferralActivity.
     * @example
     * // Create one ReferralActivity
     * const ReferralActivity = await prisma.referralActivity.create({
     *   data: {
     *     // ... data to create a ReferralActivity
     *   }
     * })
     * 
     */
    create<T extends ReferralActivityCreateArgs>(args: SelectSubset<T, ReferralActivityCreateArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReferralActivities.
     * @param {ReferralActivityCreateManyArgs} args - Arguments to create many ReferralActivities.
     * @example
     * // Create many ReferralActivities
     * const referralActivity = await prisma.referralActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralActivityCreateManyArgs>(args?: SelectSubset<T, ReferralActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralActivities and returns the data saved in the database.
     * @param {ReferralActivityCreateManyAndReturnArgs} args - Arguments to create many ReferralActivities.
     * @example
     * // Create many ReferralActivities
     * const referralActivity = await prisma.referralActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralActivities and only return the `id`
     * const referralActivityWithIdOnly = await prisma.referralActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReferralActivity.
     * @param {ReferralActivityDeleteArgs} args - Arguments to delete one ReferralActivity.
     * @example
     * // Delete one ReferralActivity
     * const ReferralActivity = await prisma.referralActivity.delete({
     *   where: {
     *     // ... filter to delete one ReferralActivity
     *   }
     * })
     * 
     */
    delete<T extends ReferralActivityDeleteArgs>(args: SelectSubset<T, ReferralActivityDeleteArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReferralActivity.
     * @param {ReferralActivityUpdateArgs} args - Arguments to update one ReferralActivity.
     * @example
     * // Update one ReferralActivity
     * const referralActivity = await prisma.referralActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralActivityUpdateArgs>(args: SelectSubset<T, ReferralActivityUpdateArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReferralActivities.
     * @param {ReferralActivityDeleteManyArgs} args - Arguments to filter ReferralActivities to delete.
     * @example
     * // Delete a few ReferralActivities
     * const { count } = await prisma.referralActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralActivityDeleteManyArgs>(args?: SelectSubset<T, ReferralActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralActivities
     * const referralActivity = await prisma.referralActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralActivityUpdateManyArgs>(args: SelectSubset<T, ReferralActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferralActivity.
     * @param {ReferralActivityUpsertArgs} args - Arguments to update or create a ReferralActivity.
     * @example
     * // Update or create a ReferralActivity
     * const referralActivity = await prisma.referralActivity.upsert({
     *   create: {
     *     // ... data to create a ReferralActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralActivity we want to update
     *   }
     * })
     */
    upsert<T extends ReferralActivityUpsertArgs>(args: SelectSubset<T, ReferralActivityUpsertArgs<ExtArgs>>): Prisma__ReferralActivityClient<$Result.GetResult<Prisma.$ReferralActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReferralActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityCountArgs} args - Arguments to filter ReferralActivities to count.
     * @example
     * // Count the number of ReferralActivities
     * const count = await prisma.referralActivity.count({
     *   where: {
     *     // ... the filter for the ReferralActivities we want to count
     *   }
     * })
    **/
    count<T extends ReferralActivityCountArgs>(
      args?: Subset<T, ReferralActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralActivityAggregateArgs>(args: Subset<T, ReferralActivityAggregateArgs>): Prisma.PrismaPromise<GetReferralActivityAggregateType<T>>

    /**
     * Group by ReferralActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralActivityGroupByArgs['orderBy'] }
        : { orderBy?: ReferralActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralActivity model
   */
  readonly fields: ReferralActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referrer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    invitedUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferralActivity model
   */ 
  interface ReferralActivityFieldRefs {
    readonly id: FieldRef<"ReferralActivity", 'Int'>
    readonly referrerId: FieldRef<"ReferralActivity", 'Int'>
    readonly invitedUserId: FieldRef<"ReferralActivity", 'Int'>
    readonly registeredAt: FieldRef<"ReferralActivity", 'DateTime'>
    readonly firstMatchAt: FieldRef<"ReferralActivity", 'DateTime'>
    readonly isActive: FieldRef<"ReferralActivity", 'Boolean'>
    readonly inviteSource: FieldRef<"ReferralActivity", 'String'>
    readonly ipAddress: FieldRef<"ReferralActivity", 'String'>
    readonly createdAt: FieldRef<"ReferralActivity", 'DateTime'>
    readonly updatedAt: FieldRef<"ReferralActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReferralActivity findUnique
   */
  export type ReferralActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter, which ReferralActivity to fetch.
     */
    where: ReferralActivityWhereUniqueInput
  }

  /**
   * ReferralActivity findUniqueOrThrow
   */
  export type ReferralActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter, which ReferralActivity to fetch.
     */
    where: ReferralActivityWhereUniqueInput
  }

  /**
   * ReferralActivity findFirst
   */
  export type ReferralActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter, which ReferralActivity to fetch.
     */
    where?: ReferralActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralActivities to fetch.
     */
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralActivities.
     */
    cursor?: ReferralActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralActivities.
     */
    distinct?: ReferralActivityScalarFieldEnum | ReferralActivityScalarFieldEnum[]
  }

  /**
   * ReferralActivity findFirstOrThrow
   */
  export type ReferralActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter, which ReferralActivity to fetch.
     */
    where?: ReferralActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralActivities to fetch.
     */
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralActivities.
     */
    cursor?: ReferralActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralActivities.
     */
    distinct?: ReferralActivityScalarFieldEnum | ReferralActivityScalarFieldEnum[]
  }

  /**
   * ReferralActivity findMany
   */
  export type ReferralActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter, which ReferralActivities to fetch.
     */
    where?: ReferralActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralActivities to fetch.
     */
    orderBy?: ReferralActivityOrderByWithRelationInput | ReferralActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralActivities.
     */
    cursor?: ReferralActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralActivities.
     */
    skip?: number
    distinct?: ReferralActivityScalarFieldEnum | ReferralActivityScalarFieldEnum[]
  }

  /**
   * ReferralActivity create
   */
  export type ReferralActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralActivity.
     */
    data: XOR<ReferralActivityCreateInput, ReferralActivityUncheckedCreateInput>
  }

  /**
   * ReferralActivity createMany
   */
  export type ReferralActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralActivities.
     */
    data: ReferralActivityCreateManyInput | ReferralActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralActivity createManyAndReturn
   */
  export type ReferralActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReferralActivities.
     */
    data: ReferralActivityCreateManyInput | ReferralActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralActivity update
   */
  export type ReferralActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralActivity.
     */
    data: XOR<ReferralActivityUpdateInput, ReferralActivityUncheckedUpdateInput>
    /**
     * Choose, which ReferralActivity to update.
     */
    where: ReferralActivityWhereUniqueInput
  }

  /**
   * ReferralActivity updateMany
   */
  export type ReferralActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralActivities.
     */
    data: XOR<ReferralActivityUpdateManyMutationInput, ReferralActivityUncheckedUpdateManyInput>
    /**
     * Filter which ReferralActivities to update
     */
    where?: ReferralActivityWhereInput
  }

  /**
   * ReferralActivity upsert
   */
  export type ReferralActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralActivity to update in case it exists.
     */
    where: ReferralActivityWhereUniqueInput
    /**
     * In case the ReferralActivity found by the `where` argument doesn't exist, create a new ReferralActivity with this data.
     */
    create: XOR<ReferralActivityCreateInput, ReferralActivityUncheckedCreateInput>
    /**
     * In case the ReferralActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralActivityUpdateInput, ReferralActivityUncheckedUpdateInput>
  }

  /**
   * ReferralActivity delete
   */
  export type ReferralActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
    /**
     * Filter which ReferralActivity to delete.
     */
    where: ReferralActivityWhereUniqueInput
  }

  /**
   * ReferralActivity deleteMany
   */
  export type ReferralActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralActivities to delete
     */
    where?: ReferralActivityWhereInput
  }

  /**
   * ReferralActivity without action
   */
  export type ReferralActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralActivity
     */
    select?: ReferralActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralActivityInclude<ExtArgs> | null
  }


  /**
   * Model BallTransaction
   */

  export type AggregateBallTransaction = {
    _count: BallTransactionCountAggregateOutputType | null
    _avg: BallTransactionAvgAggregateOutputType | null
    _sum: BallTransactionSumAggregateOutputType | null
    _min: BallTransactionMinAggregateOutputType | null
    _max: BallTransactionMaxAggregateOutputType | null
  }

  export type BallTransactionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    balanceAfter: number | null
  }

  export type BallTransactionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    balanceAfter: number | null
  }

  export type BallTransactionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    type: $Enums.BallTransactionType | null
    reason: string | null
    balanceAfter: number | null
    createdAt: Date | null
  }

  export type BallTransactionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    type: $Enums.BallTransactionType | null
    reason: string | null
    balanceAfter: number | null
    createdAt: Date | null
  }

  export type BallTransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    type: number
    reason: number
    balanceAfter: number
    createdAt: number
    _all: number
  }


  export type BallTransactionAvgAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    balanceAfter?: true
  }

  export type BallTransactionSumAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    balanceAfter?: true
  }

  export type BallTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    reason?: true
    balanceAfter?: true
    createdAt?: true
  }

  export type BallTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    reason?: true
    balanceAfter?: true
    createdAt?: true
  }

  export type BallTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    reason?: true
    balanceAfter?: true
    createdAt?: true
    _all?: true
  }

  export type BallTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BallTransaction to aggregate.
     */
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     */
    orderBy?: BallTransactionOrderByWithRelationInput | BallTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BallTransactions
    **/
    _count?: true | BallTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BallTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BallTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BallTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BallTransactionMaxAggregateInputType
  }

  export type GetBallTransactionAggregateType<T extends BallTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateBallTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBallTransaction[P]>
      : GetScalarType<T[P], AggregateBallTransaction[P]>
  }




  export type BallTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BallTransactionWhereInput
    orderBy?: BallTransactionOrderByWithAggregationInput | BallTransactionOrderByWithAggregationInput[]
    by: BallTransactionScalarFieldEnum[] | BallTransactionScalarFieldEnum
    having?: BallTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BallTransactionCountAggregateInputType | true
    _avg?: BallTransactionAvgAggregateInputType
    _sum?: BallTransactionSumAggregateInputType
    _min?: BallTransactionMinAggregateInputType
    _max?: BallTransactionMaxAggregateInputType
  }

  export type BallTransactionGroupByOutputType = {
    id: number
    userId: number
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt: Date
    _count: BallTransactionCountAggregateOutputType | null
    _avg: BallTransactionAvgAggregateOutputType | null
    _sum: BallTransactionSumAggregateOutputType | null
    _min: BallTransactionMinAggregateOutputType | null
    _max: BallTransactionMaxAggregateOutputType | null
  }

  type GetBallTransactionGroupByPayload<T extends BallTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BallTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BallTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BallTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], BallTransactionGroupByOutputType[P]>
        }
      >
    >


  export type BallTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    reason?: boolean
    balanceAfter?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ballTransaction"]>

  export type BallTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    reason?: boolean
    balanceAfter?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ballTransaction"]>

  export type BallTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    reason?: boolean
    balanceAfter?: boolean
    createdAt?: boolean
  }

  export type BallTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BallTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BallTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BallTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      amount: number
      type: $Enums.BallTransactionType
      reason: string
      balanceAfter: number
      createdAt: Date
    }, ExtArgs["result"]["ballTransaction"]>
    composites: {}
  }

  type BallTransactionGetPayload<S extends boolean | null | undefined | BallTransactionDefaultArgs> = $Result.GetResult<Prisma.$BallTransactionPayload, S>

  type BallTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BallTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BallTransactionCountAggregateInputType | true
    }

  export interface BallTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BallTransaction'], meta: { name: 'BallTransaction' } }
    /**
     * Find zero or one BallTransaction that matches the filter.
     * @param {BallTransactionFindUniqueArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BallTransactionFindUniqueArgs>(args: SelectSubset<T, BallTransactionFindUniqueArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BallTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BallTransactionFindUniqueOrThrowArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BallTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, BallTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BallTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionFindFirstArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BallTransactionFindFirstArgs>(args?: SelectSubset<T, BallTransactionFindFirstArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BallTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionFindFirstOrThrowArgs} args - Arguments to find a BallTransaction
     * @example
     * // Get one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BallTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, BallTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BallTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BallTransactions
     * const ballTransactions = await prisma.ballTransaction.findMany()
     * 
     * // Get first 10 BallTransactions
     * const ballTransactions = await prisma.ballTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ballTransactionWithIdOnly = await prisma.ballTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BallTransactionFindManyArgs>(args?: SelectSubset<T, BallTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BallTransaction.
     * @param {BallTransactionCreateArgs} args - Arguments to create a BallTransaction.
     * @example
     * // Create one BallTransaction
     * const BallTransaction = await prisma.ballTransaction.create({
     *   data: {
     *     // ... data to create a BallTransaction
     *   }
     * })
     * 
     */
    create<T extends BallTransactionCreateArgs>(args: SelectSubset<T, BallTransactionCreateArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BallTransactions.
     * @param {BallTransactionCreateManyArgs} args - Arguments to create many BallTransactions.
     * @example
     * // Create many BallTransactions
     * const ballTransaction = await prisma.ballTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BallTransactionCreateManyArgs>(args?: SelectSubset<T, BallTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BallTransactions and returns the data saved in the database.
     * @param {BallTransactionCreateManyAndReturnArgs} args - Arguments to create many BallTransactions.
     * @example
     * // Create many BallTransactions
     * const ballTransaction = await prisma.ballTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BallTransactions and only return the `id`
     * const ballTransactionWithIdOnly = await prisma.ballTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BallTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, BallTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BallTransaction.
     * @param {BallTransactionDeleteArgs} args - Arguments to delete one BallTransaction.
     * @example
     * // Delete one BallTransaction
     * const BallTransaction = await prisma.ballTransaction.delete({
     *   where: {
     *     // ... filter to delete one BallTransaction
     *   }
     * })
     * 
     */
    delete<T extends BallTransactionDeleteArgs>(args: SelectSubset<T, BallTransactionDeleteArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BallTransaction.
     * @param {BallTransactionUpdateArgs} args - Arguments to update one BallTransaction.
     * @example
     * // Update one BallTransaction
     * const ballTransaction = await prisma.ballTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BallTransactionUpdateArgs>(args: SelectSubset<T, BallTransactionUpdateArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BallTransactions.
     * @param {BallTransactionDeleteManyArgs} args - Arguments to filter BallTransactions to delete.
     * @example
     * // Delete a few BallTransactions
     * const { count } = await prisma.ballTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BallTransactionDeleteManyArgs>(args?: SelectSubset<T, BallTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BallTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BallTransactions
     * const ballTransaction = await prisma.ballTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BallTransactionUpdateManyArgs>(args: SelectSubset<T, BallTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BallTransaction.
     * @param {BallTransactionUpsertArgs} args - Arguments to update or create a BallTransaction.
     * @example
     * // Update or create a BallTransaction
     * const ballTransaction = await prisma.ballTransaction.upsert({
     *   create: {
     *     // ... data to create a BallTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BallTransaction we want to update
     *   }
     * })
     */
    upsert<T extends BallTransactionUpsertArgs>(args: SelectSubset<T, BallTransactionUpsertArgs<ExtArgs>>): Prisma__BallTransactionClient<$Result.GetResult<Prisma.$BallTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BallTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionCountArgs} args - Arguments to filter BallTransactions to count.
     * @example
     * // Count the number of BallTransactions
     * const count = await prisma.ballTransaction.count({
     *   where: {
     *     // ... the filter for the BallTransactions we want to count
     *   }
     * })
    **/
    count<T extends BallTransactionCountArgs>(
      args?: Subset<T, BallTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BallTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BallTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BallTransactionAggregateArgs>(args: Subset<T, BallTransactionAggregateArgs>): Prisma.PrismaPromise<GetBallTransactionAggregateType<T>>

    /**
     * Group by BallTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BallTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BallTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BallTransactionGroupByArgs['orderBy'] }
        : { orderBy?: BallTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BallTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBallTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BallTransaction model
   */
  readonly fields: BallTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BallTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BallTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BallTransaction model
   */ 
  interface BallTransactionFieldRefs {
    readonly id: FieldRef<"BallTransaction", 'Int'>
    readonly userId: FieldRef<"BallTransaction", 'Int'>
    readonly amount: FieldRef<"BallTransaction", 'Int'>
    readonly type: FieldRef<"BallTransaction", 'BallTransactionType'>
    readonly reason: FieldRef<"BallTransaction", 'String'>
    readonly balanceAfter: FieldRef<"BallTransaction", 'Int'>
    readonly createdAt: FieldRef<"BallTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BallTransaction findUnique
   */
  export type BallTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BallTransaction to fetch.
     */
    where: BallTransactionWhereUniqueInput
  }

  /**
   * BallTransaction findUniqueOrThrow
   */
  export type BallTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BallTransaction to fetch.
     */
    where: BallTransactionWhereUniqueInput
  }

  /**
   * BallTransaction findFirst
   */
  export type BallTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BallTransaction to fetch.
     */
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     */
    orderBy?: BallTransactionOrderByWithRelationInput | BallTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BallTransactions.
     */
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BallTransactions.
     */
    distinct?: BallTransactionScalarFieldEnum | BallTransactionScalarFieldEnum[]
  }

  /**
   * BallTransaction findFirstOrThrow
   */
  export type BallTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BallTransaction to fetch.
     */
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     */
    orderBy?: BallTransactionOrderByWithRelationInput | BallTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BallTransactions.
     */
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BallTransactions.
     */
    distinct?: BallTransactionScalarFieldEnum | BallTransactionScalarFieldEnum[]
  }

  /**
   * BallTransaction findMany
   */
  export type BallTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BallTransactions to fetch.
     */
    where?: BallTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BallTransactions to fetch.
     */
    orderBy?: BallTransactionOrderByWithRelationInput | BallTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BallTransactions.
     */
    cursor?: BallTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BallTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BallTransactions.
     */
    skip?: number
    distinct?: BallTransactionScalarFieldEnum | BallTransactionScalarFieldEnum[]
  }

  /**
   * BallTransaction create
   */
  export type BallTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a BallTransaction.
     */
    data: XOR<BallTransactionCreateInput, BallTransactionUncheckedCreateInput>
  }

  /**
   * BallTransaction createMany
   */
  export type BallTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BallTransactions.
     */
    data: BallTransactionCreateManyInput | BallTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BallTransaction createManyAndReturn
   */
  export type BallTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BallTransactions.
     */
    data: BallTransactionCreateManyInput | BallTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BallTransaction update
   */
  export type BallTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a BallTransaction.
     */
    data: XOR<BallTransactionUpdateInput, BallTransactionUncheckedUpdateInput>
    /**
     * Choose, which BallTransaction to update.
     */
    where: BallTransactionWhereUniqueInput
  }

  /**
   * BallTransaction updateMany
   */
  export type BallTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BallTransactions.
     */
    data: XOR<BallTransactionUpdateManyMutationInput, BallTransactionUncheckedUpdateManyInput>
    /**
     * Filter which BallTransactions to update
     */
    where?: BallTransactionWhereInput
  }

  /**
   * BallTransaction upsert
   */
  export type BallTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the BallTransaction to update in case it exists.
     */
    where: BallTransactionWhereUniqueInput
    /**
     * In case the BallTransaction found by the `where` argument doesn't exist, create a new BallTransaction with this data.
     */
    create: XOR<BallTransactionCreateInput, BallTransactionUncheckedCreateInput>
    /**
     * In case the BallTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BallTransactionUpdateInput, BallTransactionUncheckedUpdateInput>
  }

  /**
   * BallTransaction delete
   */
  export type BallTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
    /**
     * Filter which BallTransaction to delete.
     */
    where: BallTransactionWhereUniqueInput
  }

  /**
   * BallTransaction deleteMany
   */
  export type BallTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BallTransactions to delete
     */
    where?: BallTransactionWhereInput
  }

  /**
   * BallTransaction without action
   */
  export type BallTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BallTransaction
     */
    select?: BallTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BallTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseAvgAggregateOutputType = {
    id: number | null
    priceBalls: number | null
  }

  export type CaseSumAggregateOutputType = {
    id: number | null
    priceBalls: number | null
  }

  export type CaseMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    priceBalls: number | null
    image: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    priceBalls: number | null
    image: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    priceBalls: number
    image: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseAvgAggregateInputType = {
    id?: true
    priceBalls?: true
  }

  export type CaseSumAggregateInputType = {
    id?: true
    priceBalls?: true
  }

  export type CaseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceBalls?: true
    image?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceBalls?: true
    image?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceBalls?: true
    image?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _avg?: CaseAvgAggregateInputType
    _sum?: CaseSumAggregateInputType
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    id: number
    name: string
    description: string
    priceBalls: number
    image: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceBalls?: boolean
    image?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | Case$itemsArgs<ExtArgs>
    openings?: boolean | Case$openingsArgs<ExtArgs>
    winnings?: boolean | Case$winningsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceBalls?: boolean
    image?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    priceBalls?: boolean
    image?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Case$itemsArgs<ExtArgs>
    openings?: boolean | Case$openingsArgs<ExtArgs>
    winnings?: boolean | Case$winningsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      items: Prisma.$CaseItemPayload<ExtArgs>[]
      openings: Prisma.$CaseOpeningPayload<ExtArgs>[]
      winnings: Prisma.$CaseWinningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      priceBalls: number
      image: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Case$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Case$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findMany"> | Null>
    openings<T extends Case$openingsArgs<ExtArgs> = {}>(args?: Subset<T, Case$openingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findMany"> | Null>
    winnings<T extends Case$winningsArgs<ExtArgs> = {}>(args?: Subset<T, Case$winningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */ 
  interface CaseFieldRefs {
    readonly id: FieldRef<"Case", 'Int'>
    readonly name: FieldRef<"Case", 'String'>
    readonly description: FieldRef<"Case", 'String'>
    readonly priceBalls: FieldRef<"Case", 'Int'>
    readonly image: FieldRef<"Case", 'String'>
    readonly isActive: FieldRef<"Case", 'Boolean'>
    readonly createdAt: FieldRef<"Case", 'DateTime'>
    readonly updatedAt: FieldRef<"Case", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
  }

  /**
   * Case.items
   */
  export type Case$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    where?: CaseItemWhereInput
    orderBy?: CaseItemOrderByWithRelationInput | CaseItemOrderByWithRelationInput[]
    cursor?: CaseItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseItemScalarFieldEnum | CaseItemScalarFieldEnum[]
  }

  /**
   * Case.openings
   */
  export type Case$openingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    where?: CaseOpeningWhereInput
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    cursor?: CaseOpeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseOpeningScalarFieldEnum | CaseOpeningScalarFieldEnum[]
  }

  /**
   * Case.winnings
   */
  export type Case$winningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    where?: CaseWinningWhereInput
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    cursor?: CaseWinningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model CaseItem
   */

  export type AggregateCaseItem = {
    _count: CaseItemCountAggregateOutputType | null
    _avg: CaseItemAvgAggregateOutputType | null
    _sum: CaseItemSumAggregateOutputType | null
    _min: CaseItemMinAggregateOutputType | null
    _max: CaseItemMaxAggregateOutputType | null
  }

  export type CaseItemAvgAggregateOutputType = {
    id: number | null
    caseId: number | null
    dropChance: number | null
  }

  export type CaseItemSumAggregateOutputType = {
    id: number | null
    caseId: number | null
    dropChance: number | null
  }

  export type CaseItemMinAggregateOutputType = {
    id: number | null
    caseId: number | null
    name: string | null
    type: $Enums.CaseItemType | null
    dropChance: number | null
    imageUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseItemMaxAggregateOutputType = {
    id: number | null
    caseId: number | null
    name: string | null
    type: $Enums.CaseItemType | null
    dropChance: number | null
    imageUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseItemCountAggregateOutputType = {
    id: number
    caseId: number
    name: number
    type: number
    payload: number
    dropChance: number
    imageUrl: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseItemAvgAggregateInputType = {
    id?: true
    caseId?: true
    dropChance?: true
  }

  export type CaseItemSumAggregateInputType = {
    id?: true
    caseId?: true
    dropChance?: true
  }

  export type CaseItemMinAggregateInputType = {
    id?: true
    caseId?: true
    name?: true
    type?: true
    dropChance?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseItemMaxAggregateInputType = {
    id?: true
    caseId?: true
    name?: true
    type?: true
    dropChance?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseItemCountAggregateInputType = {
    id?: true
    caseId?: true
    name?: true
    type?: true
    payload?: true
    dropChance?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseItem to aggregate.
     */
    where?: CaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseItems to fetch.
     */
    orderBy?: CaseItemOrderByWithRelationInput | CaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseItems
    **/
    _count?: true | CaseItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseItemMaxAggregateInputType
  }

  export type GetCaseItemAggregateType<T extends CaseItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseItem[P]>
      : GetScalarType<T[P], AggregateCaseItem[P]>
  }




  export type CaseItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseItemWhereInput
    orderBy?: CaseItemOrderByWithAggregationInput | CaseItemOrderByWithAggregationInput[]
    by: CaseItemScalarFieldEnum[] | CaseItemScalarFieldEnum
    having?: CaseItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseItemCountAggregateInputType | true
    _avg?: CaseItemAvgAggregateInputType
    _sum?: CaseItemSumAggregateInputType
    _min?: CaseItemMinAggregateInputType
    _max?: CaseItemMaxAggregateInputType
  }

  export type CaseItemGroupByOutputType = {
    id: number
    caseId: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonValue
    dropChance: number
    imageUrl: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CaseItemCountAggregateOutputType | null
    _avg: CaseItemAvgAggregateOutputType | null
    _sum: CaseItemSumAggregateOutputType | null
    _min: CaseItemMinAggregateOutputType | null
    _max: CaseItemMaxAggregateOutputType | null
  }

  type GetCaseItemGroupByPayload<T extends CaseItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseItemGroupByOutputType[P]>
            : GetScalarType<T[P], CaseItemGroupByOutputType[P]>
        }
      >
    >


  export type CaseItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    name?: boolean
    type?: boolean
    payload?: boolean
    dropChance?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    winnings?: boolean | CaseItem$winningsArgs<ExtArgs>
    _count?: boolean | CaseItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseItem"]>

  export type CaseItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    name?: boolean
    type?: boolean
    payload?: boolean
    dropChance?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseItem"]>

  export type CaseItemSelectScalar = {
    id?: boolean
    caseId?: boolean
    name?: boolean
    type?: boolean
    payload?: boolean
    dropChance?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    winnings?: boolean | CaseItem$winningsArgs<ExtArgs>
    _count?: boolean | CaseItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseItem"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      winnings: Prisma.$CaseWinningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      caseId: number
      name: string
      type: $Enums.CaseItemType
      payload: Prisma.JsonValue
      dropChance: number
      imageUrl: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseItem"]>
    composites: {}
  }

  type CaseItemGetPayload<S extends boolean | null | undefined | CaseItemDefaultArgs> = $Result.GetResult<Prisma.$CaseItemPayload, S>

  type CaseItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseItemCountAggregateInputType | true
    }

  export interface CaseItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseItem'], meta: { name: 'CaseItem' } }
    /**
     * Find zero or one CaseItem that matches the filter.
     * @param {CaseItemFindUniqueArgs} args - Arguments to find a CaseItem
     * @example
     * // Get one CaseItem
     * const caseItem = await prisma.caseItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseItemFindUniqueArgs>(args: SelectSubset<T, CaseItemFindUniqueArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseItemFindUniqueOrThrowArgs} args - Arguments to find a CaseItem
     * @example
     * // Get one CaseItem
     * const caseItem = await prisma.caseItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemFindFirstArgs} args - Arguments to find a CaseItem
     * @example
     * // Get one CaseItem
     * const caseItem = await prisma.caseItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseItemFindFirstArgs>(args?: SelectSubset<T, CaseItemFindFirstArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemFindFirstOrThrowArgs} args - Arguments to find a CaseItem
     * @example
     * // Get one CaseItem
     * const caseItem = await prisma.caseItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseItems
     * const caseItems = await prisma.caseItem.findMany()
     * 
     * // Get first 10 CaseItems
     * const caseItems = await prisma.caseItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseItemWithIdOnly = await prisma.caseItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseItemFindManyArgs>(args?: SelectSubset<T, CaseItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseItem.
     * @param {CaseItemCreateArgs} args - Arguments to create a CaseItem.
     * @example
     * // Create one CaseItem
     * const CaseItem = await prisma.caseItem.create({
     *   data: {
     *     // ... data to create a CaseItem
     *   }
     * })
     * 
     */
    create<T extends CaseItemCreateArgs>(args: SelectSubset<T, CaseItemCreateArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseItems.
     * @param {CaseItemCreateManyArgs} args - Arguments to create many CaseItems.
     * @example
     * // Create many CaseItems
     * const caseItem = await prisma.caseItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseItemCreateManyArgs>(args?: SelectSubset<T, CaseItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseItems and returns the data saved in the database.
     * @param {CaseItemCreateManyAndReturnArgs} args - Arguments to create many CaseItems.
     * @example
     * // Create many CaseItems
     * const caseItem = await prisma.caseItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseItems and only return the `id`
     * const caseItemWithIdOnly = await prisma.caseItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseItem.
     * @param {CaseItemDeleteArgs} args - Arguments to delete one CaseItem.
     * @example
     * // Delete one CaseItem
     * const CaseItem = await prisma.caseItem.delete({
     *   where: {
     *     // ... filter to delete one CaseItem
     *   }
     * })
     * 
     */
    delete<T extends CaseItemDeleteArgs>(args: SelectSubset<T, CaseItemDeleteArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseItem.
     * @param {CaseItemUpdateArgs} args - Arguments to update one CaseItem.
     * @example
     * // Update one CaseItem
     * const caseItem = await prisma.caseItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseItemUpdateArgs>(args: SelectSubset<T, CaseItemUpdateArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseItems.
     * @param {CaseItemDeleteManyArgs} args - Arguments to filter CaseItems to delete.
     * @example
     * // Delete a few CaseItems
     * const { count } = await prisma.caseItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseItemDeleteManyArgs>(args?: SelectSubset<T, CaseItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseItems
     * const caseItem = await prisma.caseItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseItemUpdateManyArgs>(args: SelectSubset<T, CaseItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseItem.
     * @param {CaseItemUpsertArgs} args - Arguments to update or create a CaseItem.
     * @example
     * // Update or create a CaseItem
     * const caseItem = await prisma.caseItem.upsert({
     *   create: {
     *     // ... data to create a CaseItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseItem we want to update
     *   }
     * })
     */
    upsert<T extends CaseItemUpsertArgs>(args: SelectSubset<T, CaseItemUpsertArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemCountArgs} args - Arguments to filter CaseItems to count.
     * @example
     * // Count the number of CaseItems
     * const count = await prisma.caseItem.count({
     *   where: {
     *     // ... the filter for the CaseItems we want to count
     *   }
     * })
    **/
    count<T extends CaseItemCountArgs>(
      args?: Subset<T, CaseItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseItemAggregateArgs>(args: Subset<T, CaseItemAggregateArgs>): Prisma.PrismaPromise<GetCaseItemAggregateType<T>>

    /**
     * Group by CaseItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseItemGroupByArgs['orderBy'] }
        : { orderBy?: CaseItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseItem model
   */
  readonly fields: CaseItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    winnings<T extends CaseItem$winningsArgs<ExtArgs> = {}>(args?: Subset<T, CaseItem$winningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseItem model
   */ 
  interface CaseItemFieldRefs {
    readonly id: FieldRef<"CaseItem", 'Int'>
    readonly caseId: FieldRef<"CaseItem", 'Int'>
    readonly name: FieldRef<"CaseItem", 'String'>
    readonly type: FieldRef<"CaseItem", 'CaseItemType'>
    readonly payload: FieldRef<"CaseItem", 'Json'>
    readonly dropChance: FieldRef<"CaseItem", 'Float'>
    readonly imageUrl: FieldRef<"CaseItem", 'String'>
    readonly isActive: FieldRef<"CaseItem", 'Boolean'>
    readonly createdAt: FieldRef<"CaseItem", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseItem findUnique
   */
  export type CaseItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter, which CaseItem to fetch.
     */
    where: CaseItemWhereUniqueInput
  }

  /**
   * CaseItem findUniqueOrThrow
   */
  export type CaseItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter, which CaseItem to fetch.
     */
    where: CaseItemWhereUniqueInput
  }

  /**
   * CaseItem findFirst
   */
  export type CaseItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter, which CaseItem to fetch.
     */
    where?: CaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseItems to fetch.
     */
    orderBy?: CaseItemOrderByWithRelationInput | CaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseItems.
     */
    cursor?: CaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseItems.
     */
    distinct?: CaseItemScalarFieldEnum | CaseItemScalarFieldEnum[]
  }

  /**
   * CaseItem findFirstOrThrow
   */
  export type CaseItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter, which CaseItem to fetch.
     */
    where?: CaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseItems to fetch.
     */
    orderBy?: CaseItemOrderByWithRelationInput | CaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseItems.
     */
    cursor?: CaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseItems.
     */
    distinct?: CaseItemScalarFieldEnum | CaseItemScalarFieldEnum[]
  }

  /**
   * CaseItem findMany
   */
  export type CaseItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter, which CaseItems to fetch.
     */
    where?: CaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseItems to fetch.
     */
    orderBy?: CaseItemOrderByWithRelationInput | CaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseItems.
     */
    cursor?: CaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseItems.
     */
    skip?: number
    distinct?: CaseItemScalarFieldEnum | CaseItemScalarFieldEnum[]
  }

  /**
   * CaseItem create
   */
  export type CaseItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseItem.
     */
    data: XOR<CaseItemCreateInput, CaseItemUncheckedCreateInput>
  }

  /**
   * CaseItem createMany
   */
  export type CaseItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseItems.
     */
    data: CaseItemCreateManyInput | CaseItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseItem createManyAndReturn
   */
  export type CaseItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseItems.
     */
    data: CaseItemCreateManyInput | CaseItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseItem update
   */
  export type CaseItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseItem.
     */
    data: XOR<CaseItemUpdateInput, CaseItemUncheckedUpdateInput>
    /**
     * Choose, which CaseItem to update.
     */
    where: CaseItemWhereUniqueInput
  }

  /**
   * CaseItem updateMany
   */
  export type CaseItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseItems.
     */
    data: XOR<CaseItemUpdateManyMutationInput, CaseItemUncheckedUpdateManyInput>
    /**
     * Filter which CaseItems to update
     */
    where?: CaseItemWhereInput
  }

  /**
   * CaseItem upsert
   */
  export type CaseItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseItem to update in case it exists.
     */
    where: CaseItemWhereUniqueInput
    /**
     * In case the CaseItem found by the `where` argument doesn't exist, create a new CaseItem with this data.
     */
    create: XOR<CaseItemCreateInput, CaseItemUncheckedCreateInput>
    /**
     * In case the CaseItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseItemUpdateInput, CaseItemUncheckedUpdateInput>
  }

  /**
   * CaseItem delete
   */
  export type CaseItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
    /**
     * Filter which CaseItem to delete.
     */
    where: CaseItemWhereUniqueInput
  }

  /**
   * CaseItem deleteMany
   */
  export type CaseItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseItems to delete
     */
    where?: CaseItemWhereInput
  }

  /**
   * CaseItem.winnings
   */
  export type CaseItem$winningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    where?: CaseWinningWhereInput
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    cursor?: CaseWinningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * CaseItem without action
   */
  export type CaseItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseItem
     */
    select?: CaseItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseItemInclude<ExtArgs> | null
  }


  /**
   * Model CaseOpening
   */

  export type AggregateCaseOpening = {
    _count: CaseOpeningCountAggregateOutputType | null
    _avg: CaseOpeningAvgAggregateOutputType | null
    _sum: CaseOpeningSumAggregateOutputType | null
    _min: CaseOpeningMinAggregateOutputType | null
    _max: CaseOpeningMaxAggregateOutputType | null
  }

  export type CaseOpeningAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    ballsSpent: number | null
  }

  export type CaseOpeningSumAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    ballsSpent: number | null
  }

  export type CaseOpeningMinAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    ballsSpent: number | null
    createdAt: Date | null
  }

  export type CaseOpeningMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    caseId: number | null
    ballsSpent: number | null
    createdAt: Date | null
  }

  export type CaseOpeningCountAggregateOutputType = {
    id: number
    userId: number
    caseId: number
    ballsSpent: number
    createdAt: number
    _all: number
  }


  export type CaseOpeningAvgAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    ballsSpent?: true
  }

  export type CaseOpeningSumAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    ballsSpent?: true
  }

  export type CaseOpeningMinAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    ballsSpent?: true
    createdAt?: true
  }

  export type CaseOpeningMaxAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    ballsSpent?: true
    createdAt?: true
  }

  export type CaseOpeningCountAggregateInputType = {
    id?: true
    userId?: true
    caseId?: true
    ballsSpent?: true
    createdAt?: true
    _all?: true
  }

  export type CaseOpeningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseOpening to aggregate.
     */
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     */
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseOpenings
    **/
    _count?: true | CaseOpeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseOpeningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseOpeningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseOpeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseOpeningMaxAggregateInputType
  }

  export type GetCaseOpeningAggregateType<T extends CaseOpeningAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseOpening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseOpening[P]>
      : GetScalarType<T[P], AggregateCaseOpening[P]>
  }




  export type CaseOpeningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseOpeningWhereInput
    orderBy?: CaseOpeningOrderByWithAggregationInput | CaseOpeningOrderByWithAggregationInput[]
    by: CaseOpeningScalarFieldEnum[] | CaseOpeningScalarFieldEnum
    having?: CaseOpeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseOpeningCountAggregateInputType | true
    _avg?: CaseOpeningAvgAggregateInputType
    _sum?: CaseOpeningSumAggregateInputType
    _min?: CaseOpeningMinAggregateInputType
    _max?: CaseOpeningMaxAggregateInputType
  }

  export type CaseOpeningGroupByOutputType = {
    id: number
    userId: number
    caseId: number
    ballsSpent: number
    createdAt: Date
    _count: CaseOpeningCountAggregateOutputType | null
    _avg: CaseOpeningAvgAggregateOutputType | null
    _sum: CaseOpeningSumAggregateOutputType | null
    _min: CaseOpeningMinAggregateOutputType | null
    _max: CaseOpeningMaxAggregateOutputType | null
  }

  type GetCaseOpeningGroupByPayload<T extends CaseOpeningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseOpeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseOpeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseOpeningGroupByOutputType[P]>
            : GetScalarType<T[P], CaseOpeningGroupByOutputType[P]>
        }
      >
    >


  export type CaseOpeningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    caseId?: boolean
    ballsSpent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    winning?: boolean | CaseOpening$winningArgs<ExtArgs>
  }, ExtArgs["result"]["caseOpening"]>

  export type CaseOpeningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    caseId?: boolean
    ballsSpent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseOpening"]>

  export type CaseOpeningSelectScalar = {
    id?: boolean
    userId?: boolean
    caseId?: boolean
    ballsSpent?: boolean
    createdAt?: boolean
  }

  export type CaseOpeningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    winning?: boolean | CaseOpening$winningArgs<ExtArgs>
  }
  export type CaseOpeningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseOpeningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseOpening"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      case: Prisma.$CasePayload<ExtArgs>
      winning: Prisma.$CaseWinningPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      caseId: number
      ballsSpent: number
      createdAt: Date
    }, ExtArgs["result"]["caseOpening"]>
    composites: {}
  }

  type CaseOpeningGetPayload<S extends boolean | null | undefined | CaseOpeningDefaultArgs> = $Result.GetResult<Prisma.$CaseOpeningPayload, S>

  type CaseOpeningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseOpeningFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseOpeningCountAggregateInputType | true
    }

  export interface CaseOpeningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseOpening'], meta: { name: 'CaseOpening' } }
    /**
     * Find zero or one CaseOpening that matches the filter.
     * @param {CaseOpeningFindUniqueArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseOpeningFindUniqueArgs>(args: SelectSubset<T, CaseOpeningFindUniqueArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseOpening that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseOpeningFindUniqueOrThrowArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseOpeningFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseOpeningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseOpening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningFindFirstArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseOpeningFindFirstArgs>(args?: SelectSubset<T, CaseOpeningFindFirstArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseOpening that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningFindFirstOrThrowArgs} args - Arguments to find a CaseOpening
     * @example
     * // Get one CaseOpening
     * const caseOpening = await prisma.caseOpening.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseOpeningFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseOpeningFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseOpenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseOpenings
     * const caseOpenings = await prisma.caseOpening.findMany()
     * 
     * // Get first 10 CaseOpenings
     * const caseOpenings = await prisma.caseOpening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseOpeningWithIdOnly = await prisma.caseOpening.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseOpeningFindManyArgs>(args?: SelectSubset<T, CaseOpeningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseOpening.
     * @param {CaseOpeningCreateArgs} args - Arguments to create a CaseOpening.
     * @example
     * // Create one CaseOpening
     * const CaseOpening = await prisma.caseOpening.create({
     *   data: {
     *     // ... data to create a CaseOpening
     *   }
     * })
     * 
     */
    create<T extends CaseOpeningCreateArgs>(args: SelectSubset<T, CaseOpeningCreateArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseOpenings.
     * @param {CaseOpeningCreateManyArgs} args - Arguments to create many CaseOpenings.
     * @example
     * // Create many CaseOpenings
     * const caseOpening = await prisma.caseOpening.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseOpeningCreateManyArgs>(args?: SelectSubset<T, CaseOpeningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseOpenings and returns the data saved in the database.
     * @param {CaseOpeningCreateManyAndReturnArgs} args - Arguments to create many CaseOpenings.
     * @example
     * // Create many CaseOpenings
     * const caseOpening = await prisma.caseOpening.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseOpenings and only return the `id`
     * const caseOpeningWithIdOnly = await prisma.caseOpening.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseOpeningCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseOpeningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseOpening.
     * @param {CaseOpeningDeleteArgs} args - Arguments to delete one CaseOpening.
     * @example
     * // Delete one CaseOpening
     * const CaseOpening = await prisma.caseOpening.delete({
     *   where: {
     *     // ... filter to delete one CaseOpening
     *   }
     * })
     * 
     */
    delete<T extends CaseOpeningDeleteArgs>(args: SelectSubset<T, CaseOpeningDeleteArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseOpening.
     * @param {CaseOpeningUpdateArgs} args - Arguments to update one CaseOpening.
     * @example
     * // Update one CaseOpening
     * const caseOpening = await prisma.caseOpening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseOpeningUpdateArgs>(args: SelectSubset<T, CaseOpeningUpdateArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseOpenings.
     * @param {CaseOpeningDeleteManyArgs} args - Arguments to filter CaseOpenings to delete.
     * @example
     * // Delete a few CaseOpenings
     * const { count } = await prisma.caseOpening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseOpeningDeleteManyArgs>(args?: SelectSubset<T, CaseOpeningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseOpenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseOpenings
     * const caseOpening = await prisma.caseOpening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseOpeningUpdateManyArgs>(args: SelectSubset<T, CaseOpeningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseOpening.
     * @param {CaseOpeningUpsertArgs} args - Arguments to update or create a CaseOpening.
     * @example
     * // Update or create a CaseOpening
     * const caseOpening = await prisma.caseOpening.upsert({
     *   create: {
     *     // ... data to create a CaseOpening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseOpening we want to update
     *   }
     * })
     */
    upsert<T extends CaseOpeningUpsertArgs>(args: SelectSubset<T, CaseOpeningUpsertArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseOpenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningCountArgs} args - Arguments to filter CaseOpenings to count.
     * @example
     * // Count the number of CaseOpenings
     * const count = await prisma.caseOpening.count({
     *   where: {
     *     // ... the filter for the CaseOpenings we want to count
     *   }
     * })
    **/
    count<T extends CaseOpeningCountArgs>(
      args?: Subset<T, CaseOpeningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseOpeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseOpening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseOpeningAggregateArgs>(args: Subset<T, CaseOpeningAggregateArgs>): Prisma.PrismaPromise<GetCaseOpeningAggregateType<T>>

    /**
     * Group by CaseOpening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseOpeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseOpeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseOpeningGroupByArgs['orderBy'] }
        : { orderBy?: CaseOpeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseOpeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseOpeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseOpening model
   */
  readonly fields: CaseOpeningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseOpening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseOpeningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    winning<T extends CaseOpening$winningArgs<ExtArgs> = {}>(args?: Subset<T, CaseOpening$winningArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseOpening model
   */ 
  interface CaseOpeningFieldRefs {
    readonly id: FieldRef<"CaseOpening", 'Int'>
    readonly userId: FieldRef<"CaseOpening", 'Int'>
    readonly caseId: FieldRef<"CaseOpening", 'Int'>
    readonly ballsSpent: FieldRef<"CaseOpening", 'Int'>
    readonly createdAt: FieldRef<"CaseOpening", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseOpening findUnique
   */
  export type CaseOpeningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter, which CaseOpening to fetch.
     */
    where: CaseOpeningWhereUniqueInput
  }

  /**
   * CaseOpening findUniqueOrThrow
   */
  export type CaseOpeningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter, which CaseOpening to fetch.
     */
    where: CaseOpeningWhereUniqueInput
  }

  /**
   * CaseOpening findFirst
   */
  export type CaseOpeningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter, which CaseOpening to fetch.
     */
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     */
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseOpenings.
     */
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseOpenings.
     */
    distinct?: CaseOpeningScalarFieldEnum | CaseOpeningScalarFieldEnum[]
  }

  /**
   * CaseOpening findFirstOrThrow
   */
  export type CaseOpeningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter, which CaseOpening to fetch.
     */
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     */
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseOpenings.
     */
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseOpenings.
     */
    distinct?: CaseOpeningScalarFieldEnum | CaseOpeningScalarFieldEnum[]
  }

  /**
   * CaseOpening findMany
   */
  export type CaseOpeningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter, which CaseOpenings to fetch.
     */
    where?: CaseOpeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseOpenings to fetch.
     */
    orderBy?: CaseOpeningOrderByWithRelationInput | CaseOpeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseOpenings.
     */
    cursor?: CaseOpeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseOpenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseOpenings.
     */
    skip?: number
    distinct?: CaseOpeningScalarFieldEnum | CaseOpeningScalarFieldEnum[]
  }

  /**
   * CaseOpening create
   */
  export type CaseOpeningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseOpening.
     */
    data: XOR<CaseOpeningCreateInput, CaseOpeningUncheckedCreateInput>
  }

  /**
   * CaseOpening createMany
   */
  export type CaseOpeningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseOpenings.
     */
    data: CaseOpeningCreateManyInput | CaseOpeningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseOpening createManyAndReturn
   */
  export type CaseOpeningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseOpenings.
     */
    data: CaseOpeningCreateManyInput | CaseOpeningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseOpening update
   */
  export type CaseOpeningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseOpening.
     */
    data: XOR<CaseOpeningUpdateInput, CaseOpeningUncheckedUpdateInput>
    /**
     * Choose, which CaseOpening to update.
     */
    where: CaseOpeningWhereUniqueInput
  }

  /**
   * CaseOpening updateMany
   */
  export type CaseOpeningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseOpenings.
     */
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyInput>
    /**
     * Filter which CaseOpenings to update
     */
    where?: CaseOpeningWhereInput
  }

  /**
   * CaseOpening upsert
   */
  export type CaseOpeningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseOpening to update in case it exists.
     */
    where: CaseOpeningWhereUniqueInput
    /**
     * In case the CaseOpening found by the `where` argument doesn't exist, create a new CaseOpening with this data.
     */
    create: XOR<CaseOpeningCreateInput, CaseOpeningUncheckedCreateInput>
    /**
     * In case the CaseOpening was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseOpeningUpdateInput, CaseOpeningUncheckedUpdateInput>
  }

  /**
   * CaseOpening delete
   */
  export type CaseOpeningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
    /**
     * Filter which CaseOpening to delete.
     */
    where: CaseOpeningWhereUniqueInput
  }

  /**
   * CaseOpening deleteMany
   */
  export type CaseOpeningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseOpenings to delete
     */
    where?: CaseOpeningWhereInput
  }

  /**
   * CaseOpening.winning
   */
  export type CaseOpening$winningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    where?: CaseWinningWhereInput
  }

  /**
   * CaseOpening without action
   */
  export type CaseOpeningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseOpening
     */
    select?: CaseOpeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseOpeningInclude<ExtArgs> | null
  }


  /**
   * Model CaseWinning
   */

  export type AggregateCaseWinning = {
    _count: CaseWinningCountAggregateOutputType | null
    _avg: CaseWinningAvgAggregateOutputType | null
    _sum: CaseWinningSumAggregateOutputType | null
    _min: CaseWinningMinAggregateOutputType | null
    _max: CaseWinningMaxAggregateOutputType | null
  }

  export type CaseWinningAvgAggregateOutputType = {
    id: number | null
    openingId: number | null
    userId: number | null
    caseId: number | null
    itemId: number | null
  }

  export type CaseWinningSumAggregateOutputType = {
    id: number | null
    openingId: number | null
    userId: number | null
    caseId: number | null
    itemId: number | null
  }

  export type CaseWinningMinAggregateOutputType = {
    id: number | null
    openingId: number | null
    userId: number | null
    caseId: number | null
    itemId: number | null
    isProcessed: boolean | null
    processedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseWinningMaxAggregateOutputType = {
    id: number | null
    openingId: number | null
    userId: number | null
    caseId: number | null
    itemId: number | null
    isProcessed: boolean | null
    processedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseWinningCountAggregateOutputType = {
    id: number
    openingId: number
    userId: number
    caseId: number
    itemId: number
    isProcessed: number
    processedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseWinningAvgAggregateInputType = {
    id?: true
    openingId?: true
    userId?: true
    caseId?: true
    itemId?: true
  }

  export type CaseWinningSumAggregateInputType = {
    id?: true
    openingId?: true
    userId?: true
    caseId?: true
    itemId?: true
  }

  export type CaseWinningMinAggregateInputType = {
    id?: true
    openingId?: true
    userId?: true
    caseId?: true
    itemId?: true
    isProcessed?: true
    processedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseWinningMaxAggregateInputType = {
    id?: true
    openingId?: true
    userId?: true
    caseId?: true
    itemId?: true
    isProcessed?: true
    processedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseWinningCountAggregateInputType = {
    id?: true
    openingId?: true
    userId?: true
    caseId?: true
    itemId?: true
    isProcessed?: true
    processedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseWinningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseWinning to aggregate.
     */
    where?: CaseWinningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseWinnings to fetch.
     */
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWinningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseWinnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseWinnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseWinnings
    **/
    _count?: true | CaseWinningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseWinningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseWinningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseWinningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseWinningMaxAggregateInputType
  }

  export type GetCaseWinningAggregateType<T extends CaseWinningAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseWinning]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseWinning[P]>
      : GetScalarType<T[P], AggregateCaseWinning[P]>
  }




  export type CaseWinningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWinningWhereInput
    orderBy?: CaseWinningOrderByWithAggregationInput | CaseWinningOrderByWithAggregationInput[]
    by: CaseWinningScalarFieldEnum[] | CaseWinningScalarFieldEnum
    having?: CaseWinningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseWinningCountAggregateInputType | true
    _avg?: CaseWinningAvgAggregateInputType
    _sum?: CaseWinningSumAggregateInputType
    _min?: CaseWinningMinAggregateInputType
    _max?: CaseWinningMaxAggregateInputType
  }

  export type CaseWinningGroupByOutputType = {
    id: number
    openingId: number
    userId: number
    caseId: number
    itemId: number
    isProcessed: boolean
    processedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: CaseWinningCountAggregateOutputType | null
    _avg: CaseWinningAvgAggregateOutputType | null
    _sum: CaseWinningSumAggregateOutputType | null
    _min: CaseWinningMinAggregateOutputType | null
    _max: CaseWinningMaxAggregateOutputType | null
  }

  type GetCaseWinningGroupByPayload<T extends CaseWinningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseWinningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseWinningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseWinningGroupByOutputType[P]>
            : GetScalarType<T[P], CaseWinningGroupByOutputType[P]>
        }
      >
    >


  export type CaseWinningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    openingId?: boolean
    userId?: boolean
    caseId?: boolean
    itemId?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    opening?: boolean | CaseOpeningDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    item?: boolean | CaseItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseWinning"]>

  export type CaseWinningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    openingId?: boolean
    userId?: boolean
    caseId?: boolean
    itemId?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    opening?: boolean | CaseOpeningDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    item?: boolean | CaseItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseWinning"]>

  export type CaseWinningSelectScalar = {
    id?: boolean
    openingId?: boolean
    userId?: boolean
    caseId?: boolean
    itemId?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseWinningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opening?: boolean | CaseOpeningDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    item?: boolean | CaseItemDefaultArgs<ExtArgs>
  }
  export type CaseWinningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opening?: boolean | CaseOpeningDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
    item?: boolean | CaseItemDefaultArgs<ExtArgs>
  }

  export type $CaseWinningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseWinning"
    objects: {
      opening: Prisma.$CaseOpeningPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      case: Prisma.$CasePayload<ExtArgs>
      item: Prisma.$CaseItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      openingId: number
      userId: number
      caseId: number
      itemId: number
      isProcessed: boolean
      processedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseWinning"]>
    composites: {}
  }

  type CaseWinningGetPayload<S extends boolean | null | undefined | CaseWinningDefaultArgs> = $Result.GetResult<Prisma.$CaseWinningPayload, S>

  type CaseWinningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseWinningFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseWinningCountAggregateInputType | true
    }

  export interface CaseWinningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseWinning'], meta: { name: 'CaseWinning' } }
    /**
     * Find zero or one CaseWinning that matches the filter.
     * @param {CaseWinningFindUniqueArgs} args - Arguments to find a CaseWinning
     * @example
     * // Get one CaseWinning
     * const caseWinning = await prisma.caseWinning.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseWinningFindUniqueArgs>(args: SelectSubset<T, CaseWinningFindUniqueArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseWinning that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseWinningFindUniqueOrThrowArgs} args - Arguments to find a CaseWinning
     * @example
     * // Get one CaseWinning
     * const caseWinning = await prisma.caseWinning.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseWinningFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseWinningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseWinning that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningFindFirstArgs} args - Arguments to find a CaseWinning
     * @example
     * // Get one CaseWinning
     * const caseWinning = await prisma.caseWinning.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseWinningFindFirstArgs>(args?: SelectSubset<T, CaseWinningFindFirstArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseWinning that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningFindFirstOrThrowArgs} args - Arguments to find a CaseWinning
     * @example
     * // Get one CaseWinning
     * const caseWinning = await prisma.caseWinning.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseWinningFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseWinningFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseWinnings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseWinnings
     * const caseWinnings = await prisma.caseWinning.findMany()
     * 
     * // Get first 10 CaseWinnings
     * const caseWinnings = await prisma.caseWinning.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWinningWithIdOnly = await prisma.caseWinning.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseWinningFindManyArgs>(args?: SelectSubset<T, CaseWinningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseWinning.
     * @param {CaseWinningCreateArgs} args - Arguments to create a CaseWinning.
     * @example
     * // Create one CaseWinning
     * const CaseWinning = await prisma.caseWinning.create({
     *   data: {
     *     // ... data to create a CaseWinning
     *   }
     * })
     * 
     */
    create<T extends CaseWinningCreateArgs>(args: SelectSubset<T, CaseWinningCreateArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseWinnings.
     * @param {CaseWinningCreateManyArgs} args - Arguments to create many CaseWinnings.
     * @example
     * // Create many CaseWinnings
     * const caseWinning = await prisma.caseWinning.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseWinningCreateManyArgs>(args?: SelectSubset<T, CaseWinningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseWinnings and returns the data saved in the database.
     * @param {CaseWinningCreateManyAndReturnArgs} args - Arguments to create many CaseWinnings.
     * @example
     * // Create many CaseWinnings
     * const caseWinning = await prisma.caseWinning.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseWinnings and only return the `id`
     * const caseWinningWithIdOnly = await prisma.caseWinning.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseWinningCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseWinningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseWinning.
     * @param {CaseWinningDeleteArgs} args - Arguments to delete one CaseWinning.
     * @example
     * // Delete one CaseWinning
     * const CaseWinning = await prisma.caseWinning.delete({
     *   where: {
     *     // ... filter to delete one CaseWinning
     *   }
     * })
     * 
     */
    delete<T extends CaseWinningDeleteArgs>(args: SelectSubset<T, CaseWinningDeleteArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseWinning.
     * @param {CaseWinningUpdateArgs} args - Arguments to update one CaseWinning.
     * @example
     * // Update one CaseWinning
     * const caseWinning = await prisma.caseWinning.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseWinningUpdateArgs>(args: SelectSubset<T, CaseWinningUpdateArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseWinnings.
     * @param {CaseWinningDeleteManyArgs} args - Arguments to filter CaseWinnings to delete.
     * @example
     * // Delete a few CaseWinnings
     * const { count } = await prisma.caseWinning.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseWinningDeleteManyArgs>(args?: SelectSubset<T, CaseWinningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseWinnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseWinnings
     * const caseWinning = await prisma.caseWinning.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseWinningUpdateManyArgs>(args: SelectSubset<T, CaseWinningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseWinning.
     * @param {CaseWinningUpsertArgs} args - Arguments to update or create a CaseWinning.
     * @example
     * // Update or create a CaseWinning
     * const caseWinning = await prisma.caseWinning.upsert({
     *   create: {
     *     // ... data to create a CaseWinning
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseWinning we want to update
     *   }
     * })
     */
    upsert<T extends CaseWinningUpsertArgs>(args: SelectSubset<T, CaseWinningUpsertArgs<ExtArgs>>): Prisma__CaseWinningClient<$Result.GetResult<Prisma.$CaseWinningPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseWinnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningCountArgs} args - Arguments to filter CaseWinnings to count.
     * @example
     * // Count the number of CaseWinnings
     * const count = await prisma.caseWinning.count({
     *   where: {
     *     // ... the filter for the CaseWinnings we want to count
     *   }
     * })
    **/
    count<T extends CaseWinningCountArgs>(
      args?: Subset<T, CaseWinningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseWinningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseWinning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseWinningAggregateArgs>(args: Subset<T, CaseWinningAggregateArgs>): Prisma.PrismaPromise<GetCaseWinningAggregateType<T>>

    /**
     * Group by CaseWinning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseWinningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseWinningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseWinningGroupByArgs['orderBy'] }
        : { orderBy?: CaseWinningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseWinningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseWinningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseWinning model
   */
  readonly fields: CaseWinningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseWinning.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseWinningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    opening<T extends CaseOpeningDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseOpeningDefaultArgs<ExtArgs>>): Prisma__CaseOpeningClient<$Result.GetResult<Prisma.$CaseOpeningPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends CaseItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseItemDefaultArgs<ExtArgs>>): Prisma__CaseItemClient<$Result.GetResult<Prisma.$CaseItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseWinning model
   */ 
  interface CaseWinningFieldRefs {
    readonly id: FieldRef<"CaseWinning", 'Int'>
    readonly openingId: FieldRef<"CaseWinning", 'Int'>
    readonly userId: FieldRef<"CaseWinning", 'Int'>
    readonly caseId: FieldRef<"CaseWinning", 'Int'>
    readonly itemId: FieldRef<"CaseWinning", 'Int'>
    readonly isProcessed: FieldRef<"CaseWinning", 'Boolean'>
    readonly processedAt: FieldRef<"CaseWinning", 'DateTime'>
    readonly notes: FieldRef<"CaseWinning", 'String'>
    readonly createdAt: FieldRef<"CaseWinning", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseWinning", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseWinning findUnique
   */
  export type CaseWinningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter, which CaseWinning to fetch.
     */
    where: CaseWinningWhereUniqueInput
  }

  /**
   * CaseWinning findUniqueOrThrow
   */
  export type CaseWinningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter, which CaseWinning to fetch.
     */
    where: CaseWinningWhereUniqueInput
  }

  /**
   * CaseWinning findFirst
   */
  export type CaseWinningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter, which CaseWinning to fetch.
     */
    where?: CaseWinningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseWinnings to fetch.
     */
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseWinnings.
     */
    cursor?: CaseWinningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseWinnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseWinnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseWinnings.
     */
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * CaseWinning findFirstOrThrow
   */
  export type CaseWinningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter, which CaseWinning to fetch.
     */
    where?: CaseWinningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseWinnings to fetch.
     */
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseWinnings.
     */
    cursor?: CaseWinningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseWinnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseWinnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseWinnings.
     */
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * CaseWinning findMany
   */
  export type CaseWinningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter, which CaseWinnings to fetch.
     */
    where?: CaseWinningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseWinnings to fetch.
     */
    orderBy?: CaseWinningOrderByWithRelationInput | CaseWinningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseWinnings.
     */
    cursor?: CaseWinningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseWinnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseWinnings.
     */
    skip?: number
    distinct?: CaseWinningScalarFieldEnum | CaseWinningScalarFieldEnum[]
  }

  /**
   * CaseWinning create
   */
  export type CaseWinningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseWinning.
     */
    data: XOR<CaseWinningCreateInput, CaseWinningUncheckedCreateInput>
  }

  /**
   * CaseWinning createMany
   */
  export type CaseWinningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseWinnings.
     */
    data: CaseWinningCreateManyInput | CaseWinningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseWinning createManyAndReturn
   */
  export type CaseWinningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseWinnings.
     */
    data: CaseWinningCreateManyInput | CaseWinningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseWinning update
   */
  export type CaseWinningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseWinning.
     */
    data: XOR<CaseWinningUpdateInput, CaseWinningUncheckedUpdateInput>
    /**
     * Choose, which CaseWinning to update.
     */
    where: CaseWinningWhereUniqueInput
  }

  /**
   * CaseWinning updateMany
   */
  export type CaseWinningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseWinnings.
     */
    data: XOR<CaseWinningUpdateManyMutationInput, CaseWinningUncheckedUpdateManyInput>
    /**
     * Filter which CaseWinnings to update
     */
    where?: CaseWinningWhereInput
  }

  /**
   * CaseWinning upsert
   */
  export type CaseWinningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseWinning to update in case it exists.
     */
    where: CaseWinningWhereUniqueInput
    /**
     * In case the CaseWinning found by the `where` argument doesn't exist, create a new CaseWinning with this data.
     */
    create: XOR<CaseWinningCreateInput, CaseWinningUncheckedCreateInput>
    /**
     * In case the CaseWinning was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseWinningUpdateInput, CaseWinningUncheckedUpdateInput>
  }

  /**
   * CaseWinning delete
   */
  export type CaseWinningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
    /**
     * Filter which CaseWinning to delete.
     */
    where: CaseWinningWhereUniqueInput
  }

  /**
   * CaseWinning deleteMany
   */
  export type CaseWinningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseWinnings to delete
     */
    where?: CaseWinningWhereInput
  }

  /**
   * CaseWinning without action
   */
  export type CaseWinningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseWinning
     */
    select?: CaseWinningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseWinningInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    winnerId: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    winnerId: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    winnerId: number | null
    type: $Enums.MatchType | null
    state: $Enums.MatchState | null
    score: string | null
    matchDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    locationName: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    winnerId: number | null
    type: $Enums.MatchType | null
    state: $Enums.MatchState | null
    score: string | null
    matchDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    locationName: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    creatorId: number
    player1Id: number
    player2Id: number
    optionalId: number
    winnerId: number
    type: number
    state: number
    score: number
    matchDate: number
    createdAt: number
    updatedAt: number
    locationName: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    winnerId?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    winnerId?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    winnerId?: true
    type?: true
    state?: true
    score?: true
    matchDate?: true
    createdAt?: true
    updatedAt?: true
    locationName?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    winnerId?: true
    type?: true
    state?: true
    score?: true
    matchDate?: true
    createdAt?: true
    updatedAt?: true
    locationName?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    winnerId?: true
    type?: true
    state?: true
    score?: true
    matchDate?: true
    createdAt?: true
    updatedAt?: true
    locationName?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: number
    creatorId: number
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    winnerId: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score: string | null
    matchDate: Date
    createdAt: Date
    updatedAt: Date
    locationName: string | null
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    optionalId?: boolean
    winnerId?: boolean
    type?: boolean
    state?: boolean
    score?: boolean
    matchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationName?: boolean
    invites?: boolean | Match$invitesArgs<ExtArgs>
    feedbacks?: boolean | Match$feedbacksArgs<ExtArgs>
    ratingHistory?: boolean | Match$ratingHistoryArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    player1?: boolean | Match$player1Args<ExtArgs>
    player2?: boolean | Match$player2Args<ExtArgs>
    winner?: boolean | Match$winnerArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    optionalId?: boolean
    winnerId?: boolean
    type?: boolean
    state?: boolean
    score?: boolean
    matchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationName?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    player1?: boolean | Match$player1Args<ExtArgs>
    player2?: boolean | Match$player2Args<ExtArgs>
    winner?: boolean | Match$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    creatorId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    optionalId?: boolean
    winnerId?: boolean
    type?: boolean
    state?: boolean
    score?: boolean
    matchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locationName?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invites?: boolean | Match$invitesArgs<ExtArgs>
    feedbacks?: boolean | Match$feedbacksArgs<ExtArgs>
    ratingHistory?: boolean | Match$ratingHistoryArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    player1?: boolean | Match$player1Args<ExtArgs>
    player2?: boolean | Match$player2Args<ExtArgs>
    winner?: boolean | Match$winnerArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    player1?: boolean | Match$player1Args<ExtArgs>
    player2?: boolean | Match$player2Args<ExtArgs>
    winner?: boolean | Match$winnerArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      invites: Prisma.$InvitePayload<ExtArgs>[]
      feedbacks: Prisma.$MatchFeedbackPayload<ExtArgs>[]
      ratingHistory: Prisma.$RatingHistoryPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      player1: Prisma.$UserPayload<ExtArgs> | null
      player2: Prisma.$UserPayload<ExtArgs> | null
      winner: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      creatorId: number
      player1Id: number | null
      player2Id: number | null
      optionalId: number | null
      winnerId: number | null
      type: $Enums.MatchType
      state: $Enums.MatchState
      score: string | null
      matchDate: Date
      createdAt: Date
      updatedAt: Date
      locationName: string | null
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invites<T extends Match$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Match$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    feedbacks<T extends Match$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Match$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    ratingHistory<T extends Match$ratingHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Match$ratingHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    player1<T extends Match$player1Args<ExtArgs> = {}>(args?: Subset<T, Match$player1Args<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    player2<T extends Match$player2Args<ExtArgs> = {}>(args?: Subset<T, Match$player2Args<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    winner<T extends Match$winnerArgs<ExtArgs> = {}>(args?: Subset<T, Match$winnerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'Int'>
    readonly creatorId: FieldRef<"Match", 'Int'>
    readonly player1Id: FieldRef<"Match", 'Int'>
    readonly player2Id: FieldRef<"Match", 'Int'>
    readonly optionalId: FieldRef<"Match", 'Int'>
    readonly winnerId: FieldRef<"Match", 'Int'>
    readonly type: FieldRef<"Match", 'MatchType'>
    readonly state: FieldRef<"Match", 'MatchState'>
    readonly score: FieldRef<"Match", 'String'>
    readonly matchDate: FieldRef<"Match", 'DateTime'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
    readonly updatedAt: FieldRef<"Match", 'DateTime'>
    readonly locationName: FieldRef<"Match", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match.invites
   */
  export type Match$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Match.feedbacks
   */
  export type Match$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchFeedback
     */
    select?: MatchFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchFeedbackInclude<ExtArgs> | null
    where?: MatchFeedbackWhereInput
    orderBy?: MatchFeedbackOrderByWithRelationInput | MatchFeedbackOrderByWithRelationInput[]
    cursor?: MatchFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchFeedbackScalarFieldEnum | MatchFeedbackScalarFieldEnum[]
  }

  /**
   * Match.ratingHistory
   */
  export type Match$ratingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingHistory
     */
    select?: RatingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingHistoryInclude<ExtArgs> | null
    where?: RatingHistoryWhereInput
    orderBy?: RatingHistoryOrderByWithRelationInput | RatingHistoryOrderByWithRelationInput[]
    cursor?: RatingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingHistoryScalarFieldEnum | RatingHistoryScalarFieldEnum[]
  }

  /**
   * Match.player1
   */
  export type Match$player1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Match.player2
   */
  export type Match$player2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Match.winner
   */
  export type Match$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model Training
   */

  export type AggregateTraining = {
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  export type TrainingAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: $Enums.TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: $Enums.TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingCountAggregateOutputType = {
    id: number
    creatorId: number
    location: number
    time: number
    participantLimit: number
    description: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingAvgAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingSumAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingMinAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingMaxAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingCountAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Training to aggregate.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trainings
    **/
    _count?: true | TrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingMaxAggregateInputType
  }

  export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraining[P]>
      : GetScalarType<T[P], AggregateTraining[P]>
  }




  export type TrainingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithAggregationInput | TrainingOrderByWithAggregationInput[]
    by: TrainingScalarFieldEnum[] | TrainingScalarFieldEnum
    having?: TrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCountAggregateInputType | true
    _avg?: TrainingAvgAggregateInputType
    _sum?: TrainingSumAggregateInputType
    _min?: TrainingMinAggregateInputType
    _max?: TrainingMaxAggregateInputType
  }

  export type TrainingGroupByOutputType = {
    id: number
    creatorId: number
    location: string
    time: Date
    participantLimit: number
    description: string | null
    state: $Enums.TrainingState
    createdAt: Date
    updatedAt: Date
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    location?: boolean
    time?: boolean
    participantLimit?: boolean
    description?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    invites?: boolean | Training$invitesArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    location?: boolean
    time?: boolean
    participantLimit?: boolean
    description?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectScalar = {
    id?: boolean
    creatorId?: boolean
    location?: boolean
    time?: boolean
    participantLimit?: boolean
    description?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrainingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    invites?: boolean | Training$invitesArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrainingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TrainingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Training"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      invites: Prisma.$InvitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      creatorId: number
      location: string
      time: Date
      participantLimit: number
      description: string | null
      state: $Enums.TrainingState
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["training"]>
    composites: {}
  }

  type TrainingGetPayload<S extends boolean | null | undefined | TrainingDefaultArgs> = $Result.GetResult<Prisma.$TrainingPayload, S>

  type TrainingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrainingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrainingCountAggregateInputType | true
    }

  export interface TrainingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Training'], meta: { name: 'Training' } }
    /**
     * Find zero or one Training that matches the filter.
     * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingFindUniqueArgs>(args: SelectSubset<T, TrainingFindUniqueArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Training that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrainingFindUniqueOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Training that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingFindFirstArgs>(args?: SelectSubset<T, TrainingFindFirstArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Training that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trainings
     * const trainings = await prisma.training.findMany()
     * 
     * // Get first 10 Trainings
     * const trainings = await prisma.training.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingFindManyArgs>(args?: SelectSubset<T, TrainingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Training.
     * @param {TrainingCreateArgs} args - Arguments to create a Training.
     * @example
     * // Create one Training
     * const Training = await prisma.training.create({
     *   data: {
     *     // ... data to create a Training
     *   }
     * })
     * 
     */
    create<T extends TrainingCreateArgs>(args: SelectSubset<T, TrainingCreateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trainings.
     * @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingCreateManyArgs>(args?: SelectSubset<T, TrainingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trainings and returns the data saved in the database.
     * @param {TrainingCreateManyAndReturnArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trainings and only return the `id`
     * const trainingWithIdOnly = await prisma.training.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Training.
     * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
     * @example
     * // Delete one Training
     * const Training = await prisma.training.delete({
     *   where: {
     *     // ... filter to delete one Training
     *   }
     * })
     * 
     */
    delete<T extends TrainingDeleteArgs>(args: SelectSubset<T, TrainingDeleteArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Training.
     * @param {TrainingUpdateArgs} args - Arguments to update one Training.
     * @example
     * // Update one Training
     * const training = await prisma.training.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingUpdateArgs>(args: SelectSubset<T, TrainingUpdateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trainings.
     * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
     * @example
     * // Delete a few Trainings
     * const { count } = await prisma.training.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingDeleteManyArgs>(args?: SelectSubset<T, TrainingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingUpdateManyArgs>(args: SelectSubset<T, TrainingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Training.
     * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
     * @example
     * // Update or create a Training
     * const training = await prisma.training.upsert({
     *   create: {
     *     // ... data to create a Training
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Training we want to update
     *   }
     * })
     */
    upsert<T extends TrainingUpsertArgs>(args: SelectSubset<T, TrainingUpsertArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
     * @example
     * // Count the number of Trainings
     * const count = await prisma.training.count({
     *   where: {
     *     // ... the filter for the Trainings we want to count
     *   }
     * })
    **/
    count<T extends TrainingCountArgs>(
      args?: Subset<T, TrainingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingAggregateArgs>(args: Subset<T, TrainingAggregateArgs>): Prisma.PrismaPromise<GetTrainingAggregateType<T>>

    /**
     * Group by Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingGroupByArgs['orderBy'] }
        : { orderBy?: TrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Training model
   */
  readonly fields: TrainingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Training.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    invites<T extends Training$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Training$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Training model
   */ 
  interface TrainingFieldRefs {
    readonly id: FieldRef<"Training", 'Int'>
    readonly creatorId: FieldRef<"Training", 'Int'>
    readonly location: FieldRef<"Training", 'String'>
    readonly time: FieldRef<"Training", 'DateTime'>
    readonly participantLimit: FieldRef<"Training", 'Int'>
    readonly description: FieldRef<"Training", 'String'>
    readonly state: FieldRef<"Training", 'TrainingState'>
    readonly createdAt: FieldRef<"Training", 'DateTime'>
    readonly updatedAt: FieldRef<"Training", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Training findUnique
   */
  export type TrainingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findUniqueOrThrow
   */
  export type TrainingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findFirst
   */
  export type TrainingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findFirstOrThrow
   */
  export type TrainingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findMany
   */
  export type TrainingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Trainings to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training create
   */
  export type TrainingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to create a Training.
     */
    data: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
  }

  /**
   * Training createMany
   */
  export type TrainingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Training createManyAndReturn
   */
  export type TrainingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Training update
   */
  export type TrainingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to update a Training.
     */
    data: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
    /**
     * Choose, which Training to update.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training updateMany
   */
  export type TrainingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trainings.
     */
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     */
    where?: TrainingWhereInput
  }

  /**
   * Training upsert
   */
  export type TrainingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The filter to search for the Training to update in case it exists.
     */
    where: TrainingWhereUniqueInput
    /**
     * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
     */
    create: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
    /**
     * In case the Training was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
  }

  /**
   * Training delete
   */
  export type TrainingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter which Training to delete.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training deleteMany
   */
  export type TrainingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trainings to delete
     */
    where?: TrainingWhereInput
  }

  /**
   * Training.invites
   */
  export type Training$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Training without action
   */
  export type TrainingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
  }


  /**
   * Model Tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: $Enums.TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: $Enums.TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    status: number
    creatorId: number
    startDate: number
    endDate: number
    formatDetails: number
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: number
    locationId: number
    locationName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentSumAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    formatDetails?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournament to aggregate.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithAggregationInput | TournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: number
    title: string
    description: string | null
    type: $Enums.TournamentType
    status: string
    creatorId: number
    startDate: Date
    endDate: Date
    formatDetails: JsonValue | null
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId: number | null
    locationName: string | null
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    creatorId?: boolean
    startDate?: boolean
    endDate?: boolean
    formatDetails?: boolean
    minPlayers?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    isRanked?: boolean
    locationId?: boolean
    locationName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Tournament$playersArgs<ExtArgs>
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    creatorId?: boolean
    startDate?: boolean
    endDate?: boolean
    formatDetails?: boolean
    minPlayers?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    isRanked?: boolean
    locationId?: boolean
    locationName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    creatorId?: boolean
    startDate?: boolean
    endDate?: boolean
    formatDetails?: boolean
    minPlayers?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    isRanked?: boolean
    locationId?: boolean
    locationName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Tournament$playersArgs<ExtArgs>
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tournament"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      players: Prisma.$UserPayload<ExtArgs>[]
      matches: Prisma.$TournamentMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      type: $Enums.TournamentType
      status: string
      creatorId: number
      startDate: Date
      endDate: Date
      formatDetails: Prisma.JsonValue | null
      minPlayers: number
      maxPlayers: number
      currentPlayers: number
      isRanked: boolean
      locationId: number | null
      locationName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = $Result.GetResult<Prisma.$TournamentPayload, S>

  type TournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface TournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFindUniqueArgs>(args: SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFindFirstArgs>(args?: SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFindManyArgs>(args?: SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends TournamentCreateArgs>(args: SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tournaments.
     * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentCreateManyArgs>(args?: SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends TournamentDeleteArgs>(args: SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentUpdateArgs>(args: SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentDeleteManyArgs>(args?: SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentUpdateManyArgs>(args: SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends TournamentUpsertArgs>(args: SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tournament model
   */
  readonly fields: TournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    players<T extends Tournament$playersArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    matches<T extends Tournament$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tournament model
   */ 
  interface TournamentFieldRefs {
    readonly id: FieldRef<"Tournament", 'Int'>
    readonly title: FieldRef<"Tournament", 'String'>
    readonly description: FieldRef<"Tournament", 'String'>
    readonly type: FieldRef<"Tournament", 'TournamentType'>
    readonly status: FieldRef<"Tournament", 'String'>
    readonly creatorId: FieldRef<"Tournament", 'Int'>
    readonly startDate: FieldRef<"Tournament", 'DateTime'>
    readonly endDate: FieldRef<"Tournament", 'DateTime'>
    readonly formatDetails: FieldRef<"Tournament", 'Json'>
    readonly minPlayers: FieldRef<"Tournament", 'Int'>
    readonly maxPlayers: FieldRef<"Tournament", 'Int'>
    readonly currentPlayers: FieldRef<"Tournament", 'Int'>
    readonly isRanked: FieldRef<"Tournament", 'Boolean'>
    readonly locationId: FieldRef<"Tournament", 'Int'>
    readonly locationName: FieldRef<"Tournament", 'String'>
    readonly createdAt: FieldRef<"Tournament", 'DateTime'>
    readonly updatedAt: FieldRef<"Tournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findUniqueOrThrow
   */
  export type TournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findFirstOrThrow
   */
  export type TournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournaments to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament create
   */
  export type TournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a Tournament.
     */
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }

  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament createManyAndReturn
   */
  export type TournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament update
   */
  export type TournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a Tournament.
     */
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     */
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     */
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }

  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter which Tournament to delete.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournaments to delete
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament.players
   */
  export type Tournament$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tournament.matches
   */
  export type Tournament$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * Tournament without action
   */
  export type TournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
  }


  /**
   * Model TournamentMatch
   */

  export type AggregateTournamentMatch = {
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  export type TournamentMatchAvgAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number | null
  }

  export type TournamentMatchSumAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number[]
  }

  export type TournamentMatchMinAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    score: string | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchMaxAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    score: string | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchCountAggregateOutputType = {
    id: number
    tournamentId: number
    round: number
    group: number
    playerAId: number
    playerBId: number
    winnerId: number
    score: number
    status: number
    court: number
    scheduledAt: number
    confirmedBy: number
    isThirdPlaceMatch: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentMatchAvgAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchSumAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchMinAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    score?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    score?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchCountAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    score?: true
    status?: true
    court?: true
    scheduledAt?: true
    confirmedBy?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentMatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentMatch to aggregate.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentMatches
    **/
    _count?: true | TournamentMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type GetTournamentMatchAggregateType<T extends TournamentMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentMatch[P]>
      : GetScalarType<T[P], AggregateTournamentMatch[P]>
  }




  export type TournamentMatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithAggregationInput | TournamentMatchOrderByWithAggregationInput[]
    by: TournamentMatchScalarFieldEnum[] | TournamentMatchScalarFieldEnum
    having?: TournamentMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentMatchCountAggregateInputType | true
    _avg?: TournamentMatchAvgAggregateInputType
    _sum?: TournamentMatchSumAggregateInputType
    _min?: TournamentMatchMinAggregateInputType
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type TournamentMatchGroupByOutputType = {
    id: number
    tournamentId: number
    round: number | null
    group: string | null
    playerAId: number
    playerBId: number | null
    winnerId: number | null
    score: string | null
    status: string
    court: string | null
    scheduledAt: Date | null
    confirmedBy: number[]
    isThirdPlaceMatch: boolean
    createdAt: Date
    updatedAt: Date
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  type GetTournamentMatchGroupByPayload<T extends TournamentMatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
        }
      >
    >


  export type TournamentMatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    round?: boolean
    group?: boolean
    playerAId?: boolean
    playerBId?: boolean
    winnerId?: boolean
    score?: boolean
    status?: boolean
    court?: boolean
    scheduledAt?: boolean
    confirmedBy?: boolean
    isThirdPlaceMatch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    playerA?: boolean | UserDefaultArgs<ExtArgs>
    playerB?: boolean | TournamentMatch$playerBArgs<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentMatch"]>

  export type TournamentMatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    round?: boolean
    group?: boolean
    playerAId?: boolean
    playerBId?: boolean
    winnerId?: boolean
    score?: boolean
    status?: boolean
    court?: boolean
    scheduledAt?: boolean
    confirmedBy?: boolean
    isThirdPlaceMatch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    playerA?: boolean | UserDefaultArgs<ExtArgs>
    playerB?: boolean | TournamentMatch$playerBArgs<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentMatch"]>

  export type TournamentMatchSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    round?: boolean
    group?: boolean
    playerAId?: boolean
    playerBId?: boolean
    winnerId?: boolean
    score?: boolean
    status?: boolean
    court?: boolean
    scheduledAt?: boolean
    confirmedBy?: boolean
    isThirdPlaceMatch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentMatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    playerA?: boolean | UserDefaultArgs<ExtArgs>
    playerB?: boolean | TournamentMatch$playerBArgs<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }
  export type TournamentMatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    playerA?: boolean | UserDefaultArgs<ExtArgs>
    playerB?: boolean | TournamentMatch$playerBArgs<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }

  export type $TournamentMatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentMatch"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      playerA: Prisma.$UserPayload<ExtArgs>
      playerB: Prisma.$UserPayload<ExtArgs> | null
      winner: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tournamentId: number
      round: number | null
      group: string | null
      playerAId: number
      playerBId: number | null
      winnerId: number | null
      score: string | null
      status: string
      court: string | null
      scheduledAt: Date | null
      confirmedBy: number[]
      isThirdPlaceMatch: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournamentMatch"]>
    composites: {}
  }

  type TournamentMatchGetPayload<S extends boolean | null | undefined | TournamentMatchDefaultArgs> = $Result.GetResult<Prisma.$TournamentMatchPayload, S>

  type TournamentMatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentMatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TournamentMatchCountAggregateInputType | true
    }

  export interface TournamentMatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentMatch'], meta: { name: 'TournamentMatch' } }
    /**
     * Find zero or one TournamentMatch that matches the filter.
     * @param {TournamentMatchFindUniqueArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentMatchFindUniqueArgs>(args: SelectSubset<T, TournamentMatchFindUniqueArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TournamentMatch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentMatchFindUniqueOrThrowArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentMatchFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentMatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TournamentMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentMatchFindFirstArgs>(args?: SelectSubset<T, TournamentMatchFindFirstArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TournamentMatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstOrThrowArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentMatchFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentMatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TournamentMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany()
     * 
     * // Get first 10 TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentMatchFindManyArgs>(args?: SelectSubset<T, TournamentMatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TournamentMatch.
     * @param {TournamentMatchCreateArgs} args - Arguments to create a TournamentMatch.
     * @example
     * // Create one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.create({
     *   data: {
     *     // ... data to create a TournamentMatch
     *   }
     * })
     * 
     */
    create<T extends TournamentMatchCreateArgs>(args: SelectSubset<T, TournamentMatchCreateArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TournamentMatches.
     * @param {TournamentMatchCreateManyArgs} args - Arguments to create many TournamentMatches.
     * @example
     * // Create many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentMatchCreateManyArgs>(args?: SelectSubset<T, TournamentMatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentMatches and returns the data saved in the database.
     * @param {TournamentMatchCreateManyAndReturnArgs} args - Arguments to create many TournamentMatches.
     * @example
     * // Create many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentMatches and only return the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentMatchCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentMatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TournamentMatch.
     * @param {TournamentMatchDeleteArgs} args - Arguments to delete one TournamentMatch.
     * @example
     * // Delete one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.delete({
     *   where: {
     *     // ... filter to delete one TournamentMatch
     *   }
     * })
     * 
     */
    delete<T extends TournamentMatchDeleteArgs>(args: SelectSubset<T, TournamentMatchDeleteArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TournamentMatch.
     * @param {TournamentMatchUpdateArgs} args - Arguments to update one TournamentMatch.
     * @example
     * // Update one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentMatchUpdateArgs>(args: SelectSubset<T, TournamentMatchUpdateArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TournamentMatches.
     * @param {TournamentMatchDeleteManyArgs} args - Arguments to filter TournamentMatches to delete.
     * @example
     * // Delete a few TournamentMatches
     * const { count } = await prisma.tournamentMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentMatchDeleteManyArgs>(args?: SelectSubset<T, TournamentMatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentMatchUpdateManyArgs>(args: SelectSubset<T, TournamentMatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentMatch.
     * @param {TournamentMatchUpsertArgs} args - Arguments to update or create a TournamentMatch.
     * @example
     * // Update or create a TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.upsert({
     *   create: {
     *     // ... data to create a TournamentMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentMatch we want to update
     *   }
     * })
     */
    upsert<T extends TournamentMatchUpsertArgs>(args: SelectSubset<T, TournamentMatchUpsertArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchCountArgs} args - Arguments to filter TournamentMatches to count.
     * @example
     * // Count the number of TournamentMatches
     * const count = await prisma.tournamentMatch.count({
     *   where: {
     *     // ... the filter for the TournamentMatches we want to count
     *   }
     * })
    **/
    count<T extends TournamentMatchCountArgs>(
      args?: Subset<T, TournamentMatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentMatchAggregateArgs>(args: Subset<T, TournamentMatchAggregateArgs>): Prisma.PrismaPromise<GetTournamentMatchAggregateType<T>>

    /**
     * Group by TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentMatchGroupByArgs['orderBy'] }
        : { orderBy?: TournamentMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentMatch model
   */
  readonly fields: TournamentMatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentMatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    playerA<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    playerB<T extends TournamentMatch$playerBArgs<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$playerBArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    winner<T extends TournamentMatch$winnerArgs<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$winnerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentMatch model
   */ 
  interface TournamentMatchFieldRefs {
    readonly id: FieldRef<"TournamentMatch", 'Int'>
    readonly tournamentId: FieldRef<"TournamentMatch", 'Int'>
    readonly round: FieldRef<"TournamentMatch", 'Int'>
    readonly group: FieldRef<"TournamentMatch", 'String'>
    readonly playerAId: FieldRef<"TournamentMatch", 'Int'>
    readonly playerBId: FieldRef<"TournamentMatch", 'Int'>
    readonly winnerId: FieldRef<"TournamentMatch", 'Int'>
    readonly score: FieldRef<"TournamentMatch", 'String'>
    readonly status: FieldRef<"TournamentMatch", 'String'>
    readonly court: FieldRef<"TournamentMatch", 'String'>
    readonly scheduledAt: FieldRef<"TournamentMatch", 'DateTime'>
    readonly confirmedBy: FieldRef<"TournamentMatch", 'Int[]'>
    readonly isThirdPlaceMatch: FieldRef<"TournamentMatch", 'Boolean'>
    readonly createdAt: FieldRef<"TournamentMatch", 'DateTime'>
    readonly updatedAt: FieldRef<"TournamentMatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TournamentMatch findUnique
   */
  export type TournamentMatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch findUniqueOrThrow
   */
  export type TournamentMatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch findFirst
   */
  export type TournamentMatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     */
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch findFirstOrThrow
   */
  export type TournamentMatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     */
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch findMany
   */
  export type TournamentMatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatches to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch create
   */
  export type TournamentMatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentMatch.
     */
    data: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
  }

  /**
   * TournamentMatch createMany
   */
  export type TournamentMatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentMatches.
     */
    data: TournamentMatchCreateManyInput | TournamentMatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentMatch createManyAndReturn
   */
  export type TournamentMatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TournamentMatches.
     */
    data: TournamentMatchCreateManyInput | TournamentMatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentMatch update
   */
  export type TournamentMatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentMatch.
     */
    data: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
    /**
     * Choose, which TournamentMatch to update.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch updateMany
   */
  export type TournamentMatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentMatches.
     */
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyInput>
    /**
     * Filter which TournamentMatches to update
     */
    where?: TournamentMatchWhereInput
  }

  /**
   * TournamentMatch upsert
   */
  export type TournamentMatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentMatch to update in case it exists.
     */
    where: TournamentMatchWhereUniqueInput
    /**
     * In case the TournamentMatch found by the `where` argument doesn't exist, create a new TournamentMatch with this data.
     */
    create: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
    /**
     * In case the TournamentMatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
  }

  /**
   * TournamentMatch delete
   */
  export type TournamentMatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter which TournamentMatch to delete.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch deleteMany
   */
  export type TournamentMatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentMatches to delete
     */
    where?: TournamentMatchWhereInput
  }

  /**
   * TournamentMatch.playerB
   */
  export type TournamentMatch$playerBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TournamentMatch.winner
   */
  export type TournamentMatch$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TournamentMatch without action
   */
  export type TournamentMatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
  }


  /**
   * Model Invite
   */

  export type AggregateInvite = {
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  export type InviteAvgAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteSumAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteMinAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: $Enums.InviteStatus | null
    createdAt: Date | null
  }

  export type InviteMaxAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: $Enums.InviteStatus | null
    createdAt: Date | null
  }

  export type InviteCountAggregateOutputType = {
    id: number
    matchId: number
    trainingId: number
    senderId: number
    receiverId: number
    status: number
    createdAt: number
    _all: number
  }


  export type InviteAvgAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteSumAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteMinAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteMaxAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteCountAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type InviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invite to aggregate.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invites
    **/
    _count?: true | InviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteMaxAggregateInputType
  }

  export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
        [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvite[P]>
      : GetScalarType<T[P], AggregateInvite[P]>
  }




  export type InviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithAggregationInput | InviteOrderByWithAggregationInput[]
    by: InviteScalarFieldEnum[] | InviteScalarFieldEnum
    having?: InviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCountAggregateInputType | true
    _avg?: InviteAvgAggregateInputType
    _sum?: InviteSumAggregateInputType
    _min?: InviteMinAggregateInputType
    _max?: InviteMaxAggregateInputType
  }

  export type InviteGroupByOutputType = {
    id: number
    matchId: number | null
    trainingId: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt: Date
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  type GetInviteGroupByPayload<T extends InviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteGroupByOutputType[P]>
            : GetScalarType<T[P], InviteGroupByOutputType[P]>
        }
      >
    >


  export type InviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    trainingId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    match?: boolean | Invite$matchArgs<ExtArgs>
    training?: boolean | Invite$trainingArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invite"]>

  export type InviteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    trainingId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    match?: boolean | Invite$matchArgs<ExtArgs>
    training?: boolean | Invite$trainingArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invite"]>

  export type InviteSelectScalar = {
    id?: boolean
    matchId?: boolean
    trainingId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type InviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | Invite$matchArgs<ExtArgs>
    training?: boolean | Invite$trainingArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InviteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | Invite$matchArgs<ExtArgs>
    training?: boolean | Invite$trainingArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invite"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs> | null
      training: Prisma.$TrainingPayload<ExtArgs> | null
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      matchId: number | null
      trainingId: number | null
      senderId: number
      receiverId: number
      status: $Enums.InviteStatus
      createdAt: Date
    }, ExtArgs["result"]["invite"]>
    composites: {}
  }

  type InviteGetPayload<S extends boolean | null | undefined | InviteDefaultArgs> = $Result.GetResult<Prisma.$InvitePayload, S>

  type InviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InviteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InviteCountAggregateInputType | true
    }

  export interface InviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invite'], meta: { name: 'Invite' } }
    /**
     * Find zero or one Invite that matches the filter.
     * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InviteFindUniqueArgs>(args: SelectSubset<T, InviteFindUniqueArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Invite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InviteFindUniqueOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InviteFindUniqueOrThrowArgs>(args: SelectSubset<T, InviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Invite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InviteFindFirstArgs>(args?: SelectSubset<T, InviteFindFirstArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Invite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InviteFindFirstOrThrowArgs>(args?: SelectSubset<T, InviteFindFirstOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Invites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invites
     * const invites = await prisma.invite.findMany()
     * 
     * // Get first 10 Invites
     * const invites = await prisma.invite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InviteFindManyArgs>(args?: SelectSubset<T, InviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Invite.
     * @param {InviteCreateArgs} args - Arguments to create a Invite.
     * @example
     * // Create one Invite
     * const Invite = await prisma.invite.create({
     *   data: {
     *     // ... data to create a Invite
     *   }
     * })
     * 
     */
    create<T extends InviteCreateArgs>(args: SelectSubset<T, InviteCreateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Invites.
     * @param {InviteCreateManyArgs} args - Arguments to create many Invites.
     * @example
     * // Create many Invites
     * const invite = await prisma.invite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InviteCreateManyArgs>(args?: SelectSubset<T, InviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invites and returns the data saved in the database.
     * @param {InviteCreateManyAndReturnArgs} args - Arguments to create many Invites.
     * @example
     * // Create many Invites
     * const invite = await prisma.invite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invites and only return the `id`
     * const inviteWithIdOnly = await prisma.invite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InviteCreateManyAndReturnArgs>(args?: SelectSubset<T, InviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Invite.
     * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
     * @example
     * // Delete one Invite
     * const Invite = await prisma.invite.delete({
     *   where: {
     *     // ... filter to delete one Invite
     *   }
     * })
     * 
     */
    delete<T extends InviteDeleteArgs>(args: SelectSubset<T, InviteDeleteArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Invite.
     * @param {InviteUpdateArgs} args - Arguments to update one Invite.
     * @example
     * // Update one Invite
     * const invite = await prisma.invite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InviteUpdateArgs>(args: SelectSubset<T, InviteUpdateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Invites.
     * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
     * @example
     * // Delete a few Invites
     * const { count } = await prisma.invite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InviteDeleteManyArgs>(args?: SelectSubset<T, InviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invites
     * const invite = await prisma.invite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InviteUpdateManyArgs>(args: SelectSubset<T, InviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invite.
     * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
     * @example
     * // Update or create a Invite
     * const invite = await prisma.invite.upsert({
     *   create: {
     *     // ... data to create a Invite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invite we want to update
     *   }
     * })
     */
    upsert<T extends InviteUpsertArgs>(args: SelectSubset<T, InviteUpsertArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCountArgs} args - Arguments to filter Invites to count.
     * @example
     * // Count the number of Invites
     * const count = await prisma.invite.count({
     *   where: {
     *     // ... the filter for the Invites we want to count
     *   }
     * })
    **/
    count<T extends InviteCountArgs>(
      args?: Subset<T, InviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteAggregateArgs>(args: Subset<T, InviteAggregateArgs>): Prisma.PrismaPromise<GetInviteAggregateType<T>>

    /**
     * Group by Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteGroupByArgs['orderBy'] }
        : { orderBy?: InviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invite model
   */
  readonly fields: InviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends Invite$matchArgs<ExtArgs> = {}>(args?: Subset<T, Invite$matchArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    training<T extends Invite$trainingArgs<ExtArgs> = {}>(args?: Subset<T, Invite$trainingArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invite model
   */ 
  interface InviteFieldRefs {
    readonly id: FieldRef<"Invite", 'Int'>
    readonly matchId: FieldRef<"Invite", 'Int'>
    readonly trainingId: FieldRef<"Invite", 'Int'>
    readonly senderId: FieldRef<"Invite", 'Int'>
    readonly receiverId: FieldRef<"Invite", 'Int'>
    readonly status: FieldRef<"Invite", 'InviteStatus'>
    readonly createdAt: FieldRef<"Invite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invite findUnique
   */
  export type InviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findUniqueOrThrow
   */
  export type InviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findFirst
   */
  export type InviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findFirstOrThrow
   */
  export type InviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findMany
   */
  export type InviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invites to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite create
   */
  export type InviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to create a Invite.
     */
    data: XOR<InviteCreateInput, InviteUncheckedCreateInput>
  }

  /**
   * Invite createMany
   */
  export type InviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invites.
     */
    data: InviteCreateManyInput | InviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invite createManyAndReturn
   */
  export type InviteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Invites.
     */
    data: InviteCreateManyInput | InviteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invite update
   */
  export type InviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to update a Invite.
     */
    data: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
    /**
     * Choose, which Invite to update.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite updateMany
   */
  export type InviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invites.
     */
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyInput>
    /**
     * Filter which Invites to update
     */
    where?: InviteWhereInput
  }

  /**
   * Invite upsert
   */
  export type InviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The filter to search for the Invite to update in case it exists.
     */
    where: InviteWhereUniqueInput
    /**
     * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
     */
    create: XOR<InviteCreateInput, InviteUncheckedCreateInput>
    /**
     * In case the Invite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
  }

  /**
   * Invite delete
   */
  export type InviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter which Invite to delete.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite deleteMany
   */
  export type InviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invites to delete
     */
    where?: InviteWhereInput
  }

  /**
   * Invite.match
   */
  export type Invite$matchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
  }

  /**
   * Invite.training
   */
  export type Invite$trainingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
  }

  /**
   * Invite without action
   */
  export type InviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    message: string | null
    isRead: boolean | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    message: string | null
    isRead: boolean | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    message: number
    data: number
    isRead: number
    sentAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    data?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    type: $Enums.NotificationType
    message: string
    data: JsonValue | null
    isRead: boolean
    sentAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      type: $Enums.NotificationType
      message: string
      data: Prisma.JsonValue | null
      isRead: boolean
      sentAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model UserState
   */

  export type AggregateUserState = {
    _count: UserStateCountAggregateOutputType | null
    _avg: UserStateAvgAggregateOutputType | null
    _sum: UserStateSumAggregateOutputType | null
    _min: UserStateMinAggregateOutputType | null
    _max: UserStateMaxAggregateOutputType | null
  }

  export type UserStateAvgAggregateOutputType = {
    id: number | null
  }

  export type UserStateSumAggregateOutputType = {
    id: number | null
  }

  export type UserStateMinAggregateOutputType = {
    id: number | null
    userId: string | null
    step: $Enums.ProfileStep | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStateMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    step: $Enums.ProfileStep | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStateCountAggregateOutputType = {
    id: number
    userId: number
    step: number
    data: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStateAvgAggregateInputType = {
    id?: true
  }

  export type UserStateSumAggregateInputType = {
    id?: true
  }

  export type UserStateMinAggregateInputType = {
    id?: true
    userId?: true
    step?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStateMaxAggregateInputType = {
    id?: true
    userId?: true
    step?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStateCountAggregateInputType = {
    id?: true
    userId?: true
    step?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserState to aggregate.
     */
    where?: UserStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStates to fetch.
     */
    orderBy?: UserStateOrderByWithRelationInput | UserStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStates
    **/
    _count?: true | UserStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStateMaxAggregateInputType
  }

  export type GetUserStateAggregateType<T extends UserStateAggregateArgs> = {
        [P in keyof T & keyof AggregateUserState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserState[P]>
      : GetScalarType<T[P], AggregateUserState[P]>
  }




  export type UserStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStateWhereInput
    orderBy?: UserStateOrderByWithAggregationInput | UserStateOrderByWithAggregationInput[]
    by: UserStateScalarFieldEnum[] | UserStateScalarFieldEnum
    having?: UserStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStateCountAggregateInputType | true
    _avg?: UserStateAvgAggregateInputType
    _sum?: UserStateSumAggregateInputType
    _min?: UserStateMinAggregateInputType
    _max?: UserStateMaxAggregateInputType
  }

  export type UserStateGroupByOutputType = {
    id: number
    userId: string
    step: $Enums.ProfileStep
    data: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: UserStateCountAggregateOutputType | null
    _avg: UserStateAvgAggregateOutputType | null
    _sum: UserStateSumAggregateOutputType | null
    _min: UserStateMinAggregateOutputType | null
    _max: UserStateMaxAggregateOutputType | null
  }

  type GetUserStateGroupByPayload<T extends UserStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStateGroupByOutputType[P]>
            : GetScalarType<T[P], UserStateGroupByOutputType[P]>
        }
      >
    >


  export type UserStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    step?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userState"]>

  export type UserStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    step?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userState"]>

  export type UserStateSelectScalar = {
    id?: boolean
    userId?: boolean
    step?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserState"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      step: $Enums.ProfileStep
      data: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userState"]>
    composites: {}
  }

  type UserStateGetPayload<S extends boolean | null | undefined | UserStateDefaultArgs> = $Result.GetResult<Prisma.$UserStatePayload, S>

  type UserStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserStateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserStateCountAggregateInputType | true
    }

  export interface UserStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserState'], meta: { name: 'UserState' } }
    /**
     * Find zero or one UserState that matches the filter.
     * @param {UserStateFindUniqueArgs} args - Arguments to find a UserState
     * @example
     * // Get one UserState
     * const userState = await prisma.userState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStateFindUniqueArgs>(args: SelectSubset<T, UserStateFindUniqueArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserState that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserStateFindUniqueOrThrowArgs} args - Arguments to find a UserState
     * @example
     * // Get one UserState
     * const userState = await prisma.userState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStateFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateFindFirstArgs} args - Arguments to find a UserState
     * @example
     * // Get one UserState
     * const userState = await prisma.userState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStateFindFirstArgs>(args?: SelectSubset<T, UserStateFindFirstArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateFindFirstOrThrowArgs} args - Arguments to find a UserState
     * @example
     * // Get one UserState
     * const userState = await prisma.userState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStateFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStates
     * const userStates = await prisma.userState.findMany()
     * 
     * // Get first 10 UserStates
     * const userStates = await prisma.userState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStateWithIdOnly = await prisma.userState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStateFindManyArgs>(args?: SelectSubset<T, UserStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserState.
     * @param {UserStateCreateArgs} args - Arguments to create a UserState.
     * @example
     * // Create one UserState
     * const UserState = await prisma.userState.create({
     *   data: {
     *     // ... data to create a UserState
     *   }
     * })
     * 
     */
    create<T extends UserStateCreateArgs>(args: SelectSubset<T, UserStateCreateArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserStates.
     * @param {UserStateCreateManyArgs} args - Arguments to create many UserStates.
     * @example
     * // Create many UserStates
     * const userState = await prisma.userState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStateCreateManyArgs>(args?: SelectSubset<T, UserStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStates and returns the data saved in the database.
     * @param {UserStateCreateManyAndReturnArgs} args - Arguments to create many UserStates.
     * @example
     * // Create many UserStates
     * const userState = await prisma.userState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStates and only return the `id`
     * const userStateWithIdOnly = await prisma.userState.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStateCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserState.
     * @param {UserStateDeleteArgs} args - Arguments to delete one UserState.
     * @example
     * // Delete one UserState
     * const UserState = await prisma.userState.delete({
     *   where: {
     *     // ... filter to delete one UserState
     *   }
     * })
     * 
     */
    delete<T extends UserStateDeleteArgs>(args: SelectSubset<T, UserStateDeleteArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserState.
     * @param {UserStateUpdateArgs} args - Arguments to update one UserState.
     * @example
     * // Update one UserState
     * const userState = await prisma.userState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStateUpdateArgs>(args: SelectSubset<T, UserStateUpdateArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserStates.
     * @param {UserStateDeleteManyArgs} args - Arguments to filter UserStates to delete.
     * @example
     * // Delete a few UserStates
     * const { count } = await prisma.userState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStateDeleteManyArgs>(args?: SelectSubset<T, UserStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStates
     * const userState = await prisma.userState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStateUpdateManyArgs>(args: SelectSubset<T, UserStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserState.
     * @param {UserStateUpsertArgs} args - Arguments to update or create a UserState.
     * @example
     * // Update or create a UserState
     * const userState = await prisma.userState.upsert({
     *   create: {
     *     // ... data to create a UserState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserState we want to update
     *   }
     * })
     */
    upsert<T extends UserStateUpsertArgs>(args: SelectSubset<T, UserStateUpsertArgs<ExtArgs>>): Prisma__UserStateClient<$Result.GetResult<Prisma.$UserStatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateCountArgs} args - Arguments to filter UserStates to count.
     * @example
     * // Count the number of UserStates
     * const count = await prisma.userState.count({
     *   where: {
     *     // ... the filter for the UserStates we want to count
     *   }
     * })
    **/
    count<T extends UserStateCountArgs>(
      args?: Subset<T, UserStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStateAggregateArgs>(args: Subset<T, UserStateAggregateArgs>): Prisma.PrismaPromise<GetUserStateAggregateType<T>>

    /**
     * Group by UserState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStateGroupByArgs['orderBy'] }
        : { orderBy?: UserStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserState model
   */
  readonly fields: UserStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserState model
   */ 
  interface UserStateFieldRefs {
    readonly id: FieldRef<"UserState", 'Int'>
    readonly userId: FieldRef<"UserState", 'String'>
    readonly step: FieldRef<"UserState", 'ProfileStep'>
    readonly data: FieldRef<"UserState", 'Json'>
    readonly createdAt: FieldRef<"UserState", 'DateTime'>
    readonly updatedAt: FieldRef<"UserState", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserState findUnique
   */
  export type UserStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter, which UserState to fetch.
     */
    where: UserStateWhereUniqueInput
  }

  /**
   * UserState findUniqueOrThrow
   */
  export type UserStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter, which UserState to fetch.
     */
    where: UserStateWhereUniqueInput
  }

  /**
   * UserState findFirst
   */
  export type UserStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter, which UserState to fetch.
     */
    where?: UserStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStates to fetch.
     */
    orderBy?: UserStateOrderByWithRelationInput | UserStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStates.
     */
    cursor?: UserStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStates.
     */
    distinct?: UserStateScalarFieldEnum | UserStateScalarFieldEnum[]
  }

  /**
   * UserState findFirstOrThrow
   */
  export type UserStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter, which UserState to fetch.
     */
    where?: UserStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStates to fetch.
     */
    orderBy?: UserStateOrderByWithRelationInput | UserStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStates.
     */
    cursor?: UserStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStates.
     */
    distinct?: UserStateScalarFieldEnum | UserStateScalarFieldEnum[]
  }

  /**
   * UserState findMany
   */
  export type UserStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter, which UserStates to fetch.
     */
    where?: UserStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStates to fetch.
     */
    orderBy?: UserStateOrderByWithRelationInput | UserStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStates.
     */
    cursor?: UserStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStates.
     */
    skip?: number
    distinct?: UserStateScalarFieldEnum | UserStateScalarFieldEnum[]
  }

  /**
   * UserState create
   */
  export type UserStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * The data needed to create a UserState.
     */
    data: XOR<UserStateCreateInput, UserStateUncheckedCreateInput>
  }

  /**
   * UserState createMany
   */
  export type UserStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStates.
     */
    data: UserStateCreateManyInput | UserStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserState createManyAndReturn
   */
  export type UserStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserStates.
     */
    data: UserStateCreateManyInput | UserStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserState update
   */
  export type UserStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * The data needed to update a UserState.
     */
    data: XOR<UserStateUpdateInput, UserStateUncheckedUpdateInput>
    /**
     * Choose, which UserState to update.
     */
    where: UserStateWhereUniqueInput
  }

  /**
   * UserState updateMany
   */
  export type UserStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStates.
     */
    data: XOR<UserStateUpdateManyMutationInput, UserStateUncheckedUpdateManyInput>
    /**
     * Filter which UserStates to update
     */
    where?: UserStateWhereInput
  }

  /**
   * UserState upsert
   */
  export type UserStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * The filter to search for the UserState to update in case it exists.
     */
    where: UserStateWhereUniqueInput
    /**
     * In case the UserState found by the `where` argument doesn't exist, create a new UserState with this data.
     */
    create: XOR<UserStateCreateInput, UserStateUncheckedCreateInput>
    /**
     * In case the UserState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStateUpdateInput, UserStateUncheckedUpdateInput>
  }

  /**
   * UserState delete
   */
  export type UserStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
    /**
     * Filter which UserState to delete.
     */
    where: UserStateWhereUniqueInput
  }

  /**
   * UserState deleteMany
   */
  export type UserStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStates to delete
     */
    where?: UserStateWhereInput
  }

  /**
   * UserState without action
   */
  export type UserStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserState
     */
    select?: UserStateSelect<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    initialRatingPoints: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    initialRatingPoints: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    preferredCourt: string | null
    dominantHand: string | null
    playsInTournaments: boolean | null
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean | null
    profileStepTwoCompleted: boolean | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    preferredCourt: string | null
    dominantHand: string | null
    playsInTournaments: boolean | null
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean | null
    profileStepTwoCompleted: boolean | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    avatarUrl: number
    city: number
    countryCode: number
    ntrpRating: number
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: number
    achievements: number
    isPublicProfile: number
    createdAt: number
    updatedAt: number
    preferredCourt: number
    dominantHand: number
    preferredPlayTime: number
    playsInTournaments: number
    weeklyPlayFrequency: number
    backhandType: number
    preferredSurface: number
    playingStyle: number
    favoriteShot: number
    racket: number
    opponentPreference: number
    initialRatingPoints: number
    selfAssessedLevel: number
    profileStepOneCompleted: number
    profileStepTwoCompleted: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    initialRatingPoints?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    initialRatingPoints?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    achievements?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    preferredCourt?: true
    dominantHand?: true
    preferredPlayTime?: true
    playsInTournaments?: true
    weeklyPlayFrequency?: true
    backhandType?: true
    preferredSurface?: true
    playingStyle?: true
    favoriteShot?: true
    racket?: true
    opponentPreference?: true
    initialRatingPoints?: true
    selfAssessedLevel?: true
    profileStepOneCompleted?: true
    profileStepTwoCompleted?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: number
    userId: number
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    ntrpRating: number | null
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: Date | null
    achievements: JsonValue | null
    isPublicProfile: boolean
    createdAt: Date
    updatedAt: Date
    preferredCourt: string | null
    dominantHand: string | null
    preferredPlayTime: string[]
    playsInTournaments: boolean
    weeklyPlayFrequency: string | null
    backhandType: string | null
    preferredSurface: string | null
    playingStyle: string | null
    favoriteShot: string | null
    racket: string | null
    opponentPreference: string | null
    initialRatingPoints: number | null
    selfAssessedLevel: string | null
    profileStepOneCompleted: boolean
    profileStepTwoCompleted: boolean
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    avatarUrl?: boolean
    city?: boolean
    countryCode?: boolean
    ntrpRating?: boolean
    ratingPoints?: boolean
    matchesPlayed?: boolean
    matchWins?: boolean
    matchLosses?: boolean
    tournamentsPlayed?: boolean
    tournamentsWon?: boolean
    lastActivity?: boolean
    achievements?: boolean
    isPublicProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    preferredCourt?: boolean
    dominantHand?: boolean
    preferredPlayTime?: boolean
    playsInTournaments?: boolean
    weeklyPlayFrequency?: boolean
    backhandType?: boolean
    preferredSurface?: boolean
    playingStyle?: boolean
    favoriteShot?: boolean
    racket?: boolean
    opponentPreference?: boolean
    initialRatingPoints?: boolean
    selfAssessedLevel?: boolean
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    avatarUrl?: boolean
    city?: boolean
    countryCode?: boolean
    ntrpRating?: boolean
    ratingPoints?: boolean
    matchesPlayed?: boolean
    matchWins?: boolean
    matchLosses?: boolean
    tournamentsPlayed?: boolean
    tournamentsWon?: boolean
    lastActivity?: boolean
    achievements?: boolean
    isPublicProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    preferredCourt?: boolean
    dominantHand?: boolean
    preferredPlayTime?: boolean
    playsInTournaments?: boolean
    weeklyPlayFrequency?: boolean
    backhandType?: boolean
    preferredSurface?: boolean
    playingStyle?: boolean
    favoriteShot?: boolean
    racket?: boolean
    opponentPreference?: boolean
    initialRatingPoints?: boolean
    selfAssessedLevel?: boolean
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    avatarUrl?: boolean
    city?: boolean
    countryCode?: boolean
    ntrpRating?: boolean
    ratingPoints?: boolean
    matchesPlayed?: boolean
    matchWins?: boolean
    matchLosses?: boolean
    tournamentsPlayed?: boolean
    tournamentsWon?: boolean
    lastActivity?: boolean
    achievements?: boolean
    isPublicProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    preferredCourt?: boolean
    dominantHand?: boolean
    preferredPlayTime?: boolean
    playsInTournaments?: boolean
    weeklyPlayFrequency?: boolean
    backhandType?: boolean
    preferredSurface?: boolean
    playingStyle?: boolean
    favoriteShot?: boolean
    racket?: boolean
    opponentPreference?: boolean
    initialRatingPoints?: boolean
    selfAssessedLevel?: boolean
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      avatarUrl: string | null
      city: string | null
      countryCode: string | null
      ntrpRating: number | null
      ratingPoints: number
      matchesPlayed: number
      matchWins: number
      matchLosses: number
      tournamentsPlayed: number
      tournamentsWon: number
      lastActivity: Date | null
      achievements: Prisma.JsonValue | null
      isPublicProfile: boolean
      createdAt: Date
      updatedAt: Date
      preferredCourt: string | null
      dominantHand: string | null
      preferredPlayTime: string[]
      playsInTournaments: boolean
      weeklyPlayFrequency: string | null
      backhandType: string | null
      preferredSurface: string | null
      playingStyle: string | null
      favoriteShot: string | null
      racket: string | null
      opponentPreference: string | null
      initialRatingPoints: number | null
      selfAssessedLevel: string | null
      profileStepOneCompleted: boolean
      profileStepTwoCompleted: boolean
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'Int'>
    readonly userId: FieldRef<"UserProfile", 'Int'>
    readonly avatarUrl: FieldRef<"UserProfile", 'String'>
    readonly city: FieldRef<"UserProfile", 'String'>
    readonly countryCode: FieldRef<"UserProfile", 'String'>
    readonly ntrpRating: FieldRef<"UserProfile", 'Float'>
    readonly ratingPoints: FieldRef<"UserProfile", 'Int'>
    readonly matchesPlayed: FieldRef<"UserProfile", 'Int'>
    readonly matchWins: FieldRef<"UserProfile", 'Int'>
    readonly matchLosses: FieldRef<"UserProfile", 'Int'>
    readonly tournamentsPlayed: FieldRef<"UserProfile", 'Int'>
    readonly tournamentsWon: FieldRef<"UserProfile", 'Int'>
    readonly lastActivity: FieldRef<"UserProfile", 'DateTime'>
    readonly achievements: FieldRef<"UserProfile", 'Json'>
    readonly isPublicProfile: FieldRef<"UserProfile", 'Boolean'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
    readonly preferredCourt: FieldRef<"UserProfile", 'String'>
    readonly dominantHand: FieldRef<"UserProfile", 'String'>
    readonly preferredPlayTime: FieldRef<"UserProfile", 'String[]'>
    readonly playsInTournaments: FieldRef<"UserProfile", 'Boolean'>
    readonly weeklyPlayFrequency: FieldRef<"UserProfile", 'String'>
    readonly backhandType: FieldRef<"UserProfile", 'String'>
    readonly preferredSurface: FieldRef<"UserProfile", 'String'>
    readonly playingStyle: FieldRef<"UserProfile", 'String'>
    readonly favoriteShot: FieldRef<"UserProfile", 'String'>
    readonly racket: FieldRef<"UserProfile", 'String'>
    readonly opponentPreference: FieldRef<"UserProfile", 'String'>
    readonly initialRatingPoints: FieldRef<"UserProfile", 'Int'>
    readonly selfAssessedLevel: FieldRef<"UserProfile", 'String'>
    readonly profileStepOneCompleted: FieldRef<"UserProfile", 'Boolean'>
    readonly profileStepTwoCompleted: FieldRef<"UserProfile", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model GameRequest
   */

  export type AggregateGameRequest = {
    _count: GameRequestCountAggregateOutputType | null
    _avg: GameRequestAvgAggregateOutputType | null
    _sum: GameRequestSumAggregateOutputType | null
    _min: GameRequestMinAggregateOutputType | null
    _max: GameRequestMaxAggregateOutputType | null
  }

  export type GameRequestAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameRequestSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameRequestMinAggregateOutputType = {
    id: number | null
    type: string | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    gameMode: string | null
    dateTime: Date | null
    paymentType: string | null
    ratingType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameRequestMaxAggregateOutputType = {
    id: number | null
    type: string | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    gameMode: string | null
    dateTime: Date | null
    paymentType: string | null
    ratingType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameRequestCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    creatorId: number
    locationName: number
    maxPlayers: number
    currentPlayers: number
    gameMode: number
    dateTime: number
    paymentType: number
    ratingType: number
    formatInfo: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameRequestAvgAggregateInputType = {
    id?: true
    creatorId?: true
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameRequestSumAggregateInputType = {
    id?: true
    creatorId?: true
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameRequestMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameRequestMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameRequestCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    maxPlayers?: true
    currentPlayers?: true
    gameMode?: true
    dateTime?: true
    paymentType?: true
    ratingType?: true
    formatInfo?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameRequest to aggregate.
     */
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     */
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameRequests
    **/
    _count?: true | GameRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameRequestMaxAggregateInputType
  }

  export type GetGameRequestAggregateType<T extends GameRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateGameRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameRequest[P]>
      : GetScalarType<T[P], AggregateGameRequest[P]>
  }




  export type GameRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameRequestWhereInput
    orderBy?: GameRequestOrderByWithAggregationInput | GameRequestOrderByWithAggregationInput[]
    by: GameRequestScalarFieldEnum[] | GameRequestScalarFieldEnum
    having?: GameRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameRequestCountAggregateInputType | true
    _avg?: GameRequestAvgAggregateInputType
    _sum?: GameRequestSumAggregateInputType
    _min?: GameRequestMinAggregateInputType
    _max?: GameRequestMaxAggregateInputType
  }

  export type GameRequestGroupByOutputType = {
    id: number
    type: string
    title: string
    description: string | null
    creatorId: number
    locationName: string | null
    maxPlayers: number
    currentPlayers: number
    gameMode: string
    dateTime: Date
    paymentType: string
    ratingType: string
    formatInfo: JsonValue | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: GameRequestCountAggregateOutputType | null
    _avg: GameRequestAvgAggregateOutputType | null
    _sum: GameRequestSumAggregateOutputType | null
    _min: GameRequestMinAggregateOutputType | null
    _max: GameRequestMaxAggregateOutputType | null
  }

  type GetGameRequestGroupByPayload<T extends GameRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameRequestGroupByOutputType[P]>
            : GetScalarType<T[P], GameRequestGroupByOutputType[P]>
        }
      >
    >


  export type GameRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    gameMode?: boolean
    dateTime?: boolean
    paymentType?: boolean
    ratingType?: boolean
    formatInfo?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | GameRequest$participantsArgs<ExtArgs>
    responses?: boolean | GameRequest$responsesArgs<ExtArgs>
    _count?: boolean | GameRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameRequest"]>

  export type GameRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    gameMode?: boolean
    dateTime?: boolean
    paymentType?: boolean
    ratingType?: boolean
    formatInfo?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameRequest"]>

  export type GameRequestSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    gameMode?: boolean
    dateTime?: boolean
    paymentType?: boolean
    ratingType?: boolean
    formatInfo?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | GameRequest$participantsArgs<ExtArgs>
    responses?: boolean | GameRequest$responsesArgs<ExtArgs>
    _count?: boolean | GameRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GameRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameRequest"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$UserPayload<ExtArgs>[]
      responses: Prisma.$RequestResponsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      title: string
      description: string | null
      creatorId: number
      locationName: string | null
      maxPlayers: number
      currentPlayers: number
      gameMode: string
      dateTime: Date
      paymentType: string
      ratingType: string
      formatInfo: Prisma.JsonValue | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gameRequest"]>
    composites: {}
  }

  type GameRequestGetPayload<S extends boolean | null | undefined | GameRequestDefaultArgs> = $Result.GetResult<Prisma.$GameRequestPayload, S>

  type GameRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameRequestCountAggregateInputType | true
    }

  export interface GameRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameRequest'], meta: { name: 'GameRequest' } }
    /**
     * Find zero or one GameRequest that matches the filter.
     * @param {GameRequestFindUniqueArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameRequestFindUniqueArgs>(args: SelectSubset<T, GameRequestFindUniqueArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameRequestFindUniqueOrThrowArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, GameRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestFindFirstArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameRequestFindFirstArgs>(args?: SelectSubset<T, GameRequestFindFirstArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestFindFirstOrThrowArgs} args - Arguments to find a GameRequest
     * @example
     * // Get one GameRequest
     * const gameRequest = await prisma.gameRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, GameRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameRequests
     * const gameRequests = await prisma.gameRequest.findMany()
     * 
     * // Get first 10 GameRequests
     * const gameRequests = await prisma.gameRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameRequestWithIdOnly = await prisma.gameRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameRequestFindManyArgs>(args?: SelectSubset<T, GameRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameRequest.
     * @param {GameRequestCreateArgs} args - Arguments to create a GameRequest.
     * @example
     * // Create one GameRequest
     * const GameRequest = await prisma.gameRequest.create({
     *   data: {
     *     // ... data to create a GameRequest
     *   }
     * })
     * 
     */
    create<T extends GameRequestCreateArgs>(args: SelectSubset<T, GameRequestCreateArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameRequests.
     * @param {GameRequestCreateManyArgs} args - Arguments to create many GameRequests.
     * @example
     * // Create many GameRequests
     * const gameRequest = await prisma.gameRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameRequestCreateManyArgs>(args?: SelectSubset<T, GameRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameRequests and returns the data saved in the database.
     * @param {GameRequestCreateManyAndReturnArgs} args - Arguments to create many GameRequests.
     * @example
     * // Create many GameRequests
     * const gameRequest = await prisma.gameRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameRequests and only return the `id`
     * const gameRequestWithIdOnly = await prisma.gameRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, GameRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameRequest.
     * @param {GameRequestDeleteArgs} args - Arguments to delete one GameRequest.
     * @example
     * // Delete one GameRequest
     * const GameRequest = await prisma.gameRequest.delete({
     *   where: {
     *     // ... filter to delete one GameRequest
     *   }
     * })
     * 
     */
    delete<T extends GameRequestDeleteArgs>(args: SelectSubset<T, GameRequestDeleteArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameRequest.
     * @param {GameRequestUpdateArgs} args - Arguments to update one GameRequest.
     * @example
     * // Update one GameRequest
     * const gameRequest = await prisma.gameRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameRequestUpdateArgs>(args: SelectSubset<T, GameRequestUpdateArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameRequests.
     * @param {GameRequestDeleteManyArgs} args - Arguments to filter GameRequests to delete.
     * @example
     * // Delete a few GameRequests
     * const { count } = await prisma.gameRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameRequestDeleteManyArgs>(args?: SelectSubset<T, GameRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameRequests
     * const gameRequest = await prisma.gameRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameRequestUpdateManyArgs>(args: SelectSubset<T, GameRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameRequest.
     * @param {GameRequestUpsertArgs} args - Arguments to update or create a GameRequest.
     * @example
     * // Update or create a GameRequest
     * const gameRequest = await prisma.gameRequest.upsert({
     *   create: {
     *     // ... data to create a GameRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameRequest we want to update
     *   }
     * })
     */
    upsert<T extends GameRequestUpsertArgs>(args: SelectSubset<T, GameRequestUpsertArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestCountArgs} args - Arguments to filter GameRequests to count.
     * @example
     * // Count the number of GameRequests
     * const count = await prisma.gameRequest.count({
     *   where: {
     *     // ... the filter for the GameRequests we want to count
     *   }
     * })
    **/
    count<T extends GameRequestCountArgs>(
      args?: Subset<T, GameRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameRequestAggregateArgs>(args: Subset<T, GameRequestAggregateArgs>): Prisma.PrismaPromise<GetGameRequestAggregateType<T>>

    /**
     * Group by GameRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameRequestGroupByArgs['orderBy'] }
        : { orderBy?: GameRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameRequest model
   */
  readonly fields: GameRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    participants<T extends GameRequest$participantsArgs<ExtArgs> = {}>(args?: Subset<T, GameRequest$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    responses<T extends GameRequest$responsesArgs<ExtArgs> = {}>(args?: Subset<T, GameRequest$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameRequest model
   */ 
  interface GameRequestFieldRefs {
    readonly id: FieldRef<"GameRequest", 'Int'>
    readonly type: FieldRef<"GameRequest", 'String'>
    readonly title: FieldRef<"GameRequest", 'String'>
    readonly description: FieldRef<"GameRequest", 'String'>
    readonly creatorId: FieldRef<"GameRequest", 'Int'>
    readonly locationName: FieldRef<"GameRequest", 'String'>
    readonly maxPlayers: FieldRef<"GameRequest", 'Int'>
    readonly currentPlayers: FieldRef<"GameRequest", 'Int'>
    readonly gameMode: FieldRef<"GameRequest", 'String'>
    readonly dateTime: FieldRef<"GameRequest", 'DateTime'>
    readonly paymentType: FieldRef<"GameRequest", 'String'>
    readonly ratingType: FieldRef<"GameRequest", 'String'>
    readonly formatInfo: FieldRef<"GameRequest", 'Json'>
    readonly status: FieldRef<"GameRequest", 'String'>
    readonly createdAt: FieldRef<"GameRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"GameRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameRequest findUnique
   */
  export type GameRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter, which GameRequest to fetch.
     */
    where: GameRequestWhereUniqueInput
  }

  /**
   * GameRequest findUniqueOrThrow
   */
  export type GameRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter, which GameRequest to fetch.
     */
    where: GameRequestWhereUniqueInput
  }

  /**
   * GameRequest findFirst
   */
  export type GameRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter, which GameRequest to fetch.
     */
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     */
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameRequests.
     */
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameRequests.
     */
    distinct?: GameRequestScalarFieldEnum | GameRequestScalarFieldEnum[]
  }

  /**
   * GameRequest findFirstOrThrow
   */
  export type GameRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter, which GameRequest to fetch.
     */
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     */
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameRequests.
     */
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameRequests.
     */
    distinct?: GameRequestScalarFieldEnum | GameRequestScalarFieldEnum[]
  }

  /**
   * GameRequest findMany
   */
  export type GameRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter, which GameRequests to fetch.
     */
    where?: GameRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameRequests to fetch.
     */
    orderBy?: GameRequestOrderByWithRelationInput | GameRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameRequests.
     */
    cursor?: GameRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameRequests.
     */
    skip?: number
    distinct?: GameRequestScalarFieldEnum | GameRequestScalarFieldEnum[]
  }

  /**
   * GameRequest create
   */
  export type GameRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a GameRequest.
     */
    data: XOR<GameRequestCreateInput, GameRequestUncheckedCreateInput>
  }

  /**
   * GameRequest createMany
   */
  export type GameRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameRequests.
     */
    data: GameRequestCreateManyInput | GameRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameRequest createManyAndReturn
   */
  export type GameRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameRequests.
     */
    data: GameRequestCreateManyInput | GameRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameRequest update
   */
  export type GameRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a GameRequest.
     */
    data: XOR<GameRequestUpdateInput, GameRequestUncheckedUpdateInput>
    /**
     * Choose, which GameRequest to update.
     */
    where: GameRequestWhereUniqueInput
  }

  /**
   * GameRequest updateMany
   */
  export type GameRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameRequests.
     */
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyInput>
    /**
     * Filter which GameRequests to update
     */
    where?: GameRequestWhereInput
  }

  /**
   * GameRequest upsert
   */
  export type GameRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the GameRequest to update in case it exists.
     */
    where: GameRequestWhereUniqueInput
    /**
     * In case the GameRequest found by the `where` argument doesn't exist, create a new GameRequest with this data.
     */
    create: XOR<GameRequestCreateInput, GameRequestUncheckedCreateInput>
    /**
     * In case the GameRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameRequestUpdateInput, GameRequestUncheckedUpdateInput>
  }

  /**
   * GameRequest delete
   */
  export type GameRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
    /**
     * Filter which GameRequest to delete.
     */
    where: GameRequestWhereUniqueInput
  }

  /**
   * GameRequest deleteMany
   */
  export type GameRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameRequests to delete
     */
    where?: GameRequestWhereInput
  }

  /**
   * GameRequest.participants
   */
  export type GameRequest$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * GameRequest.responses
   */
  export type GameRequest$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    where?: RequestResponseWhereInput
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    cursor?: RequestResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestResponseScalarFieldEnum | RequestResponseScalarFieldEnum[]
  }

  /**
   * GameRequest without action
   */
  export type GameRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameRequest
     */
    select?: GameRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameRequestInclude<ExtArgs> | null
  }


  /**
   * Model RequestResponse
   */

  export type AggregateRequestResponse = {
    _count: RequestResponseCountAggregateOutputType | null
    _avg: RequestResponseAvgAggregateOutputType | null
    _sum: RequestResponseSumAggregateOutputType | null
    _min: RequestResponseMinAggregateOutputType | null
    _max: RequestResponseMaxAggregateOutputType | null
  }

  export type RequestResponseAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestResponseSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestResponseMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestResponseMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    status: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestResponseCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    status: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestResponseAvgAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestResponseSumAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestResponseMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestResponseMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestResponseCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestResponse to aggregate.
     */
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     */
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestResponses
    **/
    _count?: true | RequestResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestResponseMaxAggregateInputType
  }

  export type GetRequestResponseAggregateType<T extends RequestResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestResponse[P]>
      : GetScalarType<T[P], AggregateRequestResponse[P]>
  }




  export type RequestResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestResponseWhereInput
    orderBy?: RequestResponseOrderByWithAggregationInput | RequestResponseOrderByWithAggregationInput[]
    by: RequestResponseScalarFieldEnum[] | RequestResponseScalarFieldEnum
    having?: RequestResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestResponseCountAggregateInputType | true
    _avg?: RequestResponseAvgAggregateInputType
    _sum?: RequestResponseSumAggregateInputType
    _min?: RequestResponseMinAggregateInputType
    _max?: RequestResponseMaxAggregateInputType
  }

  export type RequestResponseGroupByOutputType = {
    id: number
    requestId: number
    userId: number
    status: string
    message: string | null
    createdAt: Date
    updatedAt: Date
    _count: RequestResponseCountAggregateOutputType | null
    _avg: RequestResponseAvgAggregateOutputType | null
    _sum: RequestResponseSumAggregateOutputType | null
    _min: RequestResponseMinAggregateOutputType | null
    _max: RequestResponseMaxAggregateOutputType | null
  }

  type GetRequestResponseGroupByPayload<T extends RequestResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestResponseGroupByOutputType[P]>
            : GetScalarType<T[P], RequestResponseGroupByOutputType[P]>
        }
      >
    >


  export type RequestResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    request?: boolean | GameRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestResponse"]>

  export type RequestResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    request?: boolean | GameRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestResponse"]>

  export type RequestResponseSelectScalar = {
    id?: boolean
    requestId?: boolean
    userId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | GameRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RequestResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | GameRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RequestResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestResponse"
    objects: {
      request: Prisma.$GameRequestPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      userId: number
      status: string
      message: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["requestResponse"]>
    composites: {}
  }

  type RequestResponseGetPayload<S extends boolean | null | undefined | RequestResponseDefaultArgs> = $Result.GetResult<Prisma.$RequestResponsePayload, S>

  type RequestResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestResponseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestResponseCountAggregateInputType | true
    }

  export interface RequestResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestResponse'], meta: { name: 'RequestResponse' } }
    /**
     * Find zero or one RequestResponse that matches the filter.
     * @param {RequestResponseFindUniqueArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestResponseFindUniqueArgs>(args: SelectSubset<T, RequestResponseFindUniqueArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RequestResponse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestResponseFindUniqueOrThrowArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RequestResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseFindFirstArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestResponseFindFirstArgs>(args?: SelectSubset<T, RequestResponseFindFirstArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RequestResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseFindFirstOrThrowArgs} args - Arguments to find a RequestResponse
     * @example
     * // Get one RequestResponse
     * const requestResponse = await prisma.requestResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RequestResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestResponses
     * const requestResponses = await prisma.requestResponse.findMany()
     * 
     * // Get first 10 RequestResponses
     * const requestResponses = await prisma.requestResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestResponseWithIdOnly = await prisma.requestResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestResponseFindManyArgs>(args?: SelectSubset<T, RequestResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RequestResponse.
     * @param {RequestResponseCreateArgs} args - Arguments to create a RequestResponse.
     * @example
     * // Create one RequestResponse
     * const RequestResponse = await prisma.requestResponse.create({
     *   data: {
     *     // ... data to create a RequestResponse
     *   }
     * })
     * 
     */
    create<T extends RequestResponseCreateArgs>(args: SelectSubset<T, RequestResponseCreateArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RequestResponses.
     * @param {RequestResponseCreateManyArgs} args - Arguments to create many RequestResponses.
     * @example
     * // Create many RequestResponses
     * const requestResponse = await prisma.requestResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestResponseCreateManyArgs>(args?: SelectSubset<T, RequestResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestResponses and returns the data saved in the database.
     * @param {RequestResponseCreateManyAndReturnArgs} args - Arguments to create many RequestResponses.
     * @example
     * // Create many RequestResponses
     * const requestResponse = await prisma.requestResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestResponses and only return the `id`
     * const requestResponseWithIdOnly = await prisma.requestResponse.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RequestResponse.
     * @param {RequestResponseDeleteArgs} args - Arguments to delete one RequestResponse.
     * @example
     * // Delete one RequestResponse
     * const RequestResponse = await prisma.requestResponse.delete({
     *   where: {
     *     // ... filter to delete one RequestResponse
     *   }
     * })
     * 
     */
    delete<T extends RequestResponseDeleteArgs>(args: SelectSubset<T, RequestResponseDeleteArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RequestResponse.
     * @param {RequestResponseUpdateArgs} args - Arguments to update one RequestResponse.
     * @example
     * // Update one RequestResponse
     * const requestResponse = await prisma.requestResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestResponseUpdateArgs>(args: SelectSubset<T, RequestResponseUpdateArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RequestResponses.
     * @param {RequestResponseDeleteManyArgs} args - Arguments to filter RequestResponses to delete.
     * @example
     * // Delete a few RequestResponses
     * const { count } = await prisma.requestResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestResponseDeleteManyArgs>(args?: SelectSubset<T, RequestResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestResponses
     * const requestResponse = await prisma.requestResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestResponseUpdateManyArgs>(args: SelectSubset<T, RequestResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestResponse.
     * @param {RequestResponseUpsertArgs} args - Arguments to update or create a RequestResponse.
     * @example
     * // Update or create a RequestResponse
     * const requestResponse = await prisma.requestResponse.upsert({
     *   create: {
     *     // ... data to create a RequestResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestResponse we want to update
     *   }
     * })
     */
    upsert<T extends RequestResponseUpsertArgs>(args: SelectSubset<T, RequestResponseUpsertArgs<ExtArgs>>): Prisma__RequestResponseClient<$Result.GetResult<Prisma.$RequestResponsePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RequestResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseCountArgs} args - Arguments to filter RequestResponses to count.
     * @example
     * // Count the number of RequestResponses
     * const count = await prisma.requestResponse.count({
     *   where: {
     *     // ... the filter for the RequestResponses we want to count
     *   }
     * })
    **/
    count<T extends RequestResponseCountArgs>(
      args?: Subset<T, RequestResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestResponseAggregateArgs>(args: Subset<T, RequestResponseAggregateArgs>): Prisma.PrismaPromise<GetRequestResponseAggregateType<T>>

    /**
     * Group by RequestResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestResponseGroupByArgs['orderBy'] }
        : { orderBy?: RequestResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestResponse model
   */
  readonly fields: RequestResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends GameRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameRequestDefaultArgs<ExtArgs>>): Prisma__GameRequestClient<$Result.GetResult<Prisma.$GameRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestResponse model
   */ 
  interface RequestResponseFieldRefs {
    readonly id: FieldRef<"RequestResponse", 'Int'>
    readonly requestId: FieldRef<"RequestResponse", 'Int'>
    readonly userId: FieldRef<"RequestResponse", 'Int'>
    readonly status: FieldRef<"RequestResponse", 'String'>
    readonly message: FieldRef<"RequestResponse", 'String'>
    readonly createdAt: FieldRef<"RequestResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"RequestResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestResponse findUnique
   */
  export type RequestResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter, which RequestResponse to fetch.
     */
    where: RequestResponseWhereUniqueInput
  }

  /**
   * RequestResponse findUniqueOrThrow
   */
  export type RequestResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter, which RequestResponse to fetch.
     */
    where: RequestResponseWhereUniqueInput
  }

  /**
   * RequestResponse findFirst
   */
  export type RequestResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter, which RequestResponse to fetch.
     */
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     */
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestResponses.
     */
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestResponses.
     */
    distinct?: RequestResponseScalarFieldEnum | RequestResponseScalarFieldEnum[]
  }

  /**
   * RequestResponse findFirstOrThrow
   */
  export type RequestResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter, which RequestResponse to fetch.
     */
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     */
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestResponses.
     */
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestResponses.
     */
    distinct?: RequestResponseScalarFieldEnum | RequestResponseScalarFieldEnum[]
  }

  /**
   * RequestResponse findMany
   */
  export type RequestResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter, which RequestResponses to fetch.
     */
    where?: RequestResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestResponses to fetch.
     */
    orderBy?: RequestResponseOrderByWithRelationInput | RequestResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestResponses.
     */
    cursor?: RequestResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestResponses.
     */
    skip?: number
    distinct?: RequestResponseScalarFieldEnum | RequestResponseScalarFieldEnum[]
  }

  /**
   * RequestResponse create
   */
  export type RequestResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestResponse.
     */
    data: XOR<RequestResponseCreateInput, RequestResponseUncheckedCreateInput>
  }

  /**
   * RequestResponse createMany
   */
  export type RequestResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestResponses.
     */
    data: RequestResponseCreateManyInput | RequestResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestResponse createManyAndReturn
   */
  export type RequestResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RequestResponses.
     */
    data: RequestResponseCreateManyInput | RequestResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestResponse update
   */
  export type RequestResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestResponse.
     */
    data: XOR<RequestResponseUpdateInput, RequestResponseUncheckedUpdateInput>
    /**
     * Choose, which RequestResponse to update.
     */
    where: RequestResponseWhereUniqueInput
  }

  /**
   * RequestResponse updateMany
   */
  export type RequestResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestResponses.
     */
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyInput>
    /**
     * Filter which RequestResponses to update
     */
    where?: RequestResponseWhereInput
  }

  /**
   * RequestResponse upsert
   */
  export type RequestResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestResponse to update in case it exists.
     */
    where: RequestResponseWhereUniqueInput
    /**
     * In case the RequestResponse found by the `where` argument doesn't exist, create a new RequestResponse with this data.
     */
    create: XOR<RequestResponseCreateInput, RequestResponseUncheckedCreateInput>
    /**
     * In case the RequestResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestResponseUpdateInput, RequestResponseUncheckedUpdateInput>
  }

  /**
   * RequestResponse delete
   */
  export type RequestResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
    /**
     * Filter which RequestResponse to delete.
     */
    where: RequestResponseWhereUniqueInput
  }

  /**
   * RequestResponse deleteMany
   */
  export type RequestResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestResponses to delete
     */
    where?: RequestResponseWhereInput
  }

  /**
   * RequestResponse without action
   */
  export type RequestResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestResponse
     */
    select?: RequestResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestResponseInclude<ExtArgs> | null
  }


  /**
   * Model TrainingSession
   */

  export type AggregateTrainingSession = {
    _count: TrainingSessionCountAggregateOutputType | null
    _avg: TrainingSessionAvgAggregateOutputType | null
    _sum: TrainingSessionSumAggregateOutputType | null
    _min: TrainingSessionMinAggregateOutputType | null
    _max: TrainingSessionMaxAggregateOutputType | null
  }

  export type TrainingSessionAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    pricePerPerson: number | null
  }

  export type TrainingSessionSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    pricePerPerson: number | null
  }

  export type TrainingSessionMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    courtSurface: $Enums.CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    paymentType: $Enums.PaymentType | null
    pricePerPerson: number | null
    dateTime: Date | null
    endTime: Date | null
    status: $Enums.TrainingState | null
    trainingType: $Enums.TrainingType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingSessionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    creatorId: number | null
    locationName: string | null
    courtSurface: $Enums.CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number | null
    currentSlots: number | null
    paymentType: $Enums.PaymentType | null
    pricePerPerson: number | null
    dateTime: Date | null
    endTime: Date | null
    status: $Enums.TrainingState | null
    trainingType: $Enums.TrainingType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingSessionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    creatorId: number
    locationName: number
    courtSurface: number
    minLevel: number
    maxLevel: number
    maxSlots: number
    currentSlots: number
    paymentType: number
    pricePerPerson: number
    dateTime: number
    endTime: number
    status: number
    trainingType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingSessionAvgAggregateInputType = {
    id?: true
    creatorId?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    pricePerPerson?: true
  }

  export type TrainingSessionSumAggregateInputType = {
    id?: true
    creatorId?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    pricePerPerson?: true
  }

  export type TrainingSessionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingSessionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingSessionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    creatorId?: true
    locationName?: true
    courtSurface?: true
    minLevel?: true
    maxLevel?: true
    maxSlots?: true
    currentSlots?: true
    paymentType?: true
    pricePerPerson?: true
    dateTime?: true
    endTime?: true
    status?: true
    trainingType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingSession to aggregate.
     */
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     */
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingSessions
    **/
    _count?: true | TrainingSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingSessionMaxAggregateInputType
  }

  export type GetTrainingSessionAggregateType<T extends TrainingSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingSession[P]>
      : GetScalarType<T[P], AggregateTrainingSession[P]>
  }




  export type TrainingSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingSessionWhereInput
    orderBy?: TrainingSessionOrderByWithAggregationInput | TrainingSessionOrderByWithAggregationInput[]
    by: TrainingSessionScalarFieldEnum[] | TrainingSessionScalarFieldEnum
    having?: TrainingSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingSessionCountAggregateInputType | true
    _avg?: TrainingSessionAvgAggregateInputType
    _sum?: TrainingSessionSumAggregateInputType
    _min?: TrainingSessionMinAggregateInputType
    _max?: TrainingSessionMaxAggregateInputType
  }

  export type TrainingSessionGroupByOutputType = {
    id: number
    title: string
    description: string | null
    creatorId: number
    locationName: string | null
    courtSurface: $Enums.CourtSurface | null
    minLevel: number | null
    maxLevel: number | null
    maxSlots: number
    currentSlots: number
    paymentType: $Enums.PaymentType
    pricePerPerson: number | null
    dateTime: Date
    endTime: Date
    status: $Enums.TrainingState
    trainingType: $Enums.TrainingType
    createdAt: Date
    updatedAt: Date
    _count: TrainingSessionCountAggregateOutputType | null
    _avg: TrainingSessionAvgAggregateOutputType | null
    _sum: TrainingSessionSumAggregateOutputType | null
    _min: TrainingSessionMinAggregateOutputType | null
    _max: TrainingSessionMaxAggregateOutputType | null
  }

  type GetTrainingSessionGroupByPayload<T extends TrainingSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingSessionGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingSessionGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    courtSurface?: boolean
    minLevel?: boolean
    maxLevel?: boolean
    maxSlots?: boolean
    currentSlots?: boolean
    paymentType?: boolean
    pricePerPerson?: boolean
    dateTime?: boolean
    endTime?: boolean
    status?: boolean
    trainingType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | TrainingSession$participantsArgs<ExtArgs>
    _count?: boolean | TrainingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingSession"]>

  export type TrainingSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    courtSurface?: boolean
    minLevel?: boolean
    maxLevel?: boolean
    maxSlots?: boolean
    currentSlots?: boolean
    paymentType?: boolean
    pricePerPerson?: boolean
    dateTime?: boolean
    endTime?: boolean
    status?: boolean
    trainingType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingSession"]>

  export type TrainingSessionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    creatorId?: boolean
    locationName?: boolean
    courtSurface?: boolean
    minLevel?: boolean
    maxLevel?: boolean
    maxSlots?: boolean
    currentSlots?: boolean
    paymentType?: boolean
    pricePerPerson?: boolean
    dateTime?: boolean
    endTime?: boolean
    status?: boolean
    trainingType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrainingSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | TrainingSession$participantsArgs<ExtArgs>
    _count?: boolean | TrainingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrainingSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TrainingSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrainingSession"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      creatorId: number
      locationName: string | null
      courtSurface: $Enums.CourtSurface | null
      minLevel: number | null
      maxLevel: number | null
      maxSlots: number
      currentSlots: number
      paymentType: $Enums.PaymentType
      pricePerPerson: number | null
      dateTime: Date
      endTime: Date
      status: $Enums.TrainingState
      trainingType: $Enums.TrainingType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["trainingSession"]>
    composites: {}
  }

  type TrainingSessionGetPayload<S extends boolean | null | undefined | TrainingSessionDefaultArgs> = $Result.GetResult<Prisma.$TrainingSessionPayload, S>

  type TrainingSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrainingSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrainingSessionCountAggregateInputType | true
    }

  export interface TrainingSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrainingSession'], meta: { name: 'TrainingSession' } }
    /**
     * Find zero or one TrainingSession that matches the filter.
     * @param {TrainingSessionFindUniqueArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingSessionFindUniqueArgs>(args: SelectSubset<T, TrainingSessionFindUniqueArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TrainingSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrainingSessionFindUniqueOrThrowArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TrainingSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionFindFirstArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingSessionFindFirstArgs>(args?: SelectSubset<T, TrainingSessionFindFirstArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TrainingSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionFindFirstOrThrowArgs} args - Arguments to find a TrainingSession
     * @example
     * // Get one TrainingSession
     * const trainingSession = await prisma.trainingSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TrainingSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingSessions
     * const trainingSessions = await prisma.trainingSession.findMany()
     * 
     * // Get first 10 TrainingSessions
     * const trainingSessions = await prisma.trainingSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingSessionWithIdOnly = await prisma.trainingSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingSessionFindManyArgs>(args?: SelectSubset<T, TrainingSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TrainingSession.
     * @param {TrainingSessionCreateArgs} args - Arguments to create a TrainingSession.
     * @example
     * // Create one TrainingSession
     * const TrainingSession = await prisma.trainingSession.create({
     *   data: {
     *     // ... data to create a TrainingSession
     *   }
     * })
     * 
     */
    create<T extends TrainingSessionCreateArgs>(args: SelectSubset<T, TrainingSessionCreateArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TrainingSessions.
     * @param {TrainingSessionCreateManyArgs} args - Arguments to create many TrainingSessions.
     * @example
     * // Create many TrainingSessions
     * const trainingSession = await prisma.trainingSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingSessionCreateManyArgs>(args?: SelectSubset<T, TrainingSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrainingSessions and returns the data saved in the database.
     * @param {TrainingSessionCreateManyAndReturnArgs} args - Arguments to create many TrainingSessions.
     * @example
     * // Create many TrainingSessions
     * const trainingSession = await prisma.trainingSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrainingSessions and only return the `id`
     * const trainingSessionWithIdOnly = await prisma.trainingSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TrainingSession.
     * @param {TrainingSessionDeleteArgs} args - Arguments to delete one TrainingSession.
     * @example
     * // Delete one TrainingSession
     * const TrainingSession = await prisma.trainingSession.delete({
     *   where: {
     *     // ... filter to delete one TrainingSession
     *   }
     * })
     * 
     */
    delete<T extends TrainingSessionDeleteArgs>(args: SelectSubset<T, TrainingSessionDeleteArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TrainingSession.
     * @param {TrainingSessionUpdateArgs} args - Arguments to update one TrainingSession.
     * @example
     * // Update one TrainingSession
     * const trainingSession = await prisma.trainingSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingSessionUpdateArgs>(args: SelectSubset<T, TrainingSessionUpdateArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TrainingSessions.
     * @param {TrainingSessionDeleteManyArgs} args - Arguments to filter TrainingSessions to delete.
     * @example
     * // Delete a few TrainingSessions
     * const { count } = await prisma.trainingSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingSessionDeleteManyArgs>(args?: SelectSubset<T, TrainingSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingSessions
     * const trainingSession = await prisma.trainingSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingSessionUpdateManyArgs>(args: SelectSubset<T, TrainingSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainingSession.
     * @param {TrainingSessionUpsertArgs} args - Arguments to update or create a TrainingSession.
     * @example
     * // Update or create a TrainingSession
     * const trainingSession = await prisma.trainingSession.upsert({
     *   create: {
     *     // ... data to create a TrainingSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingSession we want to update
     *   }
     * })
     */
    upsert<T extends TrainingSessionUpsertArgs>(args: SelectSubset<T, TrainingSessionUpsertArgs<ExtArgs>>): Prisma__TrainingSessionClient<$Result.GetResult<Prisma.$TrainingSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TrainingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionCountArgs} args - Arguments to filter TrainingSessions to count.
     * @example
     * // Count the number of TrainingSessions
     * const count = await prisma.trainingSession.count({
     *   where: {
     *     // ... the filter for the TrainingSessions we want to count
     *   }
     * })
    **/
    count<T extends TrainingSessionCountArgs>(
      args?: Subset<T, TrainingSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingSessionAggregateArgs>(args: Subset<T, TrainingSessionAggregateArgs>): Prisma.PrismaPromise<GetTrainingSessionAggregateType<T>>

    /**
     * Group by TrainingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingSessionGroupByArgs['orderBy'] }
        : { orderBy?: TrainingSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrainingSession model
   */
  readonly fields: TrainingSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    participants<T extends TrainingSession$participantsArgs<ExtArgs> = {}>(args?: Subset<T, TrainingSession$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrainingSession model
   */ 
  interface TrainingSessionFieldRefs {
    readonly id: FieldRef<"TrainingSession", 'Int'>
    readonly title: FieldRef<"TrainingSession", 'String'>
    readonly description: FieldRef<"TrainingSession", 'String'>
    readonly creatorId: FieldRef<"TrainingSession", 'Int'>
    readonly locationName: FieldRef<"TrainingSession", 'String'>
    readonly courtSurface: FieldRef<"TrainingSession", 'CourtSurface'>
    readonly minLevel: FieldRef<"TrainingSession", 'Float'>
    readonly maxLevel: FieldRef<"TrainingSession", 'Float'>
    readonly maxSlots: FieldRef<"TrainingSession", 'Int'>
    readonly currentSlots: FieldRef<"TrainingSession", 'Int'>
    readonly paymentType: FieldRef<"TrainingSession", 'PaymentType'>
    readonly pricePerPerson: FieldRef<"TrainingSession", 'Float'>
    readonly dateTime: FieldRef<"TrainingSession", 'DateTime'>
    readonly endTime: FieldRef<"TrainingSession", 'DateTime'>
    readonly status: FieldRef<"TrainingSession", 'TrainingState'>
    readonly trainingType: FieldRef<"TrainingSession", 'TrainingType'>
    readonly createdAt: FieldRef<"TrainingSession", 'DateTime'>
    readonly updatedAt: FieldRef<"TrainingSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrainingSession findUnique
   */
  export type TrainingSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter, which TrainingSession to fetch.
     */
    where: TrainingSessionWhereUniqueInput
  }

  /**
   * TrainingSession findUniqueOrThrow
   */
  export type TrainingSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter, which TrainingSession to fetch.
     */
    where: TrainingSessionWhereUniqueInput
  }

  /**
   * TrainingSession findFirst
   */
  export type TrainingSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter, which TrainingSession to fetch.
     */
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     */
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingSessions.
     */
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingSessions.
     */
    distinct?: TrainingSessionScalarFieldEnum | TrainingSessionScalarFieldEnum[]
  }

  /**
   * TrainingSession findFirstOrThrow
   */
  export type TrainingSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter, which TrainingSession to fetch.
     */
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     */
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingSessions.
     */
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingSessions.
     */
    distinct?: TrainingSessionScalarFieldEnum | TrainingSessionScalarFieldEnum[]
  }

  /**
   * TrainingSession findMany
   */
  export type TrainingSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter, which TrainingSessions to fetch.
     */
    where?: TrainingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingSessions to fetch.
     */
    orderBy?: TrainingSessionOrderByWithRelationInput | TrainingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingSessions.
     */
    cursor?: TrainingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingSessions.
     */
    skip?: number
    distinct?: TrainingSessionScalarFieldEnum | TrainingSessionScalarFieldEnum[]
  }

  /**
   * TrainingSession create
   */
  export type TrainingSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a TrainingSession.
     */
    data: XOR<TrainingSessionCreateInput, TrainingSessionUncheckedCreateInput>
  }

  /**
   * TrainingSession createMany
   */
  export type TrainingSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrainingSessions.
     */
    data: TrainingSessionCreateManyInput | TrainingSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrainingSession createManyAndReturn
   */
  export type TrainingSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TrainingSessions.
     */
    data: TrainingSessionCreateManyInput | TrainingSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingSession update
   */
  export type TrainingSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a TrainingSession.
     */
    data: XOR<TrainingSessionUpdateInput, TrainingSessionUncheckedUpdateInput>
    /**
     * Choose, which TrainingSession to update.
     */
    where: TrainingSessionWhereUniqueInput
  }

  /**
   * TrainingSession updateMany
   */
  export type TrainingSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrainingSessions.
     */
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyInput>
    /**
     * Filter which TrainingSessions to update
     */
    where?: TrainingSessionWhereInput
  }

  /**
   * TrainingSession upsert
   */
  export type TrainingSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the TrainingSession to update in case it exists.
     */
    where: TrainingSessionWhereUniqueInput
    /**
     * In case the TrainingSession found by the `where` argument doesn't exist, create a new TrainingSession with this data.
     */
    create: XOR<TrainingSessionCreateInput, TrainingSessionUncheckedCreateInput>
    /**
     * In case the TrainingSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingSessionUpdateInput, TrainingSessionUncheckedUpdateInput>
  }

  /**
   * TrainingSession delete
   */
  export type TrainingSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
    /**
     * Filter which TrainingSession to delete.
     */
    where: TrainingSessionWhereUniqueInput
  }

  /**
   * TrainingSession deleteMany
   */
  export type TrainingSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingSessions to delete
     */
    where?: TrainingSessionWhereInput
  }

  /**
   * TrainingSession.participants
   */
  export type TrainingSession$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * TrainingSession without action
   */
  export type TrainingSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingSession
     */
    select?: TrainingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingSessionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MatchFeedbackScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    reviewerId: 'reviewerId',
    revieweeId: 'revieweeId',
    rating: 'rating',
    comment: 'comment',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchFeedbackScalarFieldEnum = (typeof MatchFeedbackScalarFieldEnum)[keyof typeof MatchFeedbackScalarFieldEnum]


  export const DirectMessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    recipientId: 'recipientId',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type DirectMessageScalarFieldEnum = (typeof DirectMessageScalarFieldEnum)[keyof typeof DirectMessageScalarFieldEnum]


  export const StoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    telegramFileId: 'telegramFileId',
    telegramFilePath: 'telegramFilePath',
    type: 'type',
    caption: 'caption',
    status: 'status',
    viewsCount: 'viewsCount',
    likesCount: 'likesCount',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    publishedAt: 'publishedAt',
    updatedAt: 'updatedAt'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    flagUrl: 'flagUrl',
    createdAt: 'createdAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    countryCode: 'countryCode',
    population: 'population',
    lat: 'lat',
    lng: 'lng',
    timezone: 'timezone',
    createdAt: 'createdAt'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const SportScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    emoji: 'emoji',
    icon: 'icon',
    createdAt: 'createdAt'
  };

  export type SportScalarFieldEnum = (typeof SportScalarFieldEnum)[keyof typeof SportScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    language: 'language',
    cityId: 'cityId',
    sportId: 'sportId',
    notificationsEnabled: 'notificationsEnabled',
    notifyTelegram: 'notifyTelegram',
    notifyEmail: 'notifyEmail',
    matchReminderTime: 'matchReminderTime',
    notifyMatchResults: 'notifyMatchResults',
    notifyTournamentResults: 'notifyTournamentResults',
    showProfilePublicly: 'showProfilePublicly',
    showRatingPublicly: 'showRatingPublicly',
    allowMatchInvites: 'allowMatchInvites',
    requireMatchConfirm: 'requireMatchConfirm',
    preferredGender: 'preferredGender',
    preferredAgeMin: 'preferredAgeMin',
    preferredAgeMax: 'preferredAgeMax',
    preferredLevelMin: 'preferredLevelMin',
    preferredLevelMax: 'preferredLevelMax',
    theme: 'theme',
    timezone: 'timezone',
    telegramChatId: 'telegramChatId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    allowDirectMessages: 'allowDirectMessages'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    telegramId: 'telegramId',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    isVerified: 'isVerified',
    role: 'role',
    countryCode: 'countryCode',
    cityId: 'cityId',
    sportId: 'sportId',
    sportType: 'sportType',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    authSource: 'authSource',
    lastLogin: 'lastLogin',
    ballsBalance: 'ballsBalance',
    casesOpened: 'casesOpened',
    telegramChatId: 'telegramChatId',
    referralCode: 'referralCode',
    referredBy: 'referredBy'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PlayerRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    skillRating: 'skillRating',
    skillPoints: 'skillPoints',
    pointsRating: 'pointsRating',
    wins: 'wins',
    losses: 'losses',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlayerRatingScalarFieldEnum = (typeof PlayerRatingScalarFieldEnum)[keyof typeof PlayerRatingScalarFieldEnum]


  export const RatingHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    matchId: 'matchId',
    seasonId: 'seasonId',
    skillPointsBefore: 'skillPointsBefore',
    skillPointsAfter: 'skillPointsAfter',
    pointsRatingBefore: 'pointsRatingBefore',
    pointsRatingAfter: 'pointsRatingAfter',
    isWin: 'isWin',
    opponentId: 'opponentId',
    opponentSkillPoints: 'opponentSkillPoints',
    pointsEarned: 'pointsEarned',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type RatingHistoryScalarFieldEnum = (typeof RatingHistoryScalarFieldEnum)[keyof typeof RatingHistoryScalarFieldEnum]


  export const RatingSeasonScalarFieldEnum: {
    id: 'id',
    title: 'title',
    startDate: 'startDate',
    endDate: 'endDate',
    isCurrent: 'isCurrent',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingSeasonScalarFieldEnum = (typeof RatingSeasonScalarFieldEnum)[keyof typeof RatingSeasonScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    awardedAt: 'awardedAt',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const ReferralStatsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalInvited: 'totalInvited',
    activeInvited: 'activeInvited',
    registeredToday: 'registeredToday',
    registeredThisWeek: 'registeredThisWeek',
    registeredThisMonth: 'registeredThisMonth',
    achievementsEarned: 'achievementsEarned',
    bonusPointsEarned: 'bonusPointsEarned',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReferralStatsScalarFieldEnum = (typeof ReferralStatsScalarFieldEnum)[keyof typeof ReferralStatsScalarFieldEnum]


  export const ReferralActivityScalarFieldEnum: {
    id: 'id',
    referrerId: 'referrerId',
    invitedUserId: 'invitedUserId',
    registeredAt: 'registeredAt',
    firstMatchAt: 'firstMatchAt',
    isActive: 'isActive',
    inviteSource: 'inviteSource',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReferralActivityScalarFieldEnum = (typeof ReferralActivityScalarFieldEnum)[keyof typeof ReferralActivityScalarFieldEnum]


  export const BallTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    type: 'type',
    reason: 'reason',
    balanceAfter: 'balanceAfter',
    createdAt: 'createdAt'
  };

  export type BallTransactionScalarFieldEnum = (typeof BallTransactionScalarFieldEnum)[keyof typeof BallTransactionScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    priceBalls: 'priceBalls',
    image: 'image',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const CaseItemScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    name: 'name',
    type: 'type',
    payload: 'payload',
    dropChance: 'dropChance',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseItemScalarFieldEnum = (typeof CaseItemScalarFieldEnum)[keyof typeof CaseItemScalarFieldEnum]


  export const CaseOpeningScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    caseId: 'caseId',
    ballsSpent: 'ballsSpent',
    createdAt: 'createdAt'
  };

  export type CaseOpeningScalarFieldEnum = (typeof CaseOpeningScalarFieldEnum)[keyof typeof CaseOpeningScalarFieldEnum]


  export const CaseWinningScalarFieldEnum: {
    id: 'id',
    openingId: 'openingId',
    userId: 'userId',
    caseId: 'caseId',
    itemId: 'itemId',
    isProcessed: 'isProcessed',
    processedAt: 'processedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseWinningScalarFieldEnum = (typeof CaseWinningScalarFieldEnum)[keyof typeof CaseWinningScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    player1Id: 'player1Id',
    player2Id: 'player2Id',
    optionalId: 'optionalId',
    winnerId: 'winnerId',
    type: 'type',
    state: 'state',
    score: 'score',
    matchDate: 'matchDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    locationName: 'locationName'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const TrainingScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    location: 'location',
    time: 'time',
    participantLimit: 'participantLimit',
    description: 'description',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingScalarFieldEnum = (typeof TrainingScalarFieldEnum)[keyof typeof TrainingScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    creatorId: 'creatorId',
    startDate: 'startDate',
    endDate: 'endDate',
    formatDetails: 'formatDetails',
    minPlayers: 'minPlayers',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    isRanked: 'isRanked',
    locationId: 'locationId',
    locationName: 'locationName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const TournamentMatchScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    round: 'round',
    group: 'group',
    playerAId: 'playerAId',
    playerBId: 'playerBId',
    winnerId: 'winnerId',
    score: 'score',
    status: 'status',
    court: 'court',
    scheduledAt: 'scheduledAt',
    confirmedBy: 'confirmedBy',
    isThirdPlaceMatch: 'isThirdPlaceMatch',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentMatchScalarFieldEnum = (typeof TournamentMatchScalarFieldEnum)[keyof typeof TournamentMatchScalarFieldEnum]


  export const InviteScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    trainingId: 'trainingId',
    senderId: 'senderId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type InviteScalarFieldEnum = (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    message: 'message',
    data: 'data',
    isRead: 'isRead',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserStateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    step: 'step',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStateScalarFieldEnum = (typeof UserStateScalarFieldEnum)[keyof typeof UserStateScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    avatarUrl: 'avatarUrl',
    city: 'city',
    countryCode: 'countryCode',
    ntrpRating: 'ntrpRating',
    ratingPoints: 'ratingPoints',
    matchesPlayed: 'matchesPlayed',
    matchWins: 'matchWins',
    matchLosses: 'matchLosses',
    tournamentsPlayed: 'tournamentsPlayed',
    tournamentsWon: 'tournamentsWon',
    lastActivity: 'lastActivity',
    achievements: 'achievements',
    isPublicProfile: 'isPublicProfile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    preferredCourt: 'preferredCourt',
    dominantHand: 'dominantHand',
    preferredPlayTime: 'preferredPlayTime',
    playsInTournaments: 'playsInTournaments',
    weeklyPlayFrequency: 'weeklyPlayFrequency',
    backhandType: 'backhandType',
    preferredSurface: 'preferredSurface',
    playingStyle: 'playingStyle',
    favoriteShot: 'favoriteShot',
    racket: 'racket',
    opponentPreference: 'opponentPreference',
    initialRatingPoints: 'initialRatingPoints',
    selfAssessedLevel: 'selfAssessedLevel',
    profileStepOneCompleted: 'profileStepOneCompleted',
    profileStepTwoCompleted: 'profileStepTwoCompleted'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const GameRequestScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    creatorId: 'creatorId',
    locationName: 'locationName',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    gameMode: 'gameMode',
    dateTime: 'dateTime',
    paymentType: 'paymentType',
    ratingType: 'ratingType',
    formatInfo: 'formatInfo',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameRequestScalarFieldEnum = (typeof GameRequestScalarFieldEnum)[keyof typeof GameRequestScalarFieldEnum]


  export const RequestResponseScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId',
    status: 'status',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestResponseScalarFieldEnum = (typeof RequestResponseScalarFieldEnum)[keyof typeof RequestResponseScalarFieldEnum]


  export const TrainingSessionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    creatorId: 'creatorId',
    locationName: 'locationName',
    courtSurface: 'courtSurface',
    minLevel: 'minLevel',
    maxLevel: 'maxLevel',
    maxSlots: 'maxSlots',
    currentSlots: 'currentSlots',
    paymentType: 'paymentType',
    pricePerPerson: 'pricePerPerson',
    dateTime: 'dateTime',
    endTime: 'endTime',
    status: 'status',
    trainingType: 'trainingType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingSessionScalarFieldEnum = (typeof TrainingSessionScalarFieldEnum)[keyof typeof TrainingSessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'MediaType'
   */
  export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


  /**
   * Reference to a field of type 'MediaType[]'
   */
  export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType[]'>
    


  /**
   * Reference to a field of type 'StoryStatus'
   */
  export type EnumStoryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StoryStatus'>
    


  /**
   * Reference to a field of type 'StoryStatus[]'
   */
  export type ListEnumStoryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StoryStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'AuthSource'
   */
  export type EnumAuthSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthSource'>
    


  /**
   * Reference to a field of type 'AuthSource[]'
   */
  export type ListEnumAuthSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthSource[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'BallTransactionType'
   */
  export type EnumBallTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BallTransactionType'>
    


  /**
   * Reference to a field of type 'BallTransactionType[]'
   */
  export type ListEnumBallTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BallTransactionType[]'>
    


  /**
   * Reference to a field of type 'CaseItemType'
   */
  export type EnumCaseItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseItemType'>
    


  /**
   * Reference to a field of type 'CaseItemType[]'
   */
  export type ListEnumCaseItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseItemType[]'>
    


  /**
   * Reference to a field of type 'MatchType'
   */
  export type EnumMatchTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchType'>
    


  /**
   * Reference to a field of type 'MatchType[]'
   */
  export type ListEnumMatchTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchType[]'>
    


  /**
   * Reference to a field of type 'MatchState'
   */
  export type EnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState'>
    


  /**
   * Reference to a field of type 'MatchState[]'
   */
  export type ListEnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState[]'>
    


  /**
   * Reference to a field of type 'TrainingState'
   */
  export type EnumTrainingStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingState'>
    


  /**
   * Reference to a field of type 'TrainingState[]'
   */
  export type ListEnumTrainingStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingState[]'>
    


  /**
   * Reference to a field of type 'TournamentType'
   */
  export type EnumTournamentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TournamentType'>
    


  /**
   * Reference to a field of type 'TournamentType[]'
   */
  export type ListEnumTournamentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TournamentType[]'>
    


  /**
   * Reference to a field of type 'InviteStatus'
   */
  export type EnumInviteStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InviteStatus'>
    


  /**
   * Reference to a field of type 'InviteStatus[]'
   */
  export type ListEnumInviteStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InviteStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'ProfileStep'
   */
  export type EnumProfileStepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProfileStep'>
    


  /**
   * Reference to a field of type 'ProfileStep[]'
   */
  export type ListEnumProfileStepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProfileStep[]'>
    


  /**
   * Reference to a field of type 'CourtSurface'
   */
  export type EnumCourtSurfaceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourtSurface'>
    


  /**
   * Reference to a field of type 'CourtSurface[]'
   */
  export type ListEnumCourtSurfaceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourtSurface[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'TrainingType'
   */
  export type EnumTrainingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingType'>
    


  /**
   * Reference to a field of type 'TrainingType[]'
   */
  export type ListEnumTrainingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingType[]'>
    
  /**
   * Deep Input Types
   */


  export type MatchFeedbackWhereInput = {
    AND?: MatchFeedbackWhereInput | MatchFeedbackWhereInput[]
    OR?: MatchFeedbackWhereInput[]
    NOT?: MatchFeedbackWhereInput | MatchFeedbackWhereInput[]
    id?: IntFilter<"MatchFeedback"> | number
    matchId?: IntFilter<"MatchFeedback"> | number
    reviewerId?: IntFilter<"MatchFeedback"> | number
    revieweeId?: IntFilter<"MatchFeedback"> | number
    rating?: IntFilter<"MatchFeedback"> | number
    comment?: StringNullableFilter<"MatchFeedback"> | string | null
    isPublic?: BoolFilter<"MatchFeedback"> | boolean
    createdAt?: DateTimeFilter<"MatchFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"MatchFeedback"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
    reviewee?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MatchFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    reviewee?: UserOrderByWithRelationInput
  }

  export type MatchFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    matchId_reviewerId_revieweeId?: MatchFeedbackMatchIdReviewerIdRevieweeIdCompoundUniqueInput
    AND?: MatchFeedbackWhereInput | MatchFeedbackWhereInput[]
    OR?: MatchFeedbackWhereInput[]
    NOT?: MatchFeedbackWhereInput | MatchFeedbackWhereInput[]
    matchId?: IntFilter<"MatchFeedback"> | number
    reviewerId?: IntFilter<"MatchFeedback"> | number
    revieweeId?: IntFilter<"MatchFeedback"> | number
    rating?: IntFilter<"MatchFeedback"> | number
    comment?: StringNullableFilter<"MatchFeedback"> | string | null
    isPublic?: BoolFilter<"MatchFeedback"> | boolean
    createdAt?: DateTimeFilter<"MatchFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"MatchFeedback"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
    reviewee?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "matchId_reviewerId_revieweeId">

  export type MatchFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchFeedbackCountOrderByAggregateInput
    _avg?: MatchFeedbackAvgOrderByAggregateInput
    _max?: MatchFeedbackMaxOrderByAggregateInput
    _min?: MatchFeedbackMinOrderByAggregateInput
    _sum?: MatchFeedbackSumOrderByAggregateInput
  }

  export type MatchFeedbackScalarWhereWithAggregatesInput = {
    AND?: MatchFeedbackScalarWhereWithAggregatesInput | MatchFeedbackScalarWhereWithAggregatesInput[]
    OR?: MatchFeedbackScalarWhereWithAggregatesInput[]
    NOT?: MatchFeedbackScalarWhereWithAggregatesInput | MatchFeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MatchFeedback"> | number
    matchId?: IntWithAggregatesFilter<"MatchFeedback"> | number
    reviewerId?: IntWithAggregatesFilter<"MatchFeedback"> | number
    revieweeId?: IntWithAggregatesFilter<"MatchFeedback"> | number
    rating?: IntWithAggregatesFilter<"MatchFeedback"> | number
    comment?: StringNullableWithAggregatesFilter<"MatchFeedback"> | string | null
    isPublic?: BoolWithAggregatesFilter<"MatchFeedback"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MatchFeedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MatchFeedback"> | Date | string
  }

  export type DirectMessageWhereInput = {
    AND?: DirectMessageWhereInput | DirectMessageWhereInput[]
    OR?: DirectMessageWhereInput[]
    NOT?: DirectMessageWhereInput | DirectMessageWhereInput[]
    id?: IntFilter<"DirectMessage"> | number
    senderId?: IntFilter<"DirectMessage"> | number
    recipientId?: IntFilter<"DirectMessage"> | number
    message?: StringFilter<"DirectMessage"> | string
    isRead?: BoolFilter<"DirectMessage"> | boolean
    createdAt?: DateTimeFilter<"DirectMessage"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    recipient?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DirectMessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    recipient?: UserOrderByWithRelationInput
  }

  export type DirectMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DirectMessageWhereInput | DirectMessageWhereInput[]
    OR?: DirectMessageWhereInput[]
    NOT?: DirectMessageWhereInput | DirectMessageWhereInput[]
    senderId?: IntFilter<"DirectMessage"> | number
    recipientId?: IntFilter<"DirectMessage"> | number
    message?: StringFilter<"DirectMessage"> | string
    isRead?: BoolFilter<"DirectMessage"> | boolean
    createdAt?: DateTimeFilter<"DirectMessage"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    recipient?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DirectMessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: DirectMessageCountOrderByAggregateInput
    _avg?: DirectMessageAvgOrderByAggregateInput
    _max?: DirectMessageMaxOrderByAggregateInput
    _min?: DirectMessageMinOrderByAggregateInput
    _sum?: DirectMessageSumOrderByAggregateInput
  }

  export type DirectMessageScalarWhereWithAggregatesInput = {
    AND?: DirectMessageScalarWhereWithAggregatesInput | DirectMessageScalarWhereWithAggregatesInput[]
    OR?: DirectMessageScalarWhereWithAggregatesInput[]
    NOT?: DirectMessageScalarWhereWithAggregatesInput | DirectMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DirectMessage"> | number
    senderId?: IntWithAggregatesFilter<"DirectMessage"> | number
    recipientId?: IntWithAggregatesFilter<"DirectMessage"> | number
    message?: StringWithAggregatesFilter<"DirectMessage"> | string
    isRead?: BoolWithAggregatesFilter<"DirectMessage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DirectMessage"> | Date | string
  }

  export type StoryWhereInput = {
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    id?: IntFilter<"Story"> | number
    userId?: IntFilter<"Story"> | number
    telegramFileId?: StringFilter<"Story"> | string
    telegramFilePath?: StringNullableFilter<"Story"> | string | null
    type?: EnumMediaTypeFilter<"Story"> | $Enums.MediaType
    caption?: StringNullableFilter<"Story"> | string | null
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    viewsCount?: IntFilter<"Story"> | number
    likesCount?: IntFilter<"Story"> | number
    expiresAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    updatedAt?: DateTimeFilter<"Story"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrderInput | SortOrder
    type?: SortOrder
    caption?: SortOrderInput | SortOrder
    status?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    userId?: IntFilter<"Story"> | number
    telegramFileId?: StringFilter<"Story"> | string
    telegramFilePath?: StringNullableFilter<"Story"> | string | null
    type?: EnumMediaTypeFilter<"Story"> | $Enums.MediaType
    caption?: StringNullableFilter<"Story"> | string | null
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    viewsCount?: IntFilter<"Story"> | number
    likesCount?: IntFilter<"Story"> | number
    expiresAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    updatedAt?: DateTimeFilter<"Story"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type StoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrderInput | SortOrder
    type?: SortOrder
    caption?: SortOrderInput | SortOrder
    status?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    OR?: StoryScalarWhereWithAggregatesInput[]
    NOT?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Story"> | number
    userId?: IntWithAggregatesFilter<"Story"> | number
    telegramFileId?: StringWithAggregatesFilter<"Story"> | string
    telegramFilePath?: StringNullableWithAggregatesFilter<"Story"> | string | null
    type?: EnumMediaTypeWithAggregatesFilter<"Story"> | $Enums.MediaType
    caption?: StringNullableWithAggregatesFilter<"Story"> | string | null
    status?: EnumStoryStatusWithAggregatesFilter<"Story"> | $Enums.StoryStatus
    viewsCount?: IntWithAggregatesFilter<"Story"> | number
    likesCount?: IntWithAggregatesFilter<"Story"> | number
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Story"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Story"> | Date | string
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Story"> | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Story"> | Date | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    name?: StringFilter<"Country"> | string
    code?: StringFilter<"Country"> | string
    flagUrl?: StringNullableFilter<"Country"> | string | null
    createdAt?: DateTimeFilter<"Country"> | Date | string
    cities?: CityListRelationFilter
    users?: UserListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    cities?: CityOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    name?: StringFilter<"Country"> | string
    flagUrl?: StringNullableFilter<"Country"> | string | null
    createdAt?: DateTimeFilter<"Country"> | Date | string
    cities?: CityListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "code">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    name?: StringWithAggregatesFilter<"Country"> | string
    code?: StringWithAggregatesFilter<"Country"> | string
    flagUrl?: StringNullableWithAggregatesFilter<"Country"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
  }

  export type CityWhereInput = {
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    id?: IntFilter<"City"> | number
    name?: StringFilter<"City"> | string
    countryCode?: StringFilter<"City"> | string
    population?: IntFilter<"City"> | number
    lat?: FloatFilter<"City"> | number
    lng?: FloatFilter<"City"> | number
    timezone?: StringNullableFilter<"City"> | string | null
    createdAt?: DateTimeFilter<"City"> | Date | string
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    users?: UserListRelationFilter
    userSettings?: UserSettingsListRelationFilter
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    country?: CountryOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    userSettings?: UserSettingsOrderByRelationAggregateInput
  }

  export type CityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_countryCode?: CityNameCountryCodeCompoundUniqueInput
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    name?: StringFilter<"City"> | string
    countryCode?: StringFilter<"City"> | string
    population?: IntFilter<"City"> | number
    lat?: FloatFilter<"City"> | number
    lng?: FloatFilter<"City"> | number
    timezone?: StringNullableFilter<"City"> | string | null
    createdAt?: DateTimeFilter<"City"> | Date | string
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    users?: UserListRelationFilter
    userSettings?: UserSettingsListRelationFilter
  }, "id" | "name_countryCode">

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CityCountOrderByAggregateInput
    _avg?: CityAvgOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
    _sum?: CitySumOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    OR?: CityScalarWhereWithAggregatesInput[]
    NOT?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"City"> | number
    name?: StringWithAggregatesFilter<"City"> | string
    countryCode?: StringWithAggregatesFilter<"City"> | string
    population?: IntWithAggregatesFilter<"City"> | number
    lat?: FloatWithAggregatesFilter<"City"> | number
    lng?: FloatWithAggregatesFilter<"City"> | number
    timezone?: StringNullableWithAggregatesFilter<"City"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"City"> | Date | string
  }

  export type SportWhereInput = {
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    id?: IntFilter<"Sport"> | number
    title?: StringFilter<"Sport"> | string
    slug?: StringFilter<"Sport"> | string
    emoji?: StringNullableFilter<"Sport"> | string | null
    icon?: StringNullableFilter<"Sport"> | string | null
    createdAt?: DateTimeFilter<"Sport"> | Date | string
    users?: UserListRelationFilter
    userSettings?: UserSettingsListRelationFilter
  }

  export type SportOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    userSettings?: UserSettingsOrderByRelationAggregateInput
  }

  export type SportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: SportWhereInput | SportWhereInput[]
    OR?: SportWhereInput[]
    NOT?: SportWhereInput | SportWhereInput[]
    title?: StringFilter<"Sport"> | string
    emoji?: StringNullableFilter<"Sport"> | string | null
    icon?: StringNullableFilter<"Sport"> | string | null
    createdAt?: DateTimeFilter<"Sport"> | Date | string
    users?: UserListRelationFilter
    userSettings?: UserSettingsListRelationFilter
  }, "id" | "slug">

  export type SportOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SportCountOrderByAggregateInput
    _avg?: SportAvgOrderByAggregateInput
    _max?: SportMaxOrderByAggregateInput
    _min?: SportMinOrderByAggregateInput
    _sum?: SportSumOrderByAggregateInput
  }

  export type SportScalarWhereWithAggregatesInput = {
    AND?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    OR?: SportScalarWhereWithAggregatesInput[]
    NOT?: SportScalarWhereWithAggregatesInput | SportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sport"> | number
    title?: StringWithAggregatesFilter<"Sport"> | string
    slug?: StringWithAggregatesFilter<"Sport"> | string
    emoji?: StringNullableWithAggregatesFilter<"Sport"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Sport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Sport"> | Date | string
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    id?: IntFilter<"UserSettings"> | number
    userId?: IntFilter<"UserSettings"> | number
    language?: StringFilter<"UserSettings"> | string
    cityId?: IntNullableFilter<"UserSettings"> | number | null
    sportId?: IntNullableFilter<"UserSettings"> | number | null
    notificationsEnabled?: BoolFilter<"UserSettings"> | boolean
    notifyTelegram?: BoolFilter<"UserSettings"> | boolean
    notifyEmail?: BoolFilter<"UserSettings"> | boolean
    matchReminderTime?: StringFilter<"UserSettings"> | string
    notifyMatchResults?: BoolFilter<"UserSettings"> | boolean
    notifyTournamentResults?: BoolFilter<"UserSettings"> | boolean
    showProfilePublicly?: BoolFilter<"UserSettings"> | boolean
    showRatingPublicly?: BoolFilter<"UserSettings"> | boolean
    allowMatchInvites?: BoolFilter<"UserSettings"> | boolean
    requireMatchConfirm?: BoolFilter<"UserSettings"> | boolean
    preferredGender?: StringNullableFilter<"UserSettings"> | string | null
    preferredAgeMin?: IntNullableFilter<"UserSettings"> | number | null
    preferredAgeMax?: IntNullableFilter<"UserSettings"> | number | null
    preferredLevelMin?: FloatNullableFilter<"UserSettings"> | number | null
    preferredLevelMax?: FloatNullableFilter<"UserSettings"> | number | null
    theme?: StringFilter<"UserSettings"> | string
    timezone?: StringFilter<"UserSettings"> | string
    telegramChatId?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    city?: XOR<CityNullableRelationFilter, CityWhereInput> | null
    sport?: XOR<SportNullableRelationFilter, SportWhereInput> | null
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    language?: SortOrder
    cityId?: SortOrderInput | SortOrder
    sportId?: SortOrderInput | SortOrder
    notificationsEnabled?: SortOrder
    notifyTelegram?: SortOrder
    notifyEmail?: SortOrder
    matchReminderTime?: SortOrder
    notifyMatchResults?: SortOrder
    notifyTournamentResults?: SortOrder
    showProfilePublicly?: SortOrder
    showRatingPublicly?: SortOrder
    allowMatchInvites?: SortOrder
    requireMatchConfirm?: SortOrder
    preferredGender?: SortOrderInput | SortOrder
    preferredAgeMin?: SortOrderInput | SortOrder
    preferredAgeMax?: SortOrderInput | SortOrder
    preferredLevelMin?: SortOrderInput | SortOrder
    preferredLevelMax?: SortOrderInput | SortOrder
    theme?: SortOrder
    timezone?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowDirectMessages?: SortOrder
    user?: UserOrderByWithRelationInput
    city?: CityOrderByWithRelationInput
    sport?: SportOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    language?: StringFilter<"UserSettings"> | string
    cityId?: IntNullableFilter<"UserSettings"> | number | null
    sportId?: IntNullableFilter<"UserSettings"> | number | null
    notificationsEnabled?: BoolFilter<"UserSettings"> | boolean
    notifyTelegram?: BoolFilter<"UserSettings"> | boolean
    notifyEmail?: BoolFilter<"UserSettings"> | boolean
    matchReminderTime?: StringFilter<"UserSettings"> | string
    notifyMatchResults?: BoolFilter<"UserSettings"> | boolean
    notifyTournamentResults?: BoolFilter<"UserSettings"> | boolean
    showProfilePublicly?: BoolFilter<"UserSettings"> | boolean
    showRatingPublicly?: BoolFilter<"UserSettings"> | boolean
    allowMatchInvites?: BoolFilter<"UserSettings"> | boolean
    requireMatchConfirm?: BoolFilter<"UserSettings"> | boolean
    preferredGender?: StringNullableFilter<"UserSettings"> | string | null
    preferredAgeMin?: IntNullableFilter<"UserSettings"> | number | null
    preferredAgeMax?: IntNullableFilter<"UserSettings"> | number | null
    preferredLevelMin?: FloatNullableFilter<"UserSettings"> | number | null
    preferredLevelMax?: FloatNullableFilter<"UserSettings"> | number | null
    theme?: StringFilter<"UserSettings"> | string
    timezone?: StringFilter<"UserSettings"> | string
    telegramChatId?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    city?: XOR<CityNullableRelationFilter, CityWhereInput> | null
    sport?: XOR<SportNullableRelationFilter, SportWhereInput> | null
  }, "id" | "userId">

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    language?: SortOrder
    cityId?: SortOrderInput | SortOrder
    sportId?: SortOrderInput | SortOrder
    notificationsEnabled?: SortOrder
    notifyTelegram?: SortOrder
    notifyEmail?: SortOrder
    matchReminderTime?: SortOrder
    notifyMatchResults?: SortOrder
    notifyTournamentResults?: SortOrder
    showProfilePublicly?: SortOrder
    showRatingPublicly?: SortOrder
    allowMatchInvites?: SortOrder
    requireMatchConfirm?: SortOrder
    preferredGender?: SortOrderInput | SortOrder
    preferredAgeMin?: SortOrderInput | SortOrder
    preferredAgeMax?: SortOrderInput | SortOrder
    preferredLevelMin?: SortOrderInput | SortOrder
    preferredLevelMax?: SortOrderInput | SortOrder
    theme?: SortOrder
    timezone?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowDirectMessages?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _avg?: UserSettingsAvgOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
    _sum?: UserSettingsSumOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserSettings"> | number
    userId?: IntWithAggregatesFilter<"UserSettings"> | number
    language?: StringWithAggregatesFilter<"UserSettings"> | string
    cityId?: IntNullableWithAggregatesFilter<"UserSettings"> | number | null
    sportId?: IntNullableWithAggregatesFilter<"UserSettings"> | number | null
    notificationsEnabled?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    notifyTelegram?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    notifyEmail?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    matchReminderTime?: StringWithAggregatesFilter<"UserSettings"> | string
    notifyMatchResults?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    notifyTournamentResults?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showProfilePublicly?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showRatingPublicly?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    allowMatchInvites?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    requireMatchConfirm?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    preferredGender?: StringNullableWithAggregatesFilter<"UserSettings"> | string | null
    preferredAgeMin?: IntNullableWithAggregatesFilter<"UserSettings"> | number | null
    preferredAgeMax?: IntNullableWithAggregatesFilter<"UserSettings"> | number | null
    preferredLevelMin?: FloatNullableWithAggregatesFilter<"UserSettings"> | number | null
    preferredLevelMax?: FloatNullableWithAggregatesFilter<"UserSettings"> | number | null
    theme?: StringWithAggregatesFilter<"UserSettings"> | string
    timezone?: StringWithAggregatesFilter<"UserSettings"> | string
    telegramChatId?: StringNullableWithAggregatesFilter<"UserSettings"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    allowDirectMessages?: BoolWithAggregatesFilter<"UserSettings"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    telegramId?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    countryCode?: StringNullableFilter<"User"> | string | null
    cityId?: IntNullableFilter<"User"> | number | null
    sportId?: IntNullableFilter<"User"> | number | null
    sportType?: StringNullableFilter<"User"> | string | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    authSource?: EnumAuthSourceFilter<"User"> | $Enums.AuthSource
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    ballsBalance?: IntFilter<"User"> | number
    casesOpened?: IntFilter<"User"> | number
    telegramChatId?: BigIntNullableFilter<"User"> | bigint | number | null
    referralCode?: StringNullableFilter<"User"> | string | null
    referredBy?: IntNullableFilter<"User"> | number | null
    country?: XOR<CountryNullableRelationFilter, CountryWhereInput> | null
    city?: XOR<CityNullableRelationFilter, CityWhereInput> | null
    sport?: XOR<SportNullableRelationFilter, SportWhereInput> | null
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    createdMatches?: MatchListRelationFilter
    player1Matches?: MatchListRelationFilter
    player2Matches?: MatchListRelationFilter
    wonMatches?: MatchListRelationFilter
    tournamentMatchesA?: TournamentMatchListRelationFilter
    tournamentMatchesB?: TournamentMatchListRelationFilter
    tournamentMatchesWon?: TournamentMatchListRelationFilter
    createdTrainings?: TrainingListRelationFilter
    createdTrainingSessions?: TrainingSessionListRelationFilter
    createdTournaments?: TournamentListRelationFilter
    sentInvites?: InviteListRelationFilter
    receivedInvites?: InviteListRelationFilter
    tournaments?: TournamentListRelationFilter
    createdRequests?: GameRequestListRelationFilter
    requestParticipations?: GameRequestListRelationFilter
    requestResponses?: RequestResponseListRelationFilter
    trainingSessionParticipations?: TrainingSessionListRelationFilter
    caseOpenings?: CaseOpeningListRelationFilter
    caseWinnings?: CaseWinningListRelationFilter
    ballTransactions?: BallTransactionListRelationFilter
    stories?: StoryListRelationFilter
    referrer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    referralStats?: XOR<ReferralStatsNullableRelationFilter, ReferralStatsWhereInput> | null
    referrerActivities?: ReferralActivityListRelationFilter
    invitedActivities?: ReferralActivityListRelationFilter
    notifications?: NotificationListRelationFilter
    achievements?: UserAchievementListRelationFilter
    rating?: XOR<PlayerRatingNullableRelationFilter, PlayerRatingWhereInput> | null
    ratingHistory?: RatingHistoryListRelationFilter
    opponentHistory?: RatingHistoryListRelationFilter
    settings?: XOR<UserSettingsNullableRelationFilter, UserSettingsWhereInput> | null
    sentMessages?: DirectMessageListRelationFilter
    receivedMessages?: DirectMessageListRelationFilter
    givenFeedbacks?: MatchFeedbackListRelationFilter
    receivedFeedbacks?: MatchFeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrderInput | SortOrder
    cityId?: SortOrderInput | SortOrder
    sportId?: SortOrderInput | SortOrder
    sportType?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    referralCode?: SortOrderInput | SortOrder
    referredBy?: SortOrderInput | SortOrder
    country?: CountryOrderByWithRelationInput
    city?: CityOrderByWithRelationInput
    sport?: SportOrderByWithRelationInput
    profile?: UserProfileOrderByWithRelationInput
    createdMatches?: MatchOrderByRelationAggregateInput
    player1Matches?: MatchOrderByRelationAggregateInput
    player2Matches?: MatchOrderByRelationAggregateInput
    wonMatches?: MatchOrderByRelationAggregateInput
    tournamentMatchesA?: TournamentMatchOrderByRelationAggregateInput
    tournamentMatchesB?: TournamentMatchOrderByRelationAggregateInput
    tournamentMatchesWon?: TournamentMatchOrderByRelationAggregateInput
    createdTrainings?: TrainingOrderByRelationAggregateInput
    createdTrainingSessions?: TrainingSessionOrderByRelationAggregateInput
    createdTournaments?: TournamentOrderByRelationAggregateInput
    sentInvites?: InviteOrderByRelationAggregateInput
    receivedInvites?: InviteOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
    createdRequests?: GameRequestOrderByRelationAggregateInput
    requestParticipations?: GameRequestOrderByRelationAggregateInput
    requestResponses?: RequestResponseOrderByRelationAggregateInput
    trainingSessionParticipations?: TrainingSessionOrderByRelationAggregateInput
    caseOpenings?: CaseOpeningOrderByRelationAggregateInput
    caseWinnings?: CaseWinningOrderByRelationAggregateInput
    ballTransactions?: BallTransactionOrderByRelationAggregateInput
    stories?: StoryOrderByRelationAggregateInput
    referrer?: UserOrderByWithRelationInput
    referrals?: UserOrderByRelationAggregateInput
    referralStats?: ReferralStatsOrderByWithRelationInput
    referrerActivities?: ReferralActivityOrderByRelationAggregateInput
    invitedActivities?: ReferralActivityOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    achievements?: UserAchievementOrderByRelationAggregateInput
    rating?: PlayerRatingOrderByWithRelationInput
    ratingHistory?: RatingHistoryOrderByRelationAggregateInput
    opponentHistory?: RatingHistoryOrderByRelationAggregateInput
    settings?: UserSettingsOrderByWithRelationInput
    sentMessages?: DirectMessageOrderByRelationAggregateInput
    receivedMessages?: DirectMessageOrderByRelationAggregateInput
    givenFeedbacks?: MatchFeedbackOrderByRelationAggregateInput
    receivedFeedbacks?: MatchFeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    telegramId?: string
    username?: string
    referralCode?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    countryCode?: StringNullableFilter<"User"> | string | null
    cityId?: IntNullableFilter<"User"> | number | null
    sportId?: IntNullableFilter<"User"> | number | null
    sportType?: StringNullableFilter<"User"> | string | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    authSource?: EnumAuthSourceFilter<"User"> | $Enums.AuthSource
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    ballsBalance?: IntFilter<"User"> | number
    casesOpened?: IntFilter<"User"> | number
    telegramChatId?: BigIntNullableFilter<"User"> | bigint | number | null
    referredBy?: IntNullableFilter<"User"> | number | null
    country?: XOR<CountryNullableRelationFilter, CountryWhereInput> | null
    city?: XOR<CityNullableRelationFilter, CityWhereInput> | null
    sport?: XOR<SportNullableRelationFilter, SportWhereInput> | null
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    createdMatches?: MatchListRelationFilter
    player1Matches?: MatchListRelationFilter
    player2Matches?: MatchListRelationFilter
    wonMatches?: MatchListRelationFilter
    tournamentMatchesA?: TournamentMatchListRelationFilter
    tournamentMatchesB?: TournamentMatchListRelationFilter
    tournamentMatchesWon?: TournamentMatchListRelationFilter
    createdTrainings?: TrainingListRelationFilter
    createdTrainingSessions?: TrainingSessionListRelationFilter
    createdTournaments?: TournamentListRelationFilter
    sentInvites?: InviteListRelationFilter
    receivedInvites?: InviteListRelationFilter
    tournaments?: TournamentListRelationFilter
    createdRequests?: GameRequestListRelationFilter
    requestParticipations?: GameRequestListRelationFilter
    requestResponses?: RequestResponseListRelationFilter
    trainingSessionParticipations?: TrainingSessionListRelationFilter
    caseOpenings?: CaseOpeningListRelationFilter
    caseWinnings?: CaseWinningListRelationFilter
    ballTransactions?: BallTransactionListRelationFilter
    stories?: StoryListRelationFilter
    referrer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    referralStats?: XOR<ReferralStatsNullableRelationFilter, ReferralStatsWhereInput> | null
    referrerActivities?: ReferralActivityListRelationFilter
    invitedActivities?: ReferralActivityListRelationFilter
    notifications?: NotificationListRelationFilter
    achievements?: UserAchievementListRelationFilter
    rating?: XOR<PlayerRatingNullableRelationFilter, PlayerRatingWhereInput> | null
    ratingHistory?: RatingHistoryListRelationFilter
    opponentHistory?: RatingHistoryListRelationFilter
    settings?: XOR<UserSettingsNullableRelationFilter, UserSettingsWhereInput> | null
    sentMessages?: DirectMessageListRelationFilter
    receivedMessages?: DirectMessageListRelationFilter
    givenFeedbacks?: MatchFeedbackListRelationFilter
    receivedFeedbacks?: MatchFeedbackListRelationFilter
  }, "id" | "telegramId" | "username" | "referralCode">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrderInput | SortOrder
    cityId?: SortOrderInput | SortOrder
    sportId?: SortOrderInput | SortOrder
    sportType?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    referralCode?: SortOrderInput | SortOrder
    referredBy?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    telegramId?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    countryCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    cityId?: IntNullableWithAggregatesFilter<"User"> | number | null
    sportId?: IntNullableWithAggregatesFilter<"User"> | number | null
    sportType?: StringNullableWithAggregatesFilter<"User"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    authSource?: EnumAuthSourceWithAggregatesFilter<"User"> | $Enums.AuthSource
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    ballsBalance?: IntWithAggregatesFilter<"User"> | number
    casesOpened?: IntWithAggregatesFilter<"User"> | number
    telegramChatId?: BigIntNullableWithAggregatesFilter<"User"> | bigint | number | null
    referralCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    referredBy?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type PlayerRatingWhereInput = {
    AND?: PlayerRatingWhereInput | PlayerRatingWhereInput[]
    OR?: PlayerRatingWhereInput[]
    NOT?: PlayerRatingWhereInput | PlayerRatingWhereInput[]
    id?: IntFilter<"PlayerRating"> | number
    userId?: IntFilter<"PlayerRating"> | number
    skillRating?: FloatFilter<"PlayerRating"> | number
    skillPoints?: IntFilter<"PlayerRating"> | number
    pointsRating?: IntFilter<"PlayerRating"> | number
    wins?: IntFilter<"PlayerRating"> | number
    losses?: IntFilter<"PlayerRating"> | number
    lastUpdated?: DateTimeFilter<"PlayerRating"> | Date | string
    createdAt?: DateTimeFilter<"PlayerRating"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PlayerRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PlayerRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: PlayerRatingWhereInput | PlayerRatingWhereInput[]
    OR?: PlayerRatingWhereInput[]
    NOT?: PlayerRatingWhereInput | PlayerRatingWhereInput[]
    skillRating?: FloatFilter<"PlayerRating"> | number
    skillPoints?: IntFilter<"PlayerRating"> | number
    pointsRating?: IntFilter<"PlayerRating"> | number
    wins?: IntFilter<"PlayerRating"> | number
    losses?: IntFilter<"PlayerRating"> | number
    lastUpdated?: DateTimeFilter<"PlayerRating"> | Date | string
    createdAt?: DateTimeFilter<"PlayerRating"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type PlayerRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlayerRatingCountOrderByAggregateInput
    _avg?: PlayerRatingAvgOrderByAggregateInput
    _max?: PlayerRatingMaxOrderByAggregateInput
    _min?: PlayerRatingMinOrderByAggregateInput
    _sum?: PlayerRatingSumOrderByAggregateInput
  }

  export type PlayerRatingScalarWhereWithAggregatesInput = {
    AND?: PlayerRatingScalarWhereWithAggregatesInput | PlayerRatingScalarWhereWithAggregatesInput[]
    OR?: PlayerRatingScalarWhereWithAggregatesInput[]
    NOT?: PlayerRatingScalarWhereWithAggregatesInput | PlayerRatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerRating"> | number
    userId?: IntWithAggregatesFilter<"PlayerRating"> | number
    skillRating?: FloatWithAggregatesFilter<"PlayerRating"> | number
    skillPoints?: IntWithAggregatesFilter<"PlayerRating"> | number
    pointsRating?: IntWithAggregatesFilter<"PlayerRating"> | number
    wins?: IntWithAggregatesFilter<"PlayerRating"> | number
    losses?: IntWithAggregatesFilter<"PlayerRating"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"PlayerRating"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PlayerRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerRating"> | Date | string
  }

  export type RatingHistoryWhereInput = {
    AND?: RatingHistoryWhereInput | RatingHistoryWhereInput[]
    OR?: RatingHistoryWhereInput[]
    NOT?: RatingHistoryWhereInput | RatingHistoryWhereInput[]
    id?: IntFilter<"RatingHistory"> | number
    userId?: IntFilter<"RatingHistory"> | number
    matchId?: IntNullableFilter<"RatingHistory"> | number | null
    seasonId?: IntNullableFilter<"RatingHistory"> | number | null
    skillPointsBefore?: IntFilter<"RatingHistory"> | number
    skillPointsAfter?: IntFilter<"RatingHistory"> | number
    pointsRatingBefore?: IntFilter<"RatingHistory"> | number
    pointsRatingAfter?: IntFilter<"RatingHistory"> | number
    isWin?: BoolFilter<"RatingHistory"> | boolean
    opponentId?: IntNullableFilter<"RatingHistory"> | number | null
    opponentSkillPoints?: IntNullableFilter<"RatingHistory"> | number | null
    pointsEarned?: IntFilter<"RatingHistory"> | number
    reason?: StringFilter<"RatingHistory"> | string
    createdAt?: DateTimeFilter<"RatingHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    match?: XOR<MatchNullableRelationFilter, MatchWhereInput> | null
    season?: XOR<RatingSeasonNullableRelationFilter, RatingSeasonWhereInput> | null
    opponent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type RatingHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrderInput | SortOrder
    seasonId?: SortOrderInput | SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    isWin?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    opponentSkillPoints?: SortOrderInput | SortOrder
    pointsEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    match?: MatchOrderByWithRelationInput
    season?: RatingSeasonOrderByWithRelationInput
    opponent?: UserOrderByWithRelationInput
  }

  export type RatingHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RatingHistoryWhereInput | RatingHistoryWhereInput[]
    OR?: RatingHistoryWhereInput[]
    NOT?: RatingHistoryWhereInput | RatingHistoryWhereInput[]
    userId?: IntFilter<"RatingHistory"> | number
    matchId?: IntNullableFilter<"RatingHistory"> | number | null
    seasonId?: IntNullableFilter<"RatingHistory"> | number | null
    skillPointsBefore?: IntFilter<"RatingHistory"> | number
    skillPointsAfter?: IntFilter<"RatingHistory"> | number
    pointsRatingBefore?: IntFilter<"RatingHistory"> | number
    pointsRatingAfter?: IntFilter<"RatingHistory"> | number
    isWin?: BoolFilter<"RatingHistory"> | boolean
    opponentId?: IntNullableFilter<"RatingHistory"> | number | null
    opponentSkillPoints?: IntNullableFilter<"RatingHistory"> | number | null
    pointsEarned?: IntFilter<"RatingHistory"> | number
    reason?: StringFilter<"RatingHistory"> | string
    createdAt?: DateTimeFilter<"RatingHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    match?: XOR<MatchNullableRelationFilter, MatchWhereInput> | null
    season?: XOR<RatingSeasonNullableRelationFilter, RatingSeasonWhereInput> | null
    opponent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type RatingHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrderInput | SortOrder
    seasonId?: SortOrderInput | SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    isWin?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    opponentSkillPoints?: SortOrderInput | SortOrder
    pointsEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: RatingHistoryCountOrderByAggregateInput
    _avg?: RatingHistoryAvgOrderByAggregateInput
    _max?: RatingHistoryMaxOrderByAggregateInput
    _min?: RatingHistoryMinOrderByAggregateInput
    _sum?: RatingHistorySumOrderByAggregateInput
  }

  export type RatingHistoryScalarWhereWithAggregatesInput = {
    AND?: RatingHistoryScalarWhereWithAggregatesInput | RatingHistoryScalarWhereWithAggregatesInput[]
    OR?: RatingHistoryScalarWhereWithAggregatesInput[]
    NOT?: RatingHistoryScalarWhereWithAggregatesInput | RatingHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RatingHistory"> | number
    userId?: IntWithAggregatesFilter<"RatingHistory"> | number
    matchId?: IntNullableWithAggregatesFilter<"RatingHistory"> | number | null
    seasonId?: IntNullableWithAggregatesFilter<"RatingHistory"> | number | null
    skillPointsBefore?: IntWithAggregatesFilter<"RatingHistory"> | number
    skillPointsAfter?: IntWithAggregatesFilter<"RatingHistory"> | number
    pointsRatingBefore?: IntWithAggregatesFilter<"RatingHistory"> | number
    pointsRatingAfter?: IntWithAggregatesFilter<"RatingHistory"> | number
    isWin?: BoolWithAggregatesFilter<"RatingHistory"> | boolean
    opponentId?: IntNullableWithAggregatesFilter<"RatingHistory"> | number | null
    opponentSkillPoints?: IntNullableWithAggregatesFilter<"RatingHistory"> | number | null
    pointsEarned?: IntWithAggregatesFilter<"RatingHistory"> | number
    reason?: StringWithAggregatesFilter<"RatingHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RatingHistory"> | Date | string
  }

  export type RatingSeasonWhereInput = {
    AND?: RatingSeasonWhereInput | RatingSeasonWhereInput[]
    OR?: RatingSeasonWhereInput[]
    NOT?: RatingSeasonWhereInput | RatingSeasonWhereInput[]
    id?: IntFilter<"RatingSeason"> | number
    title?: StringFilter<"RatingSeason"> | string
    startDate?: DateTimeFilter<"RatingSeason"> | Date | string
    endDate?: DateTimeFilter<"RatingSeason"> | Date | string
    isCurrent?: BoolFilter<"RatingSeason"> | boolean
    description?: StringNullableFilter<"RatingSeason"> | string | null
    createdAt?: DateTimeFilter<"RatingSeason"> | Date | string
    updatedAt?: DateTimeFilter<"RatingSeason"> | Date | string
    history?: RatingHistoryListRelationFilter
  }

  export type RatingSeasonOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    history?: RatingHistoryOrderByRelationAggregateInput
  }

  export type RatingSeasonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RatingSeasonWhereInput | RatingSeasonWhereInput[]
    OR?: RatingSeasonWhereInput[]
    NOT?: RatingSeasonWhereInput | RatingSeasonWhereInput[]
    title?: StringFilter<"RatingSeason"> | string
    startDate?: DateTimeFilter<"RatingSeason"> | Date | string
    endDate?: DateTimeFilter<"RatingSeason"> | Date | string
    isCurrent?: BoolFilter<"RatingSeason"> | boolean
    description?: StringNullableFilter<"RatingSeason"> | string | null
    createdAt?: DateTimeFilter<"RatingSeason"> | Date | string
    updatedAt?: DateTimeFilter<"RatingSeason"> | Date | string
    history?: RatingHistoryListRelationFilter
  }, "id">

  export type RatingSeasonOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RatingSeasonCountOrderByAggregateInput
    _avg?: RatingSeasonAvgOrderByAggregateInput
    _max?: RatingSeasonMaxOrderByAggregateInput
    _min?: RatingSeasonMinOrderByAggregateInput
    _sum?: RatingSeasonSumOrderByAggregateInput
  }

  export type RatingSeasonScalarWhereWithAggregatesInput = {
    AND?: RatingSeasonScalarWhereWithAggregatesInput | RatingSeasonScalarWhereWithAggregatesInput[]
    OR?: RatingSeasonScalarWhereWithAggregatesInput[]
    NOT?: RatingSeasonScalarWhereWithAggregatesInput | RatingSeasonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RatingSeason"> | number
    title?: StringWithAggregatesFilter<"RatingSeason"> | string
    startDate?: DateTimeWithAggregatesFilter<"RatingSeason"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"RatingSeason"> | Date | string
    isCurrent?: BoolWithAggregatesFilter<"RatingSeason"> | boolean
    description?: StringNullableWithAggregatesFilter<"RatingSeason"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RatingSeason"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RatingSeason"> | Date | string
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: IntFilter<"UserAchievement"> | number
    userId?: IntFilter<"UserAchievement"> | number
    code?: StringFilter<"UserAchievement"> | string
    awardedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metadata?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_code?: UserAchievementUserIdCodeCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    userId?: IntFilter<"UserAchievement"> | number
    code?: StringFilter<"UserAchievement"> | string
    awardedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metadata?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_code">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _avg?: UserAchievementAvgOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
    _sum?: UserAchievementSumOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserAchievement"> | number
    userId?: IntWithAggregatesFilter<"UserAchievement"> | number
    code?: StringWithAggregatesFilter<"UserAchievement"> | string
    awardedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    metadata?: JsonNullableWithAggregatesFilter<"UserAchievement">
    createdAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
  }

  export type ReferralStatsWhereInput = {
    AND?: ReferralStatsWhereInput | ReferralStatsWhereInput[]
    OR?: ReferralStatsWhereInput[]
    NOT?: ReferralStatsWhereInput | ReferralStatsWhereInput[]
    id?: IntFilter<"ReferralStats"> | number
    userId?: IntFilter<"ReferralStats"> | number
    totalInvited?: IntFilter<"ReferralStats"> | number
    activeInvited?: IntFilter<"ReferralStats"> | number
    registeredToday?: IntFilter<"ReferralStats"> | number
    registeredThisWeek?: IntFilter<"ReferralStats"> | number
    registeredThisMonth?: IntFilter<"ReferralStats"> | number
    achievementsEarned?: StringNullableListFilter<"ReferralStats">
    bonusPointsEarned?: IntFilter<"ReferralStats"> | number
    createdAt?: DateTimeFilter<"ReferralStats"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralStats"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReferralStatsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    achievementsEarned?: SortOrder
    bonusPointsEarned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ReferralStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ReferralStatsWhereInput | ReferralStatsWhereInput[]
    OR?: ReferralStatsWhereInput[]
    NOT?: ReferralStatsWhereInput | ReferralStatsWhereInput[]
    totalInvited?: IntFilter<"ReferralStats"> | number
    activeInvited?: IntFilter<"ReferralStats"> | number
    registeredToday?: IntFilter<"ReferralStats"> | number
    registeredThisWeek?: IntFilter<"ReferralStats"> | number
    registeredThisMonth?: IntFilter<"ReferralStats"> | number
    achievementsEarned?: StringNullableListFilter<"ReferralStats">
    bonusPointsEarned?: IntFilter<"ReferralStats"> | number
    createdAt?: DateTimeFilter<"ReferralStats"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralStats"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ReferralStatsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    achievementsEarned?: SortOrder
    bonusPointsEarned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReferralStatsCountOrderByAggregateInput
    _avg?: ReferralStatsAvgOrderByAggregateInput
    _max?: ReferralStatsMaxOrderByAggregateInput
    _min?: ReferralStatsMinOrderByAggregateInput
    _sum?: ReferralStatsSumOrderByAggregateInput
  }

  export type ReferralStatsScalarWhereWithAggregatesInput = {
    AND?: ReferralStatsScalarWhereWithAggregatesInput | ReferralStatsScalarWhereWithAggregatesInput[]
    OR?: ReferralStatsScalarWhereWithAggregatesInput[]
    NOT?: ReferralStatsScalarWhereWithAggregatesInput | ReferralStatsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReferralStats"> | number
    userId?: IntWithAggregatesFilter<"ReferralStats"> | number
    totalInvited?: IntWithAggregatesFilter<"ReferralStats"> | number
    activeInvited?: IntWithAggregatesFilter<"ReferralStats"> | number
    registeredToday?: IntWithAggregatesFilter<"ReferralStats"> | number
    registeredThisWeek?: IntWithAggregatesFilter<"ReferralStats"> | number
    registeredThisMonth?: IntWithAggregatesFilter<"ReferralStats"> | number
    achievementsEarned?: StringNullableListFilter<"ReferralStats">
    bonusPointsEarned?: IntWithAggregatesFilter<"ReferralStats"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ReferralStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReferralStats"> | Date | string
  }

  export type ReferralActivityWhereInput = {
    AND?: ReferralActivityWhereInput | ReferralActivityWhereInput[]
    OR?: ReferralActivityWhereInput[]
    NOT?: ReferralActivityWhereInput | ReferralActivityWhereInput[]
    id?: IntFilter<"ReferralActivity"> | number
    referrerId?: IntFilter<"ReferralActivity"> | number
    invitedUserId?: IntFilter<"ReferralActivity"> | number
    registeredAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    firstMatchAt?: DateTimeNullableFilter<"ReferralActivity"> | Date | string | null
    isActive?: BoolFilter<"ReferralActivity"> | boolean
    inviteSource?: StringNullableFilter<"ReferralActivity"> | string | null
    ipAddress?: StringNullableFilter<"ReferralActivity"> | string | null
    createdAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    referrer?: XOR<UserRelationFilter, UserWhereInput>
    invitedUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReferralActivityOrderByWithRelationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
    registeredAt?: SortOrder
    firstMatchAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    inviteSource?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    referrer?: UserOrderByWithRelationInput
    invitedUser?: UserOrderByWithRelationInput
  }

  export type ReferralActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReferralActivityWhereInput | ReferralActivityWhereInput[]
    OR?: ReferralActivityWhereInput[]
    NOT?: ReferralActivityWhereInput | ReferralActivityWhereInput[]
    referrerId?: IntFilter<"ReferralActivity"> | number
    invitedUserId?: IntFilter<"ReferralActivity"> | number
    registeredAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    firstMatchAt?: DateTimeNullableFilter<"ReferralActivity"> | Date | string | null
    isActive?: BoolFilter<"ReferralActivity"> | boolean
    inviteSource?: StringNullableFilter<"ReferralActivity"> | string | null
    ipAddress?: StringNullableFilter<"ReferralActivity"> | string | null
    createdAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    referrer?: XOR<UserRelationFilter, UserWhereInput>
    invitedUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ReferralActivityOrderByWithAggregationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
    registeredAt?: SortOrder
    firstMatchAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    inviteSource?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReferralActivityCountOrderByAggregateInput
    _avg?: ReferralActivityAvgOrderByAggregateInput
    _max?: ReferralActivityMaxOrderByAggregateInput
    _min?: ReferralActivityMinOrderByAggregateInput
    _sum?: ReferralActivitySumOrderByAggregateInput
  }

  export type ReferralActivityScalarWhereWithAggregatesInput = {
    AND?: ReferralActivityScalarWhereWithAggregatesInput | ReferralActivityScalarWhereWithAggregatesInput[]
    OR?: ReferralActivityScalarWhereWithAggregatesInput[]
    NOT?: ReferralActivityScalarWhereWithAggregatesInput | ReferralActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReferralActivity"> | number
    referrerId?: IntWithAggregatesFilter<"ReferralActivity"> | number
    invitedUserId?: IntWithAggregatesFilter<"ReferralActivity"> | number
    registeredAt?: DateTimeWithAggregatesFilter<"ReferralActivity"> | Date | string
    firstMatchAt?: DateTimeNullableWithAggregatesFilter<"ReferralActivity"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ReferralActivity"> | boolean
    inviteSource?: StringNullableWithAggregatesFilter<"ReferralActivity"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"ReferralActivity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReferralActivity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReferralActivity"> | Date | string
  }

  export type BallTransactionWhereInput = {
    AND?: BallTransactionWhereInput | BallTransactionWhereInput[]
    OR?: BallTransactionWhereInput[]
    NOT?: BallTransactionWhereInput | BallTransactionWhereInput[]
    id?: IntFilter<"BallTransaction"> | number
    userId?: IntFilter<"BallTransaction"> | number
    amount?: IntFilter<"BallTransaction"> | number
    type?: EnumBallTransactionTypeFilter<"BallTransaction"> | $Enums.BallTransactionType
    reason?: StringFilter<"BallTransaction"> | string
    balanceAfter?: IntFilter<"BallTransaction"> | number
    createdAt?: DateTimeFilter<"BallTransaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BallTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    balanceAfter?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BallTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BallTransactionWhereInput | BallTransactionWhereInput[]
    OR?: BallTransactionWhereInput[]
    NOT?: BallTransactionWhereInput | BallTransactionWhereInput[]
    userId?: IntFilter<"BallTransaction"> | number
    amount?: IntFilter<"BallTransaction"> | number
    type?: EnumBallTransactionTypeFilter<"BallTransaction"> | $Enums.BallTransactionType
    reason?: StringFilter<"BallTransaction"> | string
    balanceAfter?: IntFilter<"BallTransaction"> | number
    createdAt?: DateTimeFilter<"BallTransaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BallTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    balanceAfter?: SortOrder
    createdAt?: SortOrder
    _count?: BallTransactionCountOrderByAggregateInput
    _avg?: BallTransactionAvgOrderByAggregateInput
    _max?: BallTransactionMaxOrderByAggregateInput
    _min?: BallTransactionMinOrderByAggregateInput
    _sum?: BallTransactionSumOrderByAggregateInput
  }

  export type BallTransactionScalarWhereWithAggregatesInput = {
    AND?: BallTransactionScalarWhereWithAggregatesInput | BallTransactionScalarWhereWithAggregatesInput[]
    OR?: BallTransactionScalarWhereWithAggregatesInput[]
    NOT?: BallTransactionScalarWhereWithAggregatesInput | BallTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BallTransaction"> | number
    userId?: IntWithAggregatesFilter<"BallTransaction"> | number
    amount?: IntWithAggregatesFilter<"BallTransaction"> | number
    type?: EnumBallTransactionTypeWithAggregatesFilter<"BallTransaction"> | $Enums.BallTransactionType
    reason?: StringWithAggregatesFilter<"BallTransaction"> | string
    balanceAfter?: IntWithAggregatesFilter<"BallTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BallTransaction"> | Date | string
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    id?: IntFilter<"Case"> | number
    name?: StringFilter<"Case"> | string
    description?: StringFilter<"Case"> | string
    priceBalls?: IntFilter<"Case"> | number
    image?: StringNullableFilter<"Case"> | string | null
    isActive?: BoolFilter<"Case"> | boolean
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    items?: CaseItemListRelationFilter
    openings?: CaseOpeningListRelationFilter
    winnings?: CaseWinningListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceBalls?: SortOrder
    image?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: CaseItemOrderByRelationAggregateInput
    openings?: CaseOpeningOrderByRelationAggregateInput
    winnings?: CaseWinningOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    name?: StringFilter<"Case"> | string
    description?: StringFilter<"Case"> | string
    priceBalls?: IntFilter<"Case"> | number
    image?: StringNullableFilter<"Case"> | string | null
    isActive?: BoolFilter<"Case"> | boolean
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    items?: CaseItemListRelationFilter
    openings?: CaseOpeningListRelationFilter
    winnings?: CaseWinningListRelationFilter
  }, "id">

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceBalls?: SortOrder
    image?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseCountOrderByAggregateInput
    _avg?: CaseAvgOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
    _sum?: CaseSumOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Case"> | number
    name?: StringWithAggregatesFilter<"Case"> | string
    description?: StringWithAggregatesFilter<"Case"> | string
    priceBalls?: IntWithAggregatesFilter<"Case"> | number
    image?: StringNullableWithAggregatesFilter<"Case"> | string | null
    isActive?: BoolWithAggregatesFilter<"Case"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
  }

  export type CaseItemWhereInput = {
    AND?: CaseItemWhereInput | CaseItemWhereInput[]
    OR?: CaseItemWhereInput[]
    NOT?: CaseItemWhereInput | CaseItemWhereInput[]
    id?: IntFilter<"CaseItem"> | number
    caseId?: IntFilter<"CaseItem"> | number
    name?: StringFilter<"CaseItem"> | string
    type?: EnumCaseItemTypeFilter<"CaseItem"> | $Enums.CaseItemType
    payload?: JsonFilter<"CaseItem">
    dropChance?: FloatFilter<"CaseItem"> | number
    imageUrl?: StringNullableFilter<"CaseItem"> | string | null
    isActive?: BoolFilter<"CaseItem"> | boolean
    createdAt?: DateTimeFilter<"CaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"CaseItem"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    winnings?: CaseWinningListRelationFilter
  }

  export type CaseItemOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    dropChance?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
    winnings?: CaseWinningOrderByRelationAggregateInput
  }

  export type CaseItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CaseItemWhereInput | CaseItemWhereInput[]
    OR?: CaseItemWhereInput[]
    NOT?: CaseItemWhereInput | CaseItemWhereInput[]
    caseId?: IntFilter<"CaseItem"> | number
    name?: StringFilter<"CaseItem"> | string
    type?: EnumCaseItemTypeFilter<"CaseItem"> | $Enums.CaseItemType
    payload?: JsonFilter<"CaseItem">
    dropChance?: FloatFilter<"CaseItem"> | number
    imageUrl?: StringNullableFilter<"CaseItem"> | string | null
    isActive?: BoolFilter<"CaseItem"> | boolean
    createdAt?: DateTimeFilter<"CaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"CaseItem"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    winnings?: CaseWinningListRelationFilter
  }, "id">

  export type CaseItemOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    dropChance?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseItemCountOrderByAggregateInput
    _avg?: CaseItemAvgOrderByAggregateInput
    _max?: CaseItemMaxOrderByAggregateInput
    _min?: CaseItemMinOrderByAggregateInput
    _sum?: CaseItemSumOrderByAggregateInput
  }

  export type CaseItemScalarWhereWithAggregatesInput = {
    AND?: CaseItemScalarWhereWithAggregatesInput | CaseItemScalarWhereWithAggregatesInput[]
    OR?: CaseItemScalarWhereWithAggregatesInput[]
    NOT?: CaseItemScalarWhereWithAggregatesInput | CaseItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CaseItem"> | number
    caseId?: IntWithAggregatesFilter<"CaseItem"> | number
    name?: StringWithAggregatesFilter<"CaseItem"> | string
    type?: EnumCaseItemTypeWithAggregatesFilter<"CaseItem"> | $Enums.CaseItemType
    payload?: JsonWithAggregatesFilter<"CaseItem">
    dropChance?: FloatWithAggregatesFilter<"CaseItem"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"CaseItem"> | string | null
    isActive?: BoolWithAggregatesFilter<"CaseItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CaseItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseItem"> | Date | string
  }

  export type CaseOpeningWhereInput = {
    AND?: CaseOpeningWhereInput | CaseOpeningWhereInput[]
    OR?: CaseOpeningWhereInput[]
    NOT?: CaseOpeningWhereInput | CaseOpeningWhereInput[]
    id?: IntFilter<"CaseOpening"> | number
    userId?: IntFilter<"CaseOpening"> | number
    caseId?: IntFilter<"CaseOpening"> | number
    ballsSpent?: IntFilter<"CaseOpening"> | number
    createdAt?: DateTimeFilter<"CaseOpening"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    winning?: XOR<CaseWinningNullableRelationFilter, CaseWinningWhereInput> | null
  }

  export type CaseOpeningOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
    winning?: CaseWinningOrderByWithRelationInput
  }

  export type CaseOpeningWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CaseOpeningWhereInput | CaseOpeningWhereInput[]
    OR?: CaseOpeningWhereInput[]
    NOT?: CaseOpeningWhereInput | CaseOpeningWhereInput[]
    userId?: IntFilter<"CaseOpening"> | number
    caseId?: IntFilter<"CaseOpening"> | number
    ballsSpent?: IntFilter<"CaseOpening"> | number
    createdAt?: DateTimeFilter<"CaseOpening"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    winning?: XOR<CaseWinningNullableRelationFilter, CaseWinningWhereInput> | null
  }, "id">

  export type CaseOpeningOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
    createdAt?: SortOrder
    _count?: CaseOpeningCountOrderByAggregateInput
    _avg?: CaseOpeningAvgOrderByAggregateInput
    _max?: CaseOpeningMaxOrderByAggregateInput
    _min?: CaseOpeningMinOrderByAggregateInput
    _sum?: CaseOpeningSumOrderByAggregateInput
  }

  export type CaseOpeningScalarWhereWithAggregatesInput = {
    AND?: CaseOpeningScalarWhereWithAggregatesInput | CaseOpeningScalarWhereWithAggregatesInput[]
    OR?: CaseOpeningScalarWhereWithAggregatesInput[]
    NOT?: CaseOpeningScalarWhereWithAggregatesInput | CaseOpeningScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CaseOpening"> | number
    userId?: IntWithAggregatesFilter<"CaseOpening"> | number
    caseId?: IntWithAggregatesFilter<"CaseOpening"> | number
    ballsSpent?: IntWithAggregatesFilter<"CaseOpening"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CaseOpening"> | Date | string
  }

  export type CaseWinningWhereInput = {
    AND?: CaseWinningWhereInput | CaseWinningWhereInput[]
    OR?: CaseWinningWhereInput[]
    NOT?: CaseWinningWhereInput | CaseWinningWhereInput[]
    id?: IntFilter<"CaseWinning"> | number
    openingId?: IntFilter<"CaseWinning"> | number
    userId?: IntFilter<"CaseWinning"> | number
    caseId?: IntFilter<"CaseWinning"> | number
    itemId?: IntFilter<"CaseWinning"> | number
    isProcessed?: BoolFilter<"CaseWinning"> | boolean
    processedAt?: DateTimeNullableFilter<"CaseWinning"> | Date | string | null
    notes?: StringNullableFilter<"CaseWinning"> | string | null
    createdAt?: DateTimeFilter<"CaseWinning"> | Date | string
    updatedAt?: DateTimeFilter<"CaseWinning"> | Date | string
    opening?: XOR<CaseOpeningRelationFilter, CaseOpeningWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    item?: XOR<CaseItemRelationFilter, CaseItemWhereInput>
  }

  export type CaseWinningOrderByWithRelationInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    opening?: CaseOpeningOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
    item?: CaseItemOrderByWithRelationInput
  }

  export type CaseWinningWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    openingId?: number
    AND?: CaseWinningWhereInput | CaseWinningWhereInput[]
    OR?: CaseWinningWhereInput[]
    NOT?: CaseWinningWhereInput | CaseWinningWhereInput[]
    userId?: IntFilter<"CaseWinning"> | number
    caseId?: IntFilter<"CaseWinning"> | number
    itemId?: IntFilter<"CaseWinning"> | number
    isProcessed?: BoolFilter<"CaseWinning"> | boolean
    processedAt?: DateTimeNullableFilter<"CaseWinning"> | Date | string | null
    notes?: StringNullableFilter<"CaseWinning"> | string | null
    createdAt?: DateTimeFilter<"CaseWinning"> | Date | string
    updatedAt?: DateTimeFilter<"CaseWinning"> | Date | string
    opening?: XOR<CaseOpeningRelationFilter, CaseOpeningWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    item?: XOR<CaseItemRelationFilter, CaseItemWhereInput>
  }, "id" | "openingId">

  export type CaseWinningOrderByWithAggregationInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseWinningCountOrderByAggregateInput
    _avg?: CaseWinningAvgOrderByAggregateInput
    _max?: CaseWinningMaxOrderByAggregateInput
    _min?: CaseWinningMinOrderByAggregateInput
    _sum?: CaseWinningSumOrderByAggregateInput
  }

  export type CaseWinningScalarWhereWithAggregatesInput = {
    AND?: CaseWinningScalarWhereWithAggregatesInput | CaseWinningScalarWhereWithAggregatesInput[]
    OR?: CaseWinningScalarWhereWithAggregatesInput[]
    NOT?: CaseWinningScalarWhereWithAggregatesInput | CaseWinningScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CaseWinning"> | number
    openingId?: IntWithAggregatesFilter<"CaseWinning"> | number
    userId?: IntWithAggregatesFilter<"CaseWinning"> | number
    caseId?: IntWithAggregatesFilter<"CaseWinning"> | number
    itemId?: IntWithAggregatesFilter<"CaseWinning"> | number
    isProcessed?: BoolWithAggregatesFilter<"CaseWinning"> | boolean
    processedAt?: DateTimeNullableWithAggregatesFilter<"CaseWinning"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"CaseWinning"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CaseWinning"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseWinning"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: IntFilter<"Match"> | number
    creatorId?: IntFilter<"Match"> | number
    player1Id?: IntNullableFilter<"Match"> | number | null
    player2Id?: IntNullableFilter<"Match"> | number | null
    optionalId?: IntNullableFilter<"Match"> | number | null
    winnerId?: IntNullableFilter<"Match"> | number | null
    type?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    score?: StringNullableFilter<"Match"> | string | null
    matchDate?: DateTimeFilter<"Match"> | Date | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    locationName?: StringNullableFilter<"Match"> | string | null
    invites?: InviteListRelationFilter
    feedbacks?: MatchFeedbackListRelationFilter
    ratingHistory?: RatingHistoryListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    player1?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    player2?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrderInput | SortOrder
    player2Id?: SortOrderInput | SortOrder
    optionalId?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrderInput | SortOrder
    matchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationName?: SortOrderInput | SortOrder
    invites?: InviteOrderByRelationAggregateInput
    feedbacks?: MatchFeedbackOrderByRelationAggregateInput
    ratingHistory?: RatingHistoryOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    player1?: UserOrderByWithRelationInput
    player2?: UserOrderByWithRelationInput
    winner?: UserOrderByWithRelationInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    creatorId?: IntFilter<"Match"> | number
    player1Id?: IntNullableFilter<"Match"> | number | null
    player2Id?: IntNullableFilter<"Match"> | number | null
    optionalId?: IntNullableFilter<"Match"> | number | null
    winnerId?: IntNullableFilter<"Match"> | number | null
    type?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    score?: StringNullableFilter<"Match"> | string | null
    matchDate?: DateTimeFilter<"Match"> | Date | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    locationName?: StringNullableFilter<"Match"> | string | null
    invites?: InviteListRelationFilter
    feedbacks?: MatchFeedbackListRelationFilter
    ratingHistory?: RatingHistoryListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    player1?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    player2?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrderInput | SortOrder
    player2Id?: SortOrderInput | SortOrder
    optionalId?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrderInput | SortOrder
    matchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationName?: SortOrderInput | SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Match"> | number
    creatorId?: IntWithAggregatesFilter<"Match"> | number
    player1Id?: IntNullableWithAggregatesFilter<"Match"> | number | null
    player2Id?: IntNullableWithAggregatesFilter<"Match"> | number | null
    optionalId?: IntNullableWithAggregatesFilter<"Match"> | number | null
    winnerId?: IntNullableWithAggregatesFilter<"Match"> | number | null
    type?: EnumMatchTypeWithAggregatesFilter<"Match"> | $Enums.MatchType
    state?: EnumMatchStateWithAggregatesFilter<"Match"> | $Enums.MatchState
    score?: StringNullableWithAggregatesFilter<"Match"> | string | null
    matchDate?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    locationName?: StringNullableWithAggregatesFilter<"Match"> | string | null
  }

  export type TrainingWhereInput = {
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    id?: IntFilter<"Training"> | number
    creatorId?: IntFilter<"Training"> | number
    location?: StringFilter<"Training"> | string
    time?: DateTimeFilter<"Training"> | Date | string
    participantLimit?: IntFilter<"Training"> | number
    description?: StringNullableFilter<"Training"> | string | null
    state?: EnumTrainingStateFilter<"Training"> | $Enums.TrainingState
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    invites?: InviteListRelationFilter
  }

  export type TrainingOrderByWithRelationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrderInput | SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    invites?: InviteOrderByRelationAggregateInput
  }

  export type TrainingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    creatorId?: IntFilter<"Training"> | number
    location?: StringFilter<"Training"> | string
    time?: DateTimeFilter<"Training"> | Date | string
    participantLimit?: IntFilter<"Training"> | number
    description?: StringNullableFilter<"Training"> | string | null
    state?: EnumTrainingStateFilter<"Training"> | $Enums.TrainingState
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    invites?: InviteListRelationFilter
  }, "id">

  export type TrainingOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrderInput | SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingCountOrderByAggregateInput
    _avg?: TrainingAvgOrderByAggregateInput
    _max?: TrainingMaxOrderByAggregateInput
    _min?: TrainingMinOrderByAggregateInput
    _sum?: TrainingSumOrderByAggregateInput
  }

  export type TrainingScalarWhereWithAggregatesInput = {
    AND?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    OR?: TrainingScalarWhereWithAggregatesInput[]
    NOT?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Training"> | number
    creatorId?: IntWithAggregatesFilter<"Training"> | number
    location?: StringWithAggregatesFilter<"Training"> | string
    time?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    participantLimit?: IntWithAggregatesFilter<"Training"> | number
    description?: StringNullableWithAggregatesFilter<"Training"> | string | null
    state?: EnumTrainingStateWithAggregatesFilter<"Training"> | $Enums.TrainingState
    createdAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
  }

  export type TournamentWhereInput = {
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    id?: IntFilter<"Tournament"> | number
    title?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    status?: StringFilter<"Tournament"> | string
    creatorId?: IntFilter<"Tournament"> | number
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    formatDetails?: JsonNullableFilter<"Tournament">
    minPlayers?: IntFilter<"Tournament"> | number
    maxPlayers?: IntFilter<"Tournament"> | number
    currentPlayers?: IntFilter<"Tournament"> | number
    isRanked?: BoolFilter<"Tournament"> | boolean
    locationId?: IntNullableFilter<"Tournament"> | number | null
    locationName?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    players?: UserListRelationFilter
    matches?: TournamentMatchListRelationFilter
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrderInput | SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrderInput | SortOrder
    locationName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    players?: UserOrderByRelationAggregateInput
    matches?: TournamentMatchOrderByRelationAggregateInput
  }

  export type TournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    title?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    status?: StringFilter<"Tournament"> | string
    creatorId?: IntFilter<"Tournament"> | number
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    formatDetails?: JsonNullableFilter<"Tournament">
    minPlayers?: IntFilter<"Tournament"> | number
    maxPlayers?: IntFilter<"Tournament"> | number
    currentPlayers?: IntFilter<"Tournament"> | number
    isRanked?: BoolFilter<"Tournament"> | boolean
    locationId?: IntNullableFilter<"Tournament"> | number | null
    locationName?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    players?: UserListRelationFilter
    matches?: TournamentMatchListRelationFilter
  }, "id">

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrderInput | SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrderInput | SortOrder
    locationName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    OR?: TournamentScalarWhereWithAggregatesInput[]
    NOT?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tournament"> | number
    title?: StringWithAggregatesFilter<"Tournament"> | string
    description?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    type?: EnumTournamentTypeWithAggregatesFilter<"Tournament"> | $Enums.TournamentType
    status?: StringWithAggregatesFilter<"Tournament"> | string
    creatorId?: IntWithAggregatesFilter<"Tournament"> | number
    startDate?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    formatDetails?: JsonNullableWithAggregatesFilter<"Tournament">
    minPlayers?: IntWithAggregatesFilter<"Tournament"> | number
    maxPlayers?: IntWithAggregatesFilter<"Tournament"> | number
    currentPlayers?: IntWithAggregatesFilter<"Tournament"> | number
    isRanked?: BoolWithAggregatesFilter<"Tournament"> | boolean
    locationId?: IntNullableWithAggregatesFilter<"Tournament"> | number | null
    locationName?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  }

  export type TournamentMatchWhereInput = {
    AND?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    OR?: TournamentMatchWhereInput[]
    NOT?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    id?: IntFilter<"TournamentMatch"> | number
    tournamentId?: IntFilter<"TournamentMatch"> | number
    round?: IntNullableFilter<"TournamentMatch"> | number | null
    group?: StringNullableFilter<"TournamentMatch"> | string | null
    playerAId?: IntFilter<"TournamentMatch"> | number
    playerBId?: IntNullableFilter<"TournamentMatch"> | number | null
    winnerId?: IntNullableFilter<"TournamentMatch"> | number | null
    score?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    court?: StringNullableFilter<"TournamentMatch"> | string | null
    scheduledAt?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    confirmedBy?: IntNullableListFilter<"TournamentMatch">
    isThirdPlaceMatch?: BoolFilter<"TournamentMatch"> | boolean
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    tournament?: XOR<TournamentRelationFilter, TournamentWhereInput>
    playerA?: XOR<UserRelationFilter, UserWhereInput>
    playerB?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TournamentMatchOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrderInput | SortOrder
    group?: SortOrderInput | SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    court?: SortOrderInput | SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    playerA?: UserOrderByWithRelationInput
    playerB?: UserOrderByWithRelationInput
    winner?: UserOrderByWithRelationInput
  }

  export type TournamentMatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    OR?: TournamentMatchWhereInput[]
    NOT?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    tournamentId?: IntFilter<"TournamentMatch"> | number
    round?: IntNullableFilter<"TournamentMatch"> | number | null
    group?: StringNullableFilter<"TournamentMatch"> | string | null
    playerAId?: IntFilter<"TournamentMatch"> | number
    playerBId?: IntNullableFilter<"TournamentMatch"> | number | null
    winnerId?: IntNullableFilter<"TournamentMatch"> | number | null
    score?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    court?: StringNullableFilter<"TournamentMatch"> | string | null
    scheduledAt?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    confirmedBy?: IntNullableListFilter<"TournamentMatch">
    isThirdPlaceMatch?: BoolFilter<"TournamentMatch"> | boolean
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    tournament?: XOR<TournamentRelationFilter, TournamentWhereInput>
    playerA?: XOR<UserRelationFilter, UserWhereInput>
    playerB?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TournamentMatchOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrderInput | SortOrder
    group?: SortOrderInput | SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    court?: SortOrderInput | SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentMatchCountOrderByAggregateInput
    _avg?: TournamentMatchAvgOrderByAggregateInput
    _max?: TournamentMatchMaxOrderByAggregateInput
    _min?: TournamentMatchMinOrderByAggregateInput
    _sum?: TournamentMatchSumOrderByAggregateInput
  }

  export type TournamentMatchScalarWhereWithAggregatesInput = {
    AND?: TournamentMatchScalarWhereWithAggregatesInput | TournamentMatchScalarWhereWithAggregatesInput[]
    OR?: TournamentMatchScalarWhereWithAggregatesInput[]
    NOT?: TournamentMatchScalarWhereWithAggregatesInput | TournamentMatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TournamentMatch"> | number
    tournamentId?: IntWithAggregatesFilter<"TournamentMatch"> | number
    round?: IntNullableWithAggregatesFilter<"TournamentMatch"> | number | null
    group?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    playerAId?: IntWithAggregatesFilter<"TournamentMatch"> | number
    playerBId?: IntNullableWithAggregatesFilter<"TournamentMatch"> | number | null
    winnerId?: IntNullableWithAggregatesFilter<"TournamentMatch"> | number | null
    score?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    status?: StringWithAggregatesFilter<"TournamentMatch"> | string
    court?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"TournamentMatch"> | Date | string | null
    confirmedBy?: IntNullableListFilter<"TournamentMatch">
    isThirdPlaceMatch?: BoolWithAggregatesFilter<"TournamentMatch"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TournamentMatch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TournamentMatch"> | Date | string
  }

  export type InviteWhereInput = {
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    id?: IntFilter<"Invite"> | number
    matchId?: IntNullableFilter<"Invite"> | number | null
    trainingId?: IntNullableFilter<"Invite"> | number | null
    senderId?: IntFilter<"Invite"> | number
    receiverId?: IntFilter<"Invite"> | number
    status?: EnumInviteStatusFilter<"Invite"> | $Enums.InviteStatus
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    match?: XOR<MatchNullableRelationFilter, MatchWhereInput> | null
    training?: XOR<TrainingNullableRelationFilter, TrainingWhereInput> | null
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InviteOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrderInput | SortOrder
    trainingId?: SortOrderInput | SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    training?: TrainingOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type InviteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    matchId?: IntNullableFilter<"Invite"> | number | null
    trainingId?: IntNullableFilter<"Invite"> | number | null
    senderId?: IntFilter<"Invite"> | number
    receiverId?: IntFilter<"Invite"> | number
    status?: EnumInviteStatusFilter<"Invite"> | $Enums.InviteStatus
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    match?: XOR<MatchNullableRelationFilter, MatchWhereInput> | null
    training?: XOR<TrainingNullableRelationFilter, TrainingWhereInput> | null
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type InviteOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrderInput | SortOrder
    trainingId?: SortOrderInput | SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: InviteCountOrderByAggregateInput
    _avg?: InviteAvgOrderByAggregateInput
    _max?: InviteMaxOrderByAggregateInput
    _min?: InviteMinOrderByAggregateInput
    _sum?: InviteSumOrderByAggregateInput
  }

  export type InviteScalarWhereWithAggregatesInput = {
    AND?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    OR?: InviteScalarWhereWithAggregatesInput[]
    NOT?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invite"> | number
    matchId?: IntNullableWithAggregatesFilter<"Invite"> | number | null
    trainingId?: IntNullableWithAggregatesFilter<"Invite"> | number | null
    senderId?: IntWithAggregatesFilter<"Invite"> | number
    receiverId?: IntWithAggregatesFilter<"Invite"> | number
    status?: EnumInviteStatusWithAggregatesFilter<"Invite"> | $Enums.InviteStatus
    createdAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    message?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonNullableWithAggregatesFilter<"Notification">
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type UserStateWhereInput = {
    AND?: UserStateWhereInput | UserStateWhereInput[]
    OR?: UserStateWhereInput[]
    NOT?: UserStateWhereInput | UserStateWhereInput[]
    id?: IntFilter<"UserState"> | number
    userId?: StringFilter<"UserState"> | string
    step?: EnumProfileStepFilter<"UserState"> | $Enums.ProfileStep
    data?: JsonFilter<"UserState">
    createdAt?: DateTimeFilter<"UserState"> | Date | string
    updatedAt?: DateTimeFilter<"UserState"> | Date | string
  }

  export type UserStateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    step?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: string
    AND?: UserStateWhereInput | UserStateWhereInput[]
    OR?: UserStateWhereInput[]
    NOT?: UserStateWhereInput | UserStateWhereInput[]
    step?: EnumProfileStepFilter<"UserState"> | $Enums.ProfileStep
    data?: JsonFilter<"UserState">
    createdAt?: DateTimeFilter<"UserState"> | Date | string
    updatedAt?: DateTimeFilter<"UserState"> | Date | string
  }, "id" | "userId">

  export type UserStateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    step?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStateCountOrderByAggregateInput
    _avg?: UserStateAvgOrderByAggregateInput
    _max?: UserStateMaxOrderByAggregateInput
    _min?: UserStateMinOrderByAggregateInput
    _sum?: UserStateSumOrderByAggregateInput
  }

  export type UserStateScalarWhereWithAggregatesInput = {
    AND?: UserStateScalarWhereWithAggregatesInput | UserStateScalarWhereWithAggregatesInput[]
    OR?: UserStateScalarWhereWithAggregatesInput[]
    NOT?: UserStateScalarWhereWithAggregatesInput | UserStateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserState"> | number
    userId?: StringWithAggregatesFilter<"UserState"> | string
    step?: EnumProfileStepWithAggregatesFilter<"UserState"> | $Enums.ProfileStep
    data?: JsonWithAggregatesFilter<"UserState">
    createdAt?: DateTimeWithAggregatesFilter<"UserState"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserState"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: IntFilter<"UserProfile"> | number
    userId?: IntFilter<"UserProfile"> | number
    avatarUrl?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringNullableFilter<"UserProfile"> | string | null
    countryCode?: StringNullableFilter<"UserProfile"> | string | null
    ntrpRating?: FloatNullableFilter<"UserProfile"> | number | null
    ratingPoints?: IntFilter<"UserProfile"> | number
    matchesPlayed?: IntFilter<"UserProfile"> | number
    matchWins?: IntFilter<"UserProfile"> | number
    matchLosses?: IntFilter<"UserProfile"> | number
    tournamentsPlayed?: IntFilter<"UserProfile"> | number
    tournamentsWon?: IntFilter<"UserProfile"> | number
    lastActivity?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    achievements?: JsonNullableFilter<"UserProfile">
    isPublicProfile?: BoolFilter<"UserProfile"> | boolean
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    preferredCourt?: StringNullableFilter<"UserProfile"> | string | null
    dominantHand?: StringNullableFilter<"UserProfile"> | string | null
    preferredPlayTime?: StringNullableListFilter<"UserProfile">
    playsInTournaments?: BoolFilter<"UserProfile"> | boolean
    weeklyPlayFrequency?: StringNullableFilter<"UserProfile"> | string | null
    backhandType?: StringNullableFilter<"UserProfile"> | string | null
    preferredSurface?: StringNullableFilter<"UserProfile"> | string | null
    playingStyle?: StringNullableFilter<"UserProfile"> | string | null
    favoriteShot?: StringNullableFilter<"UserProfile"> | string | null
    racket?: StringNullableFilter<"UserProfile"> | string | null
    opponentPreference?: StringNullableFilter<"UserProfile"> | string | null
    initialRatingPoints?: IntNullableFilter<"UserProfile"> | number | null
    selfAssessedLevel?: StringNullableFilter<"UserProfile"> | string | null
    profileStepOneCompleted?: BoolFilter<"UserProfile"> | boolean
    profileStepTwoCompleted?: BoolFilter<"UserProfile"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    countryCode?: SortOrderInput | SortOrder
    ntrpRating?: SortOrderInput | SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrderInput | SortOrder
    dominantHand?: SortOrderInput | SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrderInput | SortOrder
    backhandType?: SortOrderInput | SortOrder
    preferredSurface?: SortOrderInput | SortOrder
    playingStyle?: SortOrderInput | SortOrder
    favoriteShot?: SortOrderInput | SortOrder
    racket?: SortOrderInput | SortOrder
    opponentPreference?: SortOrderInput | SortOrder
    initialRatingPoints?: SortOrderInput | SortOrder
    selfAssessedLevel?: SortOrderInput | SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    avatarUrl?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringNullableFilter<"UserProfile"> | string | null
    countryCode?: StringNullableFilter<"UserProfile"> | string | null
    ntrpRating?: FloatNullableFilter<"UserProfile"> | number | null
    ratingPoints?: IntFilter<"UserProfile"> | number
    matchesPlayed?: IntFilter<"UserProfile"> | number
    matchWins?: IntFilter<"UserProfile"> | number
    matchLosses?: IntFilter<"UserProfile"> | number
    tournamentsPlayed?: IntFilter<"UserProfile"> | number
    tournamentsWon?: IntFilter<"UserProfile"> | number
    lastActivity?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    achievements?: JsonNullableFilter<"UserProfile">
    isPublicProfile?: BoolFilter<"UserProfile"> | boolean
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    preferredCourt?: StringNullableFilter<"UserProfile"> | string | null
    dominantHand?: StringNullableFilter<"UserProfile"> | string | null
    preferredPlayTime?: StringNullableListFilter<"UserProfile">
    playsInTournaments?: BoolFilter<"UserProfile"> | boolean
    weeklyPlayFrequency?: StringNullableFilter<"UserProfile"> | string | null
    backhandType?: StringNullableFilter<"UserProfile"> | string | null
    preferredSurface?: StringNullableFilter<"UserProfile"> | string | null
    playingStyle?: StringNullableFilter<"UserProfile"> | string | null
    favoriteShot?: StringNullableFilter<"UserProfile"> | string | null
    racket?: StringNullableFilter<"UserProfile"> | string | null
    opponentPreference?: StringNullableFilter<"UserProfile"> | string | null
    initialRatingPoints?: IntNullableFilter<"UserProfile"> | number | null
    selfAssessedLevel?: StringNullableFilter<"UserProfile"> | string | null
    profileStepOneCompleted?: BoolFilter<"UserProfile"> | boolean
    profileStepTwoCompleted?: BoolFilter<"UserProfile"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    countryCode?: SortOrderInput | SortOrder
    ntrpRating?: SortOrderInput | SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrderInput | SortOrder
    dominantHand?: SortOrderInput | SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrderInput | SortOrder
    backhandType?: SortOrderInput | SortOrder
    preferredSurface?: SortOrderInput | SortOrder
    playingStyle?: SortOrderInput | SortOrder
    favoriteShot?: SortOrderInput | SortOrder
    racket?: SortOrderInput | SortOrder
    opponentPreference?: SortOrderInput | SortOrder
    initialRatingPoints?: SortOrderInput | SortOrder
    selfAssessedLevel?: SortOrderInput | SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserProfile"> | number
    userId?: IntWithAggregatesFilter<"UserProfile"> | number
    avatarUrl?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    city?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    countryCode?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    ntrpRating?: FloatNullableWithAggregatesFilter<"UserProfile"> | number | null
    ratingPoints?: IntWithAggregatesFilter<"UserProfile"> | number
    matchesPlayed?: IntWithAggregatesFilter<"UserProfile"> | number
    matchWins?: IntWithAggregatesFilter<"UserProfile"> | number
    matchLosses?: IntWithAggregatesFilter<"UserProfile"> | number
    tournamentsPlayed?: IntWithAggregatesFilter<"UserProfile"> | number
    tournamentsWon?: IntWithAggregatesFilter<"UserProfile"> | number
    lastActivity?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    achievements?: JsonNullableWithAggregatesFilter<"UserProfile">
    isPublicProfile?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    preferredCourt?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    dominantHand?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    preferredPlayTime?: StringNullableListFilter<"UserProfile">
    playsInTournaments?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    weeklyPlayFrequency?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    backhandType?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    preferredSurface?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    playingStyle?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    favoriteShot?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    racket?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    opponentPreference?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    initialRatingPoints?: IntNullableWithAggregatesFilter<"UserProfile"> | number | null
    selfAssessedLevel?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    profileStepOneCompleted?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    profileStepTwoCompleted?: BoolWithAggregatesFilter<"UserProfile"> | boolean
  }

  export type GameRequestWhereInput = {
    AND?: GameRequestWhereInput | GameRequestWhereInput[]
    OR?: GameRequestWhereInput[]
    NOT?: GameRequestWhereInput | GameRequestWhereInput[]
    id?: IntFilter<"GameRequest"> | number
    type?: StringFilter<"GameRequest"> | string
    title?: StringFilter<"GameRequest"> | string
    description?: StringNullableFilter<"GameRequest"> | string | null
    creatorId?: IntFilter<"GameRequest"> | number
    locationName?: StringNullableFilter<"GameRequest"> | string | null
    maxPlayers?: IntFilter<"GameRequest"> | number
    currentPlayers?: IntFilter<"GameRequest"> | number
    gameMode?: StringFilter<"GameRequest"> | string
    dateTime?: DateTimeFilter<"GameRequest"> | Date | string
    paymentType?: StringFilter<"GameRequest"> | string
    ratingType?: StringFilter<"GameRequest"> | string
    formatInfo?: JsonNullableFilter<"GameRequest">
    status?: StringFilter<"GameRequest"> | string
    createdAt?: DateTimeFilter<"GameRequest"> | Date | string
    updatedAt?: DateTimeFilter<"GameRequest"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
    responses?: RequestResponseListRelationFilter
  }

  export type GameRequestOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    locationName?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    participants?: UserOrderByRelationAggregateInput
    responses?: RequestResponseOrderByRelationAggregateInput
  }

  export type GameRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameRequestWhereInput | GameRequestWhereInput[]
    OR?: GameRequestWhereInput[]
    NOT?: GameRequestWhereInput | GameRequestWhereInput[]
    type?: StringFilter<"GameRequest"> | string
    title?: StringFilter<"GameRequest"> | string
    description?: StringNullableFilter<"GameRequest"> | string | null
    creatorId?: IntFilter<"GameRequest"> | number
    locationName?: StringNullableFilter<"GameRequest"> | string | null
    maxPlayers?: IntFilter<"GameRequest"> | number
    currentPlayers?: IntFilter<"GameRequest"> | number
    gameMode?: StringFilter<"GameRequest"> | string
    dateTime?: DateTimeFilter<"GameRequest"> | Date | string
    paymentType?: StringFilter<"GameRequest"> | string
    ratingType?: StringFilter<"GameRequest"> | string
    formatInfo?: JsonNullableFilter<"GameRequest">
    status?: StringFilter<"GameRequest"> | string
    createdAt?: DateTimeFilter<"GameRequest"> | Date | string
    updatedAt?: DateTimeFilter<"GameRequest"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
    responses?: RequestResponseListRelationFilter
  }, "id">

  export type GameRequestOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    locationName?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameRequestCountOrderByAggregateInput
    _avg?: GameRequestAvgOrderByAggregateInput
    _max?: GameRequestMaxOrderByAggregateInput
    _min?: GameRequestMinOrderByAggregateInput
    _sum?: GameRequestSumOrderByAggregateInput
  }

  export type GameRequestScalarWhereWithAggregatesInput = {
    AND?: GameRequestScalarWhereWithAggregatesInput | GameRequestScalarWhereWithAggregatesInput[]
    OR?: GameRequestScalarWhereWithAggregatesInput[]
    NOT?: GameRequestScalarWhereWithAggregatesInput | GameRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameRequest"> | number
    type?: StringWithAggregatesFilter<"GameRequest"> | string
    title?: StringWithAggregatesFilter<"GameRequest"> | string
    description?: StringNullableWithAggregatesFilter<"GameRequest"> | string | null
    creatorId?: IntWithAggregatesFilter<"GameRequest"> | number
    locationName?: StringNullableWithAggregatesFilter<"GameRequest"> | string | null
    maxPlayers?: IntWithAggregatesFilter<"GameRequest"> | number
    currentPlayers?: IntWithAggregatesFilter<"GameRequest"> | number
    gameMode?: StringWithAggregatesFilter<"GameRequest"> | string
    dateTime?: DateTimeWithAggregatesFilter<"GameRequest"> | Date | string
    paymentType?: StringWithAggregatesFilter<"GameRequest"> | string
    ratingType?: StringWithAggregatesFilter<"GameRequest"> | string
    formatInfo?: JsonNullableWithAggregatesFilter<"GameRequest">
    status?: StringWithAggregatesFilter<"GameRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GameRequest"> | Date | string
  }

  export type RequestResponseWhereInput = {
    AND?: RequestResponseWhereInput | RequestResponseWhereInput[]
    OR?: RequestResponseWhereInput[]
    NOT?: RequestResponseWhereInput | RequestResponseWhereInput[]
    id?: IntFilter<"RequestResponse"> | number
    requestId?: IntFilter<"RequestResponse"> | number
    userId?: IntFilter<"RequestResponse"> | number
    status?: StringFilter<"RequestResponse"> | string
    message?: StringNullableFilter<"RequestResponse"> | string | null
    createdAt?: DateTimeFilter<"RequestResponse"> | Date | string
    updatedAt?: DateTimeFilter<"RequestResponse"> | Date | string
    request?: XOR<GameRequestRelationFilter, GameRequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RequestResponseOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    request?: GameRequestOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RequestResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    requestId_userId?: RequestResponseRequestIdUserIdCompoundUniqueInput
    AND?: RequestResponseWhereInput | RequestResponseWhereInput[]
    OR?: RequestResponseWhereInput[]
    NOT?: RequestResponseWhereInput | RequestResponseWhereInput[]
    requestId?: IntFilter<"RequestResponse"> | number
    userId?: IntFilter<"RequestResponse"> | number
    status?: StringFilter<"RequestResponse"> | string
    message?: StringNullableFilter<"RequestResponse"> | string | null
    createdAt?: DateTimeFilter<"RequestResponse"> | Date | string
    updatedAt?: DateTimeFilter<"RequestResponse"> | Date | string
    request?: XOR<GameRequestRelationFilter, GameRequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "requestId_userId">

  export type RequestResponseOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestResponseCountOrderByAggregateInput
    _avg?: RequestResponseAvgOrderByAggregateInput
    _max?: RequestResponseMaxOrderByAggregateInput
    _min?: RequestResponseMinOrderByAggregateInput
    _sum?: RequestResponseSumOrderByAggregateInput
  }

  export type RequestResponseScalarWhereWithAggregatesInput = {
    AND?: RequestResponseScalarWhereWithAggregatesInput | RequestResponseScalarWhereWithAggregatesInput[]
    OR?: RequestResponseScalarWhereWithAggregatesInput[]
    NOT?: RequestResponseScalarWhereWithAggregatesInput | RequestResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestResponse"> | number
    requestId?: IntWithAggregatesFilter<"RequestResponse"> | number
    userId?: IntWithAggregatesFilter<"RequestResponse"> | number
    status?: StringWithAggregatesFilter<"RequestResponse"> | string
    message?: StringNullableWithAggregatesFilter<"RequestResponse"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RequestResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RequestResponse"> | Date | string
  }

  export type TrainingSessionWhereInput = {
    AND?: TrainingSessionWhereInput | TrainingSessionWhereInput[]
    OR?: TrainingSessionWhereInput[]
    NOT?: TrainingSessionWhereInput | TrainingSessionWhereInput[]
    id?: IntFilter<"TrainingSession"> | number
    title?: StringFilter<"TrainingSession"> | string
    description?: StringNullableFilter<"TrainingSession"> | string | null
    creatorId?: IntFilter<"TrainingSession"> | number
    locationName?: StringNullableFilter<"TrainingSession"> | string | null
    courtSurface?: EnumCourtSurfaceNullableFilter<"TrainingSession"> | $Enums.CourtSurface | null
    minLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxSlots?: IntFilter<"TrainingSession"> | number
    currentSlots?: IntFilter<"TrainingSession"> | number
    paymentType?: EnumPaymentTypeFilter<"TrainingSession"> | $Enums.PaymentType
    pricePerPerson?: FloatNullableFilter<"TrainingSession"> | number | null
    dateTime?: DateTimeFilter<"TrainingSession"> | Date | string
    endTime?: DateTimeFilter<"TrainingSession"> | Date | string
    status?: EnumTrainingStateFilter<"TrainingSession"> | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFilter<"TrainingSession"> | $Enums.TrainingType
    createdAt?: DateTimeFilter<"TrainingSession"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingSession"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
  }

  export type TrainingSessionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    locationName?: SortOrderInput | SortOrder
    courtSurface?: SortOrderInput | SortOrder
    minLevel?: SortOrderInput | SortOrder
    maxLevel?: SortOrderInput | SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    participants?: UserOrderByRelationAggregateInput
  }

  export type TrainingSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TrainingSessionWhereInput | TrainingSessionWhereInput[]
    OR?: TrainingSessionWhereInput[]
    NOT?: TrainingSessionWhereInput | TrainingSessionWhereInput[]
    title?: StringFilter<"TrainingSession"> | string
    description?: StringNullableFilter<"TrainingSession"> | string | null
    creatorId?: IntFilter<"TrainingSession"> | number
    locationName?: StringNullableFilter<"TrainingSession"> | string | null
    courtSurface?: EnumCourtSurfaceNullableFilter<"TrainingSession"> | $Enums.CourtSurface | null
    minLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxSlots?: IntFilter<"TrainingSession"> | number
    currentSlots?: IntFilter<"TrainingSession"> | number
    paymentType?: EnumPaymentTypeFilter<"TrainingSession"> | $Enums.PaymentType
    pricePerPerson?: FloatNullableFilter<"TrainingSession"> | number | null
    dateTime?: DateTimeFilter<"TrainingSession"> | Date | string
    endTime?: DateTimeFilter<"TrainingSession"> | Date | string
    status?: EnumTrainingStateFilter<"TrainingSession"> | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFilter<"TrainingSession"> | $Enums.TrainingType
    createdAt?: DateTimeFilter<"TrainingSession"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingSession"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
  }, "id">

  export type TrainingSessionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    locationName?: SortOrderInput | SortOrder
    courtSurface?: SortOrderInput | SortOrder
    minLevel?: SortOrderInput | SortOrder
    maxLevel?: SortOrderInput | SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingSessionCountOrderByAggregateInput
    _avg?: TrainingSessionAvgOrderByAggregateInput
    _max?: TrainingSessionMaxOrderByAggregateInput
    _min?: TrainingSessionMinOrderByAggregateInput
    _sum?: TrainingSessionSumOrderByAggregateInput
  }

  export type TrainingSessionScalarWhereWithAggregatesInput = {
    AND?: TrainingSessionScalarWhereWithAggregatesInput | TrainingSessionScalarWhereWithAggregatesInput[]
    OR?: TrainingSessionScalarWhereWithAggregatesInput[]
    NOT?: TrainingSessionScalarWhereWithAggregatesInput | TrainingSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TrainingSession"> | number
    title?: StringWithAggregatesFilter<"TrainingSession"> | string
    description?: StringNullableWithAggregatesFilter<"TrainingSession"> | string | null
    creatorId?: IntWithAggregatesFilter<"TrainingSession"> | number
    locationName?: StringNullableWithAggregatesFilter<"TrainingSession"> | string | null
    courtSurface?: EnumCourtSurfaceNullableWithAggregatesFilter<"TrainingSession"> | $Enums.CourtSurface | null
    minLevel?: FloatNullableWithAggregatesFilter<"TrainingSession"> | number | null
    maxLevel?: FloatNullableWithAggregatesFilter<"TrainingSession"> | number | null
    maxSlots?: IntWithAggregatesFilter<"TrainingSession"> | number
    currentSlots?: IntWithAggregatesFilter<"TrainingSession"> | number
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"TrainingSession"> | $Enums.PaymentType
    pricePerPerson?: FloatNullableWithAggregatesFilter<"TrainingSession"> | number | null
    dateTime?: DateTimeWithAggregatesFilter<"TrainingSession"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"TrainingSession"> | Date | string
    status?: EnumTrainingStateWithAggregatesFilter<"TrainingSession"> | $Enums.TrainingState
    trainingType?: EnumTrainingTypeWithAggregatesFilter<"TrainingSession"> | $Enums.TrainingType
    createdAt?: DateTimeWithAggregatesFilter<"TrainingSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TrainingSession"> | Date | string
  }

  export type MatchFeedbackCreateInput = {
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbacksInput
    reviewer: UserCreateNestedOneWithoutGivenFeedbacksInput
    reviewee: UserCreateNestedOneWithoutReceivedFeedbacksInput
  }

  export type MatchFeedbackUncheckedCreateInput = {
    id?: number
    matchId: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbacksNestedInput
    reviewer?: UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput
    reviewee?: UserUpdateOneRequiredWithoutReceivedFeedbacksNestedInput
  }

  export type MatchFeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackCreateManyInput = {
    id?: number
    matchId: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageCreateInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
    recipient: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type DirectMessageUncheckedCreateInput = {
    id?: number
    senderId: number
    recipientId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type DirectMessageUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    recipient?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type DirectMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageCreateManyInput = {
    id?: number
    senderId: number
    recipientId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type DirectMessageUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateInput = {
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStoriesInput
  }

  export type StoryUncheckedCreateInput = {
    id?: number
    userId: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUpdateInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStoriesNestedInput
  }

  export type StoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateManyInput = {
    id?: number
    userId: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUpdateManyMutationInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateInput = {
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    cities?: CityCreateNestedManyWithoutCountryInput
    users?: UserCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    cities?: CityUncheckedCreateNestedManyWithoutCountryInput
    users?: UserUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUpdateManyWithoutCountryNestedInput
    users?: UserUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUncheckedUpdateManyWithoutCountryNestedInput
    users?: UserUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityCreateInput = {
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    country: CountryCreateNestedOneWithoutCitiesInput
    users?: UserCreateNestedManyWithoutCityInput
    userSettings?: UserSettingsCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCityInput
    userSettings?: UserSettingsUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutCitiesNestedInput
    users?: UserUpdateManyWithoutCityNestedInput
    userSettings?: UserSettingsUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCityNestedInput
    userSettings?: UserSettingsUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityCreateManyInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type CityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportCreateInput = {
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutSportInput
    userSettings?: UserSettingsCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSportInput
    userSettings?: UserSettingsUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSportNestedInput
    userSettings?: UserSettingsUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSportNestedInput
    userSettings?: UserSettingsUncheckedUpdateManyWithoutSportNestedInput
  }

  export type SportCreateManyInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
  }

  export type SportUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateInput = {
    language?: string
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
    user: UserCreateNestedOneWithoutSettingsInput
    city?: CityCreateNestedOneWithoutUserSettingsInput
    sport?: SportCreateNestedOneWithoutUserSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: number
    userId: number
    language?: string
    cityId?: number | null
    sportId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserSettingsUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
    city?: CityUpdateOneWithoutUserSettingsNestedInput
    sport?: SportUpdateOneWithoutUserSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSettingsCreateManyInput = {
    id?: number
    userId: number
    language?: string
    cityId?: number | null
    sportId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserSettingsUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
  }

  export type UserUpdateManyMutationInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerRatingCreateInput = {
    skillRating?: number
    skillPoints?: number
    pointsRating?: number
    wins?: number
    losses?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingInput
  }

  export type PlayerRatingUncheckedCreateInput = {
    id?: number
    userId: number
    skillRating?: number
    skillPoints?: number
    pointsRating?: number
    wins?: number
    losses?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerRatingUpdateInput = {
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
  }

  export type PlayerRatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerRatingCreateManyInput = {
    id?: number
    userId: number
    skillRating?: number
    skillPoints?: number
    pointsRating?: number
    wins?: number
    losses?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerRatingUpdateManyMutationInput = {
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerRatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryCreateInput = {
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingHistoryInput
    match?: MatchCreateNestedOneWithoutRatingHistoryInput
    season?: RatingSeasonCreateNestedOneWithoutHistoryInput
    opponent?: UserCreateNestedOneWithoutOpponentHistoryInput
  }

  export type RatingHistoryUncheckedCreateInput = {
    id?: number
    userId: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryUpdateInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingHistoryNestedInput
    match?: MatchUpdateOneWithoutRatingHistoryNestedInput
    season?: RatingSeasonUpdateOneWithoutHistoryNestedInput
    opponent?: UserUpdateOneWithoutOpponentHistoryNestedInput
  }

  export type RatingHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryCreateManyInput = {
    id?: number
    userId: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryUpdateManyMutationInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingSeasonCreateInput = {
    title: string
    startDate: Date | string
    endDate: Date | string
    isCurrent?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: RatingHistoryCreateNestedManyWithoutSeasonInput
  }

  export type RatingSeasonUncheckedCreateInput = {
    id?: number
    title: string
    startDate: Date | string
    endDate: Date | string
    isCurrent?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: RatingHistoryUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type RatingSeasonUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: RatingHistoryUpdateManyWithoutSeasonNestedInput
  }

  export type RatingSeasonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: RatingHistoryUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type RatingSeasonCreateManyInput = {
    id?: number
    title: string
    startDate: Date | string
    endDate: Date | string
    isCurrent?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingSeasonUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingSeasonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementCreateInput = {
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAchievementsInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: number
    userId: number
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserAchievementUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementCreateManyInput = {
    id?: number
    userId: number
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserAchievementUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralStatsCreateInput = {
    totalInvited?: number
    activeInvited?: number
    registeredToday?: number
    registeredThisWeek?: number
    registeredThisMonth?: number
    achievementsEarned?: ReferralStatsCreateachievementsEarnedInput | string[]
    bonusPointsEarned?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReferralStatsInput
  }

  export type ReferralStatsUncheckedCreateInput = {
    id?: number
    userId: number
    totalInvited?: number
    activeInvited?: number
    registeredToday?: number
    registeredThisWeek?: number
    registeredThisMonth?: number
    achievementsEarned?: ReferralStatsCreateachievementsEarnedInput | string[]
    bonusPointsEarned?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralStatsUpdateInput = {
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReferralStatsNestedInput
  }

  export type ReferralStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralStatsCreateManyInput = {
    id?: number
    userId: number
    totalInvited?: number
    activeInvited?: number
    registeredToday?: number
    registeredThisWeek?: number
    registeredThisMonth?: number
    achievementsEarned?: ReferralStatsCreateachievementsEarnedInput | string[]
    bonusPointsEarned?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralStatsUpdateManyMutationInput = {
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityCreateInput = {
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferrerActivitiesInput
    invitedUser: UserCreateNestedOneWithoutInvitedActivitiesInput
  }

  export type ReferralActivityUncheckedCreateInput = {
    id?: number
    referrerId: number
    invitedUserId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralActivityUpdateInput = {
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferrerActivitiesNestedInput
    invitedUser?: UserUpdateOneRequiredWithoutInvitedActivitiesNestedInput
  }

  export type ReferralActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    referrerId?: IntFieldUpdateOperationsInput | number
    invitedUserId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityCreateManyInput = {
    id?: number
    referrerId: number
    invitedUserId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralActivityUpdateManyMutationInput = {
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    referrerId?: IntFieldUpdateOperationsInput | number
    invitedUserId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionCreateInput = {
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBallTransactionsInput
  }

  export type BallTransactionUncheckedCreateInput = {
    id?: number
    userId: number
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
  }

  export type BallTransactionUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBallTransactionsNestedInput
  }

  export type BallTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionCreateManyInput = {
    id?: number
    userId: number
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
  }

  export type BallTransactionUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateInput = {
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemCreateNestedManyWithoutCaseInput
    openings?: CaseOpeningCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemUncheckedCreateNestedManyWithoutCaseInput
    openings?: CaseOpeningUncheckedCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUpdateManyWithoutCaseNestedInput
    openings?: CaseOpeningUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUncheckedUpdateManyWithoutCaseNestedInput
    openings?: CaseOpeningUncheckedUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    id?: number
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseItemCreateInput = {
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutItemsInput
    winnings?: CaseWinningCreateNestedManyWithoutItemInput
  }

  export type CaseItemUncheckedCreateInput = {
    id?: number
    caseId: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    winnings?: CaseWinningUncheckedCreateNestedManyWithoutItemInput
  }

  export type CaseItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutItemsNestedInput
    winnings?: CaseWinningUpdateManyWithoutItemNestedInput
  }

  export type CaseItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnings?: CaseWinningUncheckedUpdateManyWithoutItemNestedInput
  }

  export type CaseItemCreateManyInput = {
    id?: number
    caseId: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningCreateInput = {
    ballsSpent: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCaseOpeningsInput
    case: CaseCreateNestedOneWithoutOpeningsInput
    winning?: CaseWinningCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningUncheckedCreateInput = {
    id?: number
    userId: number
    caseId: number
    ballsSpent: number
    createdAt?: Date | string
    winning?: CaseWinningUncheckedCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningUpdateInput = {
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCaseOpeningsNestedInput
    case?: CaseUpdateOneRequiredWithoutOpeningsNestedInput
    winning?: CaseWinningUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winning?: CaseWinningUncheckedUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningCreateManyInput = {
    id?: number
    userId: number
    caseId: number
    ballsSpent: number
    createdAt?: Date | string
  }

  export type CaseOpeningUpdateManyMutationInput = {
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningCreateInput = {
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    opening: CaseOpeningCreateNestedOneWithoutWinningInput
    user: UserCreateNestedOneWithoutCaseWinningsInput
    case: CaseCreateNestedOneWithoutWinningsInput
    item: CaseItemCreateNestedOneWithoutWinningsInput
  }

  export type CaseWinningUncheckedCreateInput = {
    id?: number
    openingId: number
    userId: number
    caseId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningUpdateInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opening?: CaseOpeningUpdateOneRequiredWithoutWinningNestedInput
    user?: UserUpdateOneRequiredWithoutCaseWinningsNestedInput
    case?: CaseUpdateOneRequiredWithoutWinningsNestedInput
    item?: CaseItemUpdateOneRequiredWithoutWinningsNestedInput
  }

  export type CaseWinningUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningCreateManyInput = {
    id?: number
    openingId: number
    userId: number
    caseId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningUpdateManyMutationInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
  }

  export type MatchUpdateManyMutationInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingCreateInput = {
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
    invites?: InviteCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUpdateInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsNestedInput
    invites?: InviteUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invites?: InviteUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingCreateManyInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateInput = {
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsNestedInput
    players?: UserUpdateManyWithoutTournamentsNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutTournamentsNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateInput = {
    round?: number | null
    group?: string | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    playerA: UserCreateNestedOneWithoutTournamentMatchesAInput
    playerB?: UserCreateNestedOneWithoutTournamentMatchesBInput
    winner?: UserCreateNestedOneWithoutTournamentMatchesWonInput
  }

  export type TournamentMatchUncheckedCreateInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    playerA?: UserUpdateOneRequiredWithoutTournamentMatchesANestedInput
    playerB?: UserUpdateOneWithoutTournamentMatchesBNestedInput
    winner?: UserUpdateOneWithoutTournamentMatchesWonNestedInput
  }

  export type TournamentMatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateManyMutationInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateInput = {
    status: $Enums.InviteStatus
    createdAt?: Date | string
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
  }

  export type InviteUncheckedCreateInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneWithoutInvitesNestedInput
    training?: TrainingUpdateOneWithoutInvitesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesNestedInput
  }

  export type InviteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateManyMutationInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStateCreateInput = {
    userId: string
    step: $Enums.ProfileStep
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStateUncheckedCreateInput = {
    id?: number
    userId: string
    step: $Enums.ProfileStep
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStateUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    step?: EnumProfileStepFieldUpdateOperationsInput | $Enums.ProfileStep
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    step?: EnumProfileStepFieldUpdateOperationsInput | $Enums.ProfileStep
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStateCreateManyInput = {
    id?: number
    userId: string
    step: $Enums.ProfileStep
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStateUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    step?: EnumProfileStepFieldUpdateOperationsInput | $Enums.ProfileStep
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    step?: EnumProfileStepFieldUpdateOperationsInput | $Enums.ProfileStep
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | string[]
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | string[]
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUpdateInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileCreateManyInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | string[]
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUpdateManyMutationInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameRequestCreateInput = {
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
  }

  export type GameRequestUncheckedCreateInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
  }

  export type GameRequestUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsNestedInput
    participants?: UserUpdateManyWithoutRequestParticipationsNestedInput
    responses?: RequestResponseUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsNestedInput
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestCreateManyInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameRequestUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateInput = {
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    request: GameRequestCreateNestedOneWithoutResponsesInput
    user: UserCreateNestedOneWithoutRequestResponsesInput
  }

  export type RequestResponseUncheckedCreateInput = {
    id?: number
    requestId: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: GameRequestUpdateOneRequiredWithoutResponsesNestedInput
    user?: UserUpdateOneRequiredWithoutRequestResponsesNestedInput
  }

  export type RequestResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateManyInput = {
    id?: number
    requestId: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionCreateInput = {
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTrainingSessionsInput
    participants?: UserCreateNestedManyWithoutTrainingSessionParticipationsInput
  }

  export type TrainingSessionUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput
  }

  export type TrainingSessionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingSessionsNestedInput
    participants?: UserUpdateManyWithoutTrainingSessionParticipationsNestedInput
  }

  export type TrainingSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutTrainingSessionParticipationsNestedInput
  }

  export type TrainingSessionCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MatchFeedbackMatchIdReviewerIdRevieweeIdCompoundUniqueInput = {
    matchId: number
    reviewerId: number
    revieweeId: number
  }

  export type MatchFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchFeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
  }

  export type MatchFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchFeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    revieweeId?: SortOrder
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DirectMessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type DirectMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
  }

  export type DirectMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type DirectMessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type DirectMessageSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type EnumStoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStoryStatusFilter<$PrismaModel> | $Enums.StoryStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    caption?: SortOrder
    status?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    caption?: SortOrder
    status?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramFileId?: SortOrder
    telegramFilePath?: SortOrder
    type?: SortOrder
    caption?: SortOrder
    status?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    viewsCount?: SortOrder
    likesCount?: SortOrder
  }

  export type EnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type EnumStoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.StoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryStatusFilter<$PrismaModel>
    _max?: NestedEnumStoryStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CityListRelationFilter = {
    every?: CityWhereInput
    some?: CityWhereInput
    none?: CityWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flagUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CountryRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type UserSettingsListRelationFilter = {
    every?: UserSettingsWhereInput
    some?: UserSettingsWhereInput
    none?: UserSettingsWhereInput
  }

  export type UserSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CityNameCountryCodeCompoundUniqueInput = {
    name: string
    countryCode: string
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CityAvgOrderByAggregateInput = {
    id?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryCode?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
  }

  export type CitySumOrderByAggregateInput = {
    id?: SortOrder
    population?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SportCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
  }

  export type SportAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SportMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
  }

  export type SportMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    emoji?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
  }

  export type SportSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CityNullableRelationFilter = {
    is?: CityWhereInput | null
    isNot?: CityWhereInput | null
  }

  export type SportNullableRelationFilter = {
    is?: SportWhereInput | null
    isNot?: SportWhereInput | null
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    language?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    notificationsEnabled?: SortOrder
    notifyTelegram?: SortOrder
    notifyEmail?: SortOrder
    matchReminderTime?: SortOrder
    notifyMatchResults?: SortOrder
    notifyTournamentResults?: SortOrder
    showProfilePublicly?: SortOrder
    showRatingPublicly?: SortOrder
    allowMatchInvites?: SortOrder
    requireMatchConfirm?: SortOrder
    preferredGender?: SortOrder
    preferredAgeMin?: SortOrder
    preferredAgeMax?: SortOrder
    preferredLevelMin?: SortOrder
    preferredLevelMax?: SortOrder
    theme?: SortOrder
    timezone?: SortOrder
    telegramChatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowDirectMessages?: SortOrder
  }

  export type UserSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    preferredAgeMin?: SortOrder
    preferredAgeMax?: SortOrder
    preferredLevelMin?: SortOrder
    preferredLevelMax?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    language?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    notificationsEnabled?: SortOrder
    notifyTelegram?: SortOrder
    notifyEmail?: SortOrder
    matchReminderTime?: SortOrder
    notifyMatchResults?: SortOrder
    notifyTournamentResults?: SortOrder
    showProfilePublicly?: SortOrder
    showRatingPublicly?: SortOrder
    allowMatchInvites?: SortOrder
    requireMatchConfirm?: SortOrder
    preferredGender?: SortOrder
    preferredAgeMin?: SortOrder
    preferredAgeMax?: SortOrder
    preferredLevelMin?: SortOrder
    preferredLevelMax?: SortOrder
    theme?: SortOrder
    timezone?: SortOrder
    telegramChatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowDirectMessages?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    language?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    notificationsEnabled?: SortOrder
    notifyTelegram?: SortOrder
    notifyEmail?: SortOrder
    matchReminderTime?: SortOrder
    notifyMatchResults?: SortOrder
    notifyTournamentResults?: SortOrder
    showProfilePublicly?: SortOrder
    showRatingPublicly?: SortOrder
    allowMatchInvites?: SortOrder
    requireMatchConfirm?: SortOrder
    preferredGender?: SortOrder
    preferredAgeMin?: SortOrder
    preferredAgeMax?: SortOrder
    preferredLevelMin?: SortOrder
    preferredLevelMax?: SortOrder
    theme?: SortOrder
    timezone?: SortOrder
    telegramChatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowDirectMessages?: SortOrder
  }

  export type UserSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    preferredAgeMin?: SortOrder
    preferredAgeMax?: SortOrder
    preferredLevelMin?: SortOrder
    preferredLevelMax?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumAuthSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthSource | EnumAuthSourceFieldRefInput<$PrismaModel>
    in?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthSourceFilter<$PrismaModel> | $Enums.AuthSource
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type CountryNullableRelationFilter = {
    is?: CountryWhereInput | null
    isNot?: CountryWhereInput | null
  }

  export type UserProfileNullableRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type TournamentMatchListRelationFilter = {
    every?: TournamentMatchWhereInput
    some?: TournamentMatchWhereInput
    none?: TournamentMatchWhereInput
  }

  export type TrainingListRelationFilter = {
    every?: TrainingWhereInput
    some?: TrainingWhereInput
    none?: TrainingWhereInput
  }

  export type TrainingSessionListRelationFilter = {
    every?: TrainingSessionWhereInput
    some?: TrainingSessionWhereInput
    none?: TrainingSessionWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type InviteListRelationFilter = {
    every?: InviteWhereInput
    some?: InviteWhereInput
    none?: InviteWhereInput
  }

  export type GameRequestListRelationFilter = {
    every?: GameRequestWhereInput
    some?: GameRequestWhereInput
    none?: GameRequestWhereInput
  }

  export type RequestResponseListRelationFilter = {
    every?: RequestResponseWhereInput
    some?: RequestResponseWhereInput
    none?: RequestResponseWhereInput
  }

  export type CaseOpeningListRelationFilter = {
    every?: CaseOpeningWhereInput
    some?: CaseOpeningWhereInput
    none?: CaseOpeningWhereInput
  }

  export type CaseWinningListRelationFilter = {
    every?: CaseWinningWhereInput
    some?: CaseWinningWhereInput
    none?: CaseWinningWhereInput
  }

  export type BallTransactionListRelationFilter = {
    every?: BallTransactionWhereInput
    some?: BallTransactionWhereInput
    none?: BallTransactionWhereInput
  }

  export type StoryListRelationFilter = {
    every?: StoryWhereInput
    some?: StoryWhereInput
    none?: StoryWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ReferralStatsNullableRelationFilter = {
    is?: ReferralStatsWhereInput | null
    isNot?: ReferralStatsWhereInput | null
  }

  export type ReferralActivityListRelationFilter = {
    every?: ReferralActivityWhereInput
    some?: ReferralActivityWhereInput
    none?: ReferralActivityWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type PlayerRatingNullableRelationFilter = {
    is?: PlayerRatingWhereInput | null
    isNot?: PlayerRatingWhereInput | null
  }

  export type RatingHistoryListRelationFilter = {
    every?: RatingHistoryWhereInput
    some?: RatingHistoryWhereInput
    none?: RatingHistoryWhereInput
  }

  export type UserSettingsNullableRelationFilter = {
    is?: UserSettingsWhereInput | null
    isNot?: UserSettingsWhereInput | null
  }

  export type DirectMessageListRelationFilter = {
    every?: DirectMessageWhereInput
    some?: DirectMessageWhereInput
    none?: DirectMessageWhereInput
  }

  export type MatchFeedbackListRelationFilter = {
    every?: MatchFeedbackWhereInput
    some?: MatchFeedbackWhereInput
    none?: MatchFeedbackWhereInput
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseOpeningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseWinningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BallTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferralActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DirectMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    sportType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    referralCode?: SortOrder
    referredBy?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    referredBy?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    sportType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    referralCode?: SortOrder
    referredBy?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    countryCode?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    sportType?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    authSource?: SortOrder
    lastLogin?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    referralCode?: SortOrder
    referredBy?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    cityId?: SortOrder
    sportId?: SortOrder
    ballsBalance?: SortOrder
    casesOpened?: SortOrder
    telegramChatId?: SortOrder
    referredBy?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumAuthSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthSource | EnumAuthSourceFieldRefInput<$PrismaModel>
    in?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthSourceWithAggregatesFilter<$PrismaModel> | $Enums.AuthSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthSourceFilter<$PrismaModel>
    _max?: NestedEnumAuthSourceFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type PlayerRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerRatingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
  }

  export type PlayerRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerRatingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    skillRating?: SortOrder
    skillPoints?: SortOrder
    pointsRating?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
  }

  export type MatchNullableRelationFilter = {
    is?: MatchWhereInput | null
    isNot?: MatchWhereInput | null
  }

  export type RatingSeasonNullableRelationFilter = {
    is?: RatingSeasonWhereInput | null
    isNot?: RatingSeasonWhereInput | null
  }

  export type RatingHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    seasonId?: SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    isWin?: SortOrder
    opponentId?: SortOrder
    opponentSkillPoints?: SortOrder
    pointsEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    seasonId?: SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    opponentId?: SortOrder
    opponentSkillPoints?: SortOrder
    pointsEarned?: SortOrder
  }

  export type RatingHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    seasonId?: SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    isWin?: SortOrder
    opponentId?: SortOrder
    opponentSkillPoints?: SortOrder
    pointsEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    seasonId?: SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    isWin?: SortOrder
    opponentId?: SortOrder
    opponentSkillPoints?: SortOrder
    pointsEarned?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    matchId?: SortOrder
    seasonId?: SortOrder
    skillPointsBefore?: SortOrder
    skillPointsAfter?: SortOrder
    pointsRatingBefore?: SortOrder
    pointsRatingAfter?: SortOrder
    opponentId?: SortOrder
    opponentSkillPoints?: SortOrder
    pointsEarned?: SortOrder
  }

  export type RatingSeasonCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSeasonAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RatingSeasonMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSeasonMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSeasonSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserAchievementUserIdCodeCompoundUniqueInput = {
    userId: number
    code: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    awardedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAchievementAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    awardedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    awardedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAchievementSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ReferralStatsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    achievementsEarned?: SortOrder
    bonusPointsEarned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    bonusPointsEarned?: SortOrder
  }

  export type ReferralStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    bonusPointsEarned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralStatsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    bonusPointsEarned?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralStatsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalInvited?: SortOrder
    activeInvited?: SortOrder
    registeredToday?: SortOrder
    registeredThisWeek?: SortOrder
    registeredThisMonth?: SortOrder
    bonusPointsEarned?: SortOrder
  }

  export type ReferralActivityCountOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
    registeredAt?: SortOrder
    firstMatchAt?: SortOrder
    isActive?: SortOrder
    inviteSource?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
  }

  export type ReferralActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
    registeredAt?: SortOrder
    firstMatchAt?: SortOrder
    isActive?: SortOrder
    inviteSource?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralActivityMinOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
    registeredAt?: SortOrder
    firstMatchAt?: SortOrder
    isActive?: SortOrder
    inviteSource?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralActivitySumOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    invitedUserId?: SortOrder
  }

  export type EnumBallTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BallTransactionType | EnumBallTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTransactionTypeFilter<$PrismaModel> | $Enums.BallTransactionType
  }

  export type BallTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    balanceAfter?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    balanceAfter?: SortOrder
  }

  export type BallTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    balanceAfter?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    balanceAfter?: SortOrder
    createdAt?: SortOrder
  }

  export type BallTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    balanceAfter?: SortOrder
  }

  export type EnumBallTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BallTransactionType | EnumBallTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.BallTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBallTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumBallTransactionTypeFilter<$PrismaModel>
  }

  export type CaseItemListRelationFilter = {
    every?: CaseItemWhereInput
    some?: CaseItemWhereInput
    none?: CaseItemWhereInput
  }

  export type CaseItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceBalls?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseAvgOrderByAggregateInput = {
    id?: SortOrder
    priceBalls?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceBalls?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceBalls?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseSumOrderByAggregateInput = {
    id?: SortOrder
    priceBalls?: SortOrder
  }

  export type EnumCaseItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseItemType | EnumCaseItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseItemTypeFilter<$PrismaModel> | $Enums.CaseItemType
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CaseRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type CaseItemCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    dropChance?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseItemAvgOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    dropChance?: SortOrder
  }

  export type CaseItemMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    dropChance?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseItemMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    dropChance?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseItemSumOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    dropChance?: SortOrder
  }

  export type EnumCaseItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseItemType | EnumCaseItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseItemTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseItemTypeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CaseWinningNullableRelationFilter = {
    is?: CaseWinningWhereInput | null
    isNot?: CaseWinningWhereInput | null
  }

  export type CaseOpeningCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
  }

  export type CaseOpeningMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseOpeningSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    ballsSpent?: SortOrder
  }

  export type CaseOpeningRelationFilter = {
    is?: CaseOpeningWhereInput
    isNot?: CaseOpeningWhereInput
  }

  export type CaseItemRelationFilter = {
    is?: CaseItemWhereInput
    isNot?: CaseItemWhereInput
  }

  export type CaseWinningCountOrderByAggregateInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseWinningAvgOrderByAggregateInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
  }

  export type CaseWinningMaxOrderByAggregateInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseWinningMinOrderByAggregateInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseWinningSumOrderByAggregateInput = {
    id?: SortOrder
    openingId?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
    itemId?: SortOrder
  }

  export type EnumMatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeFilter<$PrismaModel> | $Enums.MatchType
  }

  export type EnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    winnerId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    matchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationName?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    winnerId?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    winnerId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    matchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationName?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    winnerId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    matchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locationName?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    winnerId?: SortOrder
  }

  export type EnumMatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.MatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchTypeFilter<$PrismaModel>
    _max?: NestedEnumMatchTypeFilter<$PrismaModel>
  }

  export type EnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type EnumTrainingStateFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingState | EnumTrainingStateFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStateFilter<$PrismaModel> | $Enums.TrainingState
  }

  export type TrainingCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type TrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type EnumTrainingStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingState | EnumTrainingStateFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStateWithAggregatesFilter<$PrismaModel> | $Enums.TrainingState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingStateFilter<$PrismaModel>
    _max?: NestedEnumTrainingStateFilter<$PrismaModel>
  }

  export type EnumTournamentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeFilter<$PrismaModel> | $Enums.TournamentType
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type EnumTournamentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel> | $Enums.TournamentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTournamentTypeFilter<$PrismaModel>
    _max?: NestedEnumTournamentTypeFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TournamentRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type TournamentMatchCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchAvgOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type TournamentMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    score?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchSumOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type EnumInviteStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InviteStatus | EnumInviteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInviteStatusFilter<$PrismaModel> | $Enums.InviteStatus
  }

  export type TrainingNullableRelationFilter = {
    is?: TrainingWhereInput | null
    isNot?: TrainingWhereInput | null
  }

  export type InviteCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteAvgOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type InviteMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteSumOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumInviteStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InviteStatus | EnumInviteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInviteStatusWithAggregatesFilter<$PrismaModel> | $Enums.InviteStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInviteStatusFilter<$PrismaModel>
    _max?: NestedEnumInviteStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumProfileStepFilter<$PrismaModel = never> = {
    equals?: $Enums.ProfileStep | EnumProfileStepFieldRefInput<$PrismaModel>
    in?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    not?: NestedEnumProfileStepFilter<$PrismaModel> | $Enums.ProfileStep
  }

  export type UserStateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    step?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserStateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    step?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    step?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumProfileStepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProfileStep | EnumProfileStepFieldRefInput<$PrismaModel>
    in?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    not?: NestedEnumProfileStepWithAggregatesFilter<$PrismaModel> | $Enums.ProfileStep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProfileStepFilter<$PrismaModel>
    _max?: NestedEnumProfileStepFilter<$PrismaModel>
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    preferredPlayTime?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    initialRatingPoints?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferredCourt?: SortOrder
    dominantHand?: SortOrder
    playsInTournaments?: SortOrder
    weeklyPlayFrequency?: SortOrder
    backhandType?: SortOrder
    preferredSurface?: SortOrder
    playingStyle?: SortOrder
    favoriteShot?: SortOrder
    racket?: SortOrder
    opponentPreference?: SortOrder
    initialRatingPoints?: SortOrder
    selfAssessedLevel?: SortOrder
    profileStepOneCompleted?: SortOrder
    profileStepTwoCompleted?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    initialRatingPoints?: SortOrder
  }

  export type GameRequestCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    formatInfo?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type GameRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    gameMode?: SortOrder
    dateTime?: SortOrder
    paymentType?: SortOrder
    ratingType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameRequestSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type GameRequestRelationFilter = {
    is?: GameRequestWhereInput
    isNot?: GameRequestWhereInput
  }

  export type RequestResponseRequestIdUserIdCompoundUniqueInput = {
    requestId: number
    userId: number
  }

  export type RequestResponseCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestResponseSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type EnumCourtSurfaceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CourtSurface | EnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    in?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel> | $Enums.CourtSurface | null
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type EnumTrainingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeFilter<$PrismaModel> | $Enums.TrainingType
  }

  export type TrainingSessionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    pricePerPerson?: SortOrder
  }

  export type TrainingSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    creatorId?: SortOrder
    locationName?: SortOrder
    courtSurface?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    paymentType?: SortOrder
    pricePerPerson?: SortOrder
    dateTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    trainingType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSessionSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minLevel?: SortOrder
    maxLevel?: SortOrder
    maxSlots?: SortOrder
    currentSlots?: SortOrder
    pricePerPerson?: SortOrder
  }

  export type EnumCourtSurfaceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourtSurface | EnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    in?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCourtSurfaceNullableWithAggregatesFilter<$PrismaModel> | $Enums.CourtSurface | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel>
    _max?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel>
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumTrainingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel> | $Enums.TrainingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingTypeFilter<$PrismaModel>
    _max?: NestedEnumTrainingTypeFilter<$PrismaModel>
  }

  export type MatchCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<MatchCreateWithoutFeedbacksInput, MatchUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFeedbacksInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGivenFeedbacksInput = {
    create?: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedFeedbacksInput = {
    create?: XOR<UserCreateWithoutReceivedFeedbacksInput, UserUncheckedCreateWithoutReceivedFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MatchUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<MatchCreateWithoutFeedbacksInput, MatchUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFeedbacksInput
    upsert?: MatchUpsertWithoutFeedbacksInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutFeedbacksInput, MatchUpdateWithoutFeedbacksInput>, MatchUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenFeedbacksInput
    upsert?: UserUpsertWithoutGivenFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGivenFeedbacksInput, UserUpdateWithoutGivenFeedbacksInput>, UserUncheckedUpdateWithoutGivenFeedbacksInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutReceivedFeedbacksInput, UserUncheckedCreateWithoutReceivedFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFeedbacksInput
    upsert?: UserUpsertWithoutReceivedFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedFeedbacksInput, UserUpdateWithoutReceivedFeedbacksInput>, UserUncheckedUpdateWithoutReceivedFeedbacksInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    upsert?: UserUpsertWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedMessagesInput, UserUpdateWithoutReceivedMessagesInput>, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserCreateNestedOneWithoutStoriesInput = {
    create?: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMediaTypeFieldUpdateOperationsInput = {
    set?: $Enums.MediaType
  }

  export type EnumStoryStatusFieldUpdateOperationsInput = {
    set?: $Enums.StoryStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutStoriesNestedInput = {
    create?: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoriesInput
    upsert?: UserUpsertWithoutStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStoriesInput, UserUpdateWithoutStoriesInput>, UserUncheckedUpdateWithoutStoriesInput>
  }

  export type CityCreateNestedManyWithoutCountryInput = {
    create?: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput> | CityCreateWithoutCountryInput[] | CityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CityCreateOrConnectWithoutCountryInput | CityCreateOrConnectWithoutCountryInput[]
    createMany?: CityCreateManyCountryInputEnvelope
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCountryInput = {
    create?: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput> | UserCreateWithoutCountryInput[] | UserUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCountryInput | UserCreateOrConnectWithoutCountryInput[]
    createMany?: UserCreateManyCountryInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CityUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput> | CityCreateWithoutCountryInput[] | CityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CityCreateOrConnectWithoutCountryInput | CityCreateOrConnectWithoutCountryInput[]
    createMany?: CityCreateManyCountryInputEnvelope
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput> | UserCreateWithoutCountryInput[] | UserUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCountryInput | UserCreateOrConnectWithoutCountryInput[]
    createMany?: UserCreateManyCountryInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CityUpdateManyWithoutCountryNestedInput = {
    create?: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput> | CityCreateWithoutCountryInput[] | CityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CityCreateOrConnectWithoutCountryInput | CityCreateOrConnectWithoutCountryInput[]
    upsert?: CityUpsertWithWhereUniqueWithoutCountryInput | CityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: CityCreateManyCountryInputEnvelope
    set?: CityWhereUniqueInput | CityWhereUniqueInput[]
    disconnect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    delete?: CityWhereUniqueInput | CityWhereUniqueInput[]
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    update?: CityUpdateWithWhereUniqueWithoutCountryInput | CityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: CityUpdateManyWithWhereWithoutCountryInput | CityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: CityScalarWhereInput | CityScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCountryNestedInput = {
    create?: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput> | UserCreateWithoutCountryInput[] | UserUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCountryInput | UserCreateOrConnectWithoutCountryInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCountryInput | UserUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: UserCreateManyCountryInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCountryInput | UserUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCountryInput | UserUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CityUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput> | CityCreateWithoutCountryInput[] | CityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: CityCreateOrConnectWithoutCountryInput | CityCreateOrConnectWithoutCountryInput[]
    upsert?: CityUpsertWithWhereUniqueWithoutCountryInput | CityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: CityCreateManyCountryInputEnvelope
    set?: CityWhereUniqueInput | CityWhereUniqueInput[]
    disconnect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    delete?: CityWhereUniqueInput | CityWhereUniqueInput[]
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    update?: CityUpdateWithWhereUniqueWithoutCountryInput | CityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: CityUpdateManyWithWhereWithoutCountryInput | CityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: CityScalarWhereInput | CityScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput> | UserCreateWithoutCountryInput[] | UserUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCountryInput | UserCreateOrConnectWithoutCountryInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCountryInput | UserUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: UserCreateManyCountryInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCountryInput | UserUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCountryInput | UserUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutCitiesInput = {
    create?: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutCitiesInput
    connect?: CountryWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCityInput = {
    create?: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput> | UserCreateWithoutCityInput[] | UserUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityInput | UserCreateOrConnectWithoutCityInput[]
    createMany?: UserCreateManyCityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedManyWithoutCityInput = {
    create?: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput> | UserSettingsCreateWithoutCityInput[] | UserSettingsUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutCityInput | UserSettingsCreateOrConnectWithoutCityInput[]
    createMany?: UserSettingsCreateManyCityInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput> | UserCreateWithoutCityInput[] | UserUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityInput | UserCreateOrConnectWithoutCityInput[]
    createMany?: UserCreateManyCityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput> | UserSettingsCreateWithoutCityInput[] | UserSettingsUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutCityInput | UserSettingsCreateOrConnectWithoutCityInput[]
    createMany?: UserSettingsCreateManyCityInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CountryUpdateOneRequiredWithoutCitiesNestedInput = {
    create?: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutCitiesInput
    upsert?: CountryUpsertWithoutCitiesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutCitiesInput, CountryUpdateWithoutCitiesInput>, CountryUncheckedUpdateWithoutCitiesInput>
  }

  export type UserUpdateManyWithoutCityNestedInput = {
    create?: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput> | UserCreateWithoutCityInput[] | UserUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityInput | UserCreateOrConnectWithoutCityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCityInput | UserUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: UserCreateManyCityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCityInput | UserUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCityInput | UserUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserSettingsUpdateManyWithoutCityNestedInput = {
    create?: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput> | UserSettingsCreateWithoutCityInput[] | UserSettingsUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutCityInput | UserSettingsCreateOrConnectWithoutCityInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutCityInput | UserSettingsUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: UserSettingsCreateManyCityInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutCityInput | UserSettingsUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutCityInput | UserSettingsUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput> | UserCreateWithoutCityInput[] | UserUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityInput | UserCreateOrConnectWithoutCityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCityInput | UserUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: UserCreateManyCityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCityInput | UserUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCityInput | UserUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput> | UserSettingsCreateWithoutCityInput[] | UserSettingsUncheckedCreateWithoutCityInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutCityInput | UserSettingsCreateOrConnectWithoutCityInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutCityInput | UserSettingsUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: UserSettingsCreateManyCityInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutCityInput | UserSettingsUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutCityInput | UserSettingsUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutSportInput = {
    create?: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput> | UserCreateWithoutSportInput[] | UserUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSportInput | UserCreateOrConnectWithoutSportInput[]
    createMany?: UserCreateManySportInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedManyWithoutSportInput = {
    create?: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput> | UserSettingsCreateWithoutSportInput[] | UserSettingsUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutSportInput | UserSettingsCreateOrConnectWithoutSportInput[]
    createMany?: UserSettingsCreateManySportInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput> | UserCreateWithoutSportInput[] | UserUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSportInput | UserCreateOrConnectWithoutSportInput[]
    createMany?: UserCreateManySportInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput> | UserSettingsCreateWithoutSportInput[] | UserSettingsUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutSportInput | UserSettingsCreateOrConnectWithoutSportInput[]
    createMany?: UserSettingsCreateManySportInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutSportNestedInput = {
    create?: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput> | UserCreateWithoutSportInput[] | UserUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSportInput | UserCreateOrConnectWithoutSportInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSportInput | UserUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: UserCreateManySportInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSportInput | UserUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSportInput | UserUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserSettingsUpdateManyWithoutSportNestedInput = {
    create?: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput> | UserSettingsCreateWithoutSportInput[] | UserSettingsUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutSportInput | UserSettingsCreateOrConnectWithoutSportInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutSportInput | UserSettingsUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: UserSettingsCreateManySportInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutSportInput | UserSettingsUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutSportInput | UserSettingsUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSportNestedInput = {
    create?: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput> | UserCreateWithoutSportInput[] | UserUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSportInput | UserCreateOrConnectWithoutSportInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSportInput | UserUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: UserCreateManySportInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSportInput | UserUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSportInput | UserUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateManyWithoutSportNestedInput = {
    create?: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput> | UserSettingsCreateWithoutSportInput[] | UserSettingsUncheckedCreateWithoutSportInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutSportInput | UserSettingsCreateOrConnectWithoutSportInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutSportInput | UserSettingsUpsertWithWhereUniqueWithoutSportInput[]
    createMany?: UserSettingsCreateManySportInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutSportInput | UserSettingsUpdateWithWhereUniqueWithoutSportInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutSportInput | UserSettingsUpdateManyWithWhereWithoutSportInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type CityCreateNestedOneWithoutUserSettingsInput = {
    create?: XOR<CityCreateWithoutUserSettingsInput, CityUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: CityCreateOrConnectWithoutUserSettingsInput
    connect?: CityWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutUserSettingsInput = {
    create?: XOR<SportCreateWithoutUserSettingsInput, SportUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: SportCreateOrConnectWithoutUserSettingsInput
    connect?: SportWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type CityUpdateOneWithoutUserSettingsNestedInput = {
    create?: XOR<CityCreateWithoutUserSettingsInput, CityUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: CityCreateOrConnectWithoutUserSettingsInput
    upsert?: CityUpsertWithoutUserSettingsInput
    disconnect?: CityWhereInput | boolean
    delete?: CityWhereInput | boolean
    connect?: CityWhereUniqueInput
    update?: XOR<XOR<CityUpdateToOneWithWhereWithoutUserSettingsInput, CityUpdateWithoutUserSettingsInput>, CityUncheckedUpdateWithoutUserSettingsInput>
  }

  export type SportUpdateOneWithoutUserSettingsNestedInput = {
    create?: XOR<SportCreateWithoutUserSettingsInput, SportUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: SportCreateOrConnectWithoutUserSettingsInput
    upsert?: SportUpsertWithoutUserSettingsInput
    disconnect?: SportWhereInput | boolean
    delete?: SportWhereInput | boolean
    connect?: SportWhereUniqueInput
    update?: XOR<XOR<SportUpdateToOneWithWhereWithoutUserSettingsInput, SportUpdateWithoutUserSettingsInput>, SportUncheckedUpdateWithoutUserSettingsInput>
  }

  export type CountryCreateNestedOneWithoutUsersInput = {
    create?: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUsersInput
    connect?: CountryWhereUniqueInput
  }

  export type CityCreateNestedOneWithoutUsersInput = {
    create?: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CityCreateOrConnectWithoutUsersInput
    connect?: CityWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutUsersInput = {
    create?: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SportCreateOrConnectWithoutUsersInput
    connect?: SportWhereUniqueInput
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutCreatorInput = {
    create?: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput> | MatchCreateWithoutCreatorInput[] | MatchUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCreatorInput | MatchCreateOrConnectWithoutCreatorInput[]
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input> | MatchCreateWithoutPlayer1Input[] | MatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer1Input | MatchCreateOrConnectWithoutPlayer1Input[]
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input> | MatchCreateWithoutPlayer2Input[] | MatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer2Input | MatchCreateOrConnectWithoutPlayer2Input[]
    createMany?: MatchCreateManyPlayer2InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutWinnerInput = {
    create?: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput> | MatchCreateWithoutWinnerInput[] | MatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutWinnerInput | MatchCreateOrConnectWithoutWinnerInput[]
    createMany?: MatchCreateManyWinnerInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutPlayerAInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput> | TournamentMatchCreateWithoutPlayerAInput[] | TournamentMatchUncheckedCreateWithoutPlayerAInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerAInput | TournamentMatchCreateOrConnectWithoutPlayerAInput[]
    createMany?: TournamentMatchCreateManyPlayerAInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutPlayerBInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput> | TournamentMatchCreateWithoutPlayerBInput[] | TournamentMatchUncheckedCreateWithoutPlayerBInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerBInput | TournamentMatchCreateOrConnectWithoutPlayerBInput[]
    createMany?: TournamentMatchCreateManyPlayerBInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutWinnerInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TrainingCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput> | TrainingCreateWithoutCreatorInput[] | TrainingUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatorInput | TrainingCreateOrConnectWithoutCreatorInput[]
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type TrainingSessionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput> | TrainingSessionCreateWithoutCreatorInput[] | TrainingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutCreatorInput | TrainingSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput> | TournamentCreateWithoutCreatorInput[] | TournamentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCreatorInput | TournamentCreateOrConnectWithoutCreatorInput[]
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutSenderInput = {
    create?: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput> | InviteCreateWithoutSenderInput[] | InviteUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutSenderInput | InviteCreateOrConnectWithoutSenderInput[]
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutReceiverInput = {
    create?: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput> | InviteCreateWithoutReceiverInput[] | InviteUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutReceiverInput | InviteCreateOrConnectWithoutReceiverInput[]
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutPlayersInput = {
    create?: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput> | TournamentCreateWithoutPlayersInput[] | TournamentUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutPlayersInput | TournamentCreateOrConnectWithoutPlayersInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type GameRequestCreateNestedManyWithoutCreatorInput = {
    create?: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput> | GameRequestCreateWithoutCreatorInput[] | GameRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutCreatorInput | GameRequestCreateOrConnectWithoutCreatorInput[]
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
  }

  export type GameRequestCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput> | GameRequestCreateWithoutParticipantsInput[] | GameRequestUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutParticipantsInput | GameRequestCreateOrConnectWithoutParticipantsInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
  }

  export type RequestResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput> | RequestResponseCreateWithoutUserInput[] | RequestResponseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutUserInput | RequestResponseCreateOrConnectWithoutUserInput[]
    createMany?: RequestResponseCreateManyUserInputEnvelope
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
  }

  export type TrainingSessionCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput> | TrainingSessionCreateWithoutParticipantsInput[] | TrainingSessionUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutParticipantsInput | TrainingSessionCreateOrConnectWithoutParticipantsInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
  }

  export type CaseOpeningCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput> | CaseOpeningCreateWithoutUserInput[] | CaseOpeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutUserInput | CaseOpeningCreateOrConnectWithoutUserInput[]
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
  }

  export type CaseWinningCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput> | CaseWinningCreateWithoutUserInput[] | CaseWinningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutUserInput | CaseWinningCreateOrConnectWithoutUserInput[]
    createMany?: CaseWinningCreateManyUserInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type BallTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput> | BallTransactionCreateWithoutUserInput[] | BallTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BallTransactionCreateOrConnectWithoutUserInput | BallTransactionCreateOrConnectWithoutUserInput[]
    createMany?: BallTransactionCreateManyUserInputEnvelope
    connect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
  }

  export type StoryCreateNestedManyWithoutUserInput = {
    create?: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput> | StoryCreateWithoutUserInput[] | StoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutUserInput | StoryCreateOrConnectWithoutUserInput[]
    createMany?: StoryCreateManyUserInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReferralsInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReferralStatsCreateNestedOneWithoutUserInput = {
    create?: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralStatsCreateOrConnectWithoutUserInput
    connect?: ReferralStatsWhereUniqueInput
  }

  export type ReferralActivityCreateNestedManyWithoutReferrerInput = {
    create?: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput> | ReferralActivityCreateWithoutReferrerInput[] | ReferralActivityUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutReferrerInput | ReferralActivityCreateOrConnectWithoutReferrerInput[]
    createMany?: ReferralActivityCreateManyReferrerInputEnvelope
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
  }

  export type ReferralActivityCreateNestedManyWithoutInvitedUserInput = {
    create?: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput> | ReferralActivityCreateWithoutInvitedUserInput[] | ReferralActivityUncheckedCreateWithoutInvitedUserInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutInvitedUserInput | ReferralActivityCreateOrConnectWithoutInvitedUserInput[]
    createMany?: ReferralActivityCreateManyInvitedUserInputEnvelope
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type PlayerRatingCreateNestedOneWithoutUserInput = {
    create?: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlayerRatingCreateOrConnectWithoutUserInput
    connect?: PlayerRatingWhereUniqueInput
  }

  export type RatingHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput> | RatingHistoryCreateWithoutUserInput[] | RatingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutUserInput | RatingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: RatingHistoryCreateManyUserInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type RatingHistoryCreateNestedManyWithoutOpponentInput = {
    create?: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput> | RatingHistoryCreateWithoutOpponentInput[] | RatingHistoryUncheckedCreateWithoutOpponentInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutOpponentInput | RatingHistoryCreateOrConnectWithoutOpponentInput[]
    createMany?: RatingHistoryCreateManyOpponentInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type DirectMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput> | DirectMessageCreateWithoutSenderInput[] | DirectMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutSenderInput | DirectMessageCreateOrConnectWithoutSenderInput[]
    createMany?: DirectMessageCreateManySenderInputEnvelope
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
  }

  export type DirectMessageCreateNestedManyWithoutRecipientInput = {
    create?: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput> | DirectMessageCreateWithoutRecipientInput[] | DirectMessageUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutRecipientInput | DirectMessageCreateOrConnectWithoutRecipientInput[]
    createMany?: DirectMessageCreateManyRecipientInputEnvelope
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
  }

  export type MatchFeedbackCreateNestedManyWithoutReviewerInput = {
    create?: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput> | MatchFeedbackCreateWithoutReviewerInput[] | MatchFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutReviewerInput | MatchFeedbackCreateOrConnectWithoutReviewerInput[]
    createMany?: MatchFeedbackCreateManyReviewerInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type MatchFeedbackCreateNestedManyWithoutRevieweeInput = {
    create?: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput> | MatchFeedbackCreateWithoutRevieweeInput[] | MatchFeedbackUncheckedCreateWithoutRevieweeInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutRevieweeInput | MatchFeedbackCreateOrConnectWithoutRevieweeInput[]
    createMany?: MatchFeedbackCreateManyRevieweeInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput> | MatchCreateWithoutCreatorInput[] | MatchUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCreatorInput | MatchCreateOrConnectWithoutCreatorInput[]
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input> | MatchCreateWithoutPlayer1Input[] | MatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer1Input | MatchCreateOrConnectWithoutPlayer1Input[]
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input> | MatchCreateWithoutPlayer2Input[] | MatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer2Input | MatchCreateOrConnectWithoutPlayer2Input[]
    createMany?: MatchCreateManyPlayer2InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput> | MatchCreateWithoutWinnerInput[] | MatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutWinnerInput | MatchCreateOrConnectWithoutWinnerInput[]
    createMany?: MatchCreateManyWinnerInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput> | TournamentMatchCreateWithoutPlayerAInput[] | TournamentMatchUncheckedCreateWithoutPlayerAInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerAInput | TournamentMatchCreateOrConnectWithoutPlayerAInput[]
    createMany?: TournamentMatchCreateManyPlayerAInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput> | TournamentMatchCreateWithoutPlayerBInput[] | TournamentMatchUncheckedCreateWithoutPlayerBInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerBInput | TournamentMatchCreateOrConnectWithoutPlayerBInput[]
    createMany?: TournamentMatchCreateManyPlayerBInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TrainingUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput> | TrainingCreateWithoutCreatorInput[] | TrainingUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatorInput | TrainingCreateOrConnectWithoutCreatorInput[]
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput> | TrainingSessionCreateWithoutCreatorInput[] | TrainingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutCreatorInput | TrainingSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput> | TournamentCreateWithoutCreatorInput[] | TournamentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCreatorInput | TournamentCreateOrConnectWithoutCreatorInput[]
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput> | InviteCreateWithoutSenderInput[] | InviteUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutSenderInput | InviteCreateOrConnectWithoutSenderInput[]
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput> | InviteCreateWithoutReceiverInput[] | InviteUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutReceiverInput | InviteCreateOrConnectWithoutReceiverInput[]
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput> | TournamentCreateWithoutPlayersInput[] | TournamentUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutPlayersInput | TournamentCreateOrConnectWithoutPlayersInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type GameRequestUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput> | GameRequestCreateWithoutCreatorInput[] | GameRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutCreatorInput | GameRequestCreateOrConnectWithoutCreatorInput[]
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
  }

  export type GameRequestUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput> | GameRequestCreateWithoutParticipantsInput[] | GameRequestUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutParticipantsInput | GameRequestCreateOrConnectWithoutParticipantsInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
  }

  export type RequestResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput> | RequestResponseCreateWithoutUserInput[] | RequestResponseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutUserInput | RequestResponseCreateOrConnectWithoutUserInput[]
    createMany?: RequestResponseCreateManyUserInputEnvelope
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
  }

  export type TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput> | TrainingSessionCreateWithoutParticipantsInput[] | TrainingSessionUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutParticipantsInput | TrainingSessionCreateOrConnectWithoutParticipantsInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
  }

  export type CaseOpeningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput> | CaseOpeningCreateWithoutUserInput[] | CaseOpeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutUserInput | CaseOpeningCreateOrConnectWithoutUserInput[]
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
  }

  export type CaseWinningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput> | CaseWinningCreateWithoutUserInput[] | CaseWinningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutUserInput | CaseWinningCreateOrConnectWithoutUserInput[]
    createMany?: CaseWinningCreateManyUserInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type BallTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput> | BallTransactionCreateWithoutUserInput[] | BallTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BallTransactionCreateOrConnectWithoutUserInput | BallTransactionCreateOrConnectWithoutUserInput[]
    createMany?: BallTransactionCreateManyUserInputEnvelope
    connect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
  }

  export type StoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput> | StoryCreateWithoutUserInput[] | StoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutUserInput | StoryCreateOrConnectWithoutUserInput[]
    createMany?: StoryCreateManyUserInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReferralStatsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralStatsCreateOrConnectWithoutUserInput
    connect?: ReferralStatsWhereUniqueInput
  }

  export type ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput> | ReferralActivityCreateWithoutReferrerInput[] | ReferralActivityUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutReferrerInput | ReferralActivityCreateOrConnectWithoutReferrerInput[]
    createMany?: ReferralActivityCreateManyReferrerInputEnvelope
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
  }

  export type ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput = {
    create?: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput> | ReferralActivityCreateWithoutInvitedUserInput[] | ReferralActivityUncheckedCreateWithoutInvitedUserInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutInvitedUserInput | ReferralActivityCreateOrConnectWithoutInvitedUserInput[]
    createMany?: ReferralActivityCreateManyInvitedUserInputEnvelope
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type PlayerRatingUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlayerRatingCreateOrConnectWithoutUserInput
    connect?: PlayerRatingWhereUniqueInput
  }

  export type RatingHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput> | RatingHistoryCreateWithoutUserInput[] | RatingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutUserInput | RatingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: RatingHistoryCreateManyUserInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput = {
    create?: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput> | RatingHistoryCreateWithoutOpponentInput[] | RatingHistoryUncheckedCreateWithoutOpponentInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutOpponentInput | RatingHistoryCreateOrConnectWithoutOpponentInput[]
    createMany?: RatingHistoryCreateManyOpponentInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type DirectMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput> | DirectMessageCreateWithoutSenderInput[] | DirectMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutSenderInput | DirectMessageCreateOrConnectWithoutSenderInput[]
    createMany?: DirectMessageCreateManySenderInputEnvelope
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
  }

  export type DirectMessageUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput> | DirectMessageCreateWithoutRecipientInput[] | DirectMessageUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutRecipientInput | DirectMessageCreateOrConnectWithoutRecipientInput[]
    createMany?: DirectMessageCreateManyRecipientInputEnvelope
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
  }

  export type MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput> | MatchFeedbackCreateWithoutReviewerInput[] | MatchFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutReviewerInput | MatchFeedbackCreateOrConnectWithoutReviewerInput[]
    createMany?: MatchFeedbackCreateManyReviewerInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput = {
    create?: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput> | MatchFeedbackCreateWithoutRevieweeInput[] | MatchFeedbackUncheckedCreateWithoutRevieweeInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutRevieweeInput | MatchFeedbackCreateOrConnectWithoutRevieweeInput[]
    createMany?: MatchFeedbackCreateManyRevieweeInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumAuthSourceFieldUpdateOperationsInput = {
    set?: $Enums.AuthSource
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type CountryUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUsersInput
    upsert?: CountryUpsertWithoutUsersInput
    disconnect?: CountryWhereInput | boolean
    delete?: CountryWhereInput | boolean
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutUsersInput, CountryUpdateWithoutUsersInput>, CountryUncheckedUpdateWithoutUsersInput>
  }

  export type CityUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CityCreateOrConnectWithoutUsersInput
    upsert?: CityUpsertWithoutUsersInput
    disconnect?: CityWhereInput | boolean
    delete?: CityWhereInput | boolean
    connect?: CityWhereUniqueInput
    update?: XOR<XOR<CityUpdateToOneWithWhereWithoutUsersInput, CityUpdateWithoutUsersInput>, CityUncheckedUpdateWithoutUsersInput>
  }

  export type SportUpdateOneWithoutUsersNestedInput = {
    create?: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SportCreateOrConnectWithoutUsersInput
    upsert?: SportUpsertWithoutUsersInput
    disconnect?: SportWhereInput | boolean
    delete?: SportWhereInput | boolean
    connect?: SportWhereUniqueInput
    update?: XOR<XOR<SportUpdateToOneWithWhereWithoutUsersInput, SportUpdateWithoutUsersInput>, SportUncheckedUpdateWithoutUsersInput>
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput> | MatchCreateWithoutCreatorInput[] | MatchUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCreatorInput | MatchCreateOrConnectWithoutCreatorInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutCreatorInput | MatchUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutCreatorInput | MatchUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutCreatorInput | MatchUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input> | MatchCreateWithoutPlayer1Input[] | MatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer1Input | MatchCreateOrConnectWithoutPlayer1Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutPlayer1Input | MatchUpsertWithWhereUniqueWithoutPlayer1Input[]
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutPlayer1Input | MatchUpdateWithWhereUniqueWithoutPlayer1Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutPlayer1Input | MatchUpdateManyWithWhereWithoutPlayer1Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input> | MatchCreateWithoutPlayer2Input[] | MatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer2Input | MatchCreateOrConnectWithoutPlayer2Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutPlayer2Input | MatchUpsertWithWhereUniqueWithoutPlayer2Input[]
    createMany?: MatchCreateManyPlayer2InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutPlayer2Input | MatchUpdateWithWhereUniqueWithoutPlayer2Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutPlayer2Input | MatchUpdateManyWithWhereWithoutPlayer2Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput> | MatchCreateWithoutWinnerInput[] | MatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutWinnerInput | MatchCreateOrConnectWithoutWinnerInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutWinnerInput | MatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: MatchCreateManyWinnerInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutWinnerInput | MatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutWinnerInput | MatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutPlayerANestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput> | TournamentMatchCreateWithoutPlayerAInput[] | TournamentMatchUncheckedCreateWithoutPlayerAInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerAInput | TournamentMatchCreateOrConnectWithoutPlayerAInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayerAInput | TournamentMatchUpsertWithWhereUniqueWithoutPlayerAInput[]
    createMany?: TournamentMatchCreateManyPlayerAInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayerAInput | TournamentMatchUpdateWithWhereUniqueWithoutPlayerAInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayerAInput | TournamentMatchUpdateManyWithWhereWithoutPlayerAInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutPlayerBNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput> | TournamentMatchCreateWithoutPlayerBInput[] | TournamentMatchUncheckedCreateWithoutPlayerBInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerBInput | TournamentMatchCreateOrConnectWithoutPlayerBInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayerBInput | TournamentMatchUpsertWithWhereUniqueWithoutPlayerBInput[]
    createMany?: TournamentMatchCreateManyPlayerBInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayerBInput | TournamentMatchUpdateWithWhereUniqueWithoutPlayerBInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayerBInput | TournamentMatchUpdateManyWithWhereWithoutPlayerBInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput | TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput | TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutWinnerInput | TournamentMatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TrainingUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput> | TrainingCreateWithoutCreatorInput[] | TrainingUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatorInput | TrainingCreateOrConnectWithoutCreatorInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCreatorInput | TrainingUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCreatorInput | TrainingUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCreatorInput | TrainingUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type TrainingSessionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput> | TrainingSessionCreateWithoutCreatorInput[] | TrainingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutCreatorInput | TrainingSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput | TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    set?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    disconnect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    delete?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    update?: TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput | TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TrainingSessionUpdateManyWithWhereWithoutCreatorInput | TrainingSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput> | TournamentCreateWithoutCreatorInput[] | TournamentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCreatorInput | TournamentCreateOrConnectWithoutCreatorInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutCreatorInput | TournamentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutCreatorInput | TournamentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutCreatorInput | TournamentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput> | InviteCreateWithoutSenderInput[] | InviteUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutSenderInput | InviteCreateOrConnectWithoutSenderInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutSenderInput | InviteUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InviteCreateManySenderInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutSenderInput | InviteUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutSenderInput | InviteUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput> | InviteCreateWithoutReceiverInput[] | InviteUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutReceiverInput | InviteCreateOrConnectWithoutReceiverInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutReceiverInput | InviteUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutReceiverInput | InviteUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutReceiverInput | InviteUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput> | TournamentCreateWithoutPlayersInput[] | TournamentUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutPlayersInput | TournamentCreateOrConnectWithoutPlayersInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutPlayersInput | TournamentUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutPlayersInput | TournamentUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutPlayersInput | TournamentUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type GameRequestUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput> | GameRequestCreateWithoutCreatorInput[] | GameRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutCreatorInput | GameRequestCreateOrConnectWithoutCreatorInput[]
    upsert?: GameRequestUpsertWithWhereUniqueWithoutCreatorInput | GameRequestUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    set?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    disconnect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    delete?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    update?: GameRequestUpdateWithWhereUniqueWithoutCreatorInput | GameRequestUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: GameRequestUpdateManyWithWhereWithoutCreatorInput | GameRequestUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
  }

  export type GameRequestUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput> | GameRequestCreateWithoutParticipantsInput[] | GameRequestUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutParticipantsInput | GameRequestCreateOrConnectWithoutParticipantsInput[]
    upsert?: GameRequestUpsertWithWhereUniqueWithoutParticipantsInput | GameRequestUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    disconnect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    delete?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    update?: GameRequestUpdateWithWhereUniqueWithoutParticipantsInput | GameRequestUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: GameRequestUpdateManyWithWhereWithoutParticipantsInput | GameRequestUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
  }

  export type RequestResponseUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput> | RequestResponseCreateWithoutUserInput[] | RequestResponseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutUserInput | RequestResponseCreateOrConnectWithoutUserInput[]
    upsert?: RequestResponseUpsertWithWhereUniqueWithoutUserInput | RequestResponseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestResponseCreateManyUserInputEnvelope
    set?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    disconnect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    delete?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    update?: RequestResponseUpdateWithWhereUniqueWithoutUserInput | RequestResponseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestResponseUpdateManyWithWhereWithoutUserInput | RequestResponseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
  }

  export type TrainingSessionUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput> | TrainingSessionCreateWithoutParticipantsInput[] | TrainingSessionUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutParticipantsInput | TrainingSessionCreateOrConnectWithoutParticipantsInput[]
    upsert?: TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput | TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    disconnect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    delete?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    update?: TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput | TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: TrainingSessionUpdateManyWithWhereWithoutParticipantsInput | TrainingSessionUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
  }

  export type CaseOpeningUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput> | CaseOpeningCreateWithoutUserInput[] | CaseOpeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutUserInput | CaseOpeningCreateOrConnectWithoutUserInput[]
    upsert?: CaseOpeningUpsertWithWhereUniqueWithoutUserInput | CaseOpeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    set?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    disconnect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    delete?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    update?: CaseOpeningUpdateWithWhereUniqueWithoutUserInput | CaseOpeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseOpeningUpdateManyWithWhereWithoutUserInput | CaseOpeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
  }

  export type CaseWinningUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput> | CaseWinningCreateWithoutUserInput[] | CaseWinningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutUserInput | CaseWinningCreateOrConnectWithoutUserInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutUserInput | CaseWinningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseWinningCreateManyUserInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutUserInput | CaseWinningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutUserInput | CaseWinningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type BallTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput> | BallTransactionCreateWithoutUserInput[] | BallTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BallTransactionCreateOrConnectWithoutUserInput | BallTransactionCreateOrConnectWithoutUserInput[]
    upsert?: BallTransactionUpsertWithWhereUniqueWithoutUserInput | BallTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BallTransactionCreateManyUserInputEnvelope
    set?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    disconnect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    delete?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    connect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    update?: BallTransactionUpdateWithWhereUniqueWithoutUserInput | BallTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BallTransactionUpdateManyWithWhereWithoutUserInput | BallTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BallTransactionScalarWhereInput | BallTransactionScalarWhereInput[]
  }

  export type StoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput> | StoryCreateWithoutUserInput[] | StoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutUserInput | StoryCreateOrConnectWithoutUserInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutUserInput | StoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StoryCreateManyUserInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutUserInput | StoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutUserInput | StoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutReferralsNestedInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    upsert?: UserUpsertWithoutReferralsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsInput, UserUpdateWithoutReferralsInput>, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReferralStatsUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralStatsCreateOrConnectWithoutUserInput
    upsert?: ReferralStatsUpsertWithoutUserInput
    disconnect?: ReferralStatsWhereInput | boolean
    delete?: ReferralStatsWhereInput | boolean
    connect?: ReferralStatsWhereUniqueInput
    update?: XOR<XOR<ReferralStatsUpdateToOneWithWhereWithoutUserInput, ReferralStatsUpdateWithoutUserInput>, ReferralStatsUncheckedUpdateWithoutUserInput>
  }

  export type ReferralActivityUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput> | ReferralActivityCreateWithoutReferrerInput[] | ReferralActivityUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutReferrerInput | ReferralActivityCreateOrConnectWithoutReferrerInput[]
    upsert?: ReferralActivityUpsertWithWhereUniqueWithoutReferrerInput | ReferralActivityUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: ReferralActivityCreateManyReferrerInputEnvelope
    set?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    disconnect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    delete?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    update?: ReferralActivityUpdateWithWhereUniqueWithoutReferrerInput | ReferralActivityUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: ReferralActivityUpdateManyWithWhereWithoutReferrerInput | ReferralActivityUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
  }

  export type ReferralActivityUpdateManyWithoutInvitedUserNestedInput = {
    create?: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput> | ReferralActivityCreateWithoutInvitedUserInput[] | ReferralActivityUncheckedCreateWithoutInvitedUserInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutInvitedUserInput | ReferralActivityCreateOrConnectWithoutInvitedUserInput[]
    upsert?: ReferralActivityUpsertWithWhereUniqueWithoutInvitedUserInput | ReferralActivityUpsertWithWhereUniqueWithoutInvitedUserInput[]
    createMany?: ReferralActivityCreateManyInvitedUserInputEnvelope
    set?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    disconnect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    delete?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    update?: ReferralActivityUpdateWithWhereUniqueWithoutInvitedUserInput | ReferralActivityUpdateWithWhereUniqueWithoutInvitedUserInput[]
    updateMany?: ReferralActivityUpdateManyWithWhereWithoutInvitedUserInput | ReferralActivityUpdateManyWithWhereWithoutInvitedUserInput[]
    deleteMany?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type PlayerRatingUpdateOneWithoutUserNestedInput = {
    create?: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlayerRatingCreateOrConnectWithoutUserInput
    upsert?: PlayerRatingUpsertWithoutUserInput
    disconnect?: PlayerRatingWhereInput | boolean
    delete?: PlayerRatingWhereInput | boolean
    connect?: PlayerRatingWhereUniqueInput
    update?: XOR<XOR<PlayerRatingUpdateToOneWithWhereWithoutUserInput, PlayerRatingUpdateWithoutUserInput>, PlayerRatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput> | RatingHistoryCreateWithoutUserInput[] | RatingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutUserInput | RatingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutUserInput | RatingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingHistoryCreateManyUserInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutUserInput | RatingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutUserInput | RatingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type RatingHistoryUpdateManyWithoutOpponentNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput> | RatingHistoryCreateWithoutOpponentInput[] | RatingHistoryUncheckedCreateWithoutOpponentInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutOpponentInput | RatingHistoryCreateOrConnectWithoutOpponentInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutOpponentInput | RatingHistoryUpsertWithWhereUniqueWithoutOpponentInput[]
    createMany?: RatingHistoryCreateManyOpponentInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutOpponentInput | RatingHistoryUpdateWithWhereUniqueWithoutOpponentInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutOpponentInput | RatingHistoryUpdateManyWithWhereWithoutOpponentInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type UserSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type DirectMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput> | DirectMessageCreateWithoutSenderInput[] | DirectMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutSenderInput | DirectMessageCreateOrConnectWithoutSenderInput[]
    upsert?: DirectMessageUpsertWithWhereUniqueWithoutSenderInput | DirectMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: DirectMessageCreateManySenderInputEnvelope
    set?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    disconnect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    delete?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    update?: DirectMessageUpdateWithWhereUniqueWithoutSenderInput | DirectMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: DirectMessageUpdateManyWithWhereWithoutSenderInput | DirectMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
  }

  export type DirectMessageUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput> | DirectMessageCreateWithoutRecipientInput[] | DirectMessageUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutRecipientInput | DirectMessageCreateOrConnectWithoutRecipientInput[]
    upsert?: DirectMessageUpsertWithWhereUniqueWithoutRecipientInput | DirectMessageUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: DirectMessageCreateManyRecipientInputEnvelope
    set?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    disconnect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    delete?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    update?: DirectMessageUpdateWithWhereUniqueWithoutRecipientInput | DirectMessageUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: DirectMessageUpdateManyWithWhereWithoutRecipientInput | DirectMessageUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
  }

  export type MatchFeedbackUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput> | MatchFeedbackCreateWithoutReviewerInput[] | MatchFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutReviewerInput | MatchFeedbackCreateOrConnectWithoutReviewerInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutReviewerInput | MatchFeedbackUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: MatchFeedbackCreateManyReviewerInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutReviewerInput | MatchFeedbackUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutReviewerInput | MatchFeedbackUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type MatchFeedbackUpdateManyWithoutRevieweeNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput> | MatchFeedbackCreateWithoutRevieweeInput[] | MatchFeedbackUncheckedCreateWithoutRevieweeInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutRevieweeInput | MatchFeedbackCreateOrConnectWithoutRevieweeInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutRevieweeInput | MatchFeedbackUpsertWithWhereUniqueWithoutRevieweeInput[]
    createMany?: MatchFeedbackCreateManyRevieweeInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutRevieweeInput | MatchFeedbackUpdateWithWhereUniqueWithoutRevieweeInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutRevieweeInput | MatchFeedbackUpdateManyWithWhereWithoutRevieweeInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput> | MatchCreateWithoutCreatorInput[] | MatchUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCreatorInput | MatchCreateOrConnectWithoutCreatorInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutCreatorInput | MatchUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutCreatorInput | MatchUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutCreatorInput | MatchUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input> | MatchCreateWithoutPlayer1Input[] | MatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer1Input | MatchCreateOrConnectWithoutPlayer1Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutPlayer1Input | MatchUpsertWithWhereUniqueWithoutPlayer1Input[]
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutPlayer1Input | MatchUpdateWithWhereUniqueWithoutPlayer1Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutPlayer1Input | MatchUpdateManyWithWhereWithoutPlayer1Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input> | MatchCreateWithoutPlayer2Input[] | MatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutPlayer2Input | MatchCreateOrConnectWithoutPlayer2Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutPlayer2Input | MatchUpsertWithWhereUniqueWithoutPlayer2Input[]
    createMany?: MatchCreateManyPlayer2InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutPlayer2Input | MatchUpdateWithWhereUniqueWithoutPlayer2Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutPlayer2Input | MatchUpdateManyWithWhereWithoutPlayer2Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput> | MatchCreateWithoutWinnerInput[] | MatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutWinnerInput | MatchCreateOrConnectWithoutWinnerInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutWinnerInput | MatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: MatchCreateManyWinnerInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutWinnerInput | MatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutWinnerInput | MatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput> | TournamentMatchCreateWithoutPlayerAInput[] | TournamentMatchUncheckedCreateWithoutPlayerAInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerAInput | TournamentMatchCreateOrConnectWithoutPlayerAInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayerAInput | TournamentMatchUpsertWithWhereUniqueWithoutPlayerAInput[]
    createMany?: TournamentMatchCreateManyPlayerAInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayerAInput | TournamentMatchUpdateWithWhereUniqueWithoutPlayerAInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayerAInput | TournamentMatchUpdateManyWithWhereWithoutPlayerAInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput> | TournamentMatchCreateWithoutPlayerBInput[] | TournamentMatchUncheckedCreateWithoutPlayerBInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayerBInput | TournamentMatchCreateOrConnectWithoutPlayerBInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayerBInput | TournamentMatchUpsertWithWhereUniqueWithoutPlayerBInput[]
    createMany?: TournamentMatchCreateManyPlayerBInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayerBInput | TournamentMatchUpdateWithWhereUniqueWithoutPlayerBInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayerBInput | TournamentMatchUpdateManyWithWhereWithoutPlayerBInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput | TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput | TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutWinnerInput | TournamentMatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TrainingUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput> | TrainingCreateWithoutCreatorInput[] | TrainingUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutCreatorInput | TrainingCreateOrConnectWithoutCreatorInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutCreatorInput | TrainingUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutCreatorInput | TrainingUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutCreatorInput | TrainingUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput> | TrainingSessionCreateWithoutCreatorInput[] | TrainingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutCreatorInput | TrainingSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput | TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TrainingSessionCreateManyCreatorInputEnvelope
    set?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    disconnect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    delete?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    update?: TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput | TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TrainingSessionUpdateManyWithWhereWithoutCreatorInput | TrainingSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput> | TournamentCreateWithoutCreatorInput[] | TournamentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCreatorInput | TournamentCreateOrConnectWithoutCreatorInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutCreatorInput | TournamentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutCreatorInput | TournamentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutCreatorInput | TournamentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput> | InviteCreateWithoutSenderInput[] | InviteUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutSenderInput | InviteCreateOrConnectWithoutSenderInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutSenderInput | InviteUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InviteCreateManySenderInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutSenderInput | InviteUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutSenderInput | InviteUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput> | InviteCreateWithoutReceiverInput[] | InviteUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutReceiverInput | InviteCreateOrConnectWithoutReceiverInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutReceiverInput | InviteUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutReceiverInput | InviteUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutReceiverInput | InviteUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput> | TournamentCreateWithoutPlayersInput[] | TournamentUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutPlayersInput | TournamentCreateOrConnectWithoutPlayersInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutPlayersInput | TournamentUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutPlayersInput | TournamentUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutPlayersInput | TournamentUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type GameRequestUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput> | GameRequestCreateWithoutCreatorInput[] | GameRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutCreatorInput | GameRequestCreateOrConnectWithoutCreatorInput[]
    upsert?: GameRequestUpsertWithWhereUniqueWithoutCreatorInput | GameRequestUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: GameRequestCreateManyCreatorInputEnvelope
    set?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    disconnect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    delete?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    update?: GameRequestUpdateWithWhereUniqueWithoutCreatorInput | GameRequestUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: GameRequestUpdateManyWithWhereWithoutCreatorInput | GameRequestUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
  }

  export type GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput> | GameRequestCreateWithoutParticipantsInput[] | GameRequestUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: GameRequestCreateOrConnectWithoutParticipantsInput | GameRequestCreateOrConnectWithoutParticipantsInput[]
    upsert?: GameRequestUpsertWithWhereUniqueWithoutParticipantsInput | GameRequestUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    disconnect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    delete?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    connect?: GameRequestWhereUniqueInput | GameRequestWhereUniqueInput[]
    update?: GameRequestUpdateWithWhereUniqueWithoutParticipantsInput | GameRequestUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: GameRequestUpdateManyWithWhereWithoutParticipantsInput | GameRequestUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
  }

  export type RequestResponseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput> | RequestResponseCreateWithoutUserInput[] | RequestResponseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutUserInput | RequestResponseCreateOrConnectWithoutUserInput[]
    upsert?: RequestResponseUpsertWithWhereUniqueWithoutUserInput | RequestResponseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestResponseCreateManyUserInputEnvelope
    set?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    disconnect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    delete?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    update?: RequestResponseUpdateWithWhereUniqueWithoutUserInput | RequestResponseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestResponseUpdateManyWithWhereWithoutUserInput | RequestResponseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
  }

  export type TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput> | TrainingSessionCreateWithoutParticipantsInput[] | TrainingSessionUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TrainingSessionCreateOrConnectWithoutParticipantsInput | TrainingSessionCreateOrConnectWithoutParticipantsInput[]
    upsert?: TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput | TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    disconnect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    delete?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    connect?: TrainingSessionWhereUniqueInput | TrainingSessionWhereUniqueInput[]
    update?: TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput | TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: TrainingSessionUpdateManyWithWhereWithoutParticipantsInput | TrainingSessionUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
  }

  export type CaseOpeningUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput> | CaseOpeningCreateWithoutUserInput[] | CaseOpeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutUserInput | CaseOpeningCreateOrConnectWithoutUserInput[]
    upsert?: CaseOpeningUpsertWithWhereUniqueWithoutUserInput | CaseOpeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseOpeningCreateManyUserInputEnvelope
    set?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    disconnect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    delete?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    update?: CaseOpeningUpdateWithWhereUniqueWithoutUserInput | CaseOpeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseOpeningUpdateManyWithWhereWithoutUserInput | CaseOpeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
  }

  export type CaseWinningUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput> | CaseWinningCreateWithoutUserInput[] | CaseWinningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutUserInput | CaseWinningCreateOrConnectWithoutUserInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutUserInput | CaseWinningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseWinningCreateManyUserInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutUserInput | CaseWinningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutUserInput | CaseWinningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type BallTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput> | BallTransactionCreateWithoutUserInput[] | BallTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BallTransactionCreateOrConnectWithoutUserInput | BallTransactionCreateOrConnectWithoutUserInput[]
    upsert?: BallTransactionUpsertWithWhereUniqueWithoutUserInput | BallTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BallTransactionCreateManyUserInputEnvelope
    set?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    disconnect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    delete?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    connect?: BallTransactionWhereUniqueInput | BallTransactionWhereUniqueInput[]
    update?: BallTransactionUpdateWithWhereUniqueWithoutUserInput | BallTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BallTransactionUpdateManyWithWhereWithoutUserInput | BallTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BallTransactionScalarWhereInput | BallTransactionScalarWhereInput[]
  }

  export type StoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput> | StoryCreateWithoutUserInput[] | StoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutUserInput | StoryCreateOrConnectWithoutUserInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutUserInput | StoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StoryCreateManyUserInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutUserInput | StoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutUserInput | StoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReferralStatsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralStatsCreateOrConnectWithoutUserInput
    upsert?: ReferralStatsUpsertWithoutUserInput
    disconnect?: ReferralStatsWhereInput | boolean
    delete?: ReferralStatsWhereInput | boolean
    connect?: ReferralStatsWhereUniqueInput
    update?: XOR<XOR<ReferralStatsUpdateToOneWithWhereWithoutUserInput, ReferralStatsUpdateWithoutUserInput>, ReferralStatsUncheckedUpdateWithoutUserInput>
  }

  export type ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput> | ReferralActivityCreateWithoutReferrerInput[] | ReferralActivityUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutReferrerInput | ReferralActivityCreateOrConnectWithoutReferrerInput[]
    upsert?: ReferralActivityUpsertWithWhereUniqueWithoutReferrerInput | ReferralActivityUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: ReferralActivityCreateManyReferrerInputEnvelope
    set?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    disconnect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    delete?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    update?: ReferralActivityUpdateWithWhereUniqueWithoutReferrerInput | ReferralActivityUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: ReferralActivityUpdateManyWithWhereWithoutReferrerInput | ReferralActivityUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
  }

  export type ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput = {
    create?: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput> | ReferralActivityCreateWithoutInvitedUserInput[] | ReferralActivityUncheckedCreateWithoutInvitedUserInput[]
    connectOrCreate?: ReferralActivityCreateOrConnectWithoutInvitedUserInput | ReferralActivityCreateOrConnectWithoutInvitedUserInput[]
    upsert?: ReferralActivityUpsertWithWhereUniqueWithoutInvitedUserInput | ReferralActivityUpsertWithWhereUniqueWithoutInvitedUserInput[]
    createMany?: ReferralActivityCreateManyInvitedUserInputEnvelope
    set?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    disconnect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    delete?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    connect?: ReferralActivityWhereUniqueInput | ReferralActivityWhereUniqueInput[]
    update?: ReferralActivityUpdateWithWhereUniqueWithoutInvitedUserInput | ReferralActivityUpdateWithWhereUniqueWithoutInvitedUserInput[]
    updateMany?: ReferralActivityUpdateManyWithWhereWithoutInvitedUserInput | ReferralActivityUpdateManyWithWhereWithoutInvitedUserInput[]
    deleteMany?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type PlayerRatingUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlayerRatingCreateOrConnectWithoutUserInput
    upsert?: PlayerRatingUpsertWithoutUserInput
    disconnect?: PlayerRatingWhereInput | boolean
    delete?: PlayerRatingWhereInput | boolean
    connect?: PlayerRatingWhereUniqueInput
    update?: XOR<XOR<PlayerRatingUpdateToOneWithWhereWithoutUserInput, PlayerRatingUpdateWithoutUserInput>, PlayerRatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput> | RatingHistoryCreateWithoutUserInput[] | RatingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutUserInput | RatingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutUserInput | RatingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingHistoryCreateManyUserInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutUserInput | RatingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutUserInput | RatingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput> | RatingHistoryCreateWithoutOpponentInput[] | RatingHistoryUncheckedCreateWithoutOpponentInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutOpponentInput | RatingHistoryCreateOrConnectWithoutOpponentInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutOpponentInput | RatingHistoryUpsertWithWhereUniqueWithoutOpponentInput[]
    createMany?: RatingHistoryCreateManyOpponentInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutOpponentInput | RatingHistoryUpdateWithWhereUniqueWithoutOpponentInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutOpponentInput | RatingHistoryUpdateManyWithWhereWithoutOpponentInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type DirectMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput> | DirectMessageCreateWithoutSenderInput[] | DirectMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutSenderInput | DirectMessageCreateOrConnectWithoutSenderInput[]
    upsert?: DirectMessageUpsertWithWhereUniqueWithoutSenderInput | DirectMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: DirectMessageCreateManySenderInputEnvelope
    set?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    disconnect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    delete?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    update?: DirectMessageUpdateWithWhereUniqueWithoutSenderInput | DirectMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: DirectMessageUpdateManyWithWhereWithoutSenderInput | DirectMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
  }

  export type DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput> | DirectMessageCreateWithoutRecipientInput[] | DirectMessageUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: DirectMessageCreateOrConnectWithoutRecipientInput | DirectMessageCreateOrConnectWithoutRecipientInput[]
    upsert?: DirectMessageUpsertWithWhereUniqueWithoutRecipientInput | DirectMessageUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: DirectMessageCreateManyRecipientInputEnvelope
    set?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    disconnect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    delete?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    connect?: DirectMessageWhereUniqueInput | DirectMessageWhereUniqueInput[]
    update?: DirectMessageUpdateWithWhereUniqueWithoutRecipientInput | DirectMessageUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: DirectMessageUpdateManyWithWhereWithoutRecipientInput | DirectMessageUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput> | MatchFeedbackCreateWithoutReviewerInput[] | MatchFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutReviewerInput | MatchFeedbackCreateOrConnectWithoutReviewerInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutReviewerInput | MatchFeedbackUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: MatchFeedbackCreateManyReviewerInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutReviewerInput | MatchFeedbackUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutReviewerInput | MatchFeedbackUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput> | MatchFeedbackCreateWithoutRevieweeInput[] | MatchFeedbackUncheckedCreateWithoutRevieweeInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutRevieweeInput | MatchFeedbackCreateOrConnectWithoutRevieweeInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutRevieweeInput | MatchFeedbackUpsertWithWhereUniqueWithoutRevieweeInput[]
    createMany?: MatchFeedbackCreateManyRevieweeInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutRevieweeInput | MatchFeedbackUpdateWithWhereUniqueWithoutRevieweeInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutRevieweeInput | MatchFeedbackUpdateManyWithWhereWithoutRevieweeInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRatingInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    upsert?: UserUpsertWithoutRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingInput, UserUpdateWithoutRatingInput>, UserUncheckedUpdateWithoutRatingInput>
  }

  export type UserCreateNestedOneWithoutRatingHistoryInput = {
    create?: XOR<UserCreateWithoutRatingHistoryInput, UserUncheckedCreateWithoutRatingHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type MatchCreateNestedOneWithoutRatingHistoryInput = {
    create?: XOR<MatchCreateWithoutRatingHistoryInput, MatchUncheckedCreateWithoutRatingHistoryInput>
    connectOrCreate?: MatchCreateOrConnectWithoutRatingHistoryInput
    connect?: MatchWhereUniqueInput
  }

  export type RatingSeasonCreateNestedOneWithoutHistoryInput = {
    create?: XOR<RatingSeasonCreateWithoutHistoryInput, RatingSeasonUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: RatingSeasonCreateOrConnectWithoutHistoryInput
    connect?: RatingSeasonWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOpponentHistoryInput = {
    create?: XOR<UserCreateWithoutOpponentHistoryInput, UserUncheckedCreateWithoutOpponentHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpponentHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingHistoryNestedInput = {
    create?: XOR<UserCreateWithoutRatingHistoryInput, UserUncheckedCreateWithoutRatingHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingHistoryInput
    upsert?: UserUpsertWithoutRatingHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingHistoryInput, UserUpdateWithoutRatingHistoryInput>, UserUncheckedUpdateWithoutRatingHistoryInput>
  }

  export type MatchUpdateOneWithoutRatingHistoryNestedInput = {
    create?: XOR<MatchCreateWithoutRatingHistoryInput, MatchUncheckedCreateWithoutRatingHistoryInput>
    connectOrCreate?: MatchCreateOrConnectWithoutRatingHistoryInput
    upsert?: MatchUpsertWithoutRatingHistoryInput
    disconnect?: MatchWhereInput | boolean
    delete?: MatchWhereInput | boolean
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutRatingHistoryInput, MatchUpdateWithoutRatingHistoryInput>, MatchUncheckedUpdateWithoutRatingHistoryInput>
  }

  export type RatingSeasonUpdateOneWithoutHistoryNestedInput = {
    create?: XOR<RatingSeasonCreateWithoutHistoryInput, RatingSeasonUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: RatingSeasonCreateOrConnectWithoutHistoryInput
    upsert?: RatingSeasonUpsertWithoutHistoryInput
    disconnect?: RatingSeasonWhereInput | boolean
    delete?: RatingSeasonWhereInput | boolean
    connect?: RatingSeasonWhereUniqueInput
    update?: XOR<XOR<RatingSeasonUpdateToOneWithWhereWithoutHistoryInput, RatingSeasonUpdateWithoutHistoryInput>, RatingSeasonUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateOneWithoutOpponentHistoryNestedInput = {
    create?: XOR<UserCreateWithoutOpponentHistoryInput, UserUncheckedCreateWithoutOpponentHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpponentHistoryInput
    upsert?: UserUpsertWithoutOpponentHistoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOpponentHistoryInput, UserUpdateWithoutOpponentHistoryInput>, UserUncheckedUpdateWithoutOpponentHistoryInput>
  }

  export type RatingHistoryCreateNestedManyWithoutSeasonInput = {
    create?: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput> | RatingHistoryCreateWithoutSeasonInput[] | RatingHistoryUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutSeasonInput | RatingHistoryCreateOrConnectWithoutSeasonInput[]
    createMany?: RatingHistoryCreateManySeasonInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type RatingHistoryUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput> | RatingHistoryCreateWithoutSeasonInput[] | RatingHistoryUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutSeasonInput | RatingHistoryCreateOrConnectWithoutSeasonInput[]
    createMany?: RatingHistoryCreateManySeasonInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type RatingHistoryUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput> | RatingHistoryCreateWithoutSeasonInput[] | RatingHistoryUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutSeasonInput | RatingHistoryCreateOrConnectWithoutSeasonInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutSeasonInput | RatingHistoryUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: RatingHistoryCreateManySeasonInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutSeasonInput | RatingHistoryUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutSeasonInput | RatingHistoryUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type RatingHistoryUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput> | RatingHistoryCreateWithoutSeasonInput[] | RatingHistoryUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutSeasonInput | RatingHistoryCreateOrConnectWithoutSeasonInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutSeasonInput | RatingHistoryUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: RatingHistoryCreateManySeasonInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutSeasonInput | RatingHistoryUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutSeasonInput | RatingHistoryUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    upsert?: UserUpsertWithoutAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementsInput, UserUpdateWithoutAchievementsInput>, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type ReferralStatsCreateachievementsEarnedInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutReferralStatsInput = {
    create?: XOR<UserCreateWithoutReferralStatsInput, UserUncheckedCreateWithoutReferralStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralStatsInput
    connect?: UserWhereUniqueInput
  }

  export type ReferralStatsUpdateachievementsEarnedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutReferralStatsNestedInput = {
    create?: XOR<UserCreateWithoutReferralStatsInput, UserUncheckedCreateWithoutReferralStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralStatsInput
    upsert?: UserUpsertWithoutReferralStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralStatsInput, UserUpdateWithoutReferralStatsInput>, UserUncheckedUpdateWithoutReferralStatsInput>
  }

  export type UserCreateNestedOneWithoutReferrerActivitiesInput = {
    create?: XOR<UserCreateWithoutReferrerActivitiesInput, UserUncheckedCreateWithoutReferrerActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferrerActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvitedActivitiesInput = {
    create?: XOR<UserCreateWithoutInvitedActivitiesInput, UserUncheckedCreateWithoutInvitedActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitedActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReferrerActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutReferrerActivitiesInput, UserUncheckedCreateWithoutReferrerActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferrerActivitiesInput
    upsert?: UserUpsertWithoutReferrerActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferrerActivitiesInput, UserUpdateWithoutReferrerActivitiesInput>, UserUncheckedUpdateWithoutReferrerActivitiesInput>
  }

  export type UserUpdateOneRequiredWithoutInvitedActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutInvitedActivitiesInput, UserUncheckedCreateWithoutInvitedActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitedActivitiesInput
    upsert?: UserUpsertWithoutInvitedActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitedActivitiesInput, UserUpdateWithoutInvitedActivitiesInput>, UserUncheckedUpdateWithoutInvitedActivitiesInput>
  }

  export type UserCreateNestedOneWithoutBallTransactionsInput = {
    create?: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBallTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumBallTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.BallTransactionType
  }

  export type UserUpdateOneRequiredWithoutBallTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBallTransactionsInput
    upsert?: UserUpsertWithoutBallTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBallTransactionsInput, UserUpdateWithoutBallTransactionsInput>, UserUncheckedUpdateWithoutBallTransactionsInput>
  }

  export type CaseItemCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput> | CaseItemCreateWithoutCaseInput[] | CaseItemUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseItemCreateOrConnectWithoutCaseInput | CaseItemCreateOrConnectWithoutCaseInput[]
    createMany?: CaseItemCreateManyCaseInputEnvelope
    connect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
  }

  export type CaseOpeningCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput> | CaseOpeningCreateWithoutCaseInput[] | CaseOpeningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutCaseInput | CaseOpeningCreateOrConnectWithoutCaseInput[]
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
  }

  export type CaseWinningCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput> | CaseWinningCreateWithoutCaseInput[] | CaseWinningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutCaseInput | CaseWinningCreateOrConnectWithoutCaseInput[]
    createMany?: CaseWinningCreateManyCaseInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type CaseItemUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput> | CaseItemCreateWithoutCaseInput[] | CaseItemUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseItemCreateOrConnectWithoutCaseInput | CaseItemCreateOrConnectWithoutCaseInput[]
    createMany?: CaseItemCreateManyCaseInputEnvelope
    connect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
  }

  export type CaseOpeningUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput> | CaseOpeningCreateWithoutCaseInput[] | CaseOpeningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutCaseInput | CaseOpeningCreateOrConnectWithoutCaseInput[]
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
  }

  export type CaseWinningUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput> | CaseWinningCreateWithoutCaseInput[] | CaseWinningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutCaseInput | CaseWinningCreateOrConnectWithoutCaseInput[]
    createMany?: CaseWinningCreateManyCaseInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type CaseItemUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput> | CaseItemCreateWithoutCaseInput[] | CaseItemUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseItemCreateOrConnectWithoutCaseInput | CaseItemCreateOrConnectWithoutCaseInput[]
    upsert?: CaseItemUpsertWithWhereUniqueWithoutCaseInput | CaseItemUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseItemCreateManyCaseInputEnvelope
    set?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    disconnect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    delete?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    connect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    update?: CaseItemUpdateWithWhereUniqueWithoutCaseInput | CaseItemUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseItemUpdateManyWithWhereWithoutCaseInput | CaseItemUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseItemScalarWhereInput | CaseItemScalarWhereInput[]
  }

  export type CaseOpeningUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput> | CaseOpeningCreateWithoutCaseInput[] | CaseOpeningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutCaseInput | CaseOpeningCreateOrConnectWithoutCaseInput[]
    upsert?: CaseOpeningUpsertWithWhereUniqueWithoutCaseInput | CaseOpeningUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    set?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    disconnect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    delete?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    update?: CaseOpeningUpdateWithWhereUniqueWithoutCaseInput | CaseOpeningUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseOpeningUpdateManyWithWhereWithoutCaseInput | CaseOpeningUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
  }

  export type CaseWinningUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput> | CaseWinningCreateWithoutCaseInput[] | CaseWinningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutCaseInput | CaseWinningCreateOrConnectWithoutCaseInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutCaseInput | CaseWinningUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseWinningCreateManyCaseInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutCaseInput | CaseWinningUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutCaseInput | CaseWinningUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type CaseItemUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput> | CaseItemCreateWithoutCaseInput[] | CaseItemUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseItemCreateOrConnectWithoutCaseInput | CaseItemCreateOrConnectWithoutCaseInput[]
    upsert?: CaseItemUpsertWithWhereUniqueWithoutCaseInput | CaseItemUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseItemCreateManyCaseInputEnvelope
    set?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    disconnect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    delete?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    connect?: CaseItemWhereUniqueInput | CaseItemWhereUniqueInput[]
    update?: CaseItemUpdateWithWhereUniqueWithoutCaseInput | CaseItemUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseItemUpdateManyWithWhereWithoutCaseInput | CaseItemUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseItemScalarWhereInput | CaseItemScalarWhereInput[]
  }

  export type CaseOpeningUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput> | CaseOpeningCreateWithoutCaseInput[] | CaseOpeningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutCaseInput | CaseOpeningCreateOrConnectWithoutCaseInput[]
    upsert?: CaseOpeningUpsertWithWhereUniqueWithoutCaseInput | CaseOpeningUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseOpeningCreateManyCaseInputEnvelope
    set?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    disconnect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    delete?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    connect?: CaseOpeningWhereUniqueInput | CaseOpeningWhereUniqueInput[]
    update?: CaseOpeningUpdateWithWhereUniqueWithoutCaseInput | CaseOpeningUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseOpeningUpdateManyWithWhereWithoutCaseInput | CaseOpeningUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
  }

  export type CaseWinningUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput> | CaseWinningCreateWithoutCaseInput[] | CaseWinningUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutCaseInput | CaseWinningCreateOrConnectWithoutCaseInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutCaseInput | CaseWinningUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseWinningCreateManyCaseInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutCaseInput | CaseWinningUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutCaseInput | CaseWinningUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutItemsInput = {
    create?: XOR<CaseCreateWithoutItemsInput, CaseUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutItemsInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseWinningCreateNestedManyWithoutItemInput = {
    create?: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput> | CaseWinningCreateWithoutItemInput[] | CaseWinningUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutItemInput | CaseWinningCreateOrConnectWithoutItemInput[]
    createMany?: CaseWinningCreateManyItemInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type CaseWinningUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput> | CaseWinningCreateWithoutItemInput[] | CaseWinningUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutItemInput | CaseWinningCreateOrConnectWithoutItemInput[]
    createMany?: CaseWinningCreateManyItemInputEnvelope
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
  }

  export type EnumCaseItemTypeFieldUpdateOperationsInput = {
    set?: $Enums.CaseItemType
  }

  export type CaseUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CaseCreateWithoutItemsInput, CaseUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutItemsInput
    upsert?: CaseUpsertWithoutItemsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutItemsInput, CaseUpdateWithoutItemsInput>, CaseUncheckedUpdateWithoutItemsInput>
  }

  export type CaseWinningUpdateManyWithoutItemNestedInput = {
    create?: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput> | CaseWinningCreateWithoutItemInput[] | CaseWinningUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutItemInput | CaseWinningCreateOrConnectWithoutItemInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutItemInput | CaseWinningUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CaseWinningCreateManyItemInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutItemInput | CaseWinningUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutItemInput | CaseWinningUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type CaseWinningUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput> | CaseWinningCreateWithoutItemInput[] | CaseWinningUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CaseWinningCreateOrConnectWithoutItemInput | CaseWinningCreateOrConnectWithoutItemInput[]
    upsert?: CaseWinningUpsertWithWhereUniqueWithoutItemInput | CaseWinningUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CaseWinningCreateManyItemInputEnvelope
    set?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    disconnect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    delete?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    connect?: CaseWinningWhereUniqueInput | CaseWinningWhereUniqueInput[]
    update?: CaseWinningUpdateWithWhereUniqueWithoutItemInput | CaseWinningUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CaseWinningUpdateManyWithWhereWithoutItemInput | CaseWinningUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCaseOpeningsInput = {
    create?: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseOpeningsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutOpeningsInput = {
    create?: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpeningsInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseWinningCreateNestedOneWithoutOpeningInput = {
    create?: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
    connectOrCreate?: CaseWinningCreateOrConnectWithoutOpeningInput
    connect?: CaseWinningWhereUniqueInput
  }

  export type CaseWinningUncheckedCreateNestedOneWithoutOpeningInput = {
    create?: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
    connectOrCreate?: CaseWinningCreateOrConnectWithoutOpeningInput
    connect?: CaseWinningWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCaseOpeningsNestedInput = {
    create?: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseOpeningsInput
    upsert?: UserUpsertWithoutCaseOpeningsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCaseOpeningsInput, UserUpdateWithoutCaseOpeningsInput>, UserUncheckedUpdateWithoutCaseOpeningsInput>
  }

  export type CaseUpdateOneRequiredWithoutOpeningsNestedInput = {
    create?: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpeningsInput
    upsert?: CaseUpsertWithoutOpeningsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutOpeningsInput, CaseUpdateWithoutOpeningsInput>, CaseUncheckedUpdateWithoutOpeningsInput>
  }

  export type CaseWinningUpdateOneWithoutOpeningNestedInput = {
    create?: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
    connectOrCreate?: CaseWinningCreateOrConnectWithoutOpeningInput
    upsert?: CaseWinningUpsertWithoutOpeningInput
    disconnect?: CaseWinningWhereInput | boolean
    delete?: CaseWinningWhereInput | boolean
    connect?: CaseWinningWhereUniqueInput
    update?: XOR<XOR<CaseWinningUpdateToOneWithWhereWithoutOpeningInput, CaseWinningUpdateWithoutOpeningInput>, CaseWinningUncheckedUpdateWithoutOpeningInput>
  }

  export type CaseWinningUncheckedUpdateOneWithoutOpeningNestedInput = {
    create?: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
    connectOrCreate?: CaseWinningCreateOrConnectWithoutOpeningInput
    upsert?: CaseWinningUpsertWithoutOpeningInput
    disconnect?: CaseWinningWhereInput | boolean
    delete?: CaseWinningWhereInput | boolean
    connect?: CaseWinningWhereUniqueInput
    update?: XOR<XOR<CaseWinningUpdateToOneWithWhereWithoutOpeningInput, CaseWinningUpdateWithoutOpeningInput>, CaseWinningUncheckedUpdateWithoutOpeningInput>
  }

  export type CaseOpeningCreateNestedOneWithoutWinningInput = {
    create?: XOR<CaseOpeningCreateWithoutWinningInput, CaseOpeningUncheckedCreateWithoutWinningInput>
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutWinningInput
    connect?: CaseOpeningWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCaseWinningsInput = {
    create?: XOR<UserCreateWithoutCaseWinningsInput, UserUncheckedCreateWithoutCaseWinningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseWinningsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutWinningsInput = {
    create?: XOR<CaseCreateWithoutWinningsInput, CaseUncheckedCreateWithoutWinningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutWinningsInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseItemCreateNestedOneWithoutWinningsInput = {
    create?: XOR<CaseItemCreateWithoutWinningsInput, CaseItemUncheckedCreateWithoutWinningsInput>
    connectOrCreate?: CaseItemCreateOrConnectWithoutWinningsInput
    connect?: CaseItemWhereUniqueInput
  }

  export type CaseOpeningUpdateOneRequiredWithoutWinningNestedInput = {
    create?: XOR<CaseOpeningCreateWithoutWinningInput, CaseOpeningUncheckedCreateWithoutWinningInput>
    connectOrCreate?: CaseOpeningCreateOrConnectWithoutWinningInput
    upsert?: CaseOpeningUpsertWithoutWinningInput
    connect?: CaseOpeningWhereUniqueInput
    update?: XOR<XOR<CaseOpeningUpdateToOneWithWhereWithoutWinningInput, CaseOpeningUpdateWithoutWinningInput>, CaseOpeningUncheckedUpdateWithoutWinningInput>
  }

  export type UserUpdateOneRequiredWithoutCaseWinningsNestedInput = {
    create?: XOR<UserCreateWithoutCaseWinningsInput, UserUncheckedCreateWithoutCaseWinningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseWinningsInput
    upsert?: UserUpsertWithoutCaseWinningsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCaseWinningsInput, UserUpdateWithoutCaseWinningsInput>, UserUncheckedUpdateWithoutCaseWinningsInput>
  }

  export type CaseUpdateOneRequiredWithoutWinningsNestedInput = {
    create?: XOR<CaseCreateWithoutWinningsInput, CaseUncheckedCreateWithoutWinningsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutWinningsInput
    upsert?: CaseUpsertWithoutWinningsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutWinningsInput, CaseUpdateWithoutWinningsInput>, CaseUncheckedUpdateWithoutWinningsInput>
  }

  export type CaseItemUpdateOneRequiredWithoutWinningsNestedInput = {
    create?: XOR<CaseItemCreateWithoutWinningsInput, CaseItemUncheckedCreateWithoutWinningsInput>
    connectOrCreate?: CaseItemCreateOrConnectWithoutWinningsInput
    upsert?: CaseItemUpsertWithoutWinningsInput
    connect?: CaseItemWhereUniqueInput
    update?: XOR<XOR<CaseItemUpdateToOneWithWhereWithoutWinningsInput, CaseItemUpdateWithoutWinningsInput>, CaseItemUncheckedUpdateWithoutWinningsInput>
  }

  export type InviteCreateNestedManyWithoutMatchInput = {
    create?: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput> | InviteCreateWithoutMatchInput[] | InviteUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMatchInput | InviteCreateOrConnectWithoutMatchInput[]
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type MatchFeedbackCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput> | MatchFeedbackCreateWithoutMatchInput[] | MatchFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutMatchInput | MatchFeedbackCreateOrConnectWithoutMatchInput[]
    createMany?: MatchFeedbackCreateManyMatchInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type RatingHistoryCreateNestedManyWithoutMatchInput = {
    create?: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput> | RatingHistoryCreateWithoutMatchInput[] | RatingHistoryUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutMatchInput | RatingHistoryCreateOrConnectWithoutMatchInput[]
    createMany?: RatingHistoryCreateManyMatchInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedMatchesInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlayer1MatchesInput = {
    create?: XOR<UserCreateWithoutPlayer1MatchesInput, UserUncheckedCreateWithoutPlayer1MatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer1MatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlayer2MatchesInput = {
    create?: XOR<UserCreateWithoutPlayer2MatchesInput, UserUncheckedCreateWithoutPlayer2MatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer2MatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWonMatchesInput = {
    create?: XOR<UserCreateWithoutWonMatchesInput, UserUncheckedCreateWithoutWonMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWonMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type InviteUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput> | InviteCreateWithoutMatchInput[] | InviteUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMatchInput | InviteCreateOrConnectWithoutMatchInput[]
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput> | MatchFeedbackCreateWithoutMatchInput[] | MatchFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutMatchInput | MatchFeedbackCreateOrConnectWithoutMatchInput[]
    createMany?: MatchFeedbackCreateManyMatchInputEnvelope
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
  }

  export type RatingHistoryUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput> | RatingHistoryCreateWithoutMatchInput[] | RatingHistoryUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutMatchInput | RatingHistoryCreateOrConnectWithoutMatchInput[]
    createMany?: RatingHistoryCreateManyMatchInputEnvelope
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
  }

  export type EnumMatchTypeFieldUpdateOperationsInput = {
    set?: $Enums.MatchType
  }

  export type EnumMatchStateFieldUpdateOperationsInput = {
    set?: $Enums.MatchState
  }

  export type InviteUpdateManyWithoutMatchNestedInput = {
    create?: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput> | InviteCreateWithoutMatchInput[] | InviteUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMatchInput | InviteCreateOrConnectWithoutMatchInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutMatchInput | InviteUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutMatchInput | InviteUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutMatchInput | InviteUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type MatchFeedbackUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput> | MatchFeedbackCreateWithoutMatchInput[] | MatchFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutMatchInput | MatchFeedbackCreateOrConnectWithoutMatchInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutMatchInput | MatchFeedbackUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchFeedbackCreateManyMatchInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutMatchInput | MatchFeedbackUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutMatchInput | MatchFeedbackUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type RatingHistoryUpdateManyWithoutMatchNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput> | RatingHistoryCreateWithoutMatchInput[] | RatingHistoryUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutMatchInput | RatingHistoryCreateOrConnectWithoutMatchInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutMatchInput | RatingHistoryUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: RatingHistoryCreateManyMatchInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutMatchInput | RatingHistoryUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutMatchInput | RatingHistoryUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedMatchesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    upsert?: UserUpsertWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedMatchesInput, UserUpdateWithoutCreatedMatchesInput>, UserUncheckedUpdateWithoutCreatedMatchesInput>
  }

  export type UserUpdateOneWithoutPlayer1MatchesNestedInput = {
    create?: XOR<UserCreateWithoutPlayer1MatchesInput, UserUncheckedCreateWithoutPlayer1MatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer1MatchesInput
    upsert?: UserUpsertWithoutPlayer1MatchesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlayer1MatchesInput, UserUpdateWithoutPlayer1MatchesInput>, UserUncheckedUpdateWithoutPlayer1MatchesInput>
  }

  export type UserUpdateOneWithoutPlayer2MatchesNestedInput = {
    create?: XOR<UserCreateWithoutPlayer2MatchesInput, UserUncheckedCreateWithoutPlayer2MatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer2MatchesInput
    upsert?: UserUpsertWithoutPlayer2MatchesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlayer2MatchesInput, UserUpdateWithoutPlayer2MatchesInput>, UserUncheckedUpdateWithoutPlayer2MatchesInput>
  }

  export type UserUpdateOneWithoutWonMatchesNestedInput = {
    create?: XOR<UserCreateWithoutWonMatchesInput, UserUncheckedCreateWithoutWonMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWonMatchesInput
    upsert?: UserUpsertWithoutWonMatchesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWonMatchesInput, UserUpdateWithoutWonMatchesInput>, UserUncheckedUpdateWithoutWonMatchesInput>
  }

  export type InviteUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput> | InviteCreateWithoutMatchInput[] | InviteUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMatchInput | InviteCreateOrConnectWithoutMatchInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutMatchInput | InviteUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutMatchInput | InviteUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutMatchInput | InviteUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput> | MatchFeedbackCreateWithoutMatchInput[] | MatchFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchFeedbackCreateOrConnectWithoutMatchInput | MatchFeedbackCreateOrConnectWithoutMatchInput[]
    upsert?: MatchFeedbackUpsertWithWhereUniqueWithoutMatchInput | MatchFeedbackUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchFeedbackCreateManyMatchInputEnvelope
    set?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    disconnect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    delete?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    connect?: MatchFeedbackWhereUniqueInput | MatchFeedbackWhereUniqueInput[]
    update?: MatchFeedbackUpdateWithWhereUniqueWithoutMatchInput | MatchFeedbackUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchFeedbackUpdateManyWithWhereWithoutMatchInput | MatchFeedbackUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
  }

  export type RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput> | RatingHistoryCreateWithoutMatchInput[] | RatingHistoryUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: RatingHistoryCreateOrConnectWithoutMatchInput | RatingHistoryCreateOrConnectWithoutMatchInput[]
    upsert?: RatingHistoryUpsertWithWhereUniqueWithoutMatchInput | RatingHistoryUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: RatingHistoryCreateManyMatchInputEnvelope
    set?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    disconnect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    delete?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    connect?: RatingHistoryWhereUniqueInput | RatingHistoryWhereUniqueInput[]
    update?: RatingHistoryUpdateWithWhereUniqueWithoutMatchInput | RatingHistoryUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: RatingHistoryUpdateManyWithWhereWithoutMatchInput | RatingHistoryUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedTrainingsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
  }

  export type InviteCreateNestedManyWithoutTrainingInput = {
    create?: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput> | InviteCreateWithoutTrainingInput[] | InviteUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTrainingInput | InviteCreateOrConnectWithoutTrainingInput[]
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput> | InviteCreateWithoutTrainingInput[] | InviteUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTrainingInput | InviteCreateOrConnectWithoutTrainingInput[]
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type EnumTrainingStateFieldUpdateOperationsInput = {
    set?: $Enums.TrainingState
  }

  export type UserUpdateOneRequiredWithoutCreatedTrainingsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    upsert?: UserUpsertWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTrainingsInput, UserUpdateWithoutCreatedTrainingsInput>, UserUncheckedUpdateWithoutCreatedTrainingsInput>
  }

  export type InviteUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput> | InviteCreateWithoutTrainingInput[] | InviteUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTrainingInput | InviteCreateOrConnectWithoutTrainingInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutTrainingInput | InviteUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutTrainingInput | InviteUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutTrainingInput | InviteUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput> | InviteCreateWithoutTrainingInput[] | InviteUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTrainingInput | InviteCreateOrConnectWithoutTrainingInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutTrainingInput | InviteUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutTrainingInput | InviteUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutTrainingInput | InviteUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedTournamentsInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput> | UserCreateWithoutTournamentsInput[] | UserUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput | UserCreateOrConnectWithoutTournamentsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput> | UserCreateWithoutTournamentsInput[] | UserUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput | UserCreateOrConnectWithoutTournamentsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type EnumTournamentTypeFieldUpdateOperationsInput = {
    set?: $Enums.TournamentType
  }

  export type UserUpdateOneRequiredWithoutCreatedTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    upsert?: UserUpsertWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTournamentsInput, UserUpdateWithoutCreatedTournamentsInput>, UserUncheckedUpdateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput> | UserCreateWithoutTournamentsInput[] | UserUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput | UserCreateOrConnectWithoutTournamentsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTournamentsInput | UserUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTournamentsInput | UserUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTournamentsInput | UserUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput | TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput | TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutTournamentInput | TournamentMatchUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput> | UserCreateWithoutTournamentsInput[] | UserUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput | UserCreateOrConnectWithoutTournamentsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTournamentsInput | UserUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTournamentsInput | UserUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTournamentsInput | UserUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput | TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput | TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutTournamentInput | TournamentMatchUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchCreateconfirmedByInput = {
    set: number[]
  }

  export type TournamentCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchesAInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesAInput, UserUncheckedCreateWithoutTournamentMatchesAInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesAInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchesBInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesBInput, UserUncheckedCreateWithoutTournamentMatchesBInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesBInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchesWonInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesWonInput, UserUncheckedCreateWithoutTournamentMatchesWonInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesWonInput
    connect?: UserWhereUniqueInput
  }

  export type TournamentMatchUpdateconfirmedByInput = {
    set?: number[]
    push?: number | number[]
  }

  export type TournamentUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    upsert?: TournamentUpsertWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutMatchesInput, TournamentUpdateWithoutMatchesInput>, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type UserUpdateOneRequiredWithoutTournamentMatchesANestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesAInput, UserUncheckedCreateWithoutTournamentMatchesAInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesAInput
    upsert?: UserUpsertWithoutTournamentMatchesAInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchesAInput, UserUpdateWithoutTournamentMatchesAInput>, UserUncheckedUpdateWithoutTournamentMatchesAInput>
  }

  export type UserUpdateOneWithoutTournamentMatchesBNestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesBInput, UserUncheckedCreateWithoutTournamentMatchesBInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesBInput
    upsert?: UserUpsertWithoutTournamentMatchesBInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchesBInput, UserUpdateWithoutTournamentMatchesBInput>, UserUncheckedUpdateWithoutTournamentMatchesBInput>
  }

  export type UserUpdateOneWithoutTournamentMatchesWonNestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesWonInput, UserUncheckedCreateWithoutTournamentMatchesWonInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesWonInput
    upsert?: UserUpsertWithoutTournamentMatchesWonInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchesWonInput, UserUpdateWithoutTournamentMatchesWonInput>, UserUncheckedUpdateWithoutTournamentMatchesWonInput>
  }

  export type MatchCreateNestedOneWithoutInvitesInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    connect?: MatchWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutInvitesInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    connect?: TrainingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentInvitesInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedInvitesInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInviteStatusFieldUpdateOperationsInput = {
    set?: $Enums.InviteStatus
  }

  export type MatchUpdateOneWithoutInvitesNestedInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    upsert?: MatchUpsertWithoutInvitesInput
    disconnect?: MatchWhereInput | boolean
    delete?: MatchWhereInput | boolean
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutInvitesInput, MatchUpdateWithoutInvitesInput>, MatchUncheckedUpdateWithoutInvitesInput>
  }

  export type TrainingUpdateOneWithoutInvitesNestedInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    upsert?: TrainingUpsertWithoutInvitesInput
    disconnect?: TrainingWhereInput | boolean
    delete?: TrainingWhereInput | boolean
    connect?: TrainingWhereUniqueInput
    update?: XOR<XOR<TrainingUpdateToOneWithWhereWithoutInvitesInput, TrainingUpdateWithoutInvitesInput>, TrainingUncheckedUpdateWithoutInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutSentInvitesNestedInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    upsert?: UserUpsertWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentInvitesInput, UserUpdateWithoutSentInvitesInput>, UserUncheckedUpdateWithoutSentInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedInvitesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    upsert?: UserUpsertWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedInvitesInput, UserUpdateWithoutReceivedInvitesInput>, UserUncheckedUpdateWithoutReceivedInvitesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type EnumProfileStepFieldUpdateOperationsInput = {
    set?: $Enums.ProfileStep
  }

  export type UserProfileCreatepreferredPlayTimeInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserProfileUpdatepreferredPlayTimeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutCreatedRequestsInput = {
    create?: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutRequestParticipationsInput = {
    create?: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput> | UserCreateWithoutRequestParticipationsInput[] | UserUncheckedCreateWithoutRequestParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRequestParticipationsInput | UserCreateOrConnectWithoutRequestParticipationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RequestResponseCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput> | RequestResponseCreateWithoutRequestInput[] | RequestResponseUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutRequestInput | RequestResponseCreateOrConnectWithoutRequestInput[]
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRequestParticipationsInput = {
    create?: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput> | UserCreateWithoutRequestParticipationsInput[] | UserUncheckedCreateWithoutRequestParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRequestParticipationsInput | UserCreateOrConnectWithoutRequestParticipationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RequestResponseUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput> | RequestResponseCreateWithoutRequestInput[] | RequestResponseUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutRequestInput | RequestResponseCreateOrConnectWithoutRequestInput[]
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedRequestsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRequestsInput
    upsert?: UserUpsertWithoutCreatedRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRequestsInput, UserUpdateWithoutCreatedRequestsInput>, UserUncheckedUpdateWithoutCreatedRequestsInput>
  }

  export type UserUpdateManyWithoutRequestParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput> | UserCreateWithoutRequestParticipationsInput[] | UserUncheckedCreateWithoutRequestParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRequestParticipationsInput | UserCreateOrConnectWithoutRequestParticipationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRequestParticipationsInput | UserUpsertWithWhereUniqueWithoutRequestParticipationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRequestParticipationsInput | UserUpdateWithWhereUniqueWithoutRequestParticipationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRequestParticipationsInput | UserUpdateManyWithWhereWithoutRequestParticipationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RequestResponseUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput> | RequestResponseCreateWithoutRequestInput[] | RequestResponseUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutRequestInput | RequestResponseCreateOrConnectWithoutRequestInput[]
    upsert?: RequestResponseUpsertWithWhereUniqueWithoutRequestInput | RequestResponseUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    set?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    disconnect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    delete?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    update?: RequestResponseUpdateWithWhereUniqueWithoutRequestInput | RequestResponseUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestResponseUpdateManyWithWhereWithoutRequestInput | RequestResponseUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRequestParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput> | UserCreateWithoutRequestParticipationsInput[] | UserUncheckedCreateWithoutRequestParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRequestParticipationsInput | UserCreateOrConnectWithoutRequestParticipationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRequestParticipationsInput | UserUpsertWithWhereUniqueWithoutRequestParticipationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRequestParticipationsInput | UserUpdateWithWhereUniqueWithoutRequestParticipationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRequestParticipationsInput | UserUpdateManyWithWhereWithoutRequestParticipationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RequestResponseUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput> | RequestResponseCreateWithoutRequestInput[] | RequestResponseUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestResponseCreateOrConnectWithoutRequestInput | RequestResponseCreateOrConnectWithoutRequestInput[]
    upsert?: RequestResponseUpsertWithWhereUniqueWithoutRequestInput | RequestResponseUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestResponseCreateManyRequestInputEnvelope
    set?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    disconnect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    delete?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    connect?: RequestResponseWhereUniqueInput | RequestResponseWhereUniqueInput[]
    update?: RequestResponseUpdateWithWhereUniqueWithoutRequestInput | RequestResponseUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestResponseUpdateManyWithWhereWithoutRequestInput | RequestResponseUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
  }

  export type GameRequestCreateNestedOneWithoutResponsesInput = {
    create?: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: GameRequestCreateOrConnectWithoutResponsesInput
    connect?: GameRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestResponsesInput = {
    create?: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type GameRequestUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: GameRequestCreateOrConnectWithoutResponsesInput
    upsert?: GameRequestUpsertWithoutResponsesInput
    connect?: GameRequestWhereUniqueInput
    update?: XOR<XOR<GameRequestUpdateToOneWithWhereWithoutResponsesInput, GameRequestUpdateWithoutResponsesInput>, GameRequestUncheckedUpdateWithoutResponsesInput>
  }

  export type UserUpdateOneRequiredWithoutRequestResponsesNestedInput = {
    create?: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestResponsesInput
    upsert?: UserUpsertWithoutRequestResponsesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestResponsesInput, UserUpdateWithoutRequestResponsesInput>, UserUncheckedUpdateWithoutRequestResponsesInput>
  }

  export type UserCreateNestedOneWithoutCreatedTrainingSessionsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput> | UserCreateWithoutTrainingSessionParticipationsInput[] | UserUncheckedCreateWithoutTrainingSessionParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTrainingSessionParticipationsInput | UserCreateOrConnectWithoutTrainingSessionParticipationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput = {
    create?: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput> | UserCreateWithoutTrainingSessionParticipationsInput[] | UserUncheckedCreateWithoutTrainingSessionParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTrainingSessionParticipationsInput | UserCreateOrConnectWithoutTrainingSessionParticipationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableEnumCourtSurfaceFieldUpdateOperationsInput = {
    set?: $Enums.CourtSurface | null
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type EnumTrainingTypeFieldUpdateOperationsInput = {
    set?: $Enums.TrainingType
  }

  export type UserUpdateOneRequiredWithoutCreatedTrainingSessionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingSessionsInput
    upsert?: UserUpsertWithoutCreatedTrainingSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTrainingSessionsInput, UserUpdateWithoutCreatedTrainingSessionsInput>, UserUncheckedUpdateWithoutCreatedTrainingSessionsInput>
  }

  export type UserUpdateManyWithoutTrainingSessionParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput> | UserCreateWithoutTrainingSessionParticipationsInput[] | UserUncheckedCreateWithoutTrainingSessionParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTrainingSessionParticipationsInput | UserCreateOrConnectWithoutTrainingSessionParticipationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput | UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput | UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput | UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTrainingSessionParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput> | UserCreateWithoutTrainingSessionParticipationsInput[] | UserUncheckedCreateWithoutTrainingSessionParticipationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTrainingSessionParticipationsInput | UserCreateOrConnectWithoutTrainingSessionParticipationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput | UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput | UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput | UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type NestedEnumStoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStoryStatusFilter<$PrismaModel> | $Enums.StoryStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StoryStatus[] | ListEnumStoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.StoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryStatusFilter<$PrismaModel>
    _max?: NestedEnumStoryStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumAuthSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthSource | EnumAuthSourceFieldRefInput<$PrismaModel>
    in?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthSourceFilter<$PrismaModel> | $Enums.AuthSource
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumAuthSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthSource | EnumAuthSourceFieldRefInput<$PrismaModel>
    in?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthSource[] | ListEnumAuthSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthSourceWithAggregatesFilter<$PrismaModel> | $Enums.AuthSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthSourceFilter<$PrismaModel>
    _max?: NestedEnumAuthSourceFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumBallTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BallTransactionType | EnumBallTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTransactionTypeFilter<$PrismaModel> | $Enums.BallTransactionType
  }

  export type NestedEnumBallTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BallTransactionType | EnumBallTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallTransactionType[] | ListEnumBallTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.BallTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBallTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumBallTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumCaseItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseItemType | EnumCaseItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseItemTypeFilter<$PrismaModel> | $Enums.CaseItemType
  }

  export type NestedEnumCaseItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseItemType | EnumCaseItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseItemType[] | ListEnumCaseItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseItemTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseItemTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumMatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeFilter<$PrismaModel> | $Enums.MatchType
  }

  export type NestedEnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.MatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchTypeFilter<$PrismaModel>
    _max?: NestedEnumMatchTypeFilter<$PrismaModel>
  }

  export type NestedEnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type NestedEnumTrainingStateFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingState | EnumTrainingStateFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStateFilter<$PrismaModel> | $Enums.TrainingState
  }

  export type NestedEnumTrainingStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingState | EnumTrainingStateFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingState[] | ListEnumTrainingStateFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingStateWithAggregatesFilter<$PrismaModel> | $Enums.TrainingState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingStateFilter<$PrismaModel>
    _max?: NestedEnumTrainingStateFilter<$PrismaModel>
  }

  export type NestedEnumTournamentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeFilter<$PrismaModel> | $Enums.TournamentType
  }

  export type NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel> | $Enums.TournamentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTournamentTypeFilter<$PrismaModel>
    _max?: NestedEnumTournamentTypeFilter<$PrismaModel>
  }

  export type NestedEnumInviteStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InviteStatus | EnumInviteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInviteStatusFilter<$PrismaModel> | $Enums.InviteStatus
  }

  export type NestedEnumInviteStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InviteStatus | EnumInviteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InviteStatus[] | ListEnumInviteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInviteStatusWithAggregatesFilter<$PrismaModel> | $Enums.InviteStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInviteStatusFilter<$PrismaModel>
    _max?: NestedEnumInviteStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumProfileStepFilter<$PrismaModel = never> = {
    equals?: $Enums.ProfileStep | EnumProfileStepFieldRefInput<$PrismaModel>
    in?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    not?: NestedEnumProfileStepFilter<$PrismaModel> | $Enums.ProfileStep
  }

  export type NestedEnumProfileStepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProfileStep | EnumProfileStepFieldRefInput<$PrismaModel>
    in?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProfileStep[] | ListEnumProfileStepFieldRefInput<$PrismaModel>
    not?: NestedEnumProfileStepWithAggregatesFilter<$PrismaModel> | $Enums.ProfileStep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProfileStepFilter<$PrismaModel>
    _max?: NestedEnumProfileStepFilter<$PrismaModel>
  }

  export type NestedEnumCourtSurfaceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CourtSurface | EnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    in?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel> | $Enums.CourtSurface | null
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumTrainingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeFilter<$PrismaModel> | $Enums.TrainingType
  }

  export type NestedEnumCourtSurfaceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourtSurface | EnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    in?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CourtSurface[] | ListEnumCourtSurfaceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCourtSurfaceNullableWithAggregatesFilter<$PrismaModel> | $Enums.CourtSurface | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel>
    _max?: NestedEnumCourtSurfaceNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel> | $Enums.TrainingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingTypeFilter<$PrismaModel>
    _max?: NestedEnumTrainingTypeFilter<$PrismaModel>
  }

  export type MatchCreateWithoutFeedbacksInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutFeedbacksInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutFeedbacksInput, MatchUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserCreateWithoutGivenFeedbacksInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutGivenFeedbacksInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutGivenFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
  }

  export type UserCreateWithoutReceivedFeedbacksInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutReceivedFeedbacksInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutReceivedFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedFeedbacksInput, UserUncheckedCreateWithoutReceivedFeedbacksInput>
  }

  export type MatchUpsertWithoutFeedbacksInput = {
    update: XOR<MatchUpdateWithoutFeedbacksInput, MatchUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<MatchCreateWithoutFeedbacksInput, MatchUncheckedCreateWithoutFeedbacksInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutFeedbacksInput, MatchUncheckedUpdateWithoutFeedbacksInput>
  }

  export type MatchUpdateWithoutFeedbacksInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type UserUpsertWithoutGivenFeedbacksInput = {
    update: XOR<UserUpdateWithoutGivenFeedbacksInput, UserUncheckedUpdateWithoutGivenFeedbacksInput>
    create: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGivenFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGivenFeedbacksInput, UserUncheckedUpdateWithoutGivenFeedbacksInput>
  }

  export type UserUpdateWithoutGivenFeedbacksInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutGivenFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutReceivedFeedbacksInput = {
    update: XOR<UserUpdateWithoutReceivedFeedbacksInput, UserUncheckedUpdateWithoutReceivedFeedbacksInput>
    create: XOR<UserCreateWithoutReceivedFeedbacksInput, UserUncheckedCreateWithoutReceivedFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedFeedbacksInput, UserUncheckedUpdateWithoutReceivedFeedbacksInput>
  }

  export type UserUpdateWithoutReceivedFeedbacksInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutReceivedMessagesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReceivedMessagesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReceivedMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutReceivedMessagesInput = {
    update: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserUpdateWithoutReceivedMessagesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutStoriesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutStoriesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
  }

  export type UserUpsertWithoutStoriesInput = {
    update: XOR<UserUpdateWithoutStoriesInput, UserUncheckedUpdateWithoutStoriesInput>
    create: XOR<UserCreateWithoutStoriesInput, UserUncheckedCreateWithoutStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStoriesInput, UserUncheckedUpdateWithoutStoriesInput>
  }

  export type UserUpdateWithoutStoriesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type CityCreateWithoutCountryInput = {
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutCityInput
    userSettings?: UserSettingsCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateWithoutCountryInput = {
    id?: number
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCityInput
    userSettings?: UserSettingsUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityCreateOrConnectWithoutCountryInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput>
  }

  export type CityCreateManyCountryInputEnvelope = {
    data: CityCreateManyCountryInput | CityCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCountryInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCountryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCountryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput>
  }

  export type UserCreateManyCountryInputEnvelope = {
    data: UserCreateManyCountryInput | UserCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type CityUpsertWithWhereUniqueWithoutCountryInput = {
    where: CityWhereUniqueInput
    update: XOR<CityUpdateWithoutCountryInput, CityUncheckedUpdateWithoutCountryInput>
    create: XOR<CityCreateWithoutCountryInput, CityUncheckedCreateWithoutCountryInput>
  }

  export type CityUpdateWithWhereUniqueWithoutCountryInput = {
    where: CityWhereUniqueInput
    data: XOR<CityUpdateWithoutCountryInput, CityUncheckedUpdateWithoutCountryInput>
  }

  export type CityUpdateManyWithWhereWithoutCountryInput = {
    where: CityScalarWhereInput
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyWithoutCountryInput>
  }

  export type CityScalarWhereInput = {
    AND?: CityScalarWhereInput | CityScalarWhereInput[]
    OR?: CityScalarWhereInput[]
    NOT?: CityScalarWhereInput | CityScalarWhereInput[]
    id?: IntFilter<"City"> | number
    name?: StringFilter<"City"> | string
    countryCode?: StringFilter<"City"> | string
    population?: IntFilter<"City"> | number
    lat?: FloatFilter<"City"> | number
    lng?: FloatFilter<"City"> | number
    timezone?: StringNullableFilter<"City"> | string | null
    createdAt?: DateTimeFilter<"City"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutCountryInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCountryInput, UserUncheckedUpdateWithoutCountryInput>
    create: XOR<UserCreateWithoutCountryInput, UserUncheckedCreateWithoutCountryInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCountryInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCountryInput, UserUncheckedUpdateWithoutCountryInput>
  }

  export type UserUpdateManyWithWhereWithoutCountryInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCountryInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    telegramId?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    countryCode?: StringNullableFilter<"User"> | string | null
    cityId?: IntNullableFilter<"User"> | number | null
    sportId?: IntNullableFilter<"User"> | number | null
    sportType?: StringNullableFilter<"User"> | string | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    authSource?: EnumAuthSourceFilter<"User"> | $Enums.AuthSource
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    ballsBalance?: IntFilter<"User"> | number
    casesOpened?: IntFilter<"User"> | number
    telegramChatId?: BigIntNullableFilter<"User"> | bigint | number | null
    referralCode?: StringNullableFilter<"User"> | string | null
    referredBy?: IntNullableFilter<"User"> | number | null
  }

  export type CountryCreateWithoutCitiesInput = {
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutCitiesInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutCitiesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
  }

  export type UserCreateWithoutCityInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCityInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput>
  }

  export type UserCreateManyCityInputEnvelope = {
    data: UserCreateManyCityInput | UserCreateManyCityInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutCityInput = {
    language?: string
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
    user: UserCreateNestedOneWithoutSettingsInput
    sport?: SportCreateNestedOneWithoutUserSettingsInput
  }

  export type UserSettingsUncheckedCreateWithoutCityInput = {
    id?: number
    userId: number
    language?: string
    sportId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserSettingsCreateOrConnectWithoutCityInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput>
  }

  export type UserSettingsCreateManyCityInputEnvelope = {
    data: UserSettingsCreateManyCityInput | UserSettingsCreateManyCityInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutCitiesInput = {
    update: XOR<CountryUpdateWithoutCitiesInput, CountryUncheckedUpdateWithoutCitiesInput>
    create: XOR<CountryCreateWithoutCitiesInput, CountryUncheckedCreateWithoutCitiesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutCitiesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutCitiesInput, CountryUncheckedUpdateWithoutCitiesInput>
  }

  export type CountryUpdateWithoutCitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutCitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutCityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCityInput, UserUncheckedUpdateWithoutCityInput>
    create: XOR<UserCreateWithoutCityInput, UserUncheckedCreateWithoutCityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCityInput, UserUncheckedUpdateWithoutCityInput>
  }

  export type UserUpdateManyWithWhereWithoutCityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCityInput>
  }

  export type UserSettingsUpsertWithWhereUniqueWithoutCityInput = {
    where: UserSettingsWhereUniqueInput
    update: XOR<UserSettingsUpdateWithoutCityInput, UserSettingsUncheckedUpdateWithoutCityInput>
    create: XOR<UserSettingsCreateWithoutCityInput, UserSettingsUncheckedCreateWithoutCityInput>
  }

  export type UserSettingsUpdateWithWhereUniqueWithoutCityInput = {
    where: UserSettingsWhereUniqueInput
    data: XOR<UserSettingsUpdateWithoutCityInput, UserSettingsUncheckedUpdateWithoutCityInput>
  }

  export type UserSettingsUpdateManyWithWhereWithoutCityInput = {
    where: UserSettingsScalarWhereInput
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyWithoutCityInput>
  }

  export type UserSettingsScalarWhereInput = {
    AND?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
    OR?: UserSettingsScalarWhereInput[]
    NOT?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
    id?: IntFilter<"UserSettings"> | number
    userId?: IntFilter<"UserSettings"> | number
    language?: StringFilter<"UserSettings"> | string
    cityId?: IntNullableFilter<"UserSettings"> | number | null
    sportId?: IntNullableFilter<"UserSettings"> | number | null
    notificationsEnabled?: BoolFilter<"UserSettings"> | boolean
    notifyTelegram?: BoolFilter<"UserSettings"> | boolean
    notifyEmail?: BoolFilter<"UserSettings"> | boolean
    matchReminderTime?: StringFilter<"UserSettings"> | string
    notifyMatchResults?: BoolFilter<"UserSettings"> | boolean
    notifyTournamentResults?: BoolFilter<"UserSettings"> | boolean
    showProfilePublicly?: BoolFilter<"UserSettings"> | boolean
    showRatingPublicly?: BoolFilter<"UserSettings"> | boolean
    allowMatchInvites?: BoolFilter<"UserSettings"> | boolean
    requireMatchConfirm?: BoolFilter<"UserSettings"> | boolean
    preferredGender?: StringNullableFilter<"UserSettings"> | string | null
    preferredAgeMin?: IntNullableFilter<"UserSettings"> | number | null
    preferredAgeMax?: IntNullableFilter<"UserSettings"> | number | null
    preferredLevelMin?: FloatNullableFilter<"UserSettings"> | number | null
    preferredLevelMax?: FloatNullableFilter<"UserSettings"> | number | null
    theme?: StringFilter<"UserSettings"> | string
    timezone?: StringFilter<"UserSettings"> | string
    telegramChatId?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
  }

  export type UserCreateWithoutSportInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutSportInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutSportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput>
  }

  export type UserCreateManySportInputEnvelope = {
    data: UserCreateManySportInput | UserCreateManySportInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutSportInput = {
    language?: string
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
    user: UserCreateNestedOneWithoutSettingsInput
    city?: CityCreateNestedOneWithoutUserSettingsInput
  }

  export type UserSettingsUncheckedCreateWithoutSportInput = {
    id?: number
    userId: number
    language?: string
    cityId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserSettingsCreateOrConnectWithoutSportInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput>
  }

  export type UserSettingsCreateManySportInputEnvelope = {
    data: UserSettingsCreateManySportInput | UserSettingsCreateManySportInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutSportInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSportInput, UserUncheckedUpdateWithoutSportInput>
    create: XOR<UserCreateWithoutSportInput, UserUncheckedCreateWithoutSportInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSportInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSportInput, UserUncheckedUpdateWithoutSportInput>
  }

  export type UserUpdateManyWithWhereWithoutSportInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSportInput>
  }

  export type UserSettingsUpsertWithWhereUniqueWithoutSportInput = {
    where: UserSettingsWhereUniqueInput
    update: XOR<UserSettingsUpdateWithoutSportInput, UserSettingsUncheckedUpdateWithoutSportInput>
    create: XOR<UserSettingsCreateWithoutSportInput, UserSettingsUncheckedCreateWithoutSportInput>
  }

  export type UserSettingsUpdateWithWhereUniqueWithoutSportInput = {
    where: UserSettingsWhereUniqueInput
    data: XOR<UserSettingsUpdateWithoutSportInput, UserSettingsUncheckedUpdateWithoutSportInput>
  }

  export type UserSettingsUpdateManyWithWhereWithoutSportInput = {
    where: UserSettingsScalarWhereInput
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyWithoutSportInput>
  }

  export type UserCreateWithoutSettingsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type CityCreateWithoutUserSettingsInput = {
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    country: CountryCreateNestedOneWithoutCitiesInput
    users?: UserCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateWithoutUserSettingsInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityCreateOrConnectWithoutUserSettingsInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutUserSettingsInput, CityUncheckedCreateWithoutUserSettingsInput>
  }

  export type SportCreateWithoutUserSettingsInput = {
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateWithoutUserSettingsInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportCreateOrConnectWithoutUserSettingsInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutUserSettingsInput, SportUncheckedCreateWithoutUserSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type CityUpsertWithoutUserSettingsInput = {
    update: XOR<CityUpdateWithoutUserSettingsInput, CityUncheckedUpdateWithoutUserSettingsInput>
    create: XOR<CityCreateWithoutUserSettingsInput, CityUncheckedCreateWithoutUserSettingsInput>
    where?: CityWhereInput
  }

  export type CityUpdateToOneWithWhereWithoutUserSettingsInput = {
    where?: CityWhereInput
    data: XOR<CityUpdateWithoutUserSettingsInput, CityUncheckedUpdateWithoutUserSettingsInput>
  }

  export type CityUpdateWithoutUserSettingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutCitiesNestedInput
    users?: UserUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateWithoutUserSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCityNestedInput
  }

  export type SportUpsertWithoutUserSettingsInput = {
    update: XOR<SportUpdateWithoutUserSettingsInput, SportUncheckedUpdateWithoutUserSettingsInput>
    create: XOR<SportCreateWithoutUserSettingsInput, SportUncheckedCreateWithoutUserSettingsInput>
    where?: SportWhereInput
  }

  export type SportUpdateToOneWithWhereWithoutUserSettingsInput = {
    where?: SportWhereInput
    data: XOR<SportUpdateWithoutUserSettingsInput, SportUncheckedUpdateWithoutUserSettingsInput>
  }

  export type SportUpdateWithoutUserSettingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateWithoutUserSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSportNestedInput
  }

  export type CountryCreateWithoutUsersInput = {
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    cities?: CityCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    code: string
    flagUrl?: string | null
    createdAt?: Date | string
    cities?: CityUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutUsersInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
  }

  export type CityCreateWithoutUsersInput = {
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    country: CountryCreateNestedOneWithoutCitiesInput
    userSettings?: UserSettingsCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    countryCode: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
    userSettings?: UserSettingsUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityCreateOrConnectWithoutUsersInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
  }

  export type SportCreateWithoutUsersInput = {
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    userSettings?: UserSettingsCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    slug: string
    emoji?: string | null
    icon?: string | null
    createdAt?: Date | string
    userSettings?: UserSettingsUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportCreateOrConnectWithoutUsersInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
  }

  export type UserProfileCreateWithoutUserInput = {
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | string[]
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preferredCourt?: string | null
    dominantHand?: string | null
    preferredPlayTime?: UserProfileCreatepreferredPlayTimeInput | string[]
    playsInTournaments?: boolean
    weeklyPlayFrequency?: string | null
    backhandType?: string | null
    preferredSurface?: string | null
    playingStyle?: string | null
    favoriteShot?: string | null
    racket?: string | null
    opponentPreference?: string | null
    initialRatingPoints?: number | null
    selfAssessedLevel?: string | null
    profileStepOneCompleted?: boolean
    profileStepTwoCompleted?: boolean
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type MatchCreateWithoutCreatorInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchCreateManyCreatorInputEnvelope = {
    data: MatchCreateManyCreatorInput | MatchCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutPlayer1Input = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchCreateManyPlayer1InputEnvelope = {
    data: MatchCreateManyPlayer1Input | MatchCreateManyPlayer1Input[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutPlayer2Input = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutPlayer2Input = {
    id?: number
    creatorId: number
    player1Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input>
  }

  export type MatchCreateManyPlayer2InputEnvelope = {
    data: MatchCreateManyPlayer2Input | MatchCreateManyPlayer2Input[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutWinnerInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
  }

  export type MatchUncheckedCreateWithoutWinnerInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutWinnerInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput>
  }

  export type MatchCreateManyWinnerInputEnvelope = {
    data: MatchCreateManyWinnerInput | MatchCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutPlayerAInput = {
    round?: number | null
    group?: string | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    playerB?: UserCreateNestedOneWithoutTournamentMatchesBInput
    winner?: UserCreateNestedOneWithoutTournamentMatchesWonInput
  }

  export type TournamentMatchUncheckedCreateWithoutPlayerAInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutPlayerAInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput>
  }

  export type TournamentMatchCreateManyPlayerAInputEnvelope = {
    data: TournamentMatchCreateManyPlayerAInput | TournamentMatchCreateManyPlayerAInput[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutPlayerBInput = {
    round?: number | null
    group?: string | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    playerA: UserCreateNestedOneWithoutTournamentMatchesAInput
    winner?: UserCreateNestedOneWithoutTournamentMatchesWonInput
  }

  export type TournamentMatchUncheckedCreateWithoutPlayerBInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutPlayerBInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput>
  }

  export type TournamentMatchCreateManyPlayerBInputEnvelope = {
    data: TournamentMatchCreateManyPlayerBInput | TournamentMatchCreateManyPlayerBInput[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutWinnerInput = {
    round?: number | null
    group?: string | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    playerA: UserCreateNestedOneWithoutTournamentMatchesAInput
    playerB?: UserCreateNestedOneWithoutTournamentMatchesBInput
  }

  export type TournamentMatchUncheckedCreateWithoutWinnerInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput>
  }

  export type TournamentMatchCreateManyWinnerInputEnvelope = {
    data: TournamentMatchCreateManyWinnerInput | TournamentMatchCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutCreatorInput = {
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
    invites?: InviteCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingCreateManyCreatorInputEnvelope = {
    data: TrainingCreateManyCreatorInput | TrainingCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type TrainingSessionCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserCreateNestedManyWithoutTrainingSessionParticipationsInput
  }

  export type TrainingSessionUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutTrainingSessionParticipationsInput
  }

  export type TrainingSessionCreateOrConnectWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    create: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingSessionCreateManyCreatorInputEnvelope = {
    data: TrainingSessionCreateManyCreatorInput | TrainingSessionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentCreateManyCreatorInputEnvelope = {
    data: TournamentCreateManyCreatorInput | TournamentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutSenderInput = {
    status: $Enums.InviteStatus
    createdAt?: Date | string
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
  }

  export type InviteUncheckedCreateWithoutSenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutSenderInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteCreateManySenderInputEnvelope = {
    data: InviteCreateManySenderInput | InviteCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutReceiverInput = {
    status: $Enums.InviteStatus
    createdAt?: Date | string
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
  }

  export type InviteUncheckedCreateWithoutReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteCreateManyReceiverInputEnvelope = {
    data: InviteCreateManyReceiverInput | InviteCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutPlayersInput = {
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutPlayersInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type GameRequestCreateWithoutCreatorInput = {
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
  }

  export type GameRequestUncheckedCreateWithoutCreatorInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
  }

  export type GameRequestCreateOrConnectWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput>
  }

  export type GameRequestCreateManyCreatorInputEnvelope = {
    data: GameRequestCreateManyCreatorInput | GameRequestCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type GameRequestCreateWithoutParticipantsInput = {
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    responses?: RequestResponseCreateNestedManyWithoutRequestInput
  }

  export type GameRequestUncheckedCreateWithoutParticipantsInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: RequestResponseUncheckedCreateNestedManyWithoutRequestInput
  }

  export type GameRequestCreateOrConnectWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput>
  }

  export type RequestResponseCreateWithoutUserInput = {
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    request: GameRequestCreateNestedOneWithoutResponsesInput
  }

  export type RequestResponseUncheckedCreateWithoutUserInput = {
    id?: number
    requestId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateOrConnectWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    create: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput>
  }

  export type RequestResponseCreateManyUserInputEnvelope = {
    data: RequestResponseCreateManyUserInput | RequestResponseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrainingSessionCreateWithoutParticipantsInput = {
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTrainingSessionsInput
  }

  export type TrainingSessionUncheckedCreateWithoutParticipantsInput = {
    id?: number
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionCreateOrConnectWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    create: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type CaseOpeningCreateWithoutUserInput = {
    ballsSpent: number
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutOpeningsInput
    winning?: CaseWinningCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningUncheckedCreateWithoutUserInput = {
    id?: number
    caseId: number
    ballsSpent: number
    createdAt?: Date | string
    winning?: CaseWinningUncheckedCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningCreateOrConnectWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    create: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput>
  }

  export type CaseOpeningCreateManyUserInputEnvelope = {
    data: CaseOpeningCreateManyUserInput | CaseOpeningCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CaseWinningCreateWithoutUserInput = {
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    opening: CaseOpeningCreateNestedOneWithoutWinningInput
    case: CaseCreateNestedOneWithoutWinningsInput
    item: CaseItemCreateNestedOneWithoutWinningsInput
  }

  export type CaseWinningUncheckedCreateWithoutUserInput = {
    id?: number
    openingId: number
    caseId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningCreateOrConnectWithoutUserInput = {
    where: CaseWinningWhereUniqueInput
    create: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput>
  }

  export type CaseWinningCreateManyUserInputEnvelope = {
    data: CaseWinningCreateManyUserInput | CaseWinningCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BallTransactionCreateWithoutUserInput = {
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
  }

  export type BallTransactionUncheckedCreateWithoutUserInput = {
    id?: number
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
  }

  export type BallTransactionCreateOrConnectWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    create: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput>
  }

  export type BallTransactionCreateManyUserInputEnvelope = {
    data: BallTransactionCreateManyUserInput | BallTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StoryCreateWithoutUserInput = {
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryUncheckedCreateWithoutUserInput = {
    id?: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StoryCreateOrConnectWithoutUserInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput>
  }

  export type StoryCreateManyUserInputEnvelope = {
    data: StoryCreateManyUserInput | StoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReferralsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReferralsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReferralsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
  }

  export type UserCreateWithoutReferrerInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReferrerInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReferrerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserCreateManyReferrerInputEnvelope = {
    data: UserCreateManyReferrerInput | UserCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type ReferralStatsCreateWithoutUserInput = {
    totalInvited?: number
    activeInvited?: number
    registeredToday?: number
    registeredThisWeek?: number
    registeredThisMonth?: number
    achievementsEarned?: ReferralStatsCreateachievementsEarnedInput | string[]
    bonusPointsEarned?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralStatsUncheckedCreateWithoutUserInput = {
    id?: number
    totalInvited?: number
    activeInvited?: number
    registeredToday?: number
    registeredThisWeek?: number
    registeredThisMonth?: number
    achievementsEarned?: ReferralStatsCreateachievementsEarnedInput | string[]
    bonusPointsEarned?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralStatsCreateOrConnectWithoutUserInput = {
    where: ReferralStatsWhereUniqueInput
    create: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
  }

  export type ReferralActivityCreateWithoutReferrerInput = {
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    invitedUser: UserCreateNestedOneWithoutInvitedActivitiesInput
  }

  export type ReferralActivityUncheckedCreateWithoutReferrerInput = {
    id?: number
    invitedUserId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralActivityCreateOrConnectWithoutReferrerInput = {
    where: ReferralActivityWhereUniqueInput
    create: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput>
  }

  export type ReferralActivityCreateManyReferrerInputEnvelope = {
    data: ReferralActivityCreateManyReferrerInput | ReferralActivityCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type ReferralActivityCreateWithoutInvitedUserInput = {
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferrerActivitiesInput
  }

  export type ReferralActivityUncheckedCreateWithoutInvitedUserInput = {
    id?: number
    referrerId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralActivityCreateOrConnectWithoutInvitedUserInput = {
    where: ReferralActivityWhereUniqueInput
    create: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput>
  }

  export type ReferralActivityCreateManyInvitedUserInputEnvelope = {
    data: ReferralActivityCreateManyInvitedUserInput | ReferralActivityCreateManyInvitedUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: number
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlayerRatingCreateWithoutUserInput = {
    skillRating?: number
    skillPoints?: number
    pointsRating?: number
    wins?: number
    losses?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerRatingUncheckedCreateWithoutUserInput = {
    id?: number
    skillRating?: number
    skillPoints?: number
    pointsRating?: number
    wins?: number
    losses?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerRatingCreateOrConnectWithoutUserInput = {
    where: PlayerRatingWhereUniqueInput
    create: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
  }

  export type RatingHistoryCreateWithoutUserInput = {
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
    match?: MatchCreateNestedOneWithoutRatingHistoryInput
    season?: RatingSeasonCreateNestedOneWithoutHistoryInput
    opponent?: UserCreateNestedOneWithoutOpponentHistoryInput
  }

  export type RatingHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryCreateOrConnectWithoutUserInput = {
    where: RatingHistoryWhereUniqueInput
    create: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput>
  }

  export type RatingHistoryCreateManyUserInputEnvelope = {
    data: RatingHistoryCreateManyUserInput | RatingHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingHistoryCreateWithoutOpponentInput = {
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingHistoryInput
    match?: MatchCreateNestedOneWithoutRatingHistoryInput
    season?: RatingSeasonCreateNestedOneWithoutHistoryInput
  }

  export type RatingHistoryUncheckedCreateWithoutOpponentInput = {
    id?: number
    userId: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryCreateOrConnectWithoutOpponentInput = {
    where: RatingHistoryWhereUniqueInput
    create: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput>
  }

  export type RatingHistoryCreateManyOpponentInputEnvelope = {
    data: RatingHistoryCreateManyOpponentInput | RatingHistoryCreateManyOpponentInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutUserInput = {
    language?: string
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
    city?: CityCreateNestedOneWithoutUserSettingsInput
    sport?: SportCreateNestedOneWithoutUserSettingsInput
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: number
    language?: string
    cityId?: number | null
    sportId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type DirectMessageCreateWithoutSenderInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    recipient: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type DirectMessageUncheckedCreateWithoutSenderInput = {
    id?: number
    recipientId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type DirectMessageCreateOrConnectWithoutSenderInput = {
    where: DirectMessageWhereUniqueInput
    create: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput>
  }

  export type DirectMessageCreateManySenderInputEnvelope = {
    data: DirectMessageCreateManySenderInput | DirectMessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type DirectMessageCreateWithoutRecipientInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type DirectMessageUncheckedCreateWithoutRecipientInput = {
    id?: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type DirectMessageCreateOrConnectWithoutRecipientInput = {
    where: DirectMessageWhereUniqueInput
    create: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput>
  }

  export type DirectMessageCreateManyRecipientInputEnvelope = {
    data: DirectMessageCreateManyRecipientInput | DirectMessageCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type MatchFeedbackCreateWithoutReviewerInput = {
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbacksInput
    reviewee: UserCreateNestedOneWithoutReceivedFeedbacksInput
  }

  export type MatchFeedbackUncheckedCreateWithoutReviewerInput = {
    id?: number
    matchId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackCreateOrConnectWithoutReviewerInput = {
    where: MatchFeedbackWhereUniqueInput
    create: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput>
  }

  export type MatchFeedbackCreateManyReviewerInputEnvelope = {
    data: MatchFeedbackCreateManyReviewerInput | MatchFeedbackCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type MatchFeedbackCreateWithoutRevieweeInput = {
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbacksInput
    reviewer: UserCreateNestedOneWithoutGivenFeedbacksInput
  }

  export type MatchFeedbackUncheckedCreateWithoutRevieweeInput = {
    id?: number
    matchId: number
    reviewerId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackCreateOrConnectWithoutRevieweeInput = {
    where: MatchFeedbackWhereUniqueInput
    create: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput>
  }

  export type MatchFeedbackCreateManyRevieweeInputEnvelope = {
    data: MatchFeedbackCreateManyRevieweeInput | MatchFeedbackCreateManyRevieweeInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutUsersInput = {
    update: XOR<CountryUpdateWithoutUsersInput, CountryUncheckedUpdateWithoutUsersInput>
    create: XOR<CountryCreateWithoutUsersInput, CountryUncheckedCreateWithoutUsersInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutUsersInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutUsersInput, CountryUncheckedUpdateWithoutUsersInput>
  }

  export type CountryUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    flagUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CityUpsertWithoutUsersInput = {
    update: XOR<CityUpdateWithoutUsersInput, CityUncheckedUpdateWithoutUsersInput>
    create: XOR<CityCreateWithoutUsersInput, CityUncheckedCreateWithoutUsersInput>
    where?: CityWhereInput
  }

  export type CityUpdateToOneWithWhereWithoutUsersInput = {
    where?: CityWhereInput
    data: XOR<CityUpdateWithoutUsersInput, CityUncheckedUpdateWithoutUsersInput>
  }

  export type CityUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutCitiesNestedInput
    userSettings?: UserSettingsUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSettings?: UserSettingsUncheckedUpdateManyWithoutCityNestedInput
  }

  export type SportUpsertWithoutUsersInput = {
    update: XOR<SportUpdateWithoutUsersInput, SportUncheckedUpdateWithoutUsersInput>
    create: XOR<SportCreateWithoutUsersInput, SportUncheckedCreateWithoutUsersInput>
    where?: SportWhereInput
  }

  export type SportUpdateToOneWithWhereWithoutUsersInput = {
    where?: SportWhereInput
    data: XOR<SportUpdateWithoutUsersInput, SportUncheckedUpdateWithoutUsersInput>
  }

  export type SportUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSettings?: UserSettingsUpdateManyWithoutSportNestedInput
  }

  export type SportUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSettings?: UserSettingsUncheckedUpdateManyWithoutSportNestedInput
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredCourt?: NullableStringFieldUpdateOperationsInput | string | null
    dominantHand?: NullableStringFieldUpdateOperationsInput | string | null
    preferredPlayTime?: UserProfileUpdatepreferredPlayTimeInput | string[]
    playsInTournaments?: BoolFieldUpdateOperationsInput | boolean
    weeklyPlayFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    backhandType?: NullableStringFieldUpdateOperationsInput | string | null
    preferredSurface?: NullableStringFieldUpdateOperationsInput | string | null
    playingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    favoriteShot?: NullableStringFieldUpdateOperationsInput | string | null
    racket?: NullableStringFieldUpdateOperationsInput | string | null
    opponentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    initialRatingPoints?: NullableIntFieldUpdateOperationsInput | number | null
    selfAssessedLevel?: NullableStringFieldUpdateOperationsInput | string | null
    profileStepOneCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileStepTwoCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUpsertWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
  }

  export type MatchUpdateManyWithWhereWithoutCreatorInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutCreatorInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: IntFilter<"Match"> | number
    creatorId?: IntFilter<"Match"> | number
    player1Id?: IntNullableFilter<"Match"> | number | null
    player2Id?: IntNullableFilter<"Match"> | number | null
    optionalId?: IntNullableFilter<"Match"> | number | null
    winnerId?: IntNullableFilter<"Match"> | number | null
    type?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    score?: StringNullableFilter<"Match"> | string | null
    matchDate?: DateTimeFilter<"Match"> | Date | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    locationName?: StringNullableFilter<"Match"> | string | null
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer1Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutPlayer1Input>
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer2Input, MatchUncheckedUpdateWithoutPlayer2Input>
    create: XOR<MatchCreateWithoutPlayer2Input, MatchUncheckedCreateWithoutPlayer2Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer2Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer2Input, MatchUncheckedUpdateWithoutPlayer2Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer2Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutPlayer2Input>
  }

  export type MatchUpsertWithWhereUniqueWithoutWinnerInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutWinnerInput, MatchUncheckedUpdateWithoutWinnerInput>
    create: XOR<MatchCreateWithoutWinnerInput, MatchUncheckedCreateWithoutWinnerInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutWinnerInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutWinnerInput, MatchUncheckedUpdateWithoutWinnerInput>
  }

  export type MatchUpdateManyWithWhereWithoutWinnerInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutWinnerInput>
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutPlayerAInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutPlayerAInput, TournamentMatchUncheckedUpdateWithoutPlayerAInput>
    create: XOR<TournamentMatchCreateWithoutPlayerAInput, TournamentMatchUncheckedCreateWithoutPlayerAInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutPlayerAInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutPlayerAInput, TournamentMatchUncheckedUpdateWithoutPlayerAInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutPlayerAInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutPlayerAInput>
  }

  export type TournamentMatchScalarWhereInput = {
    AND?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
    OR?: TournamentMatchScalarWhereInput[]
    NOT?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
    id?: IntFilter<"TournamentMatch"> | number
    tournamentId?: IntFilter<"TournamentMatch"> | number
    round?: IntNullableFilter<"TournamentMatch"> | number | null
    group?: StringNullableFilter<"TournamentMatch"> | string | null
    playerAId?: IntFilter<"TournamentMatch"> | number
    playerBId?: IntNullableFilter<"TournamentMatch"> | number | null
    winnerId?: IntNullableFilter<"TournamentMatch"> | number | null
    score?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    court?: StringNullableFilter<"TournamentMatch"> | string | null
    scheduledAt?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    confirmedBy?: IntNullableListFilter<"TournamentMatch">
    isThirdPlaceMatch?: BoolFilter<"TournamentMatch"> | boolean
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentMatch"> | Date | string
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutPlayerBInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutPlayerBInput, TournamentMatchUncheckedUpdateWithoutPlayerBInput>
    create: XOR<TournamentMatchCreateWithoutPlayerBInput, TournamentMatchUncheckedCreateWithoutPlayerBInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutPlayerBInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutPlayerBInput, TournamentMatchUncheckedUpdateWithoutPlayerBInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutPlayerBInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutPlayerBInput>
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutWinnerInput, TournamentMatchUncheckedUpdateWithoutWinnerInput>
    create: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutWinnerInput, TournamentMatchUncheckedUpdateWithoutWinnerInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutWinnerInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutWinnerInput>
  }

  export type TrainingUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
  }

  export type TrainingUpdateManyWithWhereWithoutCreatorInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TrainingScalarWhereInput = {
    AND?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    OR?: TrainingScalarWhereInput[]
    NOT?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    id?: IntFilter<"Training"> | number
    creatorId?: IntFilter<"Training"> | number
    location?: StringFilter<"Training"> | string
    time?: DateTimeFilter<"Training"> | Date | string
    participantLimit?: IntFilter<"Training"> | number
    description?: StringNullableFilter<"Training"> | string | null
    state?: EnumTrainingStateFilter<"Training"> | $Enums.TrainingState
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
  }

  export type TrainingSessionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    update: XOR<TrainingSessionUpdateWithoutCreatorInput, TrainingSessionUncheckedUpdateWithoutCreatorInput>
    create: XOR<TrainingSessionCreateWithoutCreatorInput, TrainingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingSessionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TrainingSessionWhereUniqueInput
    data: XOR<TrainingSessionUpdateWithoutCreatorInput, TrainingSessionUncheckedUpdateWithoutCreatorInput>
  }

  export type TrainingSessionUpdateManyWithWhereWithoutCreatorInput = {
    where: TrainingSessionScalarWhereInput
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TrainingSessionScalarWhereInput = {
    AND?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
    OR?: TrainingSessionScalarWhereInput[]
    NOT?: TrainingSessionScalarWhereInput | TrainingSessionScalarWhereInput[]
    id?: IntFilter<"TrainingSession"> | number
    title?: StringFilter<"TrainingSession"> | string
    description?: StringNullableFilter<"TrainingSession"> | string | null
    creatorId?: IntFilter<"TrainingSession"> | number
    locationName?: StringNullableFilter<"TrainingSession"> | string | null
    courtSurface?: EnumCourtSurfaceNullableFilter<"TrainingSession"> | $Enums.CourtSurface | null
    minLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxLevel?: FloatNullableFilter<"TrainingSession"> | number | null
    maxSlots?: IntFilter<"TrainingSession"> | number
    currentSlots?: IntFilter<"TrainingSession"> | number
    paymentType?: EnumPaymentTypeFilter<"TrainingSession"> | $Enums.PaymentType
    pricePerPerson?: FloatNullableFilter<"TrainingSession"> | number | null
    dateTime?: DateTimeFilter<"TrainingSession"> | Date | string
    endTime?: DateTimeFilter<"TrainingSession"> | Date | string
    status?: EnumTrainingStateFilter<"TrainingSession"> | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFilter<"TrainingSession"> | $Enums.TrainingType
    createdAt?: DateTimeFilter<"TrainingSession"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingSession"> | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
  }

  export type TournamentUpdateManyWithWhereWithoutCreatorInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    OR?: TournamentScalarWhereInput[]
    NOT?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    id?: IntFilter<"Tournament"> | number
    title?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    status?: StringFilter<"Tournament"> | string
    creatorId?: IntFilter<"Tournament"> | number
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    formatDetails?: JsonNullableFilter<"Tournament">
    minPlayers?: IntFilter<"Tournament"> | number
    maxPlayers?: IntFilter<"Tournament"> | number
    currentPlayers?: IntFilter<"Tournament"> | number
    isRanked?: BoolFilter<"Tournament"> | boolean
    locationId?: IntNullableFilter<"Tournament"> | number | null
    locationName?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
  }

  export type InviteUpdateManyWithWhereWithoutSenderInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutSenderInput>
  }

  export type InviteScalarWhereInput = {
    AND?: InviteScalarWhereInput | InviteScalarWhereInput[]
    OR?: InviteScalarWhereInput[]
    NOT?: InviteScalarWhereInput | InviteScalarWhereInput[]
    id?: IntFilter<"Invite"> | number
    matchId?: IntNullableFilter<"Invite"> | number | null
    trainingId?: IntNullableFilter<"Invite"> | number | null
    senderId?: IntFilter<"Invite"> | number
    receiverId?: IntFilter<"Invite"> | number
    status?: EnumInviteStatusFilter<"Invite"> | $Enums.InviteStatus
    createdAt?: DateTimeFilter<"Invite"> | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
  }

  export type InviteUpdateManyWithWhereWithoutReceiverInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutReceiverInput>
  }

  export type TournamentUpsertWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
  }

  export type TournamentUpdateManyWithWhereWithoutPlayersInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutPlayersInput>
  }

  export type GameRequestUpsertWithWhereUniqueWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    update: XOR<GameRequestUpdateWithoutCreatorInput, GameRequestUncheckedUpdateWithoutCreatorInput>
    create: XOR<GameRequestCreateWithoutCreatorInput, GameRequestUncheckedCreateWithoutCreatorInput>
  }

  export type GameRequestUpdateWithWhereUniqueWithoutCreatorInput = {
    where: GameRequestWhereUniqueInput
    data: XOR<GameRequestUpdateWithoutCreatorInput, GameRequestUncheckedUpdateWithoutCreatorInput>
  }

  export type GameRequestUpdateManyWithWhereWithoutCreatorInput = {
    where: GameRequestScalarWhereInput
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyWithoutCreatorInput>
  }

  export type GameRequestScalarWhereInput = {
    AND?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
    OR?: GameRequestScalarWhereInput[]
    NOT?: GameRequestScalarWhereInput | GameRequestScalarWhereInput[]
    id?: IntFilter<"GameRequest"> | number
    type?: StringFilter<"GameRequest"> | string
    title?: StringFilter<"GameRequest"> | string
    description?: StringNullableFilter<"GameRequest"> | string | null
    creatorId?: IntFilter<"GameRequest"> | number
    locationName?: StringNullableFilter<"GameRequest"> | string | null
    maxPlayers?: IntFilter<"GameRequest"> | number
    currentPlayers?: IntFilter<"GameRequest"> | number
    gameMode?: StringFilter<"GameRequest"> | string
    dateTime?: DateTimeFilter<"GameRequest"> | Date | string
    paymentType?: StringFilter<"GameRequest"> | string
    ratingType?: StringFilter<"GameRequest"> | string
    formatInfo?: JsonNullableFilter<"GameRequest">
    status?: StringFilter<"GameRequest"> | string
    createdAt?: DateTimeFilter<"GameRequest"> | Date | string
    updatedAt?: DateTimeFilter<"GameRequest"> | Date | string
  }

  export type GameRequestUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    update: XOR<GameRequestUpdateWithoutParticipantsInput, GameRequestUncheckedUpdateWithoutParticipantsInput>
    create: XOR<GameRequestCreateWithoutParticipantsInput, GameRequestUncheckedCreateWithoutParticipantsInput>
  }

  export type GameRequestUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: GameRequestWhereUniqueInput
    data: XOR<GameRequestUpdateWithoutParticipantsInput, GameRequestUncheckedUpdateWithoutParticipantsInput>
  }

  export type GameRequestUpdateManyWithWhereWithoutParticipantsInput = {
    where: GameRequestScalarWhereInput
    data: XOR<GameRequestUpdateManyMutationInput, GameRequestUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type RequestResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    update: XOR<RequestResponseUpdateWithoutUserInput, RequestResponseUncheckedUpdateWithoutUserInput>
    create: XOR<RequestResponseCreateWithoutUserInput, RequestResponseUncheckedCreateWithoutUserInput>
  }

  export type RequestResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestResponseWhereUniqueInput
    data: XOR<RequestResponseUpdateWithoutUserInput, RequestResponseUncheckedUpdateWithoutUserInput>
  }

  export type RequestResponseUpdateManyWithWhereWithoutUserInput = {
    where: RequestResponseScalarWhereInput
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyWithoutUserInput>
  }

  export type RequestResponseScalarWhereInput = {
    AND?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
    OR?: RequestResponseScalarWhereInput[]
    NOT?: RequestResponseScalarWhereInput | RequestResponseScalarWhereInput[]
    id?: IntFilter<"RequestResponse"> | number
    requestId?: IntFilter<"RequestResponse"> | number
    userId?: IntFilter<"RequestResponse"> | number
    status?: StringFilter<"RequestResponse"> | string
    message?: StringNullableFilter<"RequestResponse"> | string | null
    createdAt?: DateTimeFilter<"RequestResponse"> | Date | string
    updatedAt?: DateTimeFilter<"RequestResponse"> | Date | string
  }

  export type TrainingSessionUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    update: XOR<TrainingSessionUpdateWithoutParticipantsInput, TrainingSessionUncheckedUpdateWithoutParticipantsInput>
    create: XOR<TrainingSessionCreateWithoutParticipantsInput, TrainingSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type TrainingSessionUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: TrainingSessionWhereUniqueInput
    data: XOR<TrainingSessionUpdateWithoutParticipantsInput, TrainingSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type TrainingSessionUpdateManyWithWhereWithoutParticipantsInput = {
    where: TrainingSessionScalarWhereInput
    data: XOR<TrainingSessionUpdateManyMutationInput, TrainingSessionUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type CaseOpeningUpsertWithWhereUniqueWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    update: XOR<CaseOpeningUpdateWithoutUserInput, CaseOpeningUncheckedUpdateWithoutUserInput>
    create: XOR<CaseOpeningCreateWithoutUserInput, CaseOpeningUncheckedCreateWithoutUserInput>
  }

  export type CaseOpeningUpdateWithWhereUniqueWithoutUserInput = {
    where: CaseOpeningWhereUniqueInput
    data: XOR<CaseOpeningUpdateWithoutUserInput, CaseOpeningUncheckedUpdateWithoutUserInput>
  }

  export type CaseOpeningUpdateManyWithWhereWithoutUserInput = {
    where: CaseOpeningScalarWhereInput
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyWithoutUserInput>
  }

  export type CaseOpeningScalarWhereInput = {
    AND?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
    OR?: CaseOpeningScalarWhereInput[]
    NOT?: CaseOpeningScalarWhereInput | CaseOpeningScalarWhereInput[]
    id?: IntFilter<"CaseOpening"> | number
    userId?: IntFilter<"CaseOpening"> | number
    caseId?: IntFilter<"CaseOpening"> | number
    ballsSpent?: IntFilter<"CaseOpening"> | number
    createdAt?: DateTimeFilter<"CaseOpening"> | Date | string
  }

  export type CaseWinningUpsertWithWhereUniqueWithoutUserInput = {
    where: CaseWinningWhereUniqueInput
    update: XOR<CaseWinningUpdateWithoutUserInput, CaseWinningUncheckedUpdateWithoutUserInput>
    create: XOR<CaseWinningCreateWithoutUserInput, CaseWinningUncheckedCreateWithoutUserInput>
  }

  export type CaseWinningUpdateWithWhereUniqueWithoutUserInput = {
    where: CaseWinningWhereUniqueInput
    data: XOR<CaseWinningUpdateWithoutUserInput, CaseWinningUncheckedUpdateWithoutUserInput>
  }

  export type CaseWinningUpdateManyWithWhereWithoutUserInput = {
    where: CaseWinningScalarWhereInput
    data: XOR<CaseWinningUpdateManyMutationInput, CaseWinningUncheckedUpdateManyWithoutUserInput>
  }

  export type CaseWinningScalarWhereInput = {
    AND?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
    OR?: CaseWinningScalarWhereInput[]
    NOT?: CaseWinningScalarWhereInput | CaseWinningScalarWhereInput[]
    id?: IntFilter<"CaseWinning"> | number
    openingId?: IntFilter<"CaseWinning"> | number
    userId?: IntFilter<"CaseWinning"> | number
    caseId?: IntFilter<"CaseWinning"> | number
    itemId?: IntFilter<"CaseWinning"> | number
    isProcessed?: BoolFilter<"CaseWinning"> | boolean
    processedAt?: DateTimeNullableFilter<"CaseWinning"> | Date | string | null
    notes?: StringNullableFilter<"CaseWinning"> | string | null
    createdAt?: DateTimeFilter<"CaseWinning"> | Date | string
    updatedAt?: DateTimeFilter<"CaseWinning"> | Date | string
  }

  export type BallTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    update: XOR<BallTransactionUpdateWithoutUserInput, BallTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<BallTransactionCreateWithoutUserInput, BallTransactionUncheckedCreateWithoutUserInput>
  }

  export type BallTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: BallTransactionWhereUniqueInput
    data: XOR<BallTransactionUpdateWithoutUserInput, BallTransactionUncheckedUpdateWithoutUserInput>
  }

  export type BallTransactionUpdateManyWithWhereWithoutUserInput = {
    where: BallTransactionScalarWhereInput
    data: XOR<BallTransactionUpdateManyMutationInput, BallTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type BallTransactionScalarWhereInput = {
    AND?: BallTransactionScalarWhereInput | BallTransactionScalarWhereInput[]
    OR?: BallTransactionScalarWhereInput[]
    NOT?: BallTransactionScalarWhereInput | BallTransactionScalarWhereInput[]
    id?: IntFilter<"BallTransaction"> | number
    userId?: IntFilter<"BallTransaction"> | number
    amount?: IntFilter<"BallTransaction"> | number
    type?: EnumBallTransactionTypeFilter<"BallTransaction"> | $Enums.BallTransactionType
    reason?: StringFilter<"BallTransaction"> | string
    balanceAfter?: IntFilter<"BallTransaction"> | number
    createdAt?: DateTimeFilter<"BallTransaction"> | Date | string
  }

  export type StoryUpsertWithWhereUniqueWithoutUserInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutUserInput, StoryUncheckedUpdateWithoutUserInput>
    create: XOR<StoryCreateWithoutUserInput, StoryUncheckedCreateWithoutUserInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutUserInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutUserInput, StoryUncheckedUpdateWithoutUserInput>
  }

  export type StoryUpdateManyWithWhereWithoutUserInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutUserInput>
  }

  export type StoryScalarWhereInput = {
    AND?: StoryScalarWhereInput | StoryScalarWhereInput[]
    OR?: StoryScalarWhereInput[]
    NOT?: StoryScalarWhereInput | StoryScalarWhereInput[]
    id?: IntFilter<"Story"> | number
    userId?: IntFilter<"Story"> | number
    telegramFileId?: StringFilter<"Story"> | string
    telegramFilePath?: StringNullableFilter<"Story"> | string | null
    type?: EnumMediaTypeFilter<"Story"> | $Enums.MediaType
    caption?: StringNullableFilter<"Story"> | string | null
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    viewsCount?: IntFilter<"Story"> | number
    likesCount?: IntFilter<"Story"> | number
    expiresAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    updatedAt?: DateTimeFilter<"Story"> | Date | string
  }

  export type UserUpsertWithoutReferralsInput = {
    update: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateWithoutReferralsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
  }

  export type UserUpdateManyWithWhereWithoutReferrerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferrerInput>
  }

  export type ReferralStatsUpsertWithoutUserInput = {
    update: XOR<ReferralStatsUpdateWithoutUserInput, ReferralStatsUncheckedUpdateWithoutUserInput>
    create: XOR<ReferralStatsCreateWithoutUserInput, ReferralStatsUncheckedCreateWithoutUserInput>
    where?: ReferralStatsWhereInput
  }

  export type ReferralStatsUpdateToOneWithWhereWithoutUserInput = {
    where?: ReferralStatsWhereInput
    data: XOR<ReferralStatsUpdateWithoutUserInput, ReferralStatsUncheckedUpdateWithoutUserInput>
  }

  export type ReferralStatsUpdateWithoutUserInput = {
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralStatsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalInvited?: IntFieldUpdateOperationsInput | number
    activeInvited?: IntFieldUpdateOperationsInput | number
    registeredToday?: IntFieldUpdateOperationsInput | number
    registeredThisWeek?: IntFieldUpdateOperationsInput | number
    registeredThisMonth?: IntFieldUpdateOperationsInput | number
    achievementsEarned?: ReferralStatsUpdateachievementsEarnedInput | string[]
    bonusPointsEarned?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityUpsertWithWhereUniqueWithoutReferrerInput = {
    where: ReferralActivityWhereUniqueInput
    update: XOR<ReferralActivityUpdateWithoutReferrerInput, ReferralActivityUncheckedUpdateWithoutReferrerInput>
    create: XOR<ReferralActivityCreateWithoutReferrerInput, ReferralActivityUncheckedCreateWithoutReferrerInput>
  }

  export type ReferralActivityUpdateWithWhereUniqueWithoutReferrerInput = {
    where: ReferralActivityWhereUniqueInput
    data: XOR<ReferralActivityUpdateWithoutReferrerInput, ReferralActivityUncheckedUpdateWithoutReferrerInput>
  }

  export type ReferralActivityUpdateManyWithWhereWithoutReferrerInput = {
    where: ReferralActivityScalarWhereInput
    data: XOR<ReferralActivityUpdateManyMutationInput, ReferralActivityUncheckedUpdateManyWithoutReferrerInput>
  }

  export type ReferralActivityScalarWhereInput = {
    AND?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
    OR?: ReferralActivityScalarWhereInput[]
    NOT?: ReferralActivityScalarWhereInput | ReferralActivityScalarWhereInput[]
    id?: IntFilter<"ReferralActivity"> | number
    referrerId?: IntFilter<"ReferralActivity"> | number
    invitedUserId?: IntFilter<"ReferralActivity"> | number
    registeredAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    firstMatchAt?: DateTimeNullableFilter<"ReferralActivity"> | Date | string | null
    isActive?: BoolFilter<"ReferralActivity"> | boolean
    inviteSource?: StringNullableFilter<"ReferralActivity"> | string | null
    ipAddress?: StringNullableFilter<"ReferralActivity"> | string | null
    createdAt?: DateTimeFilter<"ReferralActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralActivity"> | Date | string
  }

  export type ReferralActivityUpsertWithWhereUniqueWithoutInvitedUserInput = {
    where: ReferralActivityWhereUniqueInput
    update: XOR<ReferralActivityUpdateWithoutInvitedUserInput, ReferralActivityUncheckedUpdateWithoutInvitedUserInput>
    create: XOR<ReferralActivityCreateWithoutInvitedUserInput, ReferralActivityUncheckedCreateWithoutInvitedUserInput>
  }

  export type ReferralActivityUpdateWithWhereUniqueWithoutInvitedUserInput = {
    where: ReferralActivityWhereUniqueInput
    data: XOR<ReferralActivityUpdateWithoutInvitedUserInput, ReferralActivityUncheckedUpdateWithoutInvitedUserInput>
  }

  export type ReferralActivityUpdateManyWithWhereWithoutInvitedUserInput = {
    where: ReferralActivityScalarWhereInput
    data: XOR<ReferralActivityUpdateManyMutationInput, ReferralActivityUncheckedUpdateManyWithoutInvitedUserInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: IntFilter<"UserAchievement"> | number
    userId?: IntFilter<"UserAchievement"> | number
    code?: StringFilter<"UserAchievement"> | string
    awardedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metadata?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
  }

  export type PlayerRatingUpsertWithoutUserInput = {
    update: XOR<PlayerRatingUpdateWithoutUserInput, PlayerRatingUncheckedUpdateWithoutUserInput>
    create: XOR<PlayerRatingCreateWithoutUserInput, PlayerRatingUncheckedCreateWithoutUserInput>
    where?: PlayerRatingWhereInput
  }

  export type PlayerRatingUpdateToOneWithWhereWithoutUserInput = {
    where?: PlayerRatingWhereInput
    data: XOR<PlayerRatingUpdateWithoutUserInput, PlayerRatingUncheckedUpdateWithoutUserInput>
  }

  export type PlayerRatingUpdateWithoutUserInput = {
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerRatingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillRating?: FloatFieldUpdateOperationsInput | number
    skillPoints?: IntFieldUpdateOperationsInput | number
    pointsRating?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingHistoryWhereUniqueInput
    update: XOR<RatingHistoryUpdateWithoutUserInput, RatingHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<RatingHistoryCreateWithoutUserInput, RatingHistoryUncheckedCreateWithoutUserInput>
  }

  export type RatingHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingHistoryWhereUniqueInput
    data: XOR<RatingHistoryUpdateWithoutUserInput, RatingHistoryUncheckedUpdateWithoutUserInput>
  }

  export type RatingHistoryUpdateManyWithWhereWithoutUserInput = {
    where: RatingHistoryScalarWhereInput
    data: XOR<RatingHistoryUpdateManyMutationInput, RatingHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingHistoryScalarWhereInput = {
    AND?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
    OR?: RatingHistoryScalarWhereInput[]
    NOT?: RatingHistoryScalarWhereInput | RatingHistoryScalarWhereInput[]
    id?: IntFilter<"RatingHistory"> | number
    userId?: IntFilter<"RatingHistory"> | number
    matchId?: IntNullableFilter<"RatingHistory"> | number | null
    seasonId?: IntNullableFilter<"RatingHistory"> | number | null
    skillPointsBefore?: IntFilter<"RatingHistory"> | number
    skillPointsAfter?: IntFilter<"RatingHistory"> | number
    pointsRatingBefore?: IntFilter<"RatingHistory"> | number
    pointsRatingAfter?: IntFilter<"RatingHistory"> | number
    isWin?: BoolFilter<"RatingHistory"> | boolean
    opponentId?: IntNullableFilter<"RatingHistory"> | number | null
    opponentSkillPoints?: IntNullableFilter<"RatingHistory"> | number | null
    pointsEarned?: IntFilter<"RatingHistory"> | number
    reason?: StringFilter<"RatingHistory"> | string
    createdAt?: DateTimeFilter<"RatingHistory"> | Date | string
  }

  export type RatingHistoryUpsertWithWhereUniqueWithoutOpponentInput = {
    where: RatingHistoryWhereUniqueInput
    update: XOR<RatingHistoryUpdateWithoutOpponentInput, RatingHistoryUncheckedUpdateWithoutOpponentInput>
    create: XOR<RatingHistoryCreateWithoutOpponentInput, RatingHistoryUncheckedCreateWithoutOpponentInput>
  }

  export type RatingHistoryUpdateWithWhereUniqueWithoutOpponentInput = {
    where: RatingHistoryWhereUniqueInput
    data: XOR<RatingHistoryUpdateWithoutOpponentInput, RatingHistoryUncheckedUpdateWithoutOpponentInput>
  }

  export type RatingHistoryUpdateManyWithWhereWithoutOpponentInput = {
    where: RatingHistoryScalarWhereInput
    data: XOR<RatingHistoryUpdateManyMutationInput, RatingHistoryUncheckedUpdateManyWithoutOpponentInput>
  }

  export type UserSettingsUpsertWithoutUserInput = {
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    where?: UserSettingsWhereInput
  }

  export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserSettingsWhereInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateWithoutUserInput = {
    language?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    city?: CityUpdateOneWithoutUserSettingsNestedInput
    sport?: SportUpdateOneWithoutUserSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DirectMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: DirectMessageWhereUniqueInput
    update: XOR<DirectMessageUpdateWithoutSenderInput, DirectMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<DirectMessageCreateWithoutSenderInput, DirectMessageUncheckedCreateWithoutSenderInput>
  }

  export type DirectMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: DirectMessageWhereUniqueInput
    data: XOR<DirectMessageUpdateWithoutSenderInput, DirectMessageUncheckedUpdateWithoutSenderInput>
  }

  export type DirectMessageUpdateManyWithWhereWithoutSenderInput = {
    where: DirectMessageScalarWhereInput
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type DirectMessageScalarWhereInput = {
    AND?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
    OR?: DirectMessageScalarWhereInput[]
    NOT?: DirectMessageScalarWhereInput | DirectMessageScalarWhereInput[]
    id?: IntFilter<"DirectMessage"> | number
    senderId?: IntFilter<"DirectMessage"> | number
    recipientId?: IntFilter<"DirectMessage"> | number
    message?: StringFilter<"DirectMessage"> | string
    isRead?: BoolFilter<"DirectMessage"> | boolean
    createdAt?: DateTimeFilter<"DirectMessage"> | Date | string
  }

  export type DirectMessageUpsertWithWhereUniqueWithoutRecipientInput = {
    where: DirectMessageWhereUniqueInput
    update: XOR<DirectMessageUpdateWithoutRecipientInput, DirectMessageUncheckedUpdateWithoutRecipientInput>
    create: XOR<DirectMessageCreateWithoutRecipientInput, DirectMessageUncheckedCreateWithoutRecipientInput>
  }

  export type DirectMessageUpdateWithWhereUniqueWithoutRecipientInput = {
    where: DirectMessageWhereUniqueInput
    data: XOR<DirectMessageUpdateWithoutRecipientInput, DirectMessageUncheckedUpdateWithoutRecipientInput>
  }

  export type DirectMessageUpdateManyWithWhereWithoutRecipientInput = {
    where: DirectMessageScalarWhereInput
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyWithoutRecipientInput>
  }

  export type MatchFeedbackUpsertWithWhereUniqueWithoutReviewerInput = {
    where: MatchFeedbackWhereUniqueInput
    update: XOR<MatchFeedbackUpdateWithoutReviewerInput, MatchFeedbackUncheckedUpdateWithoutReviewerInput>
    create: XOR<MatchFeedbackCreateWithoutReviewerInput, MatchFeedbackUncheckedCreateWithoutReviewerInput>
  }

  export type MatchFeedbackUpdateWithWhereUniqueWithoutReviewerInput = {
    where: MatchFeedbackWhereUniqueInput
    data: XOR<MatchFeedbackUpdateWithoutReviewerInput, MatchFeedbackUncheckedUpdateWithoutReviewerInput>
  }

  export type MatchFeedbackUpdateManyWithWhereWithoutReviewerInput = {
    where: MatchFeedbackScalarWhereInput
    data: XOR<MatchFeedbackUpdateManyMutationInput, MatchFeedbackUncheckedUpdateManyWithoutReviewerInput>
  }

  export type MatchFeedbackScalarWhereInput = {
    AND?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
    OR?: MatchFeedbackScalarWhereInput[]
    NOT?: MatchFeedbackScalarWhereInput | MatchFeedbackScalarWhereInput[]
    id?: IntFilter<"MatchFeedback"> | number
    matchId?: IntFilter<"MatchFeedback"> | number
    reviewerId?: IntFilter<"MatchFeedback"> | number
    revieweeId?: IntFilter<"MatchFeedback"> | number
    rating?: IntFilter<"MatchFeedback"> | number
    comment?: StringNullableFilter<"MatchFeedback"> | string | null
    isPublic?: BoolFilter<"MatchFeedback"> | boolean
    createdAt?: DateTimeFilter<"MatchFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"MatchFeedback"> | Date | string
  }

  export type MatchFeedbackUpsertWithWhereUniqueWithoutRevieweeInput = {
    where: MatchFeedbackWhereUniqueInput
    update: XOR<MatchFeedbackUpdateWithoutRevieweeInput, MatchFeedbackUncheckedUpdateWithoutRevieweeInput>
    create: XOR<MatchFeedbackCreateWithoutRevieweeInput, MatchFeedbackUncheckedCreateWithoutRevieweeInput>
  }

  export type MatchFeedbackUpdateWithWhereUniqueWithoutRevieweeInput = {
    where: MatchFeedbackWhereUniqueInput
    data: XOR<MatchFeedbackUpdateWithoutRevieweeInput, MatchFeedbackUncheckedUpdateWithoutRevieweeInput>
  }

  export type MatchFeedbackUpdateManyWithWhereWithoutRevieweeInput = {
    where: MatchFeedbackScalarWhereInput
    data: XOR<MatchFeedbackUpdateManyMutationInput, MatchFeedbackUncheckedUpdateManyWithoutRevieweeInput>
  }

  export type UserCreateWithoutRatingInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutRatingInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type UserUpsertWithoutRatingInput = {
    update: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateWithoutRatingInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutRatingHistoryInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutRatingHistoryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutRatingHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingHistoryInput, UserUncheckedCreateWithoutRatingHistoryInput>
  }

  export type MatchCreateWithoutRatingHistoryInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutRatingHistoryInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutRatingHistoryInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutRatingHistoryInput, MatchUncheckedCreateWithoutRatingHistoryInput>
  }

  export type RatingSeasonCreateWithoutHistoryInput = {
    title: string
    startDate: Date | string
    endDate: Date | string
    isCurrent?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingSeasonUncheckedCreateWithoutHistoryInput = {
    id?: number
    title: string
    startDate: Date | string
    endDate: Date | string
    isCurrent?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingSeasonCreateOrConnectWithoutHistoryInput = {
    where: RatingSeasonWhereUniqueInput
    create: XOR<RatingSeasonCreateWithoutHistoryInput, RatingSeasonUncheckedCreateWithoutHistoryInput>
  }

  export type UserCreateWithoutOpponentHistoryInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutOpponentHistoryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutOpponentHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOpponentHistoryInput, UserUncheckedCreateWithoutOpponentHistoryInput>
  }

  export type UserUpsertWithoutRatingHistoryInput = {
    update: XOR<UserUpdateWithoutRatingHistoryInput, UserUncheckedUpdateWithoutRatingHistoryInput>
    create: XOR<UserCreateWithoutRatingHistoryInput, UserUncheckedCreateWithoutRatingHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingHistoryInput, UserUncheckedUpdateWithoutRatingHistoryInput>
  }

  export type UserUpdateWithoutRatingHistoryInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type MatchUpsertWithoutRatingHistoryInput = {
    update: XOR<MatchUpdateWithoutRatingHistoryInput, MatchUncheckedUpdateWithoutRatingHistoryInput>
    create: XOR<MatchCreateWithoutRatingHistoryInput, MatchUncheckedCreateWithoutRatingHistoryInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutRatingHistoryInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutRatingHistoryInput, MatchUncheckedUpdateWithoutRatingHistoryInput>
  }

  export type MatchUpdateWithoutRatingHistoryInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutRatingHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type RatingSeasonUpsertWithoutHistoryInput = {
    update: XOR<RatingSeasonUpdateWithoutHistoryInput, RatingSeasonUncheckedUpdateWithoutHistoryInput>
    create: XOR<RatingSeasonCreateWithoutHistoryInput, RatingSeasonUncheckedCreateWithoutHistoryInput>
    where?: RatingSeasonWhereInput
  }

  export type RatingSeasonUpdateToOneWithWhereWithoutHistoryInput = {
    where?: RatingSeasonWhereInput
    data: XOR<RatingSeasonUpdateWithoutHistoryInput, RatingSeasonUncheckedUpdateWithoutHistoryInput>
  }

  export type RatingSeasonUpdateWithoutHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingSeasonUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutOpponentHistoryInput = {
    update: XOR<UserUpdateWithoutOpponentHistoryInput, UserUncheckedUpdateWithoutOpponentHistoryInput>
    create: XOR<UserCreateWithoutOpponentHistoryInput, UserUncheckedCreateWithoutOpponentHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOpponentHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOpponentHistoryInput, UserUncheckedUpdateWithoutOpponentHistoryInput>
  }

  export type UserUpdateWithoutOpponentHistoryInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutOpponentHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type RatingHistoryCreateWithoutSeasonInput = {
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingHistoryInput
    match?: MatchCreateNestedOneWithoutRatingHistoryInput
    opponent?: UserCreateNestedOneWithoutOpponentHistoryInput
  }

  export type RatingHistoryUncheckedCreateWithoutSeasonInput = {
    id?: number
    userId: number
    matchId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryCreateOrConnectWithoutSeasonInput = {
    where: RatingHistoryWhereUniqueInput
    create: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput>
  }

  export type RatingHistoryCreateManySeasonInputEnvelope = {
    data: RatingHistoryCreateManySeasonInput | RatingHistoryCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type RatingHistoryUpsertWithWhereUniqueWithoutSeasonInput = {
    where: RatingHistoryWhereUniqueInput
    update: XOR<RatingHistoryUpdateWithoutSeasonInput, RatingHistoryUncheckedUpdateWithoutSeasonInput>
    create: XOR<RatingHistoryCreateWithoutSeasonInput, RatingHistoryUncheckedCreateWithoutSeasonInput>
  }

  export type RatingHistoryUpdateWithWhereUniqueWithoutSeasonInput = {
    where: RatingHistoryWhereUniqueInput
    data: XOR<RatingHistoryUpdateWithoutSeasonInput, RatingHistoryUncheckedUpdateWithoutSeasonInput>
  }

  export type RatingHistoryUpdateManyWithWhereWithoutSeasonInput = {
    where: RatingHistoryScalarWhereInput
    data: XOR<RatingHistoryUpdateManyMutationInput, RatingHistoryUncheckedUpdateManyWithoutSeasonInput>
  }

  export type UserCreateWithoutAchievementsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutAchievementsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
  }

  export type UserUpsertWithoutAchievementsInput = {
    update: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateWithoutAchievementsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutReferralStatsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReferralStatsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReferralStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralStatsInput, UserUncheckedCreateWithoutReferralStatsInput>
  }

  export type UserUpsertWithoutReferralStatsInput = {
    update: XOR<UserUpdateWithoutReferralStatsInput, UserUncheckedUpdateWithoutReferralStatsInput>
    create: XOR<UserCreateWithoutReferralStatsInput, UserUncheckedCreateWithoutReferralStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralStatsInput, UserUncheckedUpdateWithoutReferralStatsInput>
  }

  export type UserUpdateWithoutReferralStatsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutReferrerActivitiesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReferrerActivitiesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReferrerActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferrerActivitiesInput, UserUncheckedCreateWithoutReferrerActivitiesInput>
  }

  export type UserCreateWithoutInvitedActivitiesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutInvitedActivitiesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutInvitedActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitedActivitiesInput, UserUncheckedCreateWithoutInvitedActivitiesInput>
  }

  export type UserUpsertWithoutReferrerActivitiesInput = {
    update: XOR<UserUpdateWithoutReferrerActivitiesInput, UserUncheckedUpdateWithoutReferrerActivitiesInput>
    create: XOR<UserCreateWithoutReferrerActivitiesInput, UserUncheckedCreateWithoutReferrerActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferrerActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferrerActivitiesInput, UserUncheckedUpdateWithoutReferrerActivitiesInput>
  }

  export type UserUpdateWithoutReferrerActivitiesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReferrerActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutInvitedActivitiesInput = {
    update: XOR<UserUpdateWithoutInvitedActivitiesInput, UserUncheckedUpdateWithoutInvitedActivitiesInput>
    create: XOR<UserCreateWithoutInvitedActivitiesInput, UserUncheckedCreateWithoutInvitedActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitedActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitedActivitiesInput, UserUncheckedUpdateWithoutInvitedActivitiesInput>
  }

  export type UserUpdateWithoutInvitedActivitiesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitedActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutBallTransactionsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutBallTransactionsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutBallTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
  }

  export type UserUpsertWithoutBallTransactionsInput = {
    update: XOR<UserUpdateWithoutBallTransactionsInput, UserUncheckedUpdateWithoutBallTransactionsInput>
    create: XOR<UserCreateWithoutBallTransactionsInput, UserUncheckedCreateWithoutBallTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBallTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBallTransactionsInput, UserUncheckedUpdateWithoutBallTransactionsInput>
  }

  export type UserUpdateWithoutBallTransactionsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutBallTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type CaseItemCreateWithoutCaseInput = {
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    winnings?: CaseWinningCreateNestedManyWithoutItemInput
  }

  export type CaseItemUncheckedCreateWithoutCaseInput = {
    id?: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    winnings?: CaseWinningUncheckedCreateNestedManyWithoutItemInput
  }

  export type CaseItemCreateOrConnectWithoutCaseInput = {
    where: CaseItemWhereUniqueInput
    create: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput>
  }

  export type CaseItemCreateManyCaseInputEnvelope = {
    data: CaseItemCreateManyCaseInput | CaseItemCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseOpeningCreateWithoutCaseInput = {
    ballsSpent: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCaseOpeningsInput
    winning?: CaseWinningCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningUncheckedCreateWithoutCaseInput = {
    id?: number
    userId: number
    ballsSpent: number
    createdAt?: Date | string
    winning?: CaseWinningUncheckedCreateNestedOneWithoutOpeningInput
  }

  export type CaseOpeningCreateOrConnectWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    create: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput>
  }

  export type CaseOpeningCreateManyCaseInputEnvelope = {
    data: CaseOpeningCreateManyCaseInput | CaseOpeningCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseWinningCreateWithoutCaseInput = {
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    opening: CaseOpeningCreateNestedOneWithoutWinningInput
    user: UserCreateNestedOneWithoutCaseWinningsInput
    item: CaseItemCreateNestedOneWithoutWinningsInput
  }

  export type CaseWinningUncheckedCreateWithoutCaseInput = {
    id?: number
    openingId: number
    userId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningCreateOrConnectWithoutCaseInput = {
    where: CaseWinningWhereUniqueInput
    create: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput>
  }

  export type CaseWinningCreateManyCaseInputEnvelope = {
    data: CaseWinningCreateManyCaseInput | CaseWinningCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseItemUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseItemWhereUniqueInput
    update: XOR<CaseItemUpdateWithoutCaseInput, CaseItemUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseItemCreateWithoutCaseInput, CaseItemUncheckedCreateWithoutCaseInput>
  }

  export type CaseItemUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseItemWhereUniqueInput
    data: XOR<CaseItemUpdateWithoutCaseInput, CaseItemUncheckedUpdateWithoutCaseInput>
  }

  export type CaseItemUpdateManyWithWhereWithoutCaseInput = {
    where: CaseItemScalarWhereInput
    data: XOR<CaseItemUpdateManyMutationInput, CaseItemUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseItemScalarWhereInput = {
    AND?: CaseItemScalarWhereInput | CaseItemScalarWhereInput[]
    OR?: CaseItemScalarWhereInput[]
    NOT?: CaseItemScalarWhereInput | CaseItemScalarWhereInput[]
    id?: IntFilter<"CaseItem"> | number
    caseId?: IntFilter<"CaseItem"> | number
    name?: StringFilter<"CaseItem"> | string
    type?: EnumCaseItemTypeFilter<"CaseItem"> | $Enums.CaseItemType
    payload?: JsonFilter<"CaseItem">
    dropChance?: FloatFilter<"CaseItem"> | number
    imageUrl?: StringNullableFilter<"CaseItem"> | string | null
    isActive?: BoolFilter<"CaseItem"> | boolean
    createdAt?: DateTimeFilter<"CaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"CaseItem"> | Date | string
  }

  export type CaseOpeningUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    update: XOR<CaseOpeningUpdateWithoutCaseInput, CaseOpeningUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseOpeningCreateWithoutCaseInput, CaseOpeningUncheckedCreateWithoutCaseInput>
  }

  export type CaseOpeningUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseOpeningWhereUniqueInput
    data: XOR<CaseOpeningUpdateWithoutCaseInput, CaseOpeningUncheckedUpdateWithoutCaseInput>
  }

  export type CaseOpeningUpdateManyWithWhereWithoutCaseInput = {
    where: CaseOpeningScalarWhereInput
    data: XOR<CaseOpeningUpdateManyMutationInput, CaseOpeningUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseWinningUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseWinningWhereUniqueInput
    update: XOR<CaseWinningUpdateWithoutCaseInput, CaseWinningUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseWinningCreateWithoutCaseInput, CaseWinningUncheckedCreateWithoutCaseInput>
  }

  export type CaseWinningUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseWinningWhereUniqueInput
    data: XOR<CaseWinningUpdateWithoutCaseInput, CaseWinningUncheckedUpdateWithoutCaseInput>
  }

  export type CaseWinningUpdateManyWithWhereWithoutCaseInput = {
    where: CaseWinningScalarWhereInput
    data: XOR<CaseWinningUpdateManyMutationInput, CaseWinningUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseCreateWithoutItemsInput = {
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    openings?: CaseOpeningCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    openings?: CaseOpeningUncheckedCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutItemsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutItemsInput, CaseUncheckedCreateWithoutItemsInput>
  }

  export type CaseWinningCreateWithoutItemInput = {
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    opening: CaseOpeningCreateNestedOneWithoutWinningInput
    user: UserCreateNestedOneWithoutCaseWinningsInput
    case: CaseCreateNestedOneWithoutWinningsInput
  }

  export type CaseWinningUncheckedCreateWithoutItemInput = {
    id?: number
    openingId: number
    userId: number
    caseId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningCreateOrConnectWithoutItemInput = {
    where: CaseWinningWhereUniqueInput
    create: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput>
  }

  export type CaseWinningCreateManyItemInputEnvelope = {
    data: CaseWinningCreateManyItemInput | CaseWinningCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type CaseUpsertWithoutItemsInput = {
    update: XOR<CaseUpdateWithoutItemsInput, CaseUncheckedUpdateWithoutItemsInput>
    create: XOR<CaseCreateWithoutItemsInput, CaseUncheckedCreateWithoutItemsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutItemsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutItemsInput, CaseUncheckedUpdateWithoutItemsInput>
  }

  export type CaseUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openings?: CaseOpeningUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openings?: CaseOpeningUncheckedUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseWinningUpsertWithWhereUniqueWithoutItemInput = {
    where: CaseWinningWhereUniqueInput
    update: XOR<CaseWinningUpdateWithoutItemInput, CaseWinningUncheckedUpdateWithoutItemInput>
    create: XOR<CaseWinningCreateWithoutItemInput, CaseWinningUncheckedCreateWithoutItemInput>
  }

  export type CaseWinningUpdateWithWhereUniqueWithoutItemInput = {
    where: CaseWinningWhereUniqueInput
    data: XOR<CaseWinningUpdateWithoutItemInput, CaseWinningUncheckedUpdateWithoutItemInput>
  }

  export type CaseWinningUpdateManyWithWhereWithoutItemInput = {
    where: CaseWinningScalarWhereInput
    data: XOR<CaseWinningUpdateManyMutationInput, CaseWinningUncheckedUpdateManyWithoutItemInput>
  }

  export type UserCreateWithoutCaseOpeningsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCaseOpeningsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCaseOpeningsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
  }

  export type CaseCreateWithoutOpeningsInput = {
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutOpeningsInput = {
    id?: number
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemUncheckedCreateNestedManyWithoutCaseInput
    winnings?: CaseWinningUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutOpeningsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
  }

  export type CaseWinningCreateWithoutOpeningInput = {
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCaseWinningsInput
    case: CaseCreateNestedOneWithoutWinningsInput
    item: CaseItemCreateNestedOneWithoutWinningsInput
  }

  export type CaseWinningUncheckedCreateWithoutOpeningInput = {
    id?: number
    userId: number
    caseId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningCreateOrConnectWithoutOpeningInput = {
    where: CaseWinningWhereUniqueInput
    create: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
  }

  export type UserUpsertWithoutCaseOpeningsInput = {
    update: XOR<UserUpdateWithoutCaseOpeningsInput, UserUncheckedUpdateWithoutCaseOpeningsInput>
    create: XOR<UserCreateWithoutCaseOpeningsInput, UserUncheckedCreateWithoutCaseOpeningsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCaseOpeningsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCaseOpeningsInput, UserUncheckedUpdateWithoutCaseOpeningsInput>
  }

  export type UserUpdateWithoutCaseOpeningsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCaseOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type CaseUpsertWithoutOpeningsInput = {
    update: XOR<CaseUpdateWithoutOpeningsInput, CaseUncheckedUpdateWithoutOpeningsInput>
    create: XOR<CaseCreateWithoutOpeningsInput, CaseUncheckedCreateWithoutOpeningsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutOpeningsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutOpeningsInput, CaseUncheckedUpdateWithoutOpeningsInput>
  }

  export type CaseUpdateWithoutOpeningsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutOpeningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUncheckedUpdateManyWithoutCaseNestedInput
    winnings?: CaseWinningUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseWinningUpsertWithoutOpeningInput = {
    update: XOR<CaseWinningUpdateWithoutOpeningInput, CaseWinningUncheckedUpdateWithoutOpeningInput>
    create: XOR<CaseWinningCreateWithoutOpeningInput, CaseWinningUncheckedCreateWithoutOpeningInput>
    where?: CaseWinningWhereInput
  }

  export type CaseWinningUpdateToOneWithWhereWithoutOpeningInput = {
    where?: CaseWinningWhereInput
    data: XOR<CaseWinningUpdateWithoutOpeningInput, CaseWinningUncheckedUpdateWithoutOpeningInput>
  }

  export type CaseWinningUpdateWithoutOpeningInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCaseWinningsNestedInput
    case?: CaseUpdateOneRequiredWithoutWinningsNestedInput
    item?: CaseItemUpdateOneRequiredWithoutWinningsNestedInput
  }

  export type CaseWinningUncheckedUpdateWithoutOpeningInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningCreateWithoutWinningInput = {
    ballsSpent: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCaseOpeningsInput
    case: CaseCreateNestedOneWithoutOpeningsInput
  }

  export type CaseOpeningUncheckedCreateWithoutWinningInput = {
    id?: number
    userId: number
    caseId: number
    ballsSpent: number
    createdAt?: Date | string
  }

  export type CaseOpeningCreateOrConnectWithoutWinningInput = {
    where: CaseOpeningWhereUniqueInput
    create: XOR<CaseOpeningCreateWithoutWinningInput, CaseOpeningUncheckedCreateWithoutWinningInput>
  }

  export type UserCreateWithoutCaseWinningsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCaseWinningsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCaseWinningsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCaseWinningsInput, UserUncheckedCreateWithoutCaseWinningsInput>
  }

  export type CaseCreateWithoutWinningsInput = {
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemCreateNestedManyWithoutCaseInput
    openings?: CaseOpeningCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutWinningsInput = {
    id?: number
    name: string
    description: string
    priceBalls: number
    image?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CaseItemUncheckedCreateNestedManyWithoutCaseInput
    openings?: CaseOpeningUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutWinningsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutWinningsInput, CaseUncheckedCreateWithoutWinningsInput>
  }

  export type CaseItemCreateWithoutWinningsInput = {
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutItemsInput
  }

  export type CaseItemUncheckedCreateWithoutWinningsInput = {
    id?: number
    caseId: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseItemCreateOrConnectWithoutWinningsInput = {
    where: CaseItemWhereUniqueInput
    create: XOR<CaseItemCreateWithoutWinningsInput, CaseItemUncheckedCreateWithoutWinningsInput>
  }

  export type CaseOpeningUpsertWithoutWinningInput = {
    update: XOR<CaseOpeningUpdateWithoutWinningInput, CaseOpeningUncheckedUpdateWithoutWinningInput>
    create: XOR<CaseOpeningCreateWithoutWinningInput, CaseOpeningUncheckedCreateWithoutWinningInput>
    where?: CaseOpeningWhereInput
  }

  export type CaseOpeningUpdateToOneWithWhereWithoutWinningInput = {
    where?: CaseOpeningWhereInput
    data: XOR<CaseOpeningUpdateWithoutWinningInput, CaseOpeningUncheckedUpdateWithoutWinningInput>
  }

  export type CaseOpeningUpdateWithoutWinningInput = {
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCaseOpeningsNestedInput
    case?: CaseUpdateOneRequiredWithoutOpeningsNestedInput
  }

  export type CaseOpeningUncheckedUpdateWithoutWinningInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCaseWinningsInput = {
    update: XOR<UserUpdateWithoutCaseWinningsInput, UserUncheckedUpdateWithoutCaseWinningsInput>
    create: XOR<UserCreateWithoutCaseWinningsInput, UserUncheckedCreateWithoutCaseWinningsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCaseWinningsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCaseWinningsInput, UserUncheckedUpdateWithoutCaseWinningsInput>
  }

  export type UserUpdateWithoutCaseWinningsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCaseWinningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type CaseUpsertWithoutWinningsInput = {
    update: XOR<CaseUpdateWithoutWinningsInput, CaseUncheckedUpdateWithoutWinningsInput>
    create: XOR<CaseCreateWithoutWinningsInput, CaseUncheckedCreateWithoutWinningsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutWinningsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutWinningsInput, CaseUncheckedUpdateWithoutWinningsInput>
  }

  export type CaseUpdateWithoutWinningsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUpdateManyWithoutCaseNestedInput
    openings?: CaseOpeningUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutWinningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceBalls?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CaseItemUncheckedUpdateManyWithoutCaseNestedInput
    openings?: CaseOpeningUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseItemUpsertWithoutWinningsInput = {
    update: XOR<CaseItemUpdateWithoutWinningsInput, CaseItemUncheckedUpdateWithoutWinningsInput>
    create: XOR<CaseItemCreateWithoutWinningsInput, CaseItemUncheckedCreateWithoutWinningsInput>
    where?: CaseItemWhereInput
  }

  export type CaseItemUpdateToOneWithWhereWithoutWinningsInput = {
    where?: CaseItemWhereInput
    data: XOR<CaseItemUpdateWithoutWinningsInput, CaseItemUncheckedUpdateWithoutWinningsInput>
  }

  export type CaseItemUpdateWithoutWinningsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutItemsNestedInput
  }

  export type CaseItemUncheckedUpdateWithoutWinningsInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateWithoutMatchInput = {
    status: $Enums.InviteStatus
    createdAt?: Date | string
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
  }

  export type InviteUncheckedCreateWithoutMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutMatchInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteCreateManyMatchInputEnvelope = {
    data: InviteCreateManyMatchInput | InviteCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type MatchFeedbackCreateWithoutMatchInput = {
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewer: UserCreateNestedOneWithoutGivenFeedbacksInput
    reviewee: UserCreateNestedOneWithoutReceivedFeedbacksInput
  }

  export type MatchFeedbackUncheckedCreateWithoutMatchInput = {
    id?: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackCreateOrConnectWithoutMatchInput = {
    where: MatchFeedbackWhereUniqueInput
    create: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput>
  }

  export type MatchFeedbackCreateManyMatchInputEnvelope = {
    data: MatchFeedbackCreateManyMatchInput | MatchFeedbackCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type RatingHistoryCreateWithoutMatchInput = {
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingHistoryInput
    season?: RatingSeasonCreateNestedOneWithoutHistoryInput
    opponent?: UserCreateNestedOneWithoutOpponentHistoryInput
  }

  export type RatingHistoryUncheckedCreateWithoutMatchInput = {
    id?: number
    userId: number
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryCreateOrConnectWithoutMatchInput = {
    where: RatingHistoryWhereUniqueInput
    create: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput>
  }

  export type RatingHistoryCreateManyMatchInputEnvelope = {
    data: RatingHistoryCreateManyMatchInput | RatingHistoryCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCreatedMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCreatedMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
  }

  export type UserCreateWithoutPlayer1MatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutPlayer1MatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutPlayer1MatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayer1MatchesInput, UserUncheckedCreateWithoutPlayer1MatchesInput>
  }

  export type UserCreateWithoutPlayer2MatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutPlayer2MatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutPlayer2MatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayer2MatchesInput, UserUncheckedCreateWithoutPlayer2MatchesInput>
  }

  export type UserCreateWithoutWonMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutWonMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutWonMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWonMatchesInput, UserUncheckedCreateWithoutWonMatchesInput>
  }

  export type InviteUpsertWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
  }

  export type InviteUpdateManyWithWhereWithoutMatchInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutMatchInput>
  }

  export type MatchFeedbackUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchFeedbackWhereUniqueInput
    update: XOR<MatchFeedbackUpdateWithoutMatchInput, MatchFeedbackUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchFeedbackCreateWithoutMatchInput, MatchFeedbackUncheckedCreateWithoutMatchInput>
  }

  export type MatchFeedbackUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchFeedbackWhereUniqueInput
    data: XOR<MatchFeedbackUpdateWithoutMatchInput, MatchFeedbackUncheckedUpdateWithoutMatchInput>
  }

  export type MatchFeedbackUpdateManyWithWhereWithoutMatchInput = {
    where: MatchFeedbackScalarWhereInput
    data: XOR<MatchFeedbackUpdateManyMutationInput, MatchFeedbackUncheckedUpdateManyWithoutMatchInput>
  }

  export type RatingHistoryUpsertWithWhereUniqueWithoutMatchInput = {
    where: RatingHistoryWhereUniqueInput
    update: XOR<RatingHistoryUpdateWithoutMatchInput, RatingHistoryUncheckedUpdateWithoutMatchInput>
    create: XOR<RatingHistoryCreateWithoutMatchInput, RatingHistoryUncheckedCreateWithoutMatchInput>
  }

  export type RatingHistoryUpdateWithWhereUniqueWithoutMatchInput = {
    where: RatingHistoryWhereUniqueInput
    data: XOR<RatingHistoryUpdateWithoutMatchInput, RatingHistoryUncheckedUpdateWithoutMatchInput>
  }

  export type RatingHistoryUpdateManyWithWhereWithoutMatchInput = {
    where: RatingHistoryScalarWhereInput
    data: XOR<RatingHistoryUpdateManyMutationInput, RatingHistoryUncheckedUpdateManyWithoutMatchInput>
  }

  export type UserUpsertWithoutCreatedMatchesInput = {
    update: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedMatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
  }

  export type UserUpdateWithoutCreatedMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutPlayer1MatchesInput = {
    update: XOR<UserUpdateWithoutPlayer1MatchesInput, UserUncheckedUpdateWithoutPlayer1MatchesInput>
    create: XOR<UserCreateWithoutPlayer1MatchesInput, UserUncheckedCreateWithoutPlayer1MatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlayer1MatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlayer1MatchesInput, UserUncheckedUpdateWithoutPlayer1MatchesInput>
  }

  export type UserUpdateWithoutPlayer1MatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayer1MatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutPlayer2MatchesInput = {
    update: XOR<UserUpdateWithoutPlayer2MatchesInput, UserUncheckedUpdateWithoutPlayer2MatchesInput>
    create: XOR<UserCreateWithoutPlayer2MatchesInput, UserUncheckedCreateWithoutPlayer2MatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlayer2MatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlayer2MatchesInput, UserUncheckedUpdateWithoutPlayer2MatchesInput>
  }

  export type UserUpdateWithoutPlayer2MatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayer2MatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutWonMatchesInput = {
    update: XOR<UserUpdateWithoutWonMatchesInput, UserUncheckedUpdateWithoutWonMatchesInput>
    create: XOR<UserCreateWithoutWonMatchesInput, UserUncheckedCreateWithoutWonMatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWonMatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWonMatchesInput, UserUncheckedUpdateWithoutWonMatchesInput>
  }

  export type UserUpdateWithoutWonMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutWonMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutCreatedTrainingsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCreatedTrainingsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCreatedTrainingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
  }

  export type InviteCreateWithoutTrainingInput = {
    status: $Enums.InviteStatus
    createdAt?: Date | string
    match?: MatchCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
  }

  export type InviteUncheckedCreateWithoutTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteCreateManyTrainingInputEnvelope = {
    data: InviteCreateManyTrainingInput | InviteCreateManyTrainingInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTrainingsInput = {
    update: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTrainingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
  }

  export type UserUpdateWithoutCreatedTrainingsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTrainingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type InviteUpsertWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
  }

  export type InviteUpdateManyWithWhereWithoutTrainingInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutTrainingInput>
  }

  export type UserCreateWithoutCreatedTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCreatedTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCreatedTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
  }

  export type UserCreateWithoutTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type TournamentMatchCreateWithoutTournamentInput = {
    round?: number | null
    group?: string | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    playerA: UserCreateNestedOneWithoutTournamentMatchesAInput
    playerB?: UserCreateNestedOneWithoutTournamentMatchesBInput
    winner?: UserCreateNestedOneWithoutTournamentMatchesWonInput
  }

  export type TournamentMatchUncheckedCreateWithoutTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchCreateManyTournamentInputEnvelope = {
    data: TournamentMatchCreateManyTournamentInput | TournamentMatchCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTournamentsInput = {
    update: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTournamentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateWithoutCreatedTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
  }

  export type UserUpdateManyWithWhereWithoutTournamentsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTournamentsInput>
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TournamentCreateWithoutMatchesInput = {
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    players?: UserCreateNestedManyWithoutTournamentsInput
  }

  export type TournamentUncheckedCreateWithoutMatchesInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
  }

  export type TournamentCreateOrConnectWithoutMatchesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type UserCreateWithoutTournamentMatchesAInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchesAInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchesAInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchesAInput, UserUncheckedCreateWithoutTournamentMatchesAInput>
  }

  export type UserCreateWithoutTournamentMatchesBInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchesBInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchesBInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchesBInput, UserUncheckedCreateWithoutTournamentMatchesBInput>
  }

  export type UserCreateWithoutTournamentMatchesWonInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchesWonInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchesWonInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchesWonInput, UserUncheckedCreateWithoutTournamentMatchesWonInput>
  }

  export type TournamentUpsertWithoutMatchesInput = {
    update: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutMatchesInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentUpdateWithoutMatchesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsNestedInput
    players?: UserUpdateManyWithoutTournamentsNestedInput
  }

  export type TournamentUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutTournamentsNestedInput
  }

  export type UserUpsertWithoutTournamentMatchesAInput = {
    update: XOR<UserUpdateWithoutTournamentMatchesAInput, UserUncheckedUpdateWithoutTournamentMatchesAInput>
    create: XOR<UserCreateWithoutTournamentMatchesAInput, UserUncheckedCreateWithoutTournamentMatchesAInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchesAInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchesAInput, UserUncheckedUpdateWithoutTournamentMatchesAInput>
  }

  export type UserUpdateWithoutTournamentMatchesAInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchesAInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutTournamentMatchesBInput = {
    update: XOR<UserUpdateWithoutTournamentMatchesBInput, UserUncheckedUpdateWithoutTournamentMatchesBInput>
    create: XOR<UserCreateWithoutTournamentMatchesBInput, UserUncheckedCreateWithoutTournamentMatchesBInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchesBInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchesBInput, UserUncheckedUpdateWithoutTournamentMatchesBInput>
  }

  export type UserUpdateWithoutTournamentMatchesBInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchesBInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutTournamentMatchesWonInput = {
    update: XOR<UserUpdateWithoutTournamentMatchesWonInput, UserUncheckedUpdateWithoutTournamentMatchesWonInput>
    create: XOR<UserCreateWithoutTournamentMatchesWonInput, UserUncheckedCreateWithoutTournamentMatchesWonInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchesWonInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchesWonInput, UserUncheckedUpdateWithoutTournamentMatchesWonInput>
  }

  export type UserUpdateWithoutTournamentMatchesWonInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchesWonInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type MatchCreateWithoutInvitesInput = {
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    feedbacks?: MatchFeedbackCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutMatchInput
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutPlayer1MatchesInput
    player2?: UserCreateNestedOneWithoutPlayer2MatchesInput
    winner?: UserCreateNestedOneWithoutWonMatchesInput
  }

  export type MatchUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
    feedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutMatchInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutInvitesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
  }

  export type TrainingCreateWithoutInvitesInput = {
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
  }

  export type TrainingUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutInvitesInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
  }

  export type UserCreateWithoutSentInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutSentInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutSentInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
  }

  export type UserCreateWithoutReceivedInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutReceivedInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutReceivedInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
  }

  export type MatchUpsertWithoutInvitesInput = {
    update: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutInvitesInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
  }

  export type MatchUpdateWithoutInvitesInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TrainingUpsertWithoutInvitesInput = {
    update: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    where?: TrainingWhereInput
  }

  export type TrainingUpdateToOneWithWhereWithoutInvitesInput = {
    where?: TrainingWhereInput
    data: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
  }

  export type TrainingUpdateWithoutInvitesInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsNestedInput
  }

  export type TrainingUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSentInvitesInput = {
    update: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentInvitesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
  }

  export type UserUpdateWithoutSentInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutSentInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithoutReceivedInvitesInput = {
    update: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedInvitesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
  }

  export type UserUpdateWithoutReceivedInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutCreatedRequestsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCreatedRequestsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCreatedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
  }

  export type UserCreateWithoutRequestParticipationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutRequestParticipationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput>
  }

  export type RequestResponseCreateWithoutRequestInput = {
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRequestResponsesInput
  }

  export type RequestResponseUncheckedCreateWithoutRequestInput = {
    id?: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateOrConnectWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    create: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput>
  }

  export type RequestResponseCreateManyRequestInputEnvelope = {
    data: RequestResponseCreateManyRequestInput | RequestResponseCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedRequestsInput = {
    update: XOR<UserUpdateWithoutCreatedRequestsInput, UserUncheckedUpdateWithoutCreatedRequestsInput>
    create: XOR<UserCreateWithoutCreatedRequestsInput, UserUncheckedCreateWithoutCreatedRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRequestsInput, UserUncheckedUpdateWithoutCreatedRequestsInput>
  }

  export type UserUpdateWithoutCreatedRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRequestParticipationsInput, UserUncheckedUpdateWithoutRequestParticipationsInput>
    create: XOR<UserCreateWithoutRequestParticipationsInput, UserUncheckedCreateWithoutRequestParticipationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRequestParticipationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRequestParticipationsInput, UserUncheckedUpdateWithoutRequestParticipationsInput>
  }

  export type UserUpdateManyWithWhereWithoutRequestParticipationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRequestParticipationsInput>
  }

  export type RequestResponseUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    update: XOR<RequestResponseUpdateWithoutRequestInput, RequestResponseUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestResponseCreateWithoutRequestInput, RequestResponseUncheckedCreateWithoutRequestInput>
  }

  export type RequestResponseUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestResponseWhereUniqueInput
    data: XOR<RequestResponseUpdateWithoutRequestInput, RequestResponseUncheckedUpdateWithoutRequestInput>
  }

  export type RequestResponseUpdateManyWithWhereWithoutRequestInput = {
    where: RequestResponseScalarWhereInput
    data: XOR<RequestResponseUpdateManyMutationInput, RequestResponseUncheckedUpdateManyWithoutRequestInput>
  }

  export type GameRequestCreateWithoutResponsesInput = {
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedRequestsInput
    participants?: UserCreateNestedManyWithoutRequestParticipationsInput
  }

  export type GameRequestUncheckedCreateWithoutResponsesInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    creatorId: number
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutRequestParticipationsInput
  }

  export type GameRequestCreateOrConnectWithoutResponsesInput = {
    where: GameRequestWhereUniqueInput
    create: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
  }

  export type UserCreateWithoutRequestResponsesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutRequestResponsesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutRequestResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
  }

  export type GameRequestUpsertWithoutResponsesInput = {
    update: XOR<GameRequestUpdateWithoutResponsesInput, GameRequestUncheckedUpdateWithoutResponsesInput>
    create: XOR<GameRequestCreateWithoutResponsesInput, GameRequestUncheckedCreateWithoutResponsesInput>
    where?: GameRequestWhereInput
  }

  export type GameRequestUpdateToOneWithWhereWithoutResponsesInput = {
    where?: GameRequestWhereInput
    data: XOR<GameRequestUpdateWithoutResponsesInput, GameRequestUncheckedUpdateWithoutResponsesInput>
  }

  export type GameRequestUpdateWithoutResponsesInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsNestedInput
    participants?: UserUpdateManyWithoutRequestParticipationsNestedInput
  }

  export type GameRequestUncheckedUpdateWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsNestedInput
  }

  export type UserUpsertWithoutRequestResponsesInput = {
    update: XOR<UserUpdateWithoutRequestResponsesInput, UserUncheckedUpdateWithoutRequestResponsesInput>
    create: XOR<UserCreateWithoutRequestResponsesInput, UserUncheckedCreateWithoutRequestResponsesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestResponsesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestResponsesInput, UserUncheckedUpdateWithoutRequestResponsesInput>
  }

  export type UserUpdateWithoutRequestResponsesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserCreateWithoutCreatedTrainingSessionsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutCreatedTrainingSessionsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    trainingSessionParticipations?: TrainingSessionUncheckedCreateNestedManyWithoutParticipantsInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutCreatedTrainingSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
  }

  export type UserCreateWithoutTrainingSessionParticipationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    country?: CountryCreateNestedOneWithoutUsersInput
    city?: CityCreateNestedOneWithoutUsersInput
    sport?: SportCreateNestedOneWithoutUsersInput
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionCreateNestedManyWithoutUserInput
    stories?: StoryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    rating?: PlayerRatingCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackCreateNestedManyWithoutRevieweeInput
  }

  export type UserUncheckedCreateWithoutTrainingSessionParticipationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    player1Matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    player2Matches?: MatchUncheckedCreateNestedManyWithoutPlayer2Input
    wonMatches?: MatchUncheckedCreateNestedManyWithoutWinnerInput
    tournamentMatchesA?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerAInput
    tournamentMatchesB?: TournamentMatchUncheckedCreateNestedManyWithoutPlayerBInput
    tournamentMatchesWon?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainingSessions?: TrainingSessionUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    createdRequests?: GameRequestUncheckedCreateNestedManyWithoutCreatorInput
    requestParticipations?: GameRequestUncheckedCreateNestedManyWithoutParticipantsInput
    requestResponses?: RequestResponseUncheckedCreateNestedManyWithoutUserInput
    caseOpenings?: CaseOpeningUncheckedCreateNestedManyWithoutUserInput
    caseWinnings?: CaseWinningUncheckedCreateNestedManyWithoutUserInput
    ballTransactions?: BallTransactionUncheckedCreateNestedManyWithoutUserInput
    stories?: StoryUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    referralStats?: ReferralStatsUncheckedCreateNestedOneWithoutUserInput
    referrerActivities?: ReferralActivityUncheckedCreateNestedManyWithoutReferrerInput
    invitedActivities?: ReferralActivityUncheckedCreateNestedManyWithoutInvitedUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    rating?: PlayerRatingUncheckedCreateNestedOneWithoutUserInput
    ratingHistory?: RatingHistoryUncheckedCreateNestedManyWithoutUserInput
    opponentHistory?: RatingHistoryUncheckedCreateNestedManyWithoutOpponentInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: DirectMessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: DirectMessageUncheckedCreateNestedManyWithoutRecipientInput
    givenFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    receivedFeedbacks?: MatchFeedbackUncheckedCreateNestedManyWithoutRevieweeInput
  }

  export type UserCreateOrConnectWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpsertWithoutCreatedTrainingSessionsInput = {
    update: XOR<UserUpdateWithoutCreatedTrainingSessionsInput, UserUncheckedUpdateWithoutCreatedTrainingSessionsInput>
    create: XOR<UserCreateWithoutCreatedTrainingSessionsInput, UserUncheckedCreateWithoutCreatedTrainingSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTrainingSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTrainingSessionsInput, UserUncheckedUpdateWithoutCreatedTrainingSessionsInput>
  }

  export type UserUpdateWithoutCreatedTrainingSessionsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTrainingSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTrainingSessionParticipationsInput, UserUncheckedUpdateWithoutTrainingSessionParticipationsInput>
    create: XOR<UserCreateWithoutTrainingSessionParticipationsInput, UserUncheckedCreateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTrainingSessionParticipationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTrainingSessionParticipationsInput, UserUncheckedUpdateWithoutTrainingSessionParticipationsInput>
  }

  export type UserUpdateManyWithWhereWithoutTrainingSessionParticipationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTrainingSessionParticipationsInput>
  }

  export type CityCreateManyCountryInput = {
    id?: number
    name: string
    population: number
    lat: number
    lng: number
    timezone?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyCountryInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
  }

  export type CityUpdateWithoutCountryInput = {
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCityNestedInput
    userSettings?: UserSettingsUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCityNestedInput
    userSettings?: UserSettingsUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    population?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutCountryInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyCityInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
  }

  export type UserSettingsCreateManyCityInput = {
    id?: number
    userId: number
    language?: string
    sportId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserUpdateWithoutCityInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserSettingsUpdateWithoutCityInput = {
    language?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
    sport?: SportUpdateOneWithoutUserSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSettingsUncheckedUpdateManyWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateManySportInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
    referredBy?: number | null
  }

  export type UserSettingsCreateManySportInput = {
    id?: number
    userId: number
    language?: string
    cityId?: number | null
    notificationsEnabled?: boolean
    notifyTelegram?: boolean
    notifyEmail?: boolean
    matchReminderTime?: string
    notifyMatchResults?: boolean
    notifyTournamentResults?: boolean
    showProfilePublicly?: boolean
    showRatingPublicly?: boolean
    allowMatchInvites?: boolean
    requireMatchConfirm?: boolean
    preferredGender?: string | null
    preferredAgeMin?: number | null
    preferredAgeMax?: number | null
    preferredLevelMin?: number | null
    preferredLevelMax?: number | null
    theme?: string
    timezone?: string
    telegramChatId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowDirectMessages?: boolean
  }

  export type UserUpdateWithoutSportInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserSettingsUpdateWithoutSportInput = {
    language?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
    city?: CityUpdateOneWithoutUserSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSettingsUncheckedUpdateManyWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    notifyTelegram?: BoolFieldUpdateOperationsInput | boolean
    notifyEmail?: BoolFieldUpdateOperationsInput | boolean
    matchReminderTime?: StringFieldUpdateOperationsInput | string
    notifyMatchResults?: BoolFieldUpdateOperationsInput | boolean
    notifyTournamentResults?: BoolFieldUpdateOperationsInput | boolean
    showProfilePublicly?: BoolFieldUpdateOperationsInput | boolean
    showRatingPublicly?: BoolFieldUpdateOperationsInput | boolean
    allowMatchInvites?: BoolFieldUpdateOperationsInput | boolean
    requireMatchConfirm?: BoolFieldUpdateOperationsInput | boolean
    preferredGender?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAgeMin?: NullableIntFieldUpdateOperationsInput | number | null
    preferredAgeMax?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    theme?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchCreateManyCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
  }

  export type MatchCreateManyPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
  }

  export type MatchCreateManyPlayer2Input = {
    id?: number
    creatorId: number
    player1Id?: number | null
    optionalId?: number | null
    winnerId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
  }

  export type MatchCreateManyWinnerInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: $Enums.MatchType
    state: $Enums.MatchState
    score?: string | null
    matchDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    locationName?: string | null
  }

  export type TournamentMatchCreateManyPlayerAInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateManyPlayerBInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateManyWinnerInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: $Enums.TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingSessionCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    locationName?: string | null
    courtSurface?: $Enums.CourtSurface | null
    minLevel?: number | null
    maxLevel?: number | null
    maxSlots: number
    currentSlots?: number
    paymentType?: $Enums.PaymentType
    pricePerPerson?: number | null
    dateTime: Date | string
    endTime: Date | string
    status?: $Enums.TrainingState
    trainingType?: $Enums.TrainingType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: $Enums.TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateManySenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateManyReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type GameRequestCreateManyCreatorInput = {
    id?: number
    type: string
    title: string
    description?: string | null
    locationName?: string | null
    maxPlayers: number
    currentPlayers?: number
    gameMode: string
    dateTime: Date | string
    paymentType: string
    ratingType: string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestResponseCreateManyUserInput = {
    id?: number
    requestId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseOpeningCreateManyUserInput = {
    id?: number
    caseId: number
    ballsSpent: number
    createdAt?: Date | string
  }

  export type CaseWinningCreateManyUserInput = {
    id?: number
    openingId: number
    caseId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BallTransactionCreateManyUserInput = {
    id?: number
    amount: number
    type: $Enums.BallTransactionType
    reason: string
    balanceAfter: number
    createdAt?: Date | string
  }

  export type StoryCreateManyUserInput = {
    id?: number
    telegramFileId: string
    telegramFilePath?: string | null
    type: $Enums.MediaType
    caption?: string | null
    status?: $Enums.StoryStatus
    viewsCount?: number
    likesCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    publishedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type UserCreateManyReferrerInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: $Enums.Role
    countryCode?: string | null
    cityId?: number | null
    sportId?: number | null
    sportType?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
    authSource?: $Enums.AuthSource
    lastLogin?: Date | string | null
    ballsBalance?: number
    casesOpened?: number
    telegramChatId?: bigint | number | null
    referralCode?: string | null
  }

  export type ReferralActivityCreateManyReferrerInput = {
    id?: number
    invitedUserId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralActivityCreateManyInvitedUserInput = {
    id?: number
    referrerId: number
    registeredAt: Date | string
    firstMatchAt?: Date | string | null
    isActive?: boolean
    inviteSource?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    type: $Enums.NotificationType
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAchievementCreateManyUserInput = {
    id?: number
    code: string
    awardedAt?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RatingHistoryCreateManyUserInput = {
    id?: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryCreateManyOpponentInput = {
    id?: number
    userId: number
    matchId?: number | null
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type DirectMessageCreateManySenderInput = {
    id?: number
    recipientId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type DirectMessageCreateManyRecipientInput = {
    id?: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type MatchFeedbackCreateManyReviewerInput = {
    id?: number
    matchId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchFeedbackCreateManyRevieweeInput = {
    id?: number
    matchId: number
    reviewerId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutCreatorInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutPlayer1Input = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutPlayer2Input = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    winner?: UserUpdateOneWithoutWonMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutWinnerInput = {
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutMatchNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesNestedInput
    player1?: UserUpdateOneWithoutPlayer1MatchesNestedInput
    player2?: UserUpdateOneWithoutPlayer2MatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchNestedInput
    feedbacks?: MatchFeedbackUncheckedUpdateManyWithoutMatchNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TournamentMatchUpdateWithoutPlayerAInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    playerB?: UserUpdateOneWithoutTournamentMatchesBNestedInput
    winner?: UserUpdateOneWithoutTournamentMatchesWonNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutPlayerAInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayerAInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutPlayerBInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    playerA?: UserUpdateOneRequiredWithoutTournamentMatchesANestedInput
    winner?: UserUpdateOneWithoutTournamentMatchesWonNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutPlayerBInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayerBInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutWinnerInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    playerA?: UserUpdateOneRequiredWithoutTournamentMatchesANestedInput
    playerB?: UserUpdateOneWithoutTournamentMatchesBNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutCreatorInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invites?: InviteUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invites?: InviteUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUpdateManyWithoutTrainingSessionParticipationsNestedInput
  }

  export type TrainingSessionUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutTrainingSessionParticipationsNestedInput
  }

  export type TrainingSessionUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUpdateManyWithoutTournamentsNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutTournamentsNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutSenderInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneWithoutInvitesNestedInput
    training?: TrainingUpdateOneWithoutInvitesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutReceiverInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneWithoutInvitesNestedInput
    training?: TrainingUpdateOneWithoutInvitesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutPlayersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUpdateWithoutCreatorInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUpdateManyWithoutRequestParticipationsNestedInput
    responses?: RequestResponseUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutRequestParticipationsNestedInput
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameRequestUpdateWithoutParticipantsInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedRequestsNestedInput
    responses?: RequestResponseUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: RequestResponseUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type GameRequestUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    gameMode?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: StringFieldUpdateOperationsInput | string
    ratingType?: StringFieldUpdateOperationsInput | string
    formatInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: GameRequestUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type RequestResponseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingSessionsNestedInput
  }

  export type TrainingSessionUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingSessionUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    courtSurface?: NullableEnumCourtSurfaceFieldUpdateOperationsInput | $Enums.CourtSurface | null
    minLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxLevel?: NullableFloatFieldUpdateOperationsInput | number | null
    maxSlots?: IntFieldUpdateOperationsInput | number
    currentSlots?: IntFieldUpdateOperationsInput | number
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    pricePerPerson?: NullableFloatFieldUpdateOperationsInput | number | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTrainingStateFieldUpdateOperationsInput | $Enums.TrainingState
    trainingType?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUpdateWithoutUserInput = {
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutOpeningsNestedInput
    winning?: CaseWinningUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winning?: CaseWinningUncheckedUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUpdateWithoutUserInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opening?: CaseOpeningUpdateOneRequiredWithoutWinningNestedInput
    case?: CaseUpdateOneRequiredWithoutWinningsNestedInput
    item?: CaseItemUpdateOneRequiredWithoutWinningsNestedInput
  }

  export type CaseWinningUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BallTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumBallTransactionTypeFieldUpdateOperationsInput | $Enums.BallTransactionType
    reason?: StringFieldUpdateOperationsInput | string
    balanceAfter?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUpdateWithoutUserInput = {
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramFileId?: StringFieldUpdateOperationsInput | string
    telegramFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    viewsCount?: IntFieldUpdateOperationsInput | number
    likesCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutReferrerInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutReferrerInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferrerInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferralActivityUpdateWithoutReferrerInput = {
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedUser?: UserUpdateOneRequiredWithoutInvitedActivitiesNestedInput
  }

  export type ReferralActivityUncheckedUpdateWithoutReferrerInput = {
    id?: IntFieldUpdateOperationsInput | number
    invitedUserId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityUncheckedUpdateManyWithoutReferrerInput = {
    id?: IntFieldUpdateOperationsInput | number
    invitedUserId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityUpdateWithoutInvitedUserInput = {
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferrerActivitiesNestedInput
  }

  export type ReferralActivityUncheckedUpdateWithoutInvitedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    referrerId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralActivityUncheckedUpdateManyWithoutInvitedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    referrerId?: IntFieldUpdateOperationsInput | number
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstMatchAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    inviteSource?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUpdateWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUpdateWithoutUserInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneWithoutRatingHistoryNestedInput
    season?: RatingSeasonUpdateOneWithoutHistoryNestedInput
    opponent?: UserUpdateOneWithoutOpponentHistoryNestedInput
  }

  export type RatingHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUpdateWithoutOpponentInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingHistoryNestedInput
    match?: MatchUpdateOneWithoutRatingHistoryNestedInput
    season?: RatingSeasonUpdateOneWithoutHistoryNestedInput
  }

  export type RatingHistoryUncheckedUpdateWithoutOpponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUncheckedUpdateManyWithoutOpponentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageUpdateWithoutSenderInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type DirectMessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageUpdateWithoutRecipientInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type DirectMessageUncheckedUpdateWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessageUncheckedUpdateManyWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUpdateWithoutReviewerInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbacksNestedInput
    reviewee?: UserUpdateOneRequiredWithoutReceivedFeedbacksNestedInput
  }

  export type MatchFeedbackUncheckedUpdateWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUpdateWithoutRevieweeInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbacksNestedInput
    reviewer?: UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput
  }

  export type MatchFeedbackUncheckedUpdateWithoutRevieweeInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutRevieweeInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryCreateManySeasonInput = {
    id?: number
    userId: number
    matchId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type RatingHistoryUpdateWithoutSeasonInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingHistoryNestedInput
    match?: MatchUpdateOneWithoutRatingHistoryNestedInput
    opponent?: UserUpdateOneWithoutOpponentHistoryNestedInput
  }

  export type RatingHistoryUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUncheckedUpdateManyWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseItemCreateManyCaseInput = {
    id?: number
    name: string
    type: $Enums.CaseItemType
    payload: JsonNullValueInput | InputJsonValue
    dropChance: number
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseOpeningCreateManyCaseInput = {
    id?: number
    userId: number
    ballsSpent: number
    createdAt?: Date | string
  }

  export type CaseWinningCreateManyCaseInput = {
    id?: number
    openingId: number
    userId: number
    itemId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseItemUpdateWithoutCaseInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnings?: CaseWinningUpdateManyWithoutItemNestedInput
  }

  export type CaseItemUncheckedUpdateWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnings?: CaseWinningUncheckedUpdateManyWithoutItemNestedInput
  }

  export type CaseItemUncheckedUpdateManyWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseItemTypeFieldUpdateOperationsInput | $Enums.CaseItemType
    payload?: JsonNullValueInput | InputJsonValue
    dropChance?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseOpeningUpdateWithoutCaseInput = {
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCaseOpeningsNestedInput
    winning?: CaseWinningUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningUncheckedUpdateWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winning?: CaseWinningUncheckedUpdateOneWithoutOpeningNestedInput
  }

  export type CaseOpeningUncheckedUpdateManyWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ballsSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUpdateWithoutCaseInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opening?: CaseOpeningUpdateOneRequiredWithoutWinningNestedInput
    user?: UserUpdateOneRequiredWithoutCaseWinningsNestedInput
    item?: CaseItemUpdateOneRequiredWithoutWinningsNestedInput
  }

  export type CaseWinningUncheckedUpdateWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUncheckedUpdateManyWithoutCaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningCreateManyItemInput = {
    id?: number
    openingId: number
    userId: number
    caseId: number
    isProcessed?: boolean
    processedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseWinningUpdateWithoutItemInput = {
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opening?: CaseOpeningUpdateOneRequiredWithoutWinningNestedInput
    user?: UserUpdateOneRequiredWithoutCaseWinningsNestedInput
    case?: CaseUpdateOneRequiredWithoutWinningsNestedInput
  }

  export type CaseWinningUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseWinningUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    openingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    caseId?: IntFieldUpdateOperationsInput | number
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type MatchFeedbackCreateManyMatchInput = {
    id?: number
    reviewerId: number
    revieweeId: number
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingHistoryCreateManyMatchInput = {
    id?: number
    userId: number
    seasonId?: number | null
    skillPointsBefore: number
    skillPointsAfter: number
    pointsRatingBefore: number
    pointsRatingAfter: number
    isWin: boolean
    opponentId?: number | null
    opponentSkillPoints?: number | null
    pointsEarned: number
    reason: string
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutMatchInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    training?: TrainingUpdateOneWithoutInvitesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUpdateWithoutMatchInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput
    reviewee?: UserUpdateOneRequiredWithoutReceivedFeedbacksNestedInput
  }

  export type MatchFeedbackUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchFeedbackUncheckedUpdateManyWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewerId?: IntFieldUpdateOperationsInput | number
    revieweeId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUpdateWithoutMatchInput = {
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingHistoryNestedInput
    season?: RatingSeasonUpdateOneWithoutHistoryNestedInput
    opponent?: UserUpdateOneWithoutOpponentHistoryNestedInput
  }

  export type RatingHistoryUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingHistoryUncheckedUpdateManyWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    seasonId?: NullableIntFieldUpdateOperationsInput | number | null
    skillPointsBefore?: IntFieldUpdateOperationsInput | number
    skillPointsAfter?: IntFieldUpdateOperationsInput | number
    pointsRatingBefore?: IntFieldUpdateOperationsInput | number
    pointsRatingAfter?: IntFieldUpdateOperationsInput | number
    isWin?: BoolFieldUpdateOperationsInput | boolean
    opponentId?: NullableIntFieldUpdateOperationsInput | number | null
    opponentSkillPoints?: NullableIntFieldUpdateOperationsInput | number | null
    pointsEarned?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: $Enums.InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutTrainingInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneWithoutInvitesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutTrainingInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutTrainingInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | $Enums.InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    winnerId?: number | null
    score?: string | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | number[]
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TournamentMatchUpdateWithoutTournamentInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerA?: UserUpdateOneRequiredWithoutTournamentMatchesANestedInput
    playerB?: UserUpdateOneWithoutTournamentMatchesBNestedInput
    winner?: UserUpdateOneWithoutTournamentMatchesWonNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutTournamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | number[]
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseCreateManyRequestInput = {
    id?: number
    userId: number
    status?: string
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRequestParticipationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    trainingSessionParticipations?: TrainingSessionUncheckedUpdateManyWithoutParticipantsNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRequestParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestResponseUpdateWithoutRequestInput = {
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRequestResponsesNestedInput
  }

  export type RequestResponseUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestResponseUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTrainingSessionParticipationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneWithoutUsersNestedInput
    city?: CityUpdateOneWithoutUsersNestedInput
    sport?: SportUpdateOneWithoutUsersNestedInput
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUpdateManyWithoutUserNestedInput
    caseOpenings?: CaseOpeningUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUpdateManyWithoutUserNestedInput
    stories?: StoryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateWithoutTrainingSessionParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorNestedInput
    player1Matches?: MatchUncheckedUpdateManyWithoutPlayer1NestedInput
    player2Matches?: MatchUncheckedUpdateManyWithoutPlayer2NestedInput
    wonMatches?: MatchUncheckedUpdateManyWithoutWinnerNestedInput
    tournamentMatchesA?: TournamentMatchUncheckedUpdateManyWithoutPlayerANestedInput
    tournamentMatchesB?: TournamentMatchUncheckedUpdateManyWithoutPlayerBNestedInput
    tournamentMatchesWon?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorNestedInput
    createdTrainingSessions?: TrainingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorNestedInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersNestedInput
    createdRequests?: GameRequestUncheckedUpdateManyWithoutCreatorNestedInput
    requestParticipations?: GameRequestUncheckedUpdateManyWithoutParticipantsNestedInput
    requestResponses?: RequestResponseUncheckedUpdateManyWithoutUserNestedInput
    caseOpenings?: CaseOpeningUncheckedUpdateManyWithoutUserNestedInput
    caseWinnings?: CaseWinningUncheckedUpdateManyWithoutUserNestedInput
    ballTransactions?: BallTransactionUncheckedUpdateManyWithoutUserNestedInput
    stories?: StoryUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    referralStats?: ReferralStatsUncheckedUpdateOneWithoutUserNestedInput
    referrerActivities?: ReferralActivityUncheckedUpdateManyWithoutReferrerNestedInput
    invitedActivities?: ReferralActivityUncheckedUpdateManyWithoutInvitedUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    rating?: PlayerRatingUncheckedUpdateOneWithoutUserNestedInput
    ratingHistory?: RatingHistoryUncheckedUpdateManyWithoutUserNestedInput
    opponentHistory?: RatingHistoryUncheckedUpdateManyWithoutOpponentNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: DirectMessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: DirectMessageUncheckedUpdateManyWithoutRecipientNestedInput
    givenFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    receivedFeedbacks?: MatchFeedbackUncheckedUpdateManyWithoutRevieweeNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTrainingSessionParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableIntFieldUpdateOperationsInput | number | null
    sportId?: NullableIntFieldUpdateOperationsInput | number | null
    sportType?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authSource?: EnumAuthSourceFieldUpdateOperationsInput | $Enums.AuthSource
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsBalance?: IntFieldUpdateOperationsInput | number
    casesOpened?: IntFieldUpdateOperationsInput | number
    telegramChatId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    referredBy?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CountryCountOutputTypeDefaultArgs instead
     */
    export type CountryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CityCountOutputTypeDefaultArgs instead
     */
    export type CityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SportCountOutputTypeDefaultArgs instead
     */
    export type SportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingSeasonCountOutputTypeDefaultArgs instead
     */
    export type RatingSeasonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingSeasonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseCountOutputTypeDefaultArgs instead
     */
    export type CaseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseItemCountOutputTypeDefaultArgs instead
     */
    export type CaseItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchCountOutputTypeDefaultArgs instead
     */
    export type MatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingCountOutputTypeDefaultArgs instead
     */
    export type TrainingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrainingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentCountOutputTypeDefaultArgs instead
     */
    export type TournamentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameRequestCountOutputTypeDefaultArgs instead
     */
    export type GameRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingSessionCountOutputTypeDefaultArgs instead
     */
    export type TrainingSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrainingSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchFeedbackDefaultArgs instead
     */
    export type MatchFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchFeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DirectMessageDefaultArgs instead
     */
    export type DirectMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DirectMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoryDefaultArgs instead
     */
    export type StoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryDefaultArgs instead
     */
    export type CountryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CityDefaultArgs instead
     */
    export type CityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SportDefaultArgs instead
     */
    export type SportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSettingsDefaultArgs instead
     */
    export type UserSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerRatingDefaultArgs instead
     */
    export type PlayerRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingHistoryDefaultArgs instead
     */
    export type RatingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingSeasonDefaultArgs instead
     */
    export type RatingSeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingSeasonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAchievementDefaultArgs instead
     */
    export type UserAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferralStatsDefaultArgs instead
     */
    export type ReferralStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferralStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferralActivityDefaultArgs instead
     */
    export type ReferralActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferralActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BallTransactionDefaultArgs instead
     */
    export type BallTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BallTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseDefaultArgs instead
     */
    export type CaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseItemDefaultArgs instead
     */
    export type CaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseOpeningDefaultArgs instead
     */
    export type CaseOpeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseOpeningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseWinningDefaultArgs instead
     */
    export type CaseWinningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseWinningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingDefaultArgs instead
     */
    export type TrainingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrainingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentDefaultArgs instead
     */
    export type TournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentMatchDefaultArgs instead
     */
    export type TournamentMatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentMatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InviteDefaultArgs instead
     */
    export type InviteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InviteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserStateDefaultArgs instead
     */
    export type UserStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserStateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProfileDefaultArgs instead
     */
    export type UserProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameRequestDefaultArgs instead
     */
    export type GameRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestResponseDefaultArgs instead
     */
    export type RequestResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestResponseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingSessionDefaultArgs instead
     */
    export type TrainingSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrainingSessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}