
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  telegramId: string
  username: string
  firstName: string
  lastName: string | null
  isVerified: boolean
  role: Role
  updatedAt: Date
  createdAt: Date
}

/**
 * Model Match
 * 
 */
export type Match = {
  id: number
  creatorId: number
  player1Id: number | null
  player2Id: number | null
  optionalId: number | null
  type: MatchType
  state: MatchState
  score: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Training
 * 
 */
export type Training = {
  id: number
  creatorId: number
  location: string
  time: Date
  participantLimit: number
  description: string | null
  state: TrainingState
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Tournament
 * 
 */
export type Tournament = {
  id: number
  title: string
  description: string | null
  type: TournamentType
  status: string
  creatorId: number
  startDate: Date
  endDate: Date
  formatDetails: Prisma.JsonValue | null
  minPlayers: number
  maxPlayers: number
  currentPlayers: number
  isRanked: boolean
  locationId: number | null
  locationName: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TournamentMatch
 * 
 */
export type TournamentMatch = {
  id: number
  tournamentId: number
  round: number | null
  group: string | null
  playerAId: number
  playerBId: number | null
  score: string | null
  winnerId: number | null
  status: string
  court: string | null
  scheduledAt: Date | null
  confirmedBy: number[]
  isThirdPlaceMatch: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Invite
 * 
 */
export type Invite = {
  id: number
  matchId: number | null
  trainingId: number | null
  senderId: number
  receiverId: number
  status: InviteStatus
  createdAt: Date
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  id: number
  userId: number
  message: string
  createdAt: Date
}

/**
 * Model UserProfile
 * 
 */
export type UserProfile = {
  id: number
  userId: number
  avatarUrl: string | null
  city: string | null
  countryCode: string | null
  sportType: SportType
  ntrpRating: number | null
  ratingPoints: number
  matchesPlayed: number
  matchWins: number
  matchLosses: number
  tournamentsPlayed: number
  tournamentsWon: number
  lastActivity: Date | null
  achievements: Prisma.JsonValue | null
  isPublicProfile: boolean
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MatchType: {
  ONE_ON_ONE: 'ONE_ON_ONE',
  DOUBLES: 'DOUBLES'
};

export type MatchType = (typeof MatchType)[keyof typeof MatchType]


export const MatchState: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
};

export type MatchState = (typeof MatchState)[keyof typeof MatchState]


export const TrainingState: {
  OPEN: 'OPEN',
  FULL: 'FULL',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE'
};

export type TrainingState = (typeof TrainingState)[keyof typeof TrainingState]


export const TournamentType: {
  SINGLE_ELIMINATION: 'SINGLE_ELIMINATION',
  GROUPS_PLAYOFF: 'GROUPS_PLAYOFF',
  LEAGUE: 'LEAGUE',
  BLITZ: 'BLITZ'
};

export type TournamentType = (typeof TournamentType)[keyof typeof TournamentType]


export const InviteStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type InviteStatus = (typeof InviteStatus)[keyof typeof InviteStatus]


export const SportType: {
  TENNIS: 'TENNIS',
  PADEL: 'PADEL'
};

export type SportType = (typeof SportType)[keyof typeof SportType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<GlobalReject>;

  /**
   * `prisma.training`: Exposes CRUD operations for the **Training** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trainings
    * const trainings = await prisma.training.findMany()
    * ```
    */
  get training(): Prisma.TrainingDelegate<GlobalReject>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<GlobalReject>;

  /**
   * `prisma.tournamentMatch`: Exposes CRUD operations for the **TournamentMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentMatches
    * const tournamentMatches = await prisma.tournamentMatch.findMany()
    * ```
    */
  get tournamentMatch(): Prisma.TournamentMatchDelegate<GlobalReject>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invites
    * const invites = await prisma.invite.findMany()
    * ```
    */
  get invite(): Prisma.InviteDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Match: 'Match',
    Training: 'Training',
    Tournament: 'Tournament',
    TournamentMatch: 'TournamentMatch',
    Invite: 'Invite',
    Notification: 'Notification',
    UserProfile: 'UserProfile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    matches: number
    createdMatches: number
    createdTrainings: number
    createdTournaments: number
    sentInvites: number
    receivedInvites: number
    notifications: number
    tournaments: number
  }

  export type UserCountOutputTypeSelect = {
    matches?: boolean
    createdMatches?: boolean
    createdTrainings?: boolean
    createdTournaments?: boolean
    sentInvites?: boolean
    receivedInvites?: boolean
    notifications?: boolean
    tournaments?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type MatchCountOutputType
   */


  export type MatchCountOutputType = {
    invites: number
  }

  export type MatchCountOutputTypeSelect = {
    invites?: boolean
  }

  export type MatchCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MatchCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MatchCountOutputType
    : S extends undefined
    ? never
    : S extends MatchCountOutputTypeArgs
    ?'include' extends U
    ? MatchCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MatchCountOutputType ? MatchCountOutputType[P] : never
  } 
    : MatchCountOutputType
  : MatchCountOutputType




  // Custom InputTypes

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     * 
    **/
    select?: MatchCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainingCountOutputType
   */


  export type TrainingCountOutputType = {
    invites: number
  }

  export type TrainingCountOutputTypeSelect = {
    invites?: boolean
  }

  export type TrainingCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TrainingCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TrainingCountOutputType
    : S extends undefined
    ? never
    : S extends TrainingCountOutputTypeArgs
    ?'include' extends U
    ? TrainingCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TrainingCountOutputType ? TrainingCountOutputType[P] : never
  } 
    : TrainingCountOutputType
  : TrainingCountOutputType




  // Custom InputTypes

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainingCountOutputType
     * 
    **/
    select?: TrainingCountOutputTypeSelect | null
  }



  /**
   * Count Type TournamentCountOutputType
   */


  export type TournamentCountOutputType = {
    players: number
    matches: number
  }

  export type TournamentCountOutputTypeSelect = {
    players?: boolean
    matches?: boolean
  }

  export type TournamentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TournamentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TournamentCountOutputType
    : S extends undefined
    ? never
    : S extends TournamentCountOutputTypeArgs
    ?'include' extends U
    ? TournamentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TournamentCountOutputType ? TournamentCountOutputType[P] : never
  } 
    : TournamentCountOutputType
  : TournamentCountOutputType




  // Custom InputTypes

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     * 
    **/
    select?: TournamentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: Role | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    telegramId: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    isVerified: boolean | null
    role: Role | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    telegramId: number
    username: number
    firstName: number
    lastName: number
    isVerified: number
    role: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    updatedAt?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    updatedAt?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    telegramId?: true
    username?: true
    firstName?: true
    lastName?: true
    isVerified?: true
    role?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    telegramId: string
    username: string
    firstName: string
    lastName: string | null
    isVerified: boolean
    role: Role
    updatedAt: Date
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    telegramId?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    isVerified?: boolean
    role?: boolean
    profile?: boolean | UserProfileArgs
    matches?: boolean | MatchFindManyArgs
    createdMatches?: boolean | MatchFindManyArgs
    createdTrainings?: boolean | TrainingFindManyArgs
    createdTournaments?: boolean | TournamentFindManyArgs
    sentInvites?: boolean | InviteFindManyArgs
    receivedInvites?: boolean | InviteFindManyArgs
    notifications?: boolean | NotificationFindManyArgs
    tournaments?: boolean | TournamentFindManyArgs
    updatedAt?: boolean
    createdAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    profile?: boolean | UserProfileArgs
    matches?: boolean | MatchFindManyArgs
    createdMatches?: boolean | MatchFindManyArgs
    createdTrainings?: boolean | TrainingFindManyArgs
    createdTournaments?: boolean | TournamentFindManyArgs
    sentInvites?: boolean | InviteFindManyArgs
    receivedInvites?: boolean | InviteFindManyArgs
    notifications?: boolean | NotificationFindManyArgs
    tournaments?: boolean | TournamentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? UserProfileGetPayload<S['include'][P]> | null :
        P extends 'matches' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'createdMatches' ? Array < MatchGetPayload<S['include'][P]>>  :
        P extends 'createdTrainings' ? Array < TrainingGetPayload<S['include'][P]>>  :
        P extends 'createdTournaments' ? Array < TournamentGetPayload<S['include'][P]>>  :
        P extends 'sentInvites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends 'receivedInvites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends 'notifications' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends 'tournaments' ? Array < TournamentGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? UserProfileGetPayload<S['select'][P]> | null :
        P extends 'matches' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'createdMatches' ? Array < MatchGetPayload<S['select'][P]>>  :
        P extends 'createdTrainings' ? Array < TrainingGetPayload<S['select'][P]>>  :
        P extends 'createdTournaments' ? Array < TournamentGetPayload<S['select'][P]>>  :
        P extends 'sentInvites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends 'receivedInvites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends 'notifications' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends 'tournaments' ? Array < TournamentGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    matches<T extends MatchFindManyArgs = {}>(args?: Subset<T, MatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>;

    createdMatches<T extends MatchFindManyArgs = {}>(args?: Subset<T, MatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>;

    createdTrainings<T extends TrainingFindManyArgs = {}>(args?: Subset<T, TrainingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Training>>, PrismaPromise<Array<TrainingGetPayload<T>>>>;

    createdTournaments<T extends TournamentFindManyArgs = {}>(args?: Subset<T, TournamentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>;

    sentInvites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    receivedInvites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    notifications<T extends NotificationFindManyArgs = {}>(args?: Subset<T, NotificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>;

    tournaments<T extends TournamentFindManyArgs = {}>(args?: Subset<T, TournamentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType | null
    state: MatchState | null
    score: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType | null
    state: MatchState | null
    score: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    creatorId: number
    player1Id: number
    player2Id: number
    optionalId: number
    type: number
    state: number
    score: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    creatorId?: true
    player1Id?: true
    player2Id?: true
    optionalId?: true
    type?: true
    state?: true
    score?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchAggregateArgs = {
    /**
     * Filter which Match to aggregate.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs = {
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithAggregationInput>
    by: Array<MatchScalarFieldEnum>
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: number
    creatorId: number
    player1Id: number | null
    player2Id: number | null
    optionalId: number | null
    type: MatchType
    state: MatchState
    score: string | null
    createdAt: Date
    updatedAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect = {
    id?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    player1?: boolean | UserArgs
    player1Id?: boolean
    player2Id?: boolean
    optionalId?: boolean
    type?: boolean
    state?: boolean
    score?: boolean
    invites?: boolean | InviteFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | MatchCountOutputTypeArgs
  }

  export type MatchInclude = {
    creator?: boolean | UserArgs
    player1?: boolean | UserArgs
    invites?: boolean | InviteFindManyArgs
    _count?: boolean | MatchCountOutputTypeArgs
  }

  export type MatchGetPayload<
    S extends boolean | null | undefined | MatchArgs,
    U = keyof S
      > = S extends true
        ? Match
    : S extends undefined
    ? never
    : S extends MatchArgs | MatchFindManyArgs
    ?'include' extends U
    ? Match  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'player1' ? UserGetPayload<S['include'][P]> | null :
        P extends 'invites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'player1' ? UserGetPayload<S['select'][P]> | null :
        P extends 'invites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends '_count' ? MatchCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Match ? Match[P] : never
  } 
    : Match
  : Match


  type MatchCountArgs = Merge<
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }
  >

  export interface MatchDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Match'> extends True ? CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>> : CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Match'> extends True ? CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>> : CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs>(
      args?: SelectSubset<T, MatchFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Match>>, PrismaPromise<Array<MatchGetPayload<T>>>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs>(
      args: SelectSubset<T, MatchCreateArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs>(
      args?: SelectSubset<T, MatchCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs>(
      args: SelectSubset<T, MatchDeleteArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs>(
      args: SelectSubset<T, MatchUpdateArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs>(
      args?: SelectSubset<T, MatchDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs>(
      args: SelectSubset<T, MatchUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs>(
      args: SelectSubset<T, MatchUpsertArgs>
    ): CheckSelect<T, Prisma__MatchClient<Match>, Prisma__MatchClient<MatchGetPayload<T>>>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    player1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    invites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Throw an Error if a Match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Match to fetch.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Throw an Error if a Match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Match to fetch.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     * 
    **/
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Filter, which Matches to fetch.
     * 
    **/
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     * 
    **/
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     * 
    **/
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match create
   */
  export type MatchCreateArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The data needed to create a Match.
     * 
    **/
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs = {
    /**
     * The data used to create many Matches.
     * 
    **/
    data: Enumerable<MatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The data needed to update a Match.
     * 
    **/
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs = {
    /**
     * The data used to update Matches.
     * 
    **/
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     * 
    **/
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * The filter to search for the Match to update in case it exists.
     * 
    **/
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     * 
    **/
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
    /**
     * Filter which Match to delete.
     * 
    **/
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs = {
    /**
     * Filter which Matches to delete
     * 
    **/
    where?: MatchWhereInput
  }


  /**
   * Match without action
   */
  export type MatchArgs = {
    /**
     * Select specific fields to fetch from the Match
     * 
    **/
    select?: MatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MatchInclude | null
  }



  /**
   * Model Training
   */


  export type AggregateTraining = {
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  export type TrainingAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    participantLimit: number | null
  }

  export type TrainingMinAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingMaxAggregateOutputType = {
    id: number | null
    creatorId: number | null
    location: string | null
    time: Date | null
    participantLimit: number | null
    description: string | null
    state: TrainingState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingCountAggregateOutputType = {
    id: number
    creatorId: number
    location: number
    time: number
    participantLimit: number
    description: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingAvgAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingSumAggregateInputType = {
    id?: true
    creatorId?: true
    participantLimit?: true
  }

  export type TrainingMinAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingMaxAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingCountAggregateInputType = {
    id?: true
    creatorId?: true
    location?: true
    time?: true
    participantLimit?: true
    description?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingAggregateArgs = {
    /**
     * Filter which Training to aggregate.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trainings
    **/
    _count?: true | TrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingMaxAggregateInputType
  }

  export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraining[P]>
      : GetScalarType<T[P], AggregateTraining[P]>
  }




  export type TrainingGroupByArgs = {
    where?: TrainingWhereInput
    orderBy?: Enumerable<TrainingOrderByWithAggregationInput>
    by: Array<TrainingScalarFieldEnum>
    having?: TrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCountAggregateInputType | true
    _avg?: TrainingAvgAggregateInputType
    _sum?: TrainingSumAggregateInputType
    _min?: TrainingMinAggregateInputType
    _max?: TrainingMaxAggregateInputType
  }


  export type TrainingGroupByOutputType = {
    id: number
    creatorId: number
    location: string
    time: Date
    participantLimit: number
    description: string | null
    state: TrainingState
    createdAt: Date
    updatedAt: Date
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSelect = {
    id?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    location?: boolean
    time?: boolean
    participantLimit?: boolean
    description?: boolean
    state?: boolean
    invites?: boolean | InviteFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TrainingCountOutputTypeArgs
  }

  export type TrainingInclude = {
    creator?: boolean | UserArgs
    invites?: boolean | InviteFindManyArgs
    _count?: boolean | TrainingCountOutputTypeArgs
  }

  export type TrainingGetPayload<
    S extends boolean | null | undefined | TrainingArgs,
    U = keyof S
      > = S extends true
        ? Training
    : S extends undefined
    ? never
    : S extends TrainingArgs | TrainingFindManyArgs
    ?'include' extends U
    ? Training  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'invites' ? Array < InviteGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainingCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'invites' ? Array < InviteGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainingCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Training ? Training[P] : never
  } 
    : Training
  : Training


  type TrainingCountArgs = Merge<
    Omit<TrainingFindManyArgs, 'select' | 'include'> & {
      select?: TrainingCountAggregateInputType | true
    }
  >

  export interface TrainingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Training that matches the filter.
     * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Training'> extends True ? CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>> : CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>

    /**
     * Find the first Training that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Training'> extends True ? CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>> : CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>

    /**
     * Find zero or more Trainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trainings
     * const trainings = await prisma.training.findMany()
     * 
     * // Get first 10 Trainings
     * const trainings = await prisma.training.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingFindManyArgs>(
      args?: SelectSubset<T, TrainingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Training>>, PrismaPromise<Array<TrainingGetPayload<T>>>>

    /**
     * Create a Training.
     * @param {TrainingCreateArgs} args - Arguments to create a Training.
     * @example
     * // Create one Training
     * const Training = await prisma.training.create({
     *   data: {
     *     // ... data to create a Training
     *   }
     * })
     * 
    **/
    create<T extends TrainingCreateArgs>(
      args: SelectSubset<T, TrainingCreateArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Create many Trainings.
     *     @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
     *     @example
     *     // Create many Trainings
     *     const training = await prisma.training.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainingCreateManyArgs>(
      args?: SelectSubset<T, TrainingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Training.
     * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
     * @example
     * // Delete one Training
     * const Training = await prisma.training.delete({
     *   where: {
     *     // ... filter to delete one Training
     *   }
     * })
     * 
    **/
    delete<T extends TrainingDeleteArgs>(
      args: SelectSubset<T, TrainingDeleteArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Update one Training.
     * @param {TrainingUpdateArgs} args - Arguments to update one Training.
     * @example
     * // Update one Training
     * const training = await prisma.training.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingUpdateArgs>(
      args: SelectSubset<T, TrainingUpdateArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Delete zero or more Trainings.
     * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
     * @example
     * // Delete a few Trainings
     * const { count } = await prisma.training.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingDeleteManyArgs>(
      args?: SelectSubset<T, TrainingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingUpdateManyArgs>(
      args: SelectSubset<T, TrainingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Training.
     * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
     * @example
     * // Update or create a Training
     * const training = await prisma.training.upsert({
     *   create: {
     *     // ... data to create a Training
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Training we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingUpsertArgs>(
      args: SelectSubset<T, TrainingUpsertArgs>
    ): CheckSelect<T, Prisma__TrainingClient<Training>, Prisma__TrainingClient<TrainingGetPayload<T>>>

    /**
     * Count the number of Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
     * @example
     * // Count the number of Trainings
     * const count = await prisma.training.count({
     *   where: {
     *     // ... the filter for the Trainings we want to count
     *   }
     * })
    **/
    count<T extends TrainingCountArgs>(
      args?: Subset<T, TrainingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingAggregateArgs>(args: Subset<T, TrainingAggregateArgs>): PrismaPromise<GetTrainingAggregateType<T>>

    /**
     * Group by Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingGroupByArgs['orderBy'] }
        : { orderBy?: TrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Training.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    invites<T extends InviteFindManyArgs = {}>(args?: Subset<T, InviteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Training findUnique
   */
  export type TrainingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Throw an Error if a Training can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Training to fetch.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training findFirst
   */
  export type TrainingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Throw an Error if a Training can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Training to fetch.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     * 
    **/
    distinct?: Enumerable<TrainingScalarFieldEnum>
  }


  /**
   * Training findMany
   */
  export type TrainingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Filter, which Trainings to fetch.
     * 
    **/
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     * 
    **/
    orderBy?: Enumerable<TrainingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trainings.
     * 
    **/
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TrainingScalarFieldEnum>
  }


  /**
   * Training create
   */
  export type TrainingCreateArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The data needed to create a Training.
     * 
    **/
    data: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
  }


  /**
   * Training createMany
   */
  export type TrainingCreateManyArgs = {
    /**
     * The data used to create many Trainings.
     * 
    **/
    data: Enumerable<TrainingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Training update
   */
  export type TrainingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The data needed to update a Training.
     * 
    **/
    data: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
    /**
     * Choose, which Training to update.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training updateMany
   */
  export type TrainingUpdateManyArgs = {
    /**
     * The data used to update Trainings.
     * 
    **/
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     * 
    **/
    where?: TrainingWhereInput
  }


  /**
   * Training upsert
   */
  export type TrainingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * The filter to search for the Training to update in case it exists.
     * 
    **/
    where: TrainingWhereUniqueInput
    /**
     * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
     * 
    **/
    create: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
    /**
     * In case the Training was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
  }


  /**
   * Training delete
   */
  export type TrainingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
    /**
     * Filter which Training to delete.
     * 
    **/
    where: TrainingWhereUniqueInput
  }


  /**
   * Training deleteMany
   */
  export type TrainingDeleteManyArgs = {
    /**
     * Filter which Trainings to delete
     * 
    **/
    where?: TrainingWhereInput
  }


  /**
   * Training without action
   */
  export type TrainingArgs = {
    /**
     * Select specific fields to fetch from the Training
     * 
    **/
    select?: TrainingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TrainingInclude | null
  }



  /**
   * Model Tournament
   */


  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    locationId: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    type: TournamentType | null
    status: string | null
    creatorId: number | null
    startDate: Date | null
    endDate: Date | null
    minPlayers: number | null
    maxPlayers: number | null
    currentPlayers: number | null
    isRanked: boolean | null
    locationId: number | null
    locationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    status: number
    creatorId: number
    startDate: number
    endDate: number
    formatDetails: number
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: number
    locationId: number
    locationName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentSumAggregateInputType = {
    id?: true
    creatorId?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    locationId?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    creatorId?: true
    startDate?: true
    endDate?: true
    formatDetails?: true
    minPlayers?: true
    maxPlayers?: true
    currentPlayers?: true
    isRanked?: true
    locationId?: true
    locationName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs = {
    /**
     * Filter which Tournament to aggregate.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs = {
    where?: TournamentWhereInput
    orderBy?: Enumerable<TournamentOrderByWithAggregationInput>
    by: Array<TournamentScalarFieldEnum>
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }


  export type TournamentGroupByOutputType = {
    id: number
    title: string
    description: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date
    endDate: Date
    formatDetails: JsonValue | null
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId: number | null
    locationName: string | null
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    creator?: boolean | UserArgs
    creatorId?: boolean
    startDate?: boolean
    endDate?: boolean
    formatDetails?: boolean
    minPlayers?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    isRanked?: boolean
    locationId?: boolean
    locationName?: boolean
    players?: boolean | UserFindManyArgs
    matches?: boolean | TournamentMatchFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TournamentCountOutputTypeArgs
  }

  export type TournamentInclude = {
    creator?: boolean | UserArgs
    players?: boolean | UserFindManyArgs
    matches?: boolean | TournamentMatchFindManyArgs
    _count?: boolean | TournamentCountOutputTypeArgs
  }

  export type TournamentGetPayload<
    S extends boolean | null | undefined | TournamentArgs,
    U = keyof S
      > = S extends true
        ? Tournament
    : S extends undefined
    ? never
    : S extends TournamentArgs | TournamentFindManyArgs
    ?'include' extends U
    ? Tournament  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? UserGetPayload<S['include'][P]> :
        P extends 'players' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'matches' ? Array < TournamentMatchGetPayload<S['include'][P]>>  :
        P extends '_count' ? TournamentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? UserGetPayload<S['select'][P]> :
        P extends 'players' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'matches' ? Array < TournamentMatchGetPayload<S['select'][P]>>  :
        P extends '_count' ? TournamentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tournament ? Tournament[P] : never
  } 
    : Tournament
  : Tournament


  type TournamentCountArgs = Merge<
    Omit<TournamentFindManyArgs, 'select' | 'include'> & {
      select?: TournamentCountAggregateInputType | true
    }
  >

  export interface TournamentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TournamentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TournamentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tournament'> extends True ? CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>> : CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TournamentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TournamentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tournament'> extends True ? CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>> : CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TournamentFindManyArgs>(
      args?: SelectSubset<T, TournamentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tournament>>, PrismaPromise<Array<TournamentGetPayload<T>>>>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
    **/
    create<T extends TournamentCreateArgs>(
      args: SelectSubset<T, TournamentCreateArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Create many Tournaments.
     *     @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     *     @example
     *     // Create many Tournaments
     *     const tournament = await prisma.tournament.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TournamentCreateManyArgs>(
      args?: SelectSubset<T, TournamentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
    **/
    delete<T extends TournamentDeleteArgs>(
      args: SelectSubset<T, TournamentDeleteArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TournamentUpdateArgs>(
      args: SelectSubset<T, TournamentUpdateArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TournamentDeleteManyArgs>(
      args?: SelectSubset<T, TournamentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TournamentUpdateManyArgs>(
      args: SelectSubset<T, TournamentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
    **/
    upsert<T extends TournamentUpsertArgs>(
      args: SelectSubset<T, TournamentUpsertArgs>
    ): CheckSelect<T, Prisma__TournamentClient<Tournament>, Prisma__TournamentClient<TournamentGetPayload<T>>>

    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TournamentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    players<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    matches<T extends TournamentMatchFindManyArgs = {}>(args?: Subset<T, TournamentMatchFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TournamentMatch>>, PrismaPromise<Array<TournamentMatchGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Throw an Error if a Tournament can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tournament to fetch.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Throw an Error if a Tournament can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tournament to fetch.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     * 
    **/
    distinct?: Enumerable<TournamentScalarFieldEnum>
  }


  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Filter, which Tournaments to fetch.
     * 
    **/
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     * 
    **/
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TournamentScalarFieldEnum>
  }


  /**
   * Tournament create
   */
  export type TournamentCreateArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The data needed to create a Tournament.
     * 
    **/
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }


  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs = {
    /**
     * The data used to create many Tournaments.
     * 
    **/
    data: Enumerable<TournamentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tournament update
   */
  export type TournamentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The data needed to update a Tournament.
     * 
    **/
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs = {
    /**
     * The data used to update Tournaments.
     * 
    **/
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     * 
    **/
    where?: TournamentWhereInput
  }


  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     * 
    **/
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     * 
    **/
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }


  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
    /**
     * Filter which Tournament to delete.
     * 
    **/
    where: TournamentWhereUniqueInput
  }


  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs = {
    /**
     * Filter which Tournaments to delete
     * 
    **/
    where?: TournamentWhereInput
  }


  /**
   * Tournament without action
   */
  export type TournamentArgs = {
    /**
     * Select specific fields to fetch from the Tournament
     * 
    **/
    select?: TournamentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentInclude | null
  }



  /**
   * Model TournamentMatch
   */


  export type AggregateTournamentMatch = {
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  export type TournamentMatchAvgAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number | null
  }

  export type TournamentMatchSumAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    playerAId: number | null
    playerBId: number | null
    winnerId: number | null
    confirmedBy: number[] | null
  }

  export type TournamentMatchMinAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchMaxAggregateOutputType = {
    id: number | null
    tournamentId: number | null
    round: number | null
    group: string | null
    playerAId: number | null
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string | null
    court: string | null
    scheduledAt: Date | null
    isThirdPlaceMatch: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMatchCountAggregateOutputType = {
    id: number
    tournamentId: number
    round: number
    group: number
    playerAId: number
    playerBId: number
    score: number
    winnerId: number
    status: number
    court: number
    scheduledAt: number
    confirmedBy: number
    isThirdPlaceMatch: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentMatchAvgAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchSumAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    playerAId?: true
    playerBId?: true
    winnerId?: true
    confirmedBy?: true
  }

  export type TournamentMatchMinAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMatchCountAggregateInputType = {
    id?: true
    tournamentId?: true
    round?: true
    group?: true
    playerAId?: true
    playerBId?: true
    score?: true
    winnerId?: true
    status?: true
    court?: true
    scheduledAt?: true
    confirmedBy?: true
    isThirdPlaceMatch?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentMatchAggregateArgs = {
    /**
     * Filter which TournamentMatch to aggregate.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentMatches
    **/
    _count?: true | TournamentMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type GetTournamentMatchAggregateType<T extends TournamentMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentMatch[P]>
      : GetScalarType<T[P], AggregateTournamentMatch[P]>
  }




  export type TournamentMatchGroupByArgs = {
    where?: TournamentMatchWhereInput
    orderBy?: Enumerable<TournamentMatchOrderByWithAggregationInput>
    by: Array<TournamentMatchScalarFieldEnum>
    having?: TournamentMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentMatchCountAggregateInputType | true
    _avg?: TournamentMatchAvgAggregateInputType
    _sum?: TournamentMatchSumAggregateInputType
    _min?: TournamentMatchMinAggregateInputType
    _max?: TournamentMatchMaxAggregateInputType
  }


  export type TournamentMatchGroupByOutputType = {
    id: number
    tournamentId: number
    round: number | null
    group: string | null
    playerAId: number
    playerBId: number | null
    score: string | null
    winnerId: number | null
    status: string
    court: string | null
    scheduledAt: Date | null
    confirmedBy: number[]
    isThirdPlaceMatch: boolean
    createdAt: Date
    updatedAt: Date
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  type GetTournamentMatchGroupByPayload<T extends TournamentMatchGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TournamentMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
        }
      >
    >


  export type TournamentMatchSelect = {
    id?: boolean
    tournament?: boolean | TournamentArgs
    tournamentId?: boolean
    round?: boolean
    group?: boolean
    playerAId?: boolean
    playerBId?: boolean
    score?: boolean
    winnerId?: boolean
    status?: boolean
    court?: boolean
    scheduledAt?: boolean
    confirmedBy?: boolean
    isThirdPlaceMatch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentMatchInclude = {
    tournament?: boolean | TournamentArgs
  }

  export type TournamentMatchGetPayload<
    S extends boolean | null | undefined | TournamentMatchArgs,
    U = keyof S
      > = S extends true
        ? TournamentMatch
    : S extends undefined
    ? never
    : S extends TournamentMatchArgs | TournamentMatchFindManyArgs
    ?'include' extends U
    ? TournamentMatch  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tournament' ? TournamentGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tournament' ? TournamentGetPayload<S['select'][P]> :  P extends keyof TournamentMatch ? TournamentMatch[P] : never
  } 
    : TournamentMatch
  : TournamentMatch


  type TournamentMatchCountArgs = Merge<
    Omit<TournamentMatchFindManyArgs, 'select' | 'include'> & {
      select?: TournamentMatchCountAggregateInputType | true
    }
  >

  export interface TournamentMatchDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TournamentMatch that matches the filter.
     * @param {TournamentMatchFindUniqueArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TournamentMatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TournamentMatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TournamentMatch'> extends True ? CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>> : CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch | null >, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T> | null >>

    /**
     * Find the first TournamentMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TournamentMatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TournamentMatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TournamentMatch'> extends True ? CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>> : CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch | null >, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T> | null >>

    /**
     * Find zero or more TournamentMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany()
     * 
     * // Get first 10 TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TournamentMatchFindManyArgs>(
      args?: SelectSubset<T, TournamentMatchFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TournamentMatch>>, PrismaPromise<Array<TournamentMatchGetPayload<T>>>>

    /**
     * Create a TournamentMatch.
     * @param {TournamentMatchCreateArgs} args - Arguments to create a TournamentMatch.
     * @example
     * // Create one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.create({
     *   data: {
     *     // ... data to create a TournamentMatch
     *   }
     * })
     * 
    **/
    create<T extends TournamentMatchCreateArgs>(
      args: SelectSubset<T, TournamentMatchCreateArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Create many TournamentMatches.
     *     @param {TournamentMatchCreateManyArgs} args - Arguments to create many TournamentMatches.
     *     @example
     *     // Create many TournamentMatches
     *     const tournamentMatch = await prisma.tournamentMatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TournamentMatchCreateManyArgs>(
      args?: SelectSubset<T, TournamentMatchCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TournamentMatch.
     * @param {TournamentMatchDeleteArgs} args - Arguments to delete one TournamentMatch.
     * @example
     * // Delete one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.delete({
     *   where: {
     *     // ... filter to delete one TournamentMatch
     *   }
     * })
     * 
    **/
    delete<T extends TournamentMatchDeleteArgs>(
      args: SelectSubset<T, TournamentMatchDeleteArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Update one TournamentMatch.
     * @param {TournamentMatchUpdateArgs} args - Arguments to update one TournamentMatch.
     * @example
     * // Update one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TournamentMatchUpdateArgs>(
      args: SelectSubset<T, TournamentMatchUpdateArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Delete zero or more TournamentMatches.
     * @param {TournamentMatchDeleteManyArgs} args - Arguments to filter TournamentMatches to delete.
     * @example
     * // Delete a few TournamentMatches
     * const { count } = await prisma.tournamentMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TournamentMatchDeleteManyArgs>(
      args?: SelectSubset<T, TournamentMatchDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TournamentMatchUpdateManyArgs>(
      args: SelectSubset<T, TournamentMatchUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentMatch.
     * @param {TournamentMatchUpsertArgs} args - Arguments to update or create a TournamentMatch.
     * @example
     * // Update or create a TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.upsert({
     *   create: {
     *     // ... data to create a TournamentMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentMatch we want to update
     *   }
     * })
    **/
    upsert<T extends TournamentMatchUpsertArgs>(
      args: SelectSubset<T, TournamentMatchUpsertArgs>
    ): CheckSelect<T, Prisma__TournamentMatchClient<TournamentMatch>, Prisma__TournamentMatchClient<TournamentMatchGetPayload<T>>>

    /**
     * Count the number of TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchCountArgs} args - Arguments to filter TournamentMatches to count.
     * @example
     * // Count the number of TournamentMatches
     * const count = await prisma.tournamentMatch.count({
     *   where: {
     *     // ... the filter for the TournamentMatches we want to count
     *   }
     * })
    **/
    count<T extends TournamentMatchCountArgs>(
      args?: Subset<T, TournamentMatchCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentMatchAggregateArgs>(args: Subset<T, TournamentMatchAggregateArgs>): PrismaPromise<GetTournamentMatchAggregateType<T>>

    /**
     * Group by TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentMatchGroupByArgs['orderBy'] }
        : { orderBy?: TournamentMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentMatchGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TournamentMatchClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tournament<T extends TournamentArgs = {}>(args?: Subset<T, TournamentArgs>): CheckSelect<T, Prisma__TournamentClient<Tournament | null >, Prisma__TournamentClient<TournamentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TournamentMatch findUnique
   */
  export type TournamentMatchFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Throw an Error if a TournamentMatch can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TournamentMatch to fetch.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch findFirst
   */
  export type TournamentMatchFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Throw an Error if a TournamentMatch can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TournamentMatch to fetch.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     * 
    **/
    distinct?: Enumerable<TournamentMatchScalarFieldEnum>
  }


  /**
   * TournamentMatch findMany
   */
  export type TournamentMatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Filter, which TournamentMatches to fetch.
     * 
    **/
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     * 
    **/
    orderBy?: Enumerable<TournamentMatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentMatches.
     * 
    **/
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TournamentMatchScalarFieldEnum>
  }


  /**
   * TournamentMatch create
   */
  export type TournamentMatchCreateArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The data needed to create a TournamentMatch.
     * 
    **/
    data: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
  }


  /**
   * TournamentMatch createMany
   */
  export type TournamentMatchCreateManyArgs = {
    /**
     * The data used to create many TournamentMatches.
     * 
    **/
    data: Enumerable<TournamentMatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TournamentMatch update
   */
  export type TournamentMatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The data needed to update a TournamentMatch.
     * 
    **/
    data: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
    /**
     * Choose, which TournamentMatch to update.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch updateMany
   */
  export type TournamentMatchUpdateManyArgs = {
    /**
     * The data used to update TournamentMatches.
     * 
    **/
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyInput>
    /**
     * Filter which TournamentMatches to update
     * 
    **/
    where?: TournamentMatchWhereInput
  }


  /**
   * TournamentMatch upsert
   */
  export type TournamentMatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * The filter to search for the TournamentMatch to update in case it exists.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
    /**
     * In case the TournamentMatch found by the `where` argument doesn't exist, create a new TournamentMatch with this data.
     * 
    **/
    create: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
    /**
     * In case the TournamentMatch was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
  }


  /**
   * TournamentMatch delete
   */
  export type TournamentMatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
    /**
     * Filter which TournamentMatch to delete.
     * 
    **/
    where: TournamentMatchWhereUniqueInput
  }


  /**
   * TournamentMatch deleteMany
   */
  export type TournamentMatchDeleteManyArgs = {
    /**
     * Filter which TournamentMatches to delete
     * 
    **/
    where?: TournamentMatchWhereInput
  }


  /**
   * TournamentMatch without action
   */
  export type TournamentMatchArgs = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     * 
    **/
    select?: TournamentMatchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TournamentMatchInclude | null
  }



  /**
   * Model Invite
   */


  export type AggregateInvite = {
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  export type InviteAvgAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteSumAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type InviteMinAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type InviteMaxAggregateOutputType = {
    id: number | null
    matchId: number | null
    trainingId: number | null
    senderId: number | null
    receiverId: number | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type InviteCountAggregateOutputType = {
    id: number
    matchId: number
    trainingId: number
    senderId: number
    receiverId: number
    status: number
    createdAt: number
    _all: number
  }


  export type InviteAvgAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteSumAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
  }

  export type InviteMinAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteMaxAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
  }

  export type InviteCountAggregateInputType = {
    id?: true
    matchId?: true
    trainingId?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type InviteAggregateArgs = {
    /**
     * Filter which Invite to aggregate.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invites
    **/
    _count?: true | InviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteMaxAggregateInputType
  }

  export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
        [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvite[P]>
      : GetScalarType<T[P], AggregateInvite[P]>
  }




  export type InviteGroupByArgs = {
    where?: InviteWhereInput
    orderBy?: Enumerable<InviteOrderByWithAggregationInput>
    by: Array<InviteScalarFieldEnum>
    having?: InviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCountAggregateInputType | true
    _avg?: InviteAvgAggregateInputType
    _sum?: InviteSumAggregateInputType
    _min?: InviteMinAggregateInputType
    _max?: InviteMaxAggregateInputType
  }


  export type InviteGroupByOutputType = {
    id: number
    matchId: number | null
    trainingId: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt: Date
    _count: InviteCountAggregateOutputType | null
    _avg: InviteAvgAggregateOutputType | null
    _sum: InviteSumAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  type GetInviteGroupByPayload<T extends InviteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteGroupByOutputType[P]>
            : GetScalarType<T[P], InviteGroupByOutputType[P]>
        }
      >
    >


  export type InviteSelect = {
    id?: boolean
    match?: boolean | MatchArgs
    matchId?: boolean
    training?: boolean | TrainingArgs
    trainingId?: boolean
    sender?: boolean | UserArgs
    senderId?: boolean
    receiver?: boolean | UserArgs
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type InviteInclude = {
    match?: boolean | MatchArgs
    training?: boolean | TrainingArgs
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
  }

  export type InviteGetPayload<
    S extends boolean | null | undefined | InviteArgs,
    U = keyof S
      > = S extends true
        ? Invite
    : S extends undefined
    ? never
    : S extends InviteArgs | InviteFindManyArgs
    ?'include' extends U
    ? Invite  & {
    [P in TrueKeys<S['include']>]:
        P extends 'match' ? MatchGetPayload<S['include'][P]> | null :
        P extends 'training' ? TrainingGetPayload<S['include'][P]> | null :
        P extends 'sender' ? UserGetPayload<S['include'][P]> :
        P extends 'receiver' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'match' ? MatchGetPayload<S['select'][P]> | null :
        P extends 'training' ? TrainingGetPayload<S['select'][P]> | null :
        P extends 'sender' ? UserGetPayload<S['select'][P]> :
        P extends 'receiver' ? UserGetPayload<S['select'][P]> :  P extends keyof Invite ? Invite[P] : never
  } 
    : Invite
  : Invite


  type InviteCountArgs = Merge<
    Omit<InviteFindManyArgs, 'select' | 'include'> & {
      select?: InviteCountAggregateInputType | true
    }
  >

  export interface InviteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invite that matches the filter.
     * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InviteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InviteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invite'> extends True ? CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>> : CheckSelect<T, Prisma__InviteClient<Invite | null >, Prisma__InviteClient<InviteGetPayload<T> | null >>

    /**
     * Find the first Invite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InviteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InviteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invite'> extends True ? CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>> : CheckSelect<T, Prisma__InviteClient<Invite | null >, Prisma__InviteClient<InviteGetPayload<T> | null >>

    /**
     * Find zero or more Invites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invites
     * const invites = await prisma.invite.findMany()
     * 
     * // Get first 10 Invites
     * const invites = await prisma.invite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InviteFindManyArgs>(
      args?: SelectSubset<T, InviteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invite>>, PrismaPromise<Array<InviteGetPayload<T>>>>

    /**
     * Create a Invite.
     * @param {InviteCreateArgs} args - Arguments to create a Invite.
     * @example
     * // Create one Invite
     * const Invite = await prisma.invite.create({
     *   data: {
     *     // ... data to create a Invite
     *   }
     * })
     * 
    **/
    create<T extends InviteCreateArgs>(
      args: SelectSubset<T, InviteCreateArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Create many Invites.
     *     @param {InviteCreateManyArgs} args - Arguments to create many Invites.
     *     @example
     *     // Create many Invites
     *     const invite = await prisma.invite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InviteCreateManyArgs>(
      args?: SelectSubset<T, InviteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invite.
     * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
     * @example
     * // Delete one Invite
     * const Invite = await prisma.invite.delete({
     *   where: {
     *     // ... filter to delete one Invite
     *   }
     * })
     * 
    **/
    delete<T extends InviteDeleteArgs>(
      args: SelectSubset<T, InviteDeleteArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Update one Invite.
     * @param {InviteUpdateArgs} args - Arguments to update one Invite.
     * @example
     * // Update one Invite
     * const invite = await prisma.invite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InviteUpdateArgs>(
      args: SelectSubset<T, InviteUpdateArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Delete zero or more Invites.
     * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
     * @example
     * // Delete a few Invites
     * const { count } = await prisma.invite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InviteDeleteManyArgs>(
      args?: SelectSubset<T, InviteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invites
     * const invite = await prisma.invite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InviteUpdateManyArgs>(
      args: SelectSubset<T, InviteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invite.
     * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
     * @example
     * // Update or create a Invite
     * const invite = await prisma.invite.upsert({
     *   create: {
     *     // ... data to create a Invite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invite we want to update
     *   }
     * })
    **/
    upsert<T extends InviteUpsertArgs>(
      args: SelectSubset<T, InviteUpsertArgs>
    ): CheckSelect<T, Prisma__InviteClient<Invite>, Prisma__InviteClient<InviteGetPayload<T>>>

    /**
     * Count the number of Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCountArgs} args - Arguments to filter Invites to count.
     * @example
     * // Count the number of Invites
     * const count = await prisma.invite.count({
     *   where: {
     *     // ... the filter for the Invites we want to count
     *   }
     * })
    **/
    count<T extends InviteCountArgs>(
      args?: Subset<T, InviteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteAggregateArgs>(args: Subset<T, InviteAggregateArgs>): PrismaPromise<GetInviteAggregateType<T>>

    /**
     * Group by Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteGroupByArgs['orderBy'] }
        : { orderBy?: InviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InviteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    match<T extends MatchArgs = {}>(args?: Subset<T, MatchArgs>): CheckSelect<T, Prisma__MatchClient<Match | null >, Prisma__MatchClient<MatchGetPayload<T> | null >>;

    training<T extends TrainingArgs = {}>(args?: Subset<T, TrainingArgs>): CheckSelect<T, Prisma__TrainingClient<Training | null >, Prisma__TrainingClient<TrainingGetPayload<T> | null >>;

    sender<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    receiver<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invite findUnique
   */
  export type InviteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Throw an Error if a Invite can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invite to fetch.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite findFirst
   */
  export type InviteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Throw an Error if a Invite can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invite to fetch.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     * 
    **/
    distinct?: Enumerable<InviteScalarFieldEnum>
  }


  /**
   * Invite findMany
   */
  export type InviteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Filter, which Invites to fetch.
     * 
    **/
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     * 
    **/
    orderBy?: Enumerable<InviteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invites.
     * 
    **/
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InviteScalarFieldEnum>
  }


  /**
   * Invite create
   */
  export type InviteCreateArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The data needed to create a Invite.
     * 
    **/
    data: XOR<InviteCreateInput, InviteUncheckedCreateInput>
  }


  /**
   * Invite createMany
   */
  export type InviteCreateManyArgs = {
    /**
     * The data used to create many Invites.
     * 
    **/
    data: Enumerable<InviteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invite update
   */
  export type InviteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The data needed to update a Invite.
     * 
    **/
    data: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
    /**
     * Choose, which Invite to update.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite updateMany
   */
  export type InviteUpdateManyArgs = {
    /**
     * The data used to update Invites.
     * 
    **/
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyInput>
    /**
     * Filter which Invites to update
     * 
    **/
    where?: InviteWhereInput
  }


  /**
   * Invite upsert
   */
  export type InviteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * The filter to search for the Invite to update in case it exists.
     * 
    **/
    where: InviteWhereUniqueInput
    /**
     * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
     * 
    **/
    create: XOR<InviteCreateInput, InviteUncheckedCreateInput>
    /**
     * In case the Invite was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
  }


  /**
   * Invite delete
   */
  export type InviteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
    /**
     * Filter which Invite to delete.
     * 
    **/
    where: InviteWhereUniqueInput
  }


  /**
   * Invite deleteMany
   */
  export type InviteDeleteManyArgs = {
    /**
     * Filter which Invites to delete
     * 
    **/
    where?: InviteWhereInput
  }


  /**
   * Invite without action
   */
  export type InviteArgs = {
    /**
     * Select specific fields to fetch from the Invite
     * 
    **/
    select?: InviteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InviteInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    message: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    message: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: Array<NotificationScalarFieldEnum>
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    message: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude = {
    user?: boolean | UserArgs
  }

  export type NotificationGetPayload<
    S extends boolean | null | undefined | NotificationArgs,
    U = keyof S
      > = S extends true
        ? Notification
    : S extends undefined
    ? never
    : S extends NotificationArgs | NotificationFindManyArgs
    ?'include' extends U
    ? Notification  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Notification ? Notification[P] : never
  } 
    : Notification
  : Notification


  type NotificationCountArgs = Merge<
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }
  >

  export interface NotificationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     * 
    **/
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     * 
    **/
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     * 
    **/
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     * 
    **/
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     * 
    **/
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     * 
    **/
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     * 
    **/
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
  }



  /**
   * Model UserProfile
   */


  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    sportType: SportType | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    sportType: SportType | null
    ntrpRating: number | null
    ratingPoints: number | null
    matchesPlayed: number | null
    matchWins: number | null
    matchLosses: number | null
    tournamentsPlayed: number | null
    tournamentsWon: number | null
    lastActivity: Date | null
    isPublicProfile: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    avatarUrl: number
    city: number
    countryCode: number
    sportType: number
    ntrpRating: number
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: number
    achievements: number
    isPublicProfile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
    userId?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    sportType?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    sportType?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    avatarUrl?: true
    city?: true
    countryCode?: true
    sportType?: true
    ntrpRating?: true
    ratingPoints?: true
    matchesPlayed?: true
    matchWins?: true
    matchLosses?: true
    tournamentsPlayed?: true
    tournamentsWon?: true
    lastActivity?: true
    achievements?: true
    isPublicProfile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs = {
    /**
     * Filter which UserProfile to aggregate.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs = {
    where?: UserProfileWhereInput
    orderBy?: Enumerable<UserProfileOrderByWithAggregationInput>
    by: Array<UserProfileScalarFieldEnum>
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }


  export type UserProfileGroupByOutputType = {
    id: number
    userId: number
    avatarUrl: string | null
    city: string | null
    countryCode: string | null
    sportType: SportType
    ntrpRating: number | null
    ratingPoints: number
    matchesPlayed: number
    matchWins: number
    matchLosses: number
    tournamentsPlayed: number
    tournamentsWon: number
    lastActivity: Date | null
    achievements: JsonValue | null
    isPublicProfile: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    avatarUrl?: boolean
    city?: boolean
    countryCode?: boolean
    sportType?: boolean
    ntrpRating?: boolean
    ratingPoints?: boolean
    matchesPlayed?: boolean
    matchWins?: boolean
    matchLosses?: boolean
    tournamentsPlayed?: boolean
    tournamentsWon?: boolean
    lastActivity?: boolean
    achievements?: boolean
    isPublicProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileInclude = {
    user?: boolean | UserArgs
  }

  export type UserProfileGetPayload<
    S extends boolean | null | undefined | UserProfileArgs,
    U = keyof S
      > = S extends true
        ? UserProfile
    : S extends undefined
    ? never
    : S extends UserProfileArgs | UserProfileFindManyArgs
    ?'include' extends U
    ? UserProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof UserProfile ? UserProfile[P] : never
  } 
    : UserProfile
  : UserProfile


  type UserProfileCountArgs = Merge<
    Omit<UserProfileFindManyArgs, 'select' | 'include'> & {
      select?: UserProfileCountAggregateInputType | true
    }
  >

  export interface UserProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserProfileFindManyArgs>(
      args?: SelectSubset<T, UserProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserProfile>>, PrismaPromise<Array<UserProfileGetPayload<T>>>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
    **/
    create<T extends UserProfileCreateArgs>(
      args: SelectSubset<T, UserProfileCreateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Create many UserProfiles.
     *     @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     *     @example
     *     // Create many UserProfiles
     *     const userProfile = await prisma.userProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserProfileCreateManyArgs>(
      args?: SelectSubset<T, UserProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
    **/
    delete<T extends UserProfileDeleteArgs>(
      args: SelectSubset<T, UserProfileDeleteArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserProfileUpdateArgs>(
      args: SelectSubset<T, UserProfileUpdateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserProfileDeleteManyArgs>(
      args?: SelectSubset<T, UserProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserProfileUpdateManyArgs>(
      args: SelectSubset<T, UserProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
    **/
    upsert<T extends UserProfileUpsertArgs>(
      args: SelectSubset<T, UserProfileUpsertArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Throw an Error if a UserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Throw an Error if a UserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     * 
    **/
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfiles to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to create a UserProfile.
     * 
    **/
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }


  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs = {
    /**
     * The data used to create many UserProfiles.
     * 
    **/
    data: Enumerable<UserProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to update a UserProfile.
     * 
    **/
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs = {
    /**
     * The data used to update UserProfiles.
     * 
    **/
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     * 
    **/
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     * 
    **/
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }


  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter which UserProfile to delete.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs = {
    /**
     * Filter which UserProfiles to delete
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile without action
   */
  export type UserProfileArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    telegramId: 'telegramId',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    isVerified: 'isVerified',
    role: 'role',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    player1Id: 'player1Id',
    player2Id: 'player2Id',
    optionalId: 'optionalId',
    type: 'type',
    state: 'state',
    score: 'score',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const TrainingScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    location: 'location',
    time: 'time',
    participantLimit: 'participantLimit',
    description: 'description',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingScalarFieldEnum = (typeof TrainingScalarFieldEnum)[keyof typeof TrainingScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    creatorId: 'creatorId',
    startDate: 'startDate',
    endDate: 'endDate',
    formatDetails: 'formatDetails',
    minPlayers: 'minPlayers',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    isRanked: 'isRanked',
    locationId: 'locationId',
    locationName: 'locationName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const TournamentMatchScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    round: 'round',
    group: 'group',
    playerAId: 'playerAId',
    playerBId: 'playerBId',
    score: 'score',
    winnerId: 'winnerId',
    status: 'status',
    court: 'court',
    scheduledAt: 'scheduledAt',
    confirmedBy: 'confirmedBy',
    isThirdPlaceMatch: 'isThirdPlaceMatch',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentMatchScalarFieldEnum = (typeof TournamentMatchScalarFieldEnum)[keyof typeof TournamentMatchScalarFieldEnum]


  export const InviteScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    trainingId: 'trainingId',
    senderId: 'senderId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type InviteScalarFieldEnum = (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    avatarUrl: 'avatarUrl',
    city: 'city',
    countryCode: 'countryCode',
    sportType: 'sportType',
    ntrpRating: 'ntrpRating',
    ratingPoints: 'ratingPoints',
    matchesPlayed: 'matchesPlayed',
    matchWins: 'matchWins',
    matchLosses: 'matchLosses',
    tournamentsPlayed: 'tournamentsPlayed',
    tournamentsWon: 'tournamentsWon',
    lastActivity: 'lastActivity',
    achievements: 'achievements',
    isPublicProfile: 'isPublicProfile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    telegramId?: StringFilter | string
    username?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    isVerified?: BoolFilter | boolean
    role?: EnumRoleFilter | Role
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput> | null
    matches?: MatchListRelationFilter
    createdMatches?: MatchListRelationFilter
    createdTrainings?: TrainingListRelationFilter
    createdTournaments?: TournamentListRelationFilter
    sentInvites?: InviteListRelationFilter
    receivedInvites?: InviteListRelationFilter
    notifications?: NotificationListRelationFilter
    tournaments?: TournamentListRelationFilter
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
    matches?: MatchOrderByRelationAggregateInput
    createdMatches?: MatchOrderByRelationAggregateInput
    createdTrainings?: TrainingOrderByRelationAggregateInput
    createdTournaments?: TournamentOrderByRelationAggregateInput
    sentInvites?: InviteOrderByRelationAggregateInput
    receivedInvites?: InviteOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    telegramId?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    telegramId?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringNullableWithAggregatesFilter | string | null
    isVerified?: BoolWithAggregatesFilter | boolean
    role?: EnumRoleWithAggregatesFilter | Role
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MatchWhereInput = {
    AND?: Enumerable<MatchWhereInput>
    OR?: Enumerable<MatchWhereInput>
    NOT?: Enumerable<MatchWhereInput>
    id?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    player1?: XOR<UserRelationFilter, UserWhereInput> | null
    player1Id?: IntNullableFilter | number | null
    player2Id?: IntNullableFilter | number | null
    optionalId?: IntNullableFilter | number | null
    type?: EnumMatchTypeFilter | MatchType
    state?: EnumMatchStateFilter | MatchState
    score?: StringNullableFilter | string | null
    invites?: InviteListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    player1?: UserOrderByWithRelationInput
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    invites?: InviteOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchWhereUniqueInput = {
    id?: number
  }

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creatorId?: IntWithAggregatesFilter | number
    player1Id?: IntNullableWithAggregatesFilter | number | null
    player2Id?: IntNullableWithAggregatesFilter | number | null
    optionalId?: IntNullableWithAggregatesFilter | number | null
    type?: EnumMatchTypeWithAggregatesFilter | MatchType
    state?: EnumMatchStateWithAggregatesFilter | MatchState
    score?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TrainingWhereInput = {
    AND?: Enumerable<TrainingWhereInput>
    OR?: Enumerable<TrainingWhereInput>
    NOT?: Enumerable<TrainingWhereInput>
    id?: IntFilter | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    location?: StringFilter | string
    time?: DateTimeFilter | Date | string
    participantLimit?: IntFilter | number
    description?: StringNullableFilter | string | null
    state?: EnumTrainingStateFilter | TrainingState
    invites?: InviteListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TrainingOrderByWithRelationInput = {
    id?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    invites?: InviteOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingWhereUniqueInput = {
    id?: number
  }

  export type TrainingOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingCountOrderByAggregateInput
    _avg?: TrainingAvgOrderByAggregateInput
    _max?: TrainingMaxOrderByAggregateInput
    _min?: TrainingMinOrderByAggregateInput
    _sum?: TrainingSumOrderByAggregateInput
  }

  export type TrainingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creatorId?: IntWithAggregatesFilter | number
    location?: StringWithAggregatesFilter | string
    time?: DateTimeWithAggregatesFilter | Date | string
    participantLimit?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    state?: EnumTrainingStateWithAggregatesFilter | TrainingState
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TournamentWhereInput = {
    AND?: Enumerable<TournamentWhereInput>
    OR?: Enumerable<TournamentWhereInput>
    NOT?: Enumerable<TournamentWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    type?: EnumTournamentTypeFilter | TournamentType
    status?: StringFilter | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    creatorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    formatDetails?: JsonNullableFilter
    minPlayers?: IntFilter | number
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    isRanked?: BoolFilter | boolean
    locationId?: IntNullableFilter | number | null
    locationName?: StringNullableFilter | string | null
    players?: UserListRelationFilter
    matches?: TournamentMatchListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creator?: UserOrderByWithRelationInput
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    players?: UserOrderByRelationAggregateInput
    matches?: TournamentMatchOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentWhereUniqueInput = {
    id?: number
  }

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    OR?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TournamentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    type?: EnumTournamentTypeWithAggregatesFilter | TournamentType
    status?: StringWithAggregatesFilter | string
    creatorId?: IntWithAggregatesFilter | number
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    formatDetails?: JsonNullableWithAggregatesFilter
    minPlayers?: IntWithAggregatesFilter | number
    maxPlayers?: IntWithAggregatesFilter | number
    currentPlayers?: IntWithAggregatesFilter | number
    isRanked?: BoolWithAggregatesFilter | boolean
    locationId?: IntNullableWithAggregatesFilter | number | null
    locationName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TournamentMatchWhereInput = {
    AND?: Enumerable<TournamentMatchWhereInput>
    OR?: Enumerable<TournamentMatchWhereInput>
    NOT?: Enumerable<TournamentMatchWhereInput>
    id?: IntFilter | number
    tournament?: XOR<TournamentRelationFilter, TournamentWhereInput>
    tournamentId?: IntFilter | number
    round?: IntNullableFilter | number | null
    group?: StringNullableFilter | string | null
    playerAId?: IntFilter | number
    playerBId?: IntNullableFilter | number | null
    score?: StringNullableFilter | string | null
    winnerId?: IntNullableFilter | number | null
    status?: StringFilter | string
    court?: StringNullableFilter | string | null
    scheduledAt?: DateTimeNullableFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentMatchOrderByWithRelationInput = {
    id?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchWhereUniqueInput = {
    id?: number
  }

  export type TournamentMatchOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentMatchCountOrderByAggregateInput
    _avg?: TournamentMatchAvgOrderByAggregateInput
    _max?: TournamentMatchMaxOrderByAggregateInput
    _min?: TournamentMatchMinOrderByAggregateInput
    _sum?: TournamentMatchSumOrderByAggregateInput
  }

  export type TournamentMatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TournamentMatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tournamentId?: IntWithAggregatesFilter | number
    round?: IntNullableWithAggregatesFilter | number | null
    group?: StringNullableWithAggregatesFilter | string | null
    playerAId?: IntWithAggregatesFilter | number
    playerBId?: IntNullableWithAggregatesFilter | number | null
    score?: StringNullableWithAggregatesFilter | string | null
    winnerId?: IntNullableWithAggregatesFilter | number | null
    status?: StringWithAggregatesFilter | string
    court?: StringNullableWithAggregatesFilter | string | null
    scheduledAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type InviteWhereInput = {
    AND?: Enumerable<InviteWhereInput>
    OR?: Enumerable<InviteWhereInput>
    NOT?: Enumerable<InviteWhereInput>
    id?: IntFilter | number
    match?: XOR<MatchRelationFilter, MatchWhereInput> | null
    matchId?: IntNullableFilter | number | null
    training?: XOR<TrainingRelationFilter, TrainingWhereInput> | null
    trainingId?: IntNullableFilter | number | null
    sender?: XOR<UserRelationFilter, UserWhereInput>
    senderId?: IntFilter | number
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    receiverId?: IntFilter | number
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
  }

  export type InviteOrderByWithRelationInput = {
    id?: SortOrder
    match?: MatchOrderByWithRelationInput
    matchId?: SortOrder
    training?: TrainingOrderByWithRelationInput
    trainingId?: SortOrder
    sender?: UserOrderByWithRelationInput
    senderId?: SortOrder
    receiver?: UserOrderByWithRelationInput
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteWhereUniqueInput = {
    id?: number
  }

  export type InviteOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: InviteCountOrderByAggregateInput
    _avg?: InviteAvgOrderByAggregateInput
    _max?: InviteMaxOrderByAggregateInput
    _min?: InviteMinOrderByAggregateInput
    _sum?: InviteSumOrderByAggregateInput
  }

  export type InviteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InviteScalarWhereWithAggregatesInput>
    OR?: Enumerable<InviteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InviteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    matchId?: IntNullableWithAggregatesFilter | number | null
    trainingId?: IntNullableWithAggregatesFilter | number | null
    senderId?: IntWithAggregatesFilter | number
    receiverId?: IntWithAggregatesFilter | number
    status?: EnumInviteStatusWithAggregatesFilter | InviteStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    message?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationWhereUniqueInput = {
    id?: number
  }

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: Enumerable<UserProfileWhereInput>
    OR?: Enumerable<UserProfileWhereInput>
    NOT?: Enumerable<UserProfileWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    avatarUrl?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    countryCode?: StringNullableFilter | string | null
    sportType?: EnumSportTypeFilter | SportType
    ntrpRating?: FloatNullableFilter | number | null
    ratingPoints?: IntFilter | number
    matchesPlayed?: IntFilter | number
    matchWins?: IntFilter | number
    matchLosses?: IntFilter | number
    tournamentsPlayed?: IntFilter | number
    tournamentsWon?: IntFilter | number
    lastActivity?: DateTimeNullableFilter | Date | string | null
    achievements?: JsonNullableFilter
    isPublicProfile?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    sportType?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    sportType?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    avatarUrl?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    countryCode?: StringNullableWithAggregatesFilter | string | null
    sportType?: EnumSportTypeWithAggregatesFilter | SportType
    ntrpRating?: FloatNullableWithAggregatesFilter | number | null
    ratingPoints?: IntWithAggregatesFilter | number
    matchesPlayed?: IntWithAggregatesFilter | number
    matchWins?: IntWithAggregatesFilter | number
    matchLosses?: IntWithAggregatesFilter | number
    tournamentsPlayed?: IntWithAggregatesFilter | number
    tournamentsWon?: IntWithAggregatesFilter | number
    lastActivity?: DateTimeNullableWithAggregatesFilter | Date | string | null
    achievements?: JsonNullableWithAggregatesFilter
    isPublicProfile?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingCreateInput = {
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsInput
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUncheckedUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingCreateManyInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateInput = {
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUncheckedCreateInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateInput = {
    tournament?: TournamentUpdateOneRequiredWithoutMatchesInput
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyInput = {
    id?: number
    tournamentId: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUpdateManyMutationInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tournamentId?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateManyMutationInput = {
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    user: UserCreateNestedOneWithoutNotificationsInput
    message: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    user?: UserUpdateOneRequiredWithoutNotificationsInput
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    user: UserCreateNestedOneWithoutProfileInput
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    sportType?: SportType
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    sportType?: SportType
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProfileInput
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: number
    userId: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    sportType?: SportType
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserProfileRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type TrainingListRelationFilter = {
    every?: TrainingWhereInput
    some?: TrainingWhereInput
    none?: TrainingWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type InviteListRelationFilter = {
    every?: InviteWhereInput
    some?: InviteWhereInput
    none?: InviteWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    telegramId?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type EnumMatchTypeFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeFilter | MatchType
  }

  export type EnumMatchStateFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateFilter | MatchState
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
    type?: SortOrder
    state?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    optionalId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumMatchTypeWithAggregatesFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeWithAggregatesFilter | MatchType
    _count?: NestedIntFilter
    _min?: NestedEnumMatchTypeFilter
    _max?: NestedEnumMatchTypeFilter
  }

  export type EnumMatchStateWithAggregatesFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateWithAggregatesFilter | MatchState
    _count?: NestedIntFilter
    _min?: NestedEnumMatchStateFilter
    _max?: NestedEnumMatchStateFilter
  }

  export type EnumTrainingStateFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateFilter | TrainingState
  }

  export type TrainingCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type TrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    location?: SortOrder
    time?: SortOrder
    participantLimit?: SortOrder
    description?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    participantLimit?: SortOrder
  }

  export type EnumTrainingStateWithAggregatesFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateWithAggregatesFilter | TrainingState
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingStateFilter
    _max?: NestedEnumTrainingStateFilter
  }

  export type EnumTournamentTypeFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeFilter | TournamentType
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TournamentMatchListRelationFilter = {
    every?: TournamentMatchWhereInput
    some?: TournamentMatchWhereInput
    none?: TournamentMatchWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    formatDetails?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    isRanked?: SortOrder
    locationId?: SortOrder
    locationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    minPlayers?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    locationId?: SortOrder
  }

  export type EnumTournamentTypeWithAggregatesFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeWithAggregatesFilter | TournamentType
    _count?: NestedIntFilter
    _min?: NestedEnumTournamentTypeFilter
    _max?: NestedEnumTournamentTypeFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type TournamentRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null
    has?: number | null
    hasEvery?: Enumerable<number>
    hasSome?: Enumerable<number>
    isEmpty?: boolean
  }

  export type TournamentMatchCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    confirmedBy?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchAvgOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type TournamentMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    group?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    score?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    court?: SortOrder
    scheduledAt?: SortOrder
    isThirdPlaceMatch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMatchSumOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    round?: SortOrder
    playerAId?: SortOrder
    playerBId?: SortOrder
    winnerId?: SortOrder
    confirmedBy?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput | null
    isNot?: MatchWhereInput | null
  }

  export type TrainingRelationFilter = {
    is?: TrainingWhereInput | null
    isNot?: TrainingWhereInput | null
  }

  export type EnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type InviteCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteAvgOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type InviteMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type InviteSumOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    trainingId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumSportTypeFilter = {
    equals?: SportType
    in?: Enumerable<SportType>
    notIn?: Enumerable<SportType>
    not?: NestedEnumSportTypeFilter | SportType
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    sportType?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    achievements?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    sportType?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    avatarUrl?: SortOrder
    city?: SortOrder
    countryCode?: SortOrder
    sportType?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
    lastActivity?: SortOrder
    isPublicProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ntrpRating?: SortOrder
    ratingPoints?: SortOrder
    matchesPlayed?: SortOrder
    matchWins?: SortOrder
    matchLosses?: SortOrder
    tournamentsPlayed?: SortOrder
    tournamentsWon?: SortOrder
  }

  export type EnumSportTypeWithAggregatesFilter = {
    equals?: SportType
    in?: Enumerable<SportType>
    notIn?: Enumerable<SportType>
    not?: NestedEnumSportTypeWithAggregatesFilter | SportType
    _count?: NestedIntFilter
    _min?: NestedEnumSportTypeFilter
    _max?: NestedEnumSportTypeFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type TrainingCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingWhereUniqueInput>
  }

  export type TournamentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type InviteCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type TournamentCreateNestedManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type MatchUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type MatchUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    connect?: Enumerable<MatchWhereUniqueInput>
  }

  export type TrainingUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    connect?: Enumerable<TrainingWhereUniqueInput>
  }

  export type TournamentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type TournamentUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type UserProfileUpdateOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUpdateManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type TrainingUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingWhereUniqueInput>
    disconnect?: Enumerable<TrainingWhereUniqueInput>
    delete?: Enumerable<TrainingWhereUniqueInput>
    connect?: Enumerable<TrainingWhereUniqueInput>
    update?: Enumerable<TrainingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingScalarWhereInput>
  }

  export type TournamentUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type InviteUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type TournamentUpdateManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutPlayersInput>
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutPlayersInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutPlayersInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type MatchUncheckedUpdateManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<MatchCreateWithoutPlayer1Input>, Enumerable<MatchUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutPlayer1Input>
    createMany?: MatchCreateManyPlayer1InputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type MatchUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<MatchCreateWithoutCreatorInput>, Enumerable<MatchUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<MatchCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<MatchUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: MatchCreateManyCreatorInputEnvelope
    set?: Enumerable<MatchWhereUniqueInput>
    disconnect?: Enumerable<MatchWhereUniqueInput>
    delete?: Enumerable<MatchWhereUniqueInput>
    connect?: Enumerable<MatchWhereUniqueInput>
    update?: Enumerable<MatchUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<MatchUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<MatchScalarWhereInput>
  }

  export type TrainingUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TrainingCreateWithoutCreatorInput>, Enumerable<TrainingUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TrainingCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TrainingUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TrainingCreateManyCreatorInputEnvelope
    set?: Enumerable<TrainingWhereUniqueInput>
    disconnect?: Enumerable<TrainingWhereUniqueInput>
    delete?: Enumerable<TrainingWhereUniqueInput>
    connect?: Enumerable<TrainingWhereUniqueInput>
    update?: Enumerable<TrainingUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TrainingUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TrainingScalarWhereInput>
  }

  export type TournamentUncheckedUpdateManyWithoutCreatorInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutCreatorInput>, Enumerable<TournamentUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: TournamentCreateManyCreatorInputEnvelope
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<InviteCreateWithoutSenderInput>, Enumerable<InviteUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: InviteCreateManySenderInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<InviteCreateWithoutReceiverInput>, Enumerable<InviteUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: InviteCreateManyReceiverInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type TournamentUncheckedUpdateManyWithoutPlayersInput = {
    create?: XOR<Enumerable<TournamentCreateWithoutPlayersInput>, Enumerable<TournamentUncheckedCreateWithoutPlayersInput>>
    connectOrCreate?: Enumerable<TournamentCreateOrConnectWithoutPlayersInput>
    upsert?: Enumerable<TournamentUpsertWithWhereUniqueWithoutPlayersInput>
    set?: Enumerable<TournamentWhereUniqueInput>
    disconnect?: Enumerable<TournamentWhereUniqueInput>
    delete?: Enumerable<TournamentWhereUniqueInput>
    connect?: Enumerable<TournamentWhereUniqueInput>
    update?: Enumerable<TournamentUpdateWithWhereUniqueWithoutPlayersInput>
    updateMany?: Enumerable<TournamentUpdateManyWithWhereWithoutPlayersInput>
    deleteMany?: Enumerable<TournamentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCreatedMatchesInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchesInput = {
    create?: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type InviteCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedMatchesInput = {
    create?: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMatchesInput
    upsert?: UserUpsertWithoutCreatedMatchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
  }

  export type UserUpdateOneWithoutMatchesInput = {
    create?: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesInput
    upsert?: UserUpsertWithoutMatchesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMatchesInput, UserUncheckedUpdateWithoutMatchesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMatchTypeFieldUpdateOperationsInput = {
    set?: MatchType
  }

  export type EnumMatchStateFieldUpdateOperationsInput = {
    set?: MatchState
  }

  export type InviteUpdateManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutMatchInput = {
    create?: XOR<Enumerable<InviteCreateWithoutMatchInput>, Enumerable<InviteUncheckedCreateWithoutMatchInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutMatchInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutMatchInput>
    createMany?: InviteCreateManyMatchInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutMatchInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutMatchInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCreatedTrainingsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
  }

  export type InviteCreateNestedManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type InviteUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    connect?: Enumerable<InviteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTrainingsInput = {
    create?: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTrainingsInput
    upsert?: UserUpsertWithoutCreatedTrainingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
  }

  export type EnumTrainingStateFieldUpdateOperationsInput = {
    set?: TrainingState
  }

  export type InviteUpdateManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutTrainingInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutTrainingInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type InviteUncheckedUpdateManyWithoutTrainingInput = {
    create?: XOR<Enumerable<InviteCreateWithoutTrainingInput>, Enumerable<InviteUncheckedCreateWithoutTrainingInput>>
    connectOrCreate?: Enumerable<InviteCreateOrConnectWithoutTrainingInput>
    upsert?: Enumerable<InviteUpsertWithWhereUniqueWithoutTrainingInput>
    createMany?: InviteCreateManyTrainingInputEnvelope
    set?: Enumerable<InviteWhereUniqueInput>
    disconnect?: Enumerable<InviteWhereUniqueInput>
    delete?: Enumerable<InviteWhereUniqueInput>
    connect?: Enumerable<InviteWhereUniqueInput>
    update?: Enumerable<InviteUpdateWithWhereUniqueWithoutTrainingInput>
    updateMany?: Enumerable<InviteUpdateManyWithWhereWithoutTrainingInput>
    deleteMany?: Enumerable<InviteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCreatedTournamentsInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TournamentMatchCreateNestedManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
  }

  export type EnumTournamentTypeFieldUpdateOperationsInput = {
    set?: TournamentType
  }

  export type UserUpdateOneRequiredWithoutCreatedTournamentsInput = {
    create?: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTournamentsInput
    upsert?: UserUpsertWithoutCreatedTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTournamentsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTournamentsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTournamentsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TournamentMatchUpdateManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    upsert?: Enumerable<TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: Enumerable<TournamentMatchWhereUniqueInput>
    disconnect?: Enumerable<TournamentMatchWhereUniqueInput>
    delete?: Enumerable<TournamentMatchWhereUniqueInput>
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
    update?: Enumerable<TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput>
    updateMany?: Enumerable<TournamentMatchUpdateManyWithWhereWithoutTournamentInput>
    deleteMany?: Enumerable<TournamentMatchScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutTournamentsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTournamentsInput>, Enumerable<UserUncheckedCreateWithoutTournamentsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTournamentsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTournamentsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTournamentsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTournamentsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentInput = {
    create?: XOR<Enumerable<TournamentMatchCreateWithoutTournamentInput>, Enumerable<TournamentMatchUncheckedCreateWithoutTournamentInput>>
    connectOrCreate?: Enumerable<TournamentMatchCreateOrConnectWithoutTournamentInput>
    upsert?: Enumerable<TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput>
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: Enumerable<TournamentMatchWhereUniqueInput>
    disconnect?: Enumerable<TournamentMatchWhereUniqueInput>
    delete?: Enumerable<TournamentMatchWhereUniqueInput>
    connect?: Enumerable<TournamentMatchWhereUniqueInput>
    update?: Enumerable<TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput>
    updateMany?: Enumerable<TournamentMatchUpdateManyWithWhereWithoutTournamentInput>
    deleteMany?: Enumerable<TournamentMatchScalarWhereInput>
  }

  export type TournamentCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
  }

  export type TournamentMatchCreateconfirmedByInput = {
    set: Enumerable<number>
  }

  export type TournamentUpdateOneRequiredWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    upsert?: TournamentUpsertWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TournamentMatchUpdateconfirmedByInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type MatchCreateNestedOneWithoutInvitesInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    connect?: MatchWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutInvitesInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    connect?: TrainingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentInvitesInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedInvitesInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type MatchUpdateOneWithoutInvitesInput = {
    create?: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInvitesInput
    upsert?: MatchUpsertWithoutInvitesInput
    disconnect?: boolean
    delete?: boolean
    connect?: MatchWhereUniqueInput
    update?: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
  }

  export type TrainingUpdateOneWithoutInvitesInput = {
    create?: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutInvitesInput
    upsert?: TrainingUpsertWithoutInvitesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainingWhereUniqueInput
    update?: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutSentInvitesInput = {
    create?: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitesInput
    upsert?: UserUpsertWithoutSentInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedInvitesInput = {
    create?: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitesInput
    upsert?: UserUpsertWithoutReceivedInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
  }

  export type EnumInviteStatusFieldUpdateOperationsInput = {
    set?: InviteStatus
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type EnumSportTypeFieldUpdateOperationsInput = {
    set?: SportType
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumMatchTypeFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeFilter | MatchType
  }

  export type NestedEnumMatchStateFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateFilter | MatchState
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumMatchTypeWithAggregatesFilter = {
    equals?: MatchType
    in?: Enumerable<MatchType>
    notIn?: Enumerable<MatchType>
    not?: NestedEnumMatchTypeWithAggregatesFilter | MatchType
    _count?: NestedIntFilter
    _min?: NestedEnumMatchTypeFilter
    _max?: NestedEnumMatchTypeFilter
  }

  export type NestedEnumMatchStateWithAggregatesFilter = {
    equals?: MatchState
    in?: Enumerable<MatchState>
    notIn?: Enumerable<MatchState>
    not?: NestedEnumMatchStateWithAggregatesFilter | MatchState
    _count?: NestedIntFilter
    _min?: NestedEnumMatchStateFilter
    _max?: NestedEnumMatchStateFilter
  }

  export type NestedEnumTrainingStateFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateFilter | TrainingState
  }

  export type NestedEnumTrainingStateWithAggregatesFilter = {
    equals?: TrainingState
    in?: Enumerable<TrainingState>
    notIn?: Enumerable<TrainingState>
    not?: NestedEnumTrainingStateWithAggregatesFilter | TrainingState
    _count?: NestedIntFilter
    _min?: NestedEnumTrainingStateFilter
    _max?: NestedEnumTrainingStateFilter
  }

  export type NestedEnumTournamentTypeFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeFilter | TournamentType
  }

  export type NestedEnumTournamentTypeWithAggregatesFilter = {
    equals?: TournamentType
    in?: Enumerable<TournamentType>
    notIn?: Enumerable<TournamentType>
    not?: NestedEnumTournamentTypeWithAggregatesFilter | TournamentType
    _count?: NestedIntFilter
    _min?: NestedEnumTournamentTypeFilter
    _max?: NestedEnumTournamentTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type NestedEnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type NestedEnumSportTypeFilter = {
    equals?: SportType
    in?: Enumerable<SportType>
    notIn?: Enumerable<SportType>
    not?: NestedEnumSportTypeFilter | SportType
  }

  export type NestedEnumSportTypeWithAggregatesFilter = {
    equals?: SportType
    in?: Enumerable<SportType>
    notIn?: Enumerable<SportType>
    not?: NestedEnumSportTypeWithAggregatesFilter | SportType
    _count?: NestedIntFilter
    _min?: NestedEnumSportTypeFilter
    _max?: NestedEnumSportTypeFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type UserProfileCreateWithoutUserInput = {
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    sportType?: SportType
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: number
    avatarUrl?: string | null
    city?: string | null
    countryCode?: string | null
    sportType?: SportType
    ntrpRating?: number | null
    ratingPoints?: number
    matchesPlayed?: number
    matchWins?: number
    matchLosses?: number
    tournamentsPlayed?: number
    tournamentsWon?: number
    lastActivity?: Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type MatchCreateWithoutPlayer1Input = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchCreateManyPlayer1InputEnvelope = {
    data: Enumerable<MatchCreateManyPlayer1Input>
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutCreatorInput = {
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    invites?: InviteUncheckedCreateNestedManyWithoutMatchInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchCreateManyCreatorInputEnvelope = {
    data: Enumerable<MatchCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutCreatorInput = {
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateWithoutCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    invites?: InviteUncheckedCreateNestedManyWithoutTrainingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingCreateManyCreatorInputEnvelope = {
    data: Enumerable<TrainingCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentCreateManyCreatorInputEnvelope = {
    data: Enumerable<TournamentCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutSenderInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutSenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutSenderInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteCreateManySenderInputEnvelope = {
    data: Enumerable<InviteCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutReceiverInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteCreateManyReceiverInputEnvelope = {
    data: Enumerable<InviteCreateManyReceiverInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    message: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: Enumerable<NotificationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutPlayersInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutPlayersInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    sportType?: EnumSportTypeFieldUpdateOperationsInput | SportType
    ntrpRating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingPoints?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    matchWins?: IntFieldUpdateOperationsInput | number
    matchLosses?: IntFieldUpdateOperationsInput | number
    tournamentsPlayed?: IntFieldUpdateOperationsInput | number
    tournamentsWon?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    achievements?: NullableJsonNullValueInput | InputJsonValue
    isPublicProfile?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
    create: XOR<MatchCreateWithoutPlayer1Input, MatchUncheckedCreateWithoutPlayer1Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutPlayer1Input, MatchUncheckedUpdateWithoutPlayer1Input>
  }

  export type MatchUpdateManyWithWhereWithoutPlayer1Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutMatchesInput>
  }

  export type MatchScalarWhereInput = {
    AND?: Enumerable<MatchScalarWhereInput>
    OR?: Enumerable<MatchScalarWhereInput>
    NOT?: Enumerable<MatchScalarWhereInput>
    id?: IntFilter | number
    creatorId?: IntFilter | number
    player1Id?: IntNullableFilter | number | null
    player2Id?: IntNullableFilter | number | null
    optionalId?: IntNullableFilter | number | null
    type?: EnumMatchTypeFilter | MatchType
    state?: EnumMatchStateFilter | MatchState
    score?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
    create: XOR<MatchCreateWithoutCreatorInput, MatchUncheckedCreateWithoutCreatorInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutCreatorInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutCreatorInput, MatchUncheckedUpdateWithoutCreatorInput>
  }

  export type MatchUpdateManyWithWhereWithoutCreatorInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutCreatedMatchesInput>
  }

  export type TrainingUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
    create: XOR<TrainingCreateWithoutCreatorInput, TrainingUncheckedCreateWithoutCreatorInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutCreatorInput, TrainingUncheckedUpdateWithoutCreatorInput>
  }

  export type TrainingUpdateManyWithWhereWithoutCreatorInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutCreatedTrainingsInput>
  }

  export type TrainingScalarWhereInput = {
    AND?: Enumerable<TrainingScalarWhereInput>
    OR?: Enumerable<TrainingScalarWhereInput>
    NOT?: Enumerable<TrainingScalarWhereInput>
    id?: IntFilter | number
    creatorId?: IntFilter | number
    location?: StringFilter | string
    time?: DateTimeFilter | Date | string
    participantLimit?: IntFilter | number
    description?: StringNullableFilter | string | null
    state?: EnumTrainingStateFilter | TrainingState
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
    create: XOR<TournamentCreateWithoutCreatorInput, TournamentUncheckedCreateWithoutCreatorInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutCreatorInput, TournamentUncheckedUpdateWithoutCreatorInput>
  }

  export type TournamentUpdateManyWithWhereWithoutCreatorInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutCreatedTournamentsInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: Enumerable<TournamentScalarWhereInput>
    OR?: Enumerable<TournamentScalarWhereInput>
    NOT?: Enumerable<TournamentScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    type?: EnumTournamentTypeFilter | TournamentType
    status?: StringFilter | string
    creatorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    formatDetails?: JsonNullableFilter
    minPlayers?: IntFilter | number
    maxPlayers?: IntFilter | number
    currentPlayers?: IntFilter | number
    isRanked?: BoolFilter | boolean
    locationId?: IntNullableFilter | number | null
    locationName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
    create: XOR<InviteCreateWithoutSenderInput, InviteUncheckedCreateWithoutSenderInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutSenderInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutSenderInput, InviteUncheckedUpdateWithoutSenderInput>
  }

  export type InviteUpdateManyWithWhereWithoutSenderInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutSentInvitesInput>
  }

  export type InviteScalarWhereInput = {
    AND?: Enumerable<InviteScalarWhereInput>
    OR?: Enumerable<InviteScalarWhereInput>
    NOT?: Enumerable<InviteScalarWhereInput>
    id?: IntFilter | number
    matchId?: IntNullableFilter | number | null
    trainingId?: IntNullableFilter | number | null
    senderId?: IntFilter | number
    receiverId?: IntFilter | number
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
    create: XOR<InviteCreateWithoutReceiverInput, InviteUncheckedCreateWithoutReceiverInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutReceiverInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutReceiverInput, InviteUncheckedUpdateWithoutReceiverInput>
  }

  export type InviteUpdateManyWithWhereWithoutReceiverInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutReceivedInvitesInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationsInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    message?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
    create: XOR<TournamentCreateWithoutPlayersInput, TournamentUncheckedCreateWithoutPlayersInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutPlayersInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutPlayersInput, TournamentUncheckedUpdateWithoutPlayersInput>
  }

  export type TournamentUpdateManyWithWhereWithoutPlayersInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutTournamentsInput>
  }

  export type UserCreateWithoutCreatedMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutCreatedMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutCreatedMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
  }

  export type UserCreateWithoutMatchesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutMatchesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
  }

  export type InviteCreateWithoutMatchInput = {
    training?: TrainingCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutMatchInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteCreateManyMatchInputEnvelope = {
    data: Enumerable<InviteCreateManyMatchInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedMatchesInput = {
    update: XOR<UserUpdateWithoutCreatedMatchesInput, UserUncheckedUpdateWithoutCreatedMatchesInput>
    create: XOR<UserCreateWithoutCreatedMatchesInput, UserUncheckedCreateWithoutCreatedMatchesInput>
  }

  export type UserUpdateWithoutCreatedMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutCreatedMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMatchesInput = {
    update: XOR<UserUpdateWithoutMatchesInput, UserUncheckedUpdateWithoutMatchesInput>
    create: XOR<UserCreateWithoutMatchesInput, UserUncheckedCreateWithoutMatchesInput>
  }

  export type UserUpdateWithoutMatchesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
    create: XOR<InviteCreateWithoutMatchInput, InviteUncheckedCreateWithoutMatchInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutMatchInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutMatchInput, InviteUncheckedUpdateWithoutMatchInput>
  }

  export type InviteUpdateManyWithWhereWithoutMatchInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutInvitesInput>
  }

  export type UserCreateWithoutCreatedTrainingsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutCreatedTrainingsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutCreatedTrainingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
  }

  export type InviteCreateWithoutTrainingInput = {
    match?: MatchCreateNestedOneWithoutInvitesInput
    sender: UserCreateNestedOneWithoutSentInvitesInput
    receiver: UserCreateNestedOneWithoutReceivedInvitesInput
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUncheckedCreateWithoutTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteCreateManyTrainingInputEnvelope = {
    data: Enumerable<InviteCreateManyTrainingInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTrainingsInput = {
    update: XOR<UserUpdateWithoutCreatedTrainingsInput, UserUncheckedUpdateWithoutCreatedTrainingsInput>
    create: XOR<UserCreateWithoutCreatedTrainingsInput, UserUncheckedCreateWithoutCreatedTrainingsInput>
  }

  export type UserUpdateWithoutCreatedTrainingsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutCreatedTrainingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
    create: XOR<InviteCreateWithoutTrainingInput, InviteUncheckedCreateWithoutTrainingInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutTrainingInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutTrainingInput, InviteUncheckedUpdateWithoutTrainingInput>
  }

  export type InviteUpdateManyWithWhereWithoutTrainingInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutInvitesInput>
  }

  export type UserCreateWithoutCreatedTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutCreatedTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutCreatedTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
  }

  export type UserCreateWithoutTournamentsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutTournamentsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type TournamentMatchCreateWithoutTournamentInput = {
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchUncheckedCreateWithoutTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchCreateManyTournamentInputEnvelope = {
    data: Enumerable<TournamentMatchCreateManyTournamentInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTournamentsInput = {
    update: XOR<UserUpdateWithoutCreatedTournamentsInput, UserUncheckedUpdateWithoutCreatedTournamentsInput>
    create: XOR<UserCreateWithoutCreatedTournamentsInput, UserUncheckedCreateWithoutCreatedTournamentsInput>
  }

  export type UserUpdateWithoutCreatedTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutCreatedTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
  }

  export type UserUpdateManyWithWhereWithoutTournamentsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPlayersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    telegramId?: StringFilter | string
    username?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    isVerified?: BoolFilter | boolean
    role?: EnumRoleFilter | Role
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutMatchesInput>
  }

  export type TournamentMatchScalarWhereInput = {
    AND?: Enumerable<TournamentMatchScalarWhereInput>
    OR?: Enumerable<TournamentMatchScalarWhereInput>
    NOT?: Enumerable<TournamentMatchScalarWhereInput>
    id?: IntFilter | number
    tournamentId?: IntFilter | number
    round?: IntNullableFilter | number | null
    group?: StringNullableFilter | string | null
    playerAId?: IntFilter | number
    playerBId?: IntNullableFilter | number | null
    score?: StringNullableFilter | string | null
    winnerId?: IntNullableFilter | number | null
    status?: StringFilter | string
    court?: StringNullableFilter | string | null
    scheduledAt?: DateTimeNullableFilter | Date | string | null
    confirmedBy?: IntNullableListFilter
    isThirdPlaceMatch?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TournamentCreateWithoutMatchesInput = {
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creator: UserCreateNestedOneWithoutCreatedTournamentsInput
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserCreateNestedManyWithoutTournamentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUncheckedCreateWithoutMatchesInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    creatorId: number
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    players?: UserUncheckedCreateNestedManyWithoutTournamentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateOrConnectWithoutMatchesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type TournamentUpsertWithoutMatchesInput = {
    update: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type TournamentUpdateWithoutMatchesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateWithoutInvitesInput = {
    creator: UserCreateNestedOneWithoutCreatedMatchesInput
    player1?: UserCreateNestedOneWithoutMatchesInput
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutInvitesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
  }

  export type TrainingCreateWithoutInvitesInput = {
    creator: UserCreateNestedOneWithoutCreatedTrainingsInput
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUncheckedCreateWithoutInvitesInput = {
    id?: number
    creatorId: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutInvitesInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
  }

  export type UserCreateWithoutSentInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutSentInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutSentInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
  }

  export type UserCreateWithoutReceivedInvitesInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutReceivedInvitesInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutReceivedInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
  }

  export type MatchUpsertWithoutInvitesInput = {
    update: XOR<MatchUpdateWithoutInvitesInput, MatchUncheckedUpdateWithoutInvitesInput>
    create: XOR<MatchCreateWithoutInvitesInput, MatchUncheckedCreateWithoutInvitesInput>
  }

  export type MatchUpdateWithoutInvitesInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpsertWithoutInvitesInput = {
    update: XOR<TrainingUpdateWithoutInvitesInput, TrainingUncheckedUpdateWithoutInvitesInput>
    create: XOR<TrainingCreateWithoutInvitesInput, TrainingUncheckedCreateWithoutInvitesInput>
  }

  export type TrainingUpdateWithoutInvitesInput = {
    creator?: UserUpdateOneRequiredWithoutCreatedTrainingsInput
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSentInvitesInput = {
    update: XOR<UserUpdateWithoutSentInvitesInput, UserUncheckedUpdateWithoutSentInvitesInput>
    create: XOR<UserCreateWithoutSentInvitesInput, UserUncheckedCreateWithoutSentInvitesInput>
  }

  export type UserUpdateWithoutSentInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutSentInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutReceivedInvitesInput = {
    update: XOR<UserUpdateWithoutReceivedInvitesInput, UserUncheckedUpdateWithoutReceivedInvitesInput>
    create: XOR<UserCreateWithoutReceivedInvitesInput, UserUncheckedCreateWithoutReceivedInvitesInput>
  }

  export type UserUpdateWithoutReceivedInvitesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutReceivedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutNotificationsInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileCreateNestedOneWithoutUserInput
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    matches?: MatchCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    tournaments?: TournamentCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    telegramId: string
    username: string
    firstName: string
    lastName?: string | null
    isVerified?: boolean
    role?: Role
    matches?: MatchUncheckedCreateNestedManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedCreateNestedManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedCreateNestedManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedCreateNestedManyWithoutCreatorInput
    sentInvites?: InviteUncheckedCreateNestedManyWithoutSenderInput
    receivedInvites?: InviteUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutPlayersInput
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    tournaments?: TournamentUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    tournaments?: TournamentUncheckedUpdateManyWithoutPlayersInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyPlayer1Input = {
    id?: number
    creatorId: number
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateManyCreatorInput = {
    id?: number
    player1Id?: number | null
    player2Id?: number | null
    optionalId?: number | null
    type: MatchType
    state: MatchState
    score?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyCreatorInput = {
    id?: number
    location: string
    time: Date | string
    participantLimit: number
    description?: string | null
    state: TrainingState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    type: TournamentType
    status: string
    startDate: Date | string
    endDate: Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers: number
    maxPlayers: number
    currentPlayers: number
    isRanked: boolean
    locationId?: number | null
    locationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateManySenderInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteCreateManyReceiverInput = {
    id?: number
    matchId?: number | null
    trainingId?: number | null
    senderId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
  }

  export type MatchUpdateWithoutPlayer1Input = {
    creator?: UserUpdateOneRequiredWithoutCreatedMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: IntFieldUpdateOperationsInput | number
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutCreatorInput = {
    player1?: UserUpdateOneWithoutMatchesInput
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    invites?: InviteUncheckedUpdateManyWithoutMatchInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutCreatedMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1Id?: NullableIntFieldUpdateOperationsInput | number | null
    player2Id?: NullableIntFieldUpdateOperationsInput | number | null
    optionalId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumMatchTypeFieldUpdateOperationsInput | MatchType
    state?: EnumMatchStateFieldUpdateOperationsInput | MatchState
    score?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutCreatorInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    invites?: InviteUncheckedUpdateManyWithoutTrainingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyWithoutCreatedTrainingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    participantLimit?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumTrainingStateFieldUpdateOperationsInput | TrainingState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    players?: UserUncheckedUpdateManyWithoutTournamentsInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyWithoutCreatedTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutSenderInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutSentInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutReceiverInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutReceivedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutPlayersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedTournamentsInput
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    matches?: TournamentMatchUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTournamentTypeFieldUpdateOperationsInput | TournamentType
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    formatDetails?: NullableJsonNullValueInput | InputJsonValue
    minPlayers?: IntFieldUpdateOperationsInput | number
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    isRanked?: BoolFieldUpdateOperationsInput | boolean
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyMatchInput = {
    id?: number
    trainingId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutMatchInput = {
    training?: TrainingUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainingId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyTrainingInput = {
    id?: number
    matchId?: number | null
    senderId: number
    receiverId: number
    status: InviteStatus
    createdAt?: Date | string
  }

  export type InviteUpdateWithoutTrainingInput = {
    match?: MatchUpdateOneWithoutInvitesInput
    sender?: UserUpdateOneRequiredWithoutSentInvitesInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitesInput
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateWithoutTrainingInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: NullableIntFieldUpdateOperationsInput | number | null
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyTournamentInput = {
    id?: number
    round?: number | null
    group?: string | null
    playerAId: number
    playerBId?: number | null
    score?: string | null
    winnerId?: number | null
    status: string
    court?: string | null
    scheduledAt?: Date | string | null
    confirmedBy?: TournamentMatchCreateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTournamentsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUpdateOneWithoutUserInput
    matches?: MatchUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUpdateManyWithoutCreatorInput
    sentInvites?: InviteUpdateManyWithoutSenderInput
    receivedInvites?: InviteUpdateManyWithoutReceiverInput
    notifications?: NotificationUpdateManyWithoutUserInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutTournamentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profile?: UserProfileUncheckedUpdateOneWithoutUserInput
    matches?: MatchUncheckedUpdateManyWithoutPlayer1Input
    createdMatches?: MatchUncheckedUpdateManyWithoutCreatorInput
    createdTrainings?: TrainingUncheckedUpdateManyWithoutCreatorInput
    createdTournaments?: TournamentUncheckedUpdateManyWithoutCreatorInput
    sentInvites?: InviteUncheckedUpdateManyWithoutSenderInput
    receivedInvites?: InviteUncheckedUpdateManyWithoutReceiverInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserInput
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | Role
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutTournamentInput = {
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateWithoutTournamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: NullableIntFieldUpdateOperationsInput | number | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    playerAId?: IntFieldUpdateOperationsInput | number
    playerBId?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    court?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedBy?: TournamentMatchUpdateconfirmedByInput | Enumerable<number>
    isThirdPlaceMatch?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}