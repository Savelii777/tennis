
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.StoryScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  telegramFileId: 'telegramFileId',
  telegramFilePath: 'telegramFilePath',
  type: 'type',
  status: 'status',
  createdAt: 'createdAt',
  publishedAt: 'publishedAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CountryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  code: 'code',
  flagUrl: 'flagUrl',
  createdAt: 'createdAt'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  countryCode: 'countryCode',
  population: 'population',
  lat: 'lat',
  lng: 'lng',
  timezone: 'timezone',
  createdAt: 'createdAt'
});

exports.Prisma.SportScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  slug: 'slug',
  emoji: 'emoji',
  createdAt: 'createdAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  isVerified: 'isVerified',
  role: 'role',
  countryCode: 'countryCode',
  cityId: 'cityId',
  sportId: 'sportId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  authSource: 'authSource',
  lastLogin: 'lastLogin',
  ballsBalance: 'ballsBalance',
  casesOpened: 'casesOpened',
  telegramChatId: 'telegramChatId',
  referralCode: 'referralCode',
  referredBy: 'referredBy'
});

exports.Prisma.ReferralStatsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  totalInvited: 'totalInvited',
  activeInvited: 'activeInvited',
  registeredToday: 'registeredToday',
  registeredThisWeek: 'registeredThisWeek',
  registeredThisMonth: 'registeredThisMonth',
  achievementsEarned: 'achievementsEarned',
  bonusPointsEarned: 'bonusPointsEarned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ReferralActivityScalarFieldEnum = makeEnum({
  id: 'id',
  referrerId: 'referrerId',
  invitedUserId: 'invitedUserId',
  registeredAt: 'registeredAt',
  firstMatchAt: 'firstMatchAt',
  isActive: 'isActive',
  inviteSource: 'inviteSource',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BallTransactionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  reason: 'reason',
  balanceAfter: 'balanceAfter',
  createdAt: 'createdAt'
});

exports.Prisma.CaseScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  priceBalls: 'priceBalls',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CaseItemScalarFieldEnum = makeEnum({
  id: 'id',
  caseId: 'caseId',
  name: 'name',
  type: 'type',
  payload: 'payload',
  dropChance: 'dropChance',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CaseOpeningScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  caseId: 'caseId',
  ballsSpent: 'ballsSpent',
  createdAt: 'createdAt'
});

exports.Prisma.CaseWinningScalarFieldEnum = makeEnum({
  id: 'id',
  openingId: 'openingId',
  userId: 'userId',
  caseId: 'caseId',
  itemId: 'itemId',
  isProcessed: 'isProcessed',
  processedAt: 'processedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.MatchScalarFieldEnum = makeEnum({
  id: 'id',
  creatorId: 'creatorId',
  player1Id: 'player1Id',
  player2Id: 'player2Id',
  optionalId: 'optionalId',
  type: 'type',
  state: 'state',
  score: 'score',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TrainingScalarFieldEnum = makeEnum({
  id: 'id',
  creatorId: 'creatorId',
  location: 'location',
  time: 'time',
  participantLimit: 'participantLimit',
  description: 'description',
  state: 'state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TournamentScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  creatorId: 'creatorId',
  startDate: 'startDate',
  endDate: 'endDate',
  formatDetails: 'formatDetails',
  minPlayers: 'minPlayers',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  isRanked: 'isRanked',
  locationId: 'locationId',
  locationName: 'locationName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TournamentMatchScalarFieldEnum = makeEnum({
  id: 'id',
  tournamentId: 'tournamentId',
  round: 'round',
  group: 'group',
  playerAId: 'playerAId',
  playerBId: 'playerBId',
  score: 'score',
  winnerId: 'winnerId',
  status: 'status',
  court: 'court',
  scheduledAt: 'scheduledAt',
  confirmedBy: 'confirmedBy',
  isThirdPlaceMatch: 'isThirdPlaceMatch',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InviteScalarFieldEnum = makeEnum({
  id: 'id',
  matchId: 'matchId',
  trainingId: 'trainingId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  status: 'status',
  createdAt: 'createdAt'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  message: 'message',
  createdAt: 'createdAt'
});

exports.Prisma.UserProfileScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  avatarUrl: 'avatarUrl',
  city: 'city',
  countryCode: 'countryCode',
  ntrpRating: 'ntrpRating',
  ratingPoints: 'ratingPoints',
  matchesPlayed: 'matchesPlayed',
  matchWins: 'matchWins',
  matchLosses: 'matchLosses',
  tournamentsPlayed: 'tournamentsPlayed',
  tournamentsWon: 'tournamentsWon',
  lastActivity: 'lastActivity',
  achievements: 'achievements',
  isPublicProfile: 'isPublicProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  preferredCourt: 'preferredCourt',
  dominantHand: 'dominantHand',
  preferredPlayTime: 'preferredPlayTime',
  playsInTournaments: 'playsInTournaments',
  weeklyPlayFrequency: 'weeklyPlayFrequency',
  backhandType: 'backhandType',
  preferredSurface: 'preferredSurface',
  playingStyle: 'playingStyle',
  favoriteShot: 'favoriteShot',
  racket: 'racket',
  opponentPreference: 'opponentPreference',
  initialRatingPoints: 'initialRatingPoints',
  selfAssessedLevel: 'selfAssessedLevel',
  profileStepOneCompleted: 'profileStepOneCompleted',
  profileStepTwoCompleted: 'profileStepTwoCompleted'
});

exports.Prisma.GameRequestScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  creatorId: 'creatorId',
  locationName: 'locationName',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  gameMode: 'gameMode',
  dateTime: 'dateTime',
  paymentType: 'paymentType',
  ratingType: 'ratingType',
  formatInfo: 'formatInfo',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RequestResponseScalarFieldEnum = makeEnum({
  id: 'id',
  requestId: 'requestId',
  userId: 'userId',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TrainingSessionScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  creatorId: 'creatorId',
  locationName: 'locationName',
  courtSurface: 'courtSurface',
  minLevel: 'minLevel',
  maxLevel: 'maxLevel',
  maxSlots: 'maxSlots',
  currentSlots: 'currentSlots',
  paymentType: 'paymentType',
  pricePerPerson: 'pricePerPerson',
  dateTime: 'dateTime',
  endTime: 'endTime',
  status: 'status',
  trainingType: 'trainingType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.MediaType = makeEnum({
  image: 'image',
  video: 'video'
});

exports.StoryStatus = makeEnum({
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
});

exports.Role = makeEnum({
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
});

exports.AuthSource = makeEnum({
  WEB: 'WEB',
  TELEGRAM_BOT: 'TELEGRAM_BOT',
  MOBILE_APP: 'MOBILE_APP'
});

exports.BallTransactionType = makeEnum({
  EARNED: 'EARNED',
  SPENT: 'SPENT',
  BONUS: 'BONUS',
  REFUND: 'REFUND'
});

exports.CaseItemType = makeEnum({
  VIRTUAL: 'VIRTUAL',
  PHYSICAL: 'PHYSICAL',
  ACTION: 'ACTION'
});

exports.MatchType = makeEnum({
  ONE_ON_ONE: 'ONE_ON_ONE',
  DOUBLES: 'DOUBLES'
});

exports.MatchState = makeEnum({
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
});

exports.TrainingState = makeEnum({
  OPEN: 'OPEN',
  FULL: 'FULL',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE'
});

exports.TournamentType = makeEnum({
  SINGLE_ELIMINATION: 'SINGLE_ELIMINATION',
  GROUPS_PLAYOFF: 'GROUPS_PLAYOFF',
  LEAGUE: 'LEAGUE',
  BLITZ: 'BLITZ'
});

exports.InviteStatus = makeEnum({
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
});

exports.CourtSurface = makeEnum({
  HARD: 'HARD',
  CLAY: 'CLAY',
  GRASS: 'GRASS',
  CARPET: 'CARPET'
});

exports.PaymentType = makeEnum({
  FREE: 'FREE',
  HOST_PAYS: 'HOST_PAYS',
  LOSER_PAYS: 'LOSER_PAYS',
  DIVIDED: 'DIVIDED',
  FIXED_PRICE: 'FIXED_PRICE'
});

exports.TrainingType = makeEnum({
  WITH_COACH: 'WITH_COACH',
  WITHOUT_COACH: 'WITHOUT_COACH',
  TIEBREAK: 'TIEBREAK',
  SPARRING: 'SPARRING',
  TECHNIQUE: 'TECHNIQUE'
});

exports.Prisma.ModelName = makeEnum({
  Story: 'Story',
  Country: 'Country',
  City: 'City',
  Sport: 'Sport',
  User: 'User',
  ReferralStats: 'ReferralStats',
  ReferralActivity: 'ReferralActivity',
  BallTransaction: 'BallTransaction',
  Case: 'Case',
  CaseItem: 'CaseItem',
  CaseOpening: 'CaseOpening',
  CaseWinning: 'CaseWinning',
  Match: 'Match',
  Training: 'Training',
  Tournament: 'Tournament',
  TournamentMatch: 'TournamentMatch',
  Invite: 'Invite',
  Notification: 'Notification',
  UserProfile: 'UserProfile',
  GameRequest: 'GameRequest',
  RequestResponse: 'RequestResponse',
  TrainingSession: 'TrainingSession'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
