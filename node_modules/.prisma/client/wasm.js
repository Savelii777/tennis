
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MatchFeedbackScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  reviewerId: 'reviewerId',
  revieweeId: 'revieweeId',
  rating: 'rating',
  comment: 'comment',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DirectMessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.StoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  telegramFileId: 'telegramFileId',
  telegramFilePath: 'telegramFilePath',
  type: 'type',
  caption: 'caption',
  status: 'status',
  viewsCount: 'viewsCount',
  likesCount: 'likesCount',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  publishedAt: 'publishedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  flagUrl: 'flagUrl',
  createdAt: 'createdAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryCode: 'countryCode',
  population: 'population',
  lat: 'lat',
  lng: 'lng',
  timezone: 'timezone',
  createdAt: 'createdAt'
};

exports.Prisma.SportScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  emoji: 'emoji',
  icon: 'icon',
  createdAt: 'createdAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  cityId: 'cityId',
  sportId: 'sportId',
  notificationsEnabled: 'notificationsEnabled',
  notifyTelegram: 'notifyTelegram',
  notifyEmail: 'notifyEmail',
  matchReminderTime: 'matchReminderTime',
  notifyMatchResults: 'notifyMatchResults',
  notifyTournamentResults: 'notifyTournamentResults',
  showProfilePublicly: 'showProfilePublicly',
  showRatingPublicly: 'showRatingPublicly',
  allowMatchInvites: 'allowMatchInvites',
  requireMatchConfirm: 'requireMatchConfirm',
  preferredGender: 'preferredGender',
  preferredAgeMin: 'preferredAgeMin',
  preferredAgeMax: 'preferredAgeMax',
  preferredLevelMin: 'preferredLevelMin',
  preferredLevelMax: 'preferredLevelMax',
  theme: 'theme',
  timezone: 'timezone',
  telegramChatId: 'telegramChatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  allowDirectMessages: 'allowDirectMessages'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  isVerified: 'isVerified',
  role: 'role',
  countryCode: 'countryCode',
  cityId: 'cityId',
  sportId: 'sportId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  authSource: 'authSource',
  lastLogin: 'lastLogin',
  ballsBalance: 'ballsBalance',
  casesOpened: 'casesOpened',
  telegramChatId: 'telegramChatId',
  referralCode: 'referralCode',
  referredBy: 'referredBy'
};

exports.Prisma.PlayerRatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillRating: 'skillRating',
  skillPoints: 'skillPoints',
  pointsRating: 'pointsRating',
  wins: 'wins',
  losses: 'losses',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  matchId: 'matchId',
  seasonId: 'seasonId',
  skillPointsBefore: 'skillPointsBefore',
  skillPointsAfter: 'skillPointsAfter',
  pointsRatingBefore: 'pointsRatingBefore',
  pointsRatingAfter: 'pointsRatingAfter',
  isWin: 'isWin',
  opponentId: 'opponentId',
  opponentSkillPoints: 'opponentSkillPoints',
  pointsEarned: 'pointsEarned',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.RatingSeasonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  awardedAt: 'awardedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalInvited: 'totalInvited',
  activeInvited: 'activeInvited',
  registeredToday: 'registeredToday',
  registeredThisWeek: 'registeredThisWeek',
  registeredThisMonth: 'registeredThisMonth',
  achievementsEarned: 'achievementsEarned',
  bonusPointsEarned: 'bonusPointsEarned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralActivityScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  invitedUserId: 'invitedUserId',
  registeredAt: 'registeredAt',
  firstMatchAt: 'firstMatchAt',
  isActive: 'isActive',
  inviteSource: 'inviteSource',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BallTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  reason: 'reason',
  balanceAfter: 'balanceAfter',
  createdAt: 'createdAt'
};

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priceBalls: 'priceBalls',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseItemScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  name: 'name',
  type: 'type',
  payload: 'payload',
  dropChance: 'dropChance',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseOpeningScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  caseId: 'caseId',
  ballsSpent: 'ballsSpent',
  createdAt: 'createdAt'
};

exports.Prisma.CaseWinningScalarFieldEnum = {
  id: 'id',
  openingId: 'openingId',
  userId: 'userId',
  caseId: 'caseId',
  itemId: 'itemId',
  isProcessed: 'isProcessed',
  processedAt: 'processedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  player1Id: 'player1Id',
  player2Id: 'player2Id',
  optionalId: 'optionalId',
  winnerId: 'winnerId',
  type: 'type',
  state: 'state',
  score: 'score',
  matchDate: 'matchDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  locationName: 'locationName'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  location: 'location',
  time: 'time',
  participantLimit: 'participantLimit',
  description: 'description',
  state: 'state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  creatorId: 'creatorId',
  startDate: 'startDate',
  endDate: 'endDate',
  formatDetails: 'formatDetails',
  minPlayers: 'minPlayers',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  isRanked: 'isRanked',
  locationId: 'locationId',
  locationName: 'locationName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentMatchScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  round: 'round',
  group: 'group',
  playerAId: 'playerAId',
  playerBId: 'playerBId',
  winnerId: 'winnerId',
  score: 'score',
  status: 'status',
  court: 'court',
  scheduledAt: 'scheduledAt',
  confirmedBy: 'confirmedBy',
  isThirdPlaceMatch: 'isThirdPlaceMatch',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InviteScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  trainingId: 'trainingId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  step: 'step',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  avatarUrl: 'avatarUrl',
  city: 'city',
  countryCode: 'countryCode',
  ntrpRating: 'ntrpRating',
  ratingPoints: 'ratingPoints',
  matchesPlayed: 'matchesPlayed',
  matchWins: 'matchWins',
  matchLosses: 'matchLosses',
  tournamentsPlayed: 'tournamentsPlayed',
  tournamentsWon: 'tournamentsWon',
  lastActivity: 'lastActivity',
  achievements: 'achievements',
  isPublicProfile: 'isPublicProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  preferredCourt: 'preferredCourt',
  dominantHand: 'dominantHand',
  preferredPlayTime: 'preferredPlayTime',
  playsInTournaments: 'playsInTournaments',
  weeklyPlayFrequency: 'weeklyPlayFrequency',
  backhandType: 'backhandType',
  preferredSurface: 'preferredSurface',
  playingStyle: 'playingStyle',
  favoriteShot: 'favoriteShot',
  racket: 'racket',
  opponentPreference: 'opponentPreference',
  initialRatingPoints: 'initialRatingPoints',
  selfAssessedLevel: 'selfAssessedLevel',
  profileStepOneCompleted: 'profileStepOneCompleted',
  profileStepTwoCompleted: 'profileStepTwoCompleted'
};

exports.Prisma.GameRequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  creatorId: 'creatorId',
  locationName: 'locationName',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  gameMode: 'gameMode',
  dateTime: 'dateTime',
  paymentType: 'paymentType',
  ratingType: 'ratingType',
  formatInfo: 'formatInfo',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestResponseScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  userId: 'userId',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingSessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  creatorId: 'creatorId',
  locationName: 'locationName',
  courtSurface: 'courtSurface',
  minLevel: 'minLevel',
  maxLevel: 'maxLevel',
  maxSlots: 'maxSlots',
  currentSlots: 'currentSlots',
  paymentType: 'paymentType',
  pricePerPerson: 'pricePerPerson',
  dateTime: 'dateTime',
  endTime: 'endTime',
  status: 'status',
  trainingType: 'trainingType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.MediaType = exports.$Enums.MediaType = {
  image: 'image',
  video: 'video'
};

exports.StoryStatus = exports.$Enums.StoryStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

exports.AuthSource = exports.$Enums.AuthSource = {
  WEB: 'WEB',
  TELEGRAM_BOT: 'TELEGRAM_BOT',
  MOBILE_APP: 'MOBILE_APP'
};

exports.BallTransactionType = exports.$Enums.BallTransactionType = {
  EARNED: 'EARNED',
  SPENT: 'SPENT',
  BONUS: 'BONUS',
  REFUND: 'REFUND'
};

exports.CaseItemType = exports.$Enums.CaseItemType = {
  VIRTUAL: 'VIRTUAL',
  PHYSICAL: 'PHYSICAL',
  ACTION: 'ACTION'
};

exports.MatchType = exports.$Enums.MatchType = {
  ONE_ON_ONE: 'ONE_ON_ONE',
  DOUBLES: 'DOUBLES'
};

exports.MatchState = exports.$Enums.MatchState = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
};

exports.TrainingState = exports.$Enums.TrainingState = {
  OPEN: 'OPEN',
  FULL: 'FULL',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE'
};

exports.TournamentType = exports.$Enums.TournamentType = {
  SINGLE_ELIMINATION: 'SINGLE_ELIMINATION',
  GROUPS_PLAYOFF: 'GROUPS_PLAYOFF',
  LEAGUE: 'LEAGUE',
  BLITZ: 'BLITZ'
};

exports.InviteStatus = exports.$Enums.InviteStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MATCH_SCHEDULED: 'MATCH_SCHEDULED',
  MATCH_REMINDER: 'MATCH_REMINDER',
  MATCH_CANCELLED: 'MATCH_CANCELLED',
  TOURNAMENT_RESULT: 'TOURNAMENT_RESULT',
  NEW_INVITE: 'NEW_INVITE',
  INVITE_ACCEPTED: 'INVITE_ACCEPTED',
  INVITE_DECLINED: 'INVITE_DECLINED',
  TRAINING_REMINDER: 'TRAINING_REMINDER',
  SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',
  REFERRAL_BONUS: 'REFERRAL_BONUS',
  CASE_OPENED: 'CASE_OPENED'
};

exports.ProfileStep = exports.$Enums.ProfileStep = {
  AWAITING_CITY: 'AWAITING_CITY',
  AWAITING_COURT: 'AWAITING_COURT',
  AWAITING_HAND: 'AWAITING_HAND',
  AWAITING_FREQUENCY: 'AWAITING_FREQUENCY',
  AWAITING_TOURNAMENTS: 'AWAITING_TOURNAMENTS',
  AWAITING_LEVEL: 'AWAITING_LEVEL',
  COMPLETE: 'COMPLETE'
};

exports.CourtSurface = exports.$Enums.CourtSurface = {
  HARD: 'HARD',
  CLAY: 'CLAY',
  GRASS: 'GRASS',
  CARPET: 'CARPET'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  FREE: 'FREE',
  HOST_PAYS: 'HOST_PAYS',
  LOSER_PAYS: 'LOSER_PAYS',
  DIVIDED: 'DIVIDED',
  FIXED_PRICE: 'FIXED_PRICE'
};

exports.TrainingType = exports.$Enums.TrainingType = {
  WITH_COACH: 'WITH_COACH',
  WITHOUT_COACH: 'WITHOUT_COACH',
  TIEBREAK: 'TIEBREAK',
  SPARRING: 'SPARRING',
  TECHNIQUE: 'TECHNIQUE'
};

exports.Prisma.ModelName = {
  MatchFeedback: 'MatchFeedback',
  DirectMessage: 'DirectMessage',
  Story: 'Story',
  Country: 'Country',
  City: 'City',
  Sport: 'Sport',
  UserSettings: 'UserSettings',
  User: 'User',
  PlayerRating: 'PlayerRating',
  RatingHistory: 'RatingHistory',
  RatingSeason: 'RatingSeason',
  UserAchievement: 'UserAchievement',
  ReferralStats: 'ReferralStats',
  ReferralActivity: 'ReferralActivity',
  BallTransaction: 'BallTransaction',
  Case: 'Case',
  CaseItem: 'CaseItem',
  CaseOpening: 'CaseOpening',
  CaseWinning: 'CaseWinning',
  Match: 'Match',
  Training: 'Training',
  Tournament: 'Tournament',
  TournamentMatch: 'TournamentMatch',
  Invite: 'Invite',
  Notification: 'Notification',
  UserState: 'UserState',
  UserProfile: 'UserProfile',
  GameRequest: 'GameRequest',
  RequestResponse: 'RequestResponse',
  TrainingSession: 'TrainingSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
